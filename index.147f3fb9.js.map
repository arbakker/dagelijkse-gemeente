{"mappings":"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","sources":["node_modules/ol/src/events/Event.js","node_modules/ol/src/ObjectEventType.js","node_modules/ol/src/Disposable.js","node_modules/ol/src/array.js","node_modules/ol/src/functions.js","node_modules/ol/src/obj.js","node_modules/ol/src/events/Target.js","node_modules/ol/src/events/EventType.js","node_modules/ol/src/events.js","node_modules/ol/src/Observable.js","node_modules/ol/src/util.js","node_modules/ol/src/Object.js","node_modules/ol/src/AssertionError.js","node_modules/ol/src/asserts.js","node_modules/ol/src/Feature.js","node_modules/ol/src/proj/Units.js","node_modules/ol/src/transform.js","node_modules/ol/src/has.js","node_modules/ol/src/extent/Corner.js","node_modules/ol/src/extent/Relationship.js","node_modules/ol/src/extent.js","node_modules/ol/src/proj/Projection.js","node_modules/ol/src/math.js","node_modules/ol/src/proj/epsg3857.js","node_modules/ol/src/proj/epsg4326.js","node_modules/ol/src/proj/projections.js","node_modules/ol/src/proj/transforms.js","node_modules/ol/src/geom/GeometryType.js","node_modules/ol/src/sphere.js","node_modules/ol/src/coordinate.js","node_modules/ol/src/proj.js","node_modules/ol/src/geom/flat/transform.js","node_modules/ol/src/geom/Geometry.js","node_modules/ol/src/geom/GeometryCollection.js","node_modules/ol/src/format/Feature.js","node_modules/ol/src/format/FormatType.js","node_modules/ol/src/format/JSONFeature.js","node_modules/ol/src/geom/GeometryLayout.js","node_modules/ol/src/geom/SimpleGeometry.js","node_modules/ol/src/geom/flat/closest.js","node_modules/ol/src/geom/flat/deflate.js","node_modules/ol/src/geom/flat/simplify.js","node_modules/ol/src/geom/flat/segments.js","node_modules/ol/src/geom/flat/inflate.js","node_modules/ol/src/geom/flat/interpolate.js","node_modules/ol/src/geom/flat/contains.js","node_modules/ol/src/geom/flat/intersectsextent.js","node_modules/ol/src/geom/flat/length.js","node_modules/ol/src/geom/LineString.js","node_modules/ol/src/geom/MultiLineString.js","node_modules/ol/src/geom/Point.js","node_modules/ol/src/geom/MultiPoint.js","node_modules/ol/src/geom/flat/area.js","node_modules/ol/src/geom/LinearRing.js","node_modules/ol/src/geom/flat/interiorpoint.js","node_modules/ol/src/geom/flat/reverse.js","node_modules/ol/src/geom/flat/orient.js","node_modules/ol/src/geom/Polygon.js","node_modules/ol/src/geom/MultiPolygon.js","node_modules/ol/src/geom/flat/center.js","node_modules/ol/src/format/GeoJSON.js","node_modules/ol/src/color.js","node_modules/ol/src/style/IconImageCache.js","node_modules/ol/src/layer/Property.js","node_modules/ol/src/layer/Base.js","node_modules/ol/src/render/EventType.js","node_modules/ol/src/source/State.js","node_modules/ol/src/layer/Layer.js","node_modules/ol/src/renderer/Map.js","node_modules/ol/src/render/Event.js","node_modules/ol/src/css.js","node_modules/ol/src/dom.js","node_modules/ol/src/render/canvas.js","node_modules/ol/src/renderer/Composite.js","node_modules/ol/src/CollectionEventType.js","node_modules/ol/src/Collection.js","node_modules/ol/src/layer/Group.js","node_modules/ol/src/MapEvent.js","node_modules/ol/src/MapBrowserEvent.js","node_modules/ol/src/MapBrowserEventType.js","node_modules/ol/src/pointer/EventType.js","node_modules/ol/src/MapBrowserEventHandler.js","node_modules/ol/src/MapEventType.js","node_modules/ol/src/MapProperty.js","node_modules/ol/src/structs/PriorityQueue.js","node_modules/ol/src/TileState.js","node_modules/ol/src/TileQueue.js","node_modules/ol/src/ViewHint.js","node_modules/ol/src/ViewProperty.js","node_modules/ol/src/centerconstraint.js","node_modules/ol/src/resolutionconstraint.js","node_modules/ol/src/rotationconstraint.js","node_modules/ol/src/easing.js","node_modules/ol/src/View.js","node_modules/ol/src/tilegrid/common.js","node_modules/ol/src/size.js","node_modules/ol/src/PluggableMap.js","node_modules/ol/src/control/Control.js","node_modules/ol/src/control/Attribution.js","node_modules/ol/src/control/Rotate.js","node_modules/ol/src/control/Zoom.js","node_modules/ol/src/interaction/Property.js","node_modules/ol/src/interaction/Interaction.js","node_modules/ol/src/interaction/DoubleClickZoom.js","node_modules/ol/src/interaction/Pointer.js","node_modules/ol/src/events/condition.js","node_modules/ol/src/interaction/DragPan.js","node_modules/ol/src/interaction/DragRotate.js","node_modules/ol/src/render/Box.js","node_modules/ol/src/interaction/DragBox.js","node_modules/ol/src/interaction/DragZoom.js","node_modules/ol/src/events/KeyCode.js","node_modules/ol/src/interaction/KeyboardPan.js","node_modules/ol/src/interaction/KeyboardZoom.js","node_modules/ol/src/Kinetic.js","node_modules/ol/src/interaction/MouseWheelZoom.js","node_modules/ol/src/interaction/PinchRotate.js","node_modules/ol/src/interaction/PinchZoom.js","node_modules/ol/src/Map.js","node_modules/ol/src/control.js","node_modules/ol/src/interaction.js","node_modules/ol/src/style/Fill.js","node_modules/ol/src/style/IconAnchorUnits.js","node_modules/ol/src/style/IconOrigin.js","node_modules/ol/src/ImageState.js","node_modules/ol/src/style/Image.js","node_modules/ol/src/ImageBase.js","node_modules/ol/src/Image.js","node_modules/ol/src/style/IconImage.js","node_modules/ol/src/style/Icon.js","node_modules/ol/src/colorlike.js","node_modules/ol/src/style/RegularShape.js","node_modules/ol/src/style/Circle.js","node_modules/ol/src/style/Stroke.js","node_modules/ol/src/style/Style.js","node_modules/rbush/rbush.min.js","node_modules/ol/src/structs/RBush.js","node_modules/ol/src/source/Source.js","node_modules/ol/src/source/VectorEventType.js","node_modules/ol/src/loadingstrategy.js","node_modules/ol/src/featureloader.js","node_modules/ol/src/source/Vector.js","node_modules/ol/src/layer/TileProperty.js","node_modules/ol/src/layer/BaseTile.js","node_modules/ol/src/renderer/Layer.js","node_modules/ol/src/renderer/canvas/Layer.js","node_modules/ol/src/TileRange.js","node_modules/ol/src/renderer/canvas/TileLayer.js","node_modules/ol/src/layer/Tile.js","node_modules/ol/src/layer/BaseVector.js","node_modules/ol/src/render/canvas/Instruction.js","node_modules/ol/src/render/VectorContext.js","node_modules/ol/src/render/canvas/Builder.js","node_modules/ol/src/render/canvas/ImageBuilder.js","node_modules/ol/src/render/canvas/LineStringBuilder.js","node_modules/ol/src/render/canvas/PolygonBuilder.js","node_modules/ol/src/style/TextPlacement.js","node_modules/ol/src/geom/flat/straightchunk.js","node_modules/ol/src/render/canvas/TextBuilder.js","node_modules/ol/src/render/canvas/BuilderGroup.js","node_modules/ol/src/render/canvas/BuilderType.js","node_modules/ol/src/geom/flat/textpath.js","node_modules/ol/src/render/canvas/Executor.js","node_modules/ol/src/render/canvas/ExecutorGroup.js","node_modules/ol/src/render/canvas/Immediate.js","node_modules/ol/src/renderer/vector.js","node_modules/ol/src/renderer/canvas/VectorLayer.js","node_modules/ol/src/render/canvas/hitdetect.js","node_modules/ol/src/layer/Vector.js","node_modules/ol/src/Tile.js","node_modules/ol/src/ImageTile.js","node_modules/ol/src/reproj/common.js","node_modules/ol/src/reproj.js","node_modules/ol/src/reproj/Triangulation.js","node_modules/ol/src/source/common.js","node_modules/ol/src/reproj/Tile.js","node_modules/ol/src/structs/LRUCache.js","node_modules/ol/src/tilecoord.js","node_modules/ol/src/TileCache.js","node_modules/ol/src/source/TileEventType.js","node_modules/ol/src/tilegrid/TileGrid.js","node_modules/ol/src/tilegrid.js","node_modules/ol/src/source/Tile.js","node_modules/ol/src/tileurlfunction.js","node_modules/ol/src/source/UrlTile.js","node_modules/ol/src/source/TileImage.js","node_modules/ol/src/source/WMTSRequestEncoding.js","node_modules/ol/src/uri.js","node_modules/ol/src/tilegrid/WMTS.js","node_modules/ol/src/source/WMTS.js","main.js","data/gemeenten-simple-4326.json","node_modules/ol/src/render.js"],"sourcesContent":["/**\n * @module ol/events/Event\n */\n\n/**\n * @classdesc\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\n *\n * This implementation only provides `type` and `target` properties, and\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\n * for higher level events defined in the library, and works with\n * {@link module:ol/events/Target~Target}.\n */\nclass BaseEvent {\n  /**\n   * @param {string} type Type.\n   */\n  constructor(type) {\n    /**\n     * @type {boolean}\n     */\n    this.propagationStopped;\n\n    /**\n     * @type {boolean}\n     */\n    this.defaultPrevented;\n\n    /**\n     * The event type.\n     * @type {string}\n     * @api\n     */\n    this.type = type;\n\n    /**\n     * The event target.\n     * @type {Object}\n     * @api\n     */\n    this.target = null;\n  }\n\n  /**\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\n   * will be fired.\n   * @api\n   */\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n  /**\n   * Stop event propagation.\n   * @api\n   */\n  stopPropagation() {\n    this.propagationStopped = true;\n  }\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function stopPropagation(evt) {\n  evt.stopPropagation();\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function preventDefault(evt) {\n  evt.preventDefault();\n}\n\nexport default BaseEvent;\n","/**\n * @module ol/ObjectEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */\n  PROPERTYCHANGE: 'propertychange',\n};\n\n/**\n * @typedef {'propertychange'} Types\n */\n","/**\n * @module ol/Disposable\n */\n\n/**\n * @classdesc\n * Objects that need to clean up after themselves.\n */\nclass Disposable {\n  constructor() {\n    /**\n     * The object has already been disposed.\n     * @type {boolean}\n     * @protected\n     */\n    this.disposed = false;\n  }\n\n  /**\n   * Clean up.\n   */\n  dispose() {\n    if (!this.disposed) {\n      this.disposed = true;\n      this.disposeInternal();\n    }\n  }\n\n  /**\n   * Extension point for disposable objects.\n   * @protected\n   */\n  disposeInternal() {}\n}\n\nexport default Disposable;\n","/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [opt_comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, opt_comparator) {\n  let mid, cmp;\n  const comparator = opt_comparator || numberSafeCompareFunction;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + ((high - low) >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function numberSafeCompareFunction(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n/**\n * Whether the array contains the given object.\n * @param {Array<*>} arr The array to test for the presence of the element.\n * @param {*} obj The object for which to test.\n * @return {boolean} The object is in the array.\n */\nexport function includes(arr, obj) {\n  return arr.indexOf(obj) >= 0;\n}\n\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in desccending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  const n = arr.length;\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    let i;\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (typeof direction === 'function') {\n            if (direction(target, arr[i - 1], arr[i]) > 0) {\n              return i - 1;\n            } else {\n              return i;\n            }\n          } else if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n    return n - 1;\n  }\n}\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n/**\n * @param {Array<VALUE>} arr The array to search in.\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\n * @template VALUE\n * @return {VALUE|null} The element found or null.\n */\nexport function find(arr, func) {\n  const length = arr.length >>> 0;\n  let value;\n\n  for (let i = 0; i < length; i++) {\n    value = arr[i];\n    if (func(value, i, arr)) {\n      return value;\n    }\n  }\n  return null;\n}\n\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sort the passed array such that the relative order of equal elements is preverved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n/**\n * @param {Array<*>} arr The array to search in.\n * @param {Function} func Comparison function.\n * @return {number} Return index.\n */\nexport function findIndex(arr, func) {\n  let index;\n  const found = !arr.every(function (el, idx) {\n    index = idx;\n    return !func(el, idx, arr);\n  });\n  return found ? index : -1;\n}\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [opt_func] Comparison function.\n * @param {boolean} [opt_strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, opt_func, opt_strict) {\n  const compare = opt_func || numberSafeCompareFunction;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || (opt_strict && res === 0));\n  });\n}\n","/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n\n  let lastThis;\n\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n","/**\n * @module ol/obj\n */\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\n *\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\nexport const assign =\n  typeof Object.assign === 'function'\n    ? Object.assign\n    : function (target, var_sources) {\n        if (target === undefined || target === null) {\n          throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        const output = Object(target);\n        for (let i = 1, ii = arguments.length; i < ii; ++i) {\n          const source = arguments[i];\n          if (source !== undefined && source !== null) {\n            for (const key in source) {\n              if (source.hasOwnProperty(key)) {\n                output[key] = source[key];\n              }\n            }\n          }\n        }\n        return output;\n      };\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\nexport function clear(object) {\n  for (const property in object) {\n    delete object[property];\n  }\n}\n\n/**\n * Polyfill for Object.values().  Get an array of property values from an object.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\n *\n * @param {!Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\nexport const getValues =\n  typeof Object.values === 'function'\n    ? Object.values\n    : function (object) {\n        const values = [];\n        for (const property in object) {\n          values.push(object[property]);\n        }\n        return values;\n      };\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n  let property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n","/**\n * @module ol/events/Target\n */\nimport Disposable from '../Disposable.js';\nimport Event from './Event.js';\nimport {VOID} from '../functions.js';\nimport {clear} from '../obj.js';\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */\n\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */\nclass Target extends Disposable {\n  /**\n   * @param {*} [opt_target] Default event target for dispatched events.\n   */\n  constructor(opt_target) {\n    super();\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.eventTarget_ = opt_target;\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.pendingRemovals_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.dispatching_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>}\n     */\n    this.listeners_ = null;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  addEventListener(type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n    const listeners = this.listeners_ || (this.listeners_ = {});\n    const listenersForType = listeners[type] || (listeners[type] = []);\n    if (listenersForType.indexOf(listener) === -1) {\n      listenersForType.push(listener);\n    }\n  }\n\n  /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */\n  dispatchEvent(event) {\n    /** @type {import(\"./Event.js\").default|Event} */\n    const evt = typeof event === 'string' ? new Event(event) : event;\n    const type = evt.type;\n    if (!evt.target) {\n      evt.target = this.eventTarget_ || this;\n    }\n    const listeners = this.listeners_ && this.listeners_[type];\n    let propagate;\n    if (listeners) {\n      const dispatching = this.dispatching_ || (this.dispatching_ = {});\n      const pendingRemovals =\n        this.pendingRemovals_ || (this.pendingRemovals_ = {});\n      if (!(type in dispatching)) {\n        dispatching[type] = 0;\n        pendingRemovals[type] = 0;\n      }\n      ++dispatching[type];\n      for (let i = 0, ii = listeners.length; i < ii; ++i) {\n        if ('handleEvent' in listeners[i]) {\n          propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\n            listeners[i]\n          ).handleEvent(evt);\n        } else {\n          propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\n            listeners[i]\n          ).call(this, evt);\n        }\n        if (propagate === false || evt.propagationStopped) {\n          propagate = false;\n          break;\n        }\n      }\n      --dispatching[type];\n      if (dispatching[type] === 0) {\n        let pr = pendingRemovals[type];\n        delete pendingRemovals[type];\n        while (pr--) {\n          this.removeEventListener(type, VOID);\n        }\n        delete dispatching[type];\n      }\n      return propagate;\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.listeners_ && clear(this.listeners_);\n  }\n\n  /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */\n  getListeners(type) {\n    return (this.listeners_ && this.listeners_[type]) || undefined;\n  }\n\n  /**\n   * @param {string} [opt_type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */\n  hasListener(opt_type) {\n    if (!this.listeners_) {\n      return false;\n    }\n    return opt_type\n      ? opt_type in this.listeners_\n      : Object.keys(this.listeners_).length > 0;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  removeEventListener(type, listener) {\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (listeners) {\n      const index = listeners.indexOf(listener);\n      if (index !== -1) {\n        if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n          // make listener a no-op, and remove later in #dispatchEvent()\n          listeners[index] = VOID;\n          ++this.pendingRemovals_[type];\n        } else {\n          listeners.splice(index, 1);\n          if (listeners.length === 0) {\n            delete this.listeners_[type];\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default Target;\n","/**\n * @module ol/events/EventType\n */\n\n/**\n * @enum {string}\n * @const\n */\nexport default {\n  /**\n   * Generic change event. Triggered when the revision counter is increased.\n   * @event module:ol/events/Event~BaseEvent#change\n   * @api\n   */\n  CHANGE: 'change',\n\n  /**\n   * Generic error event. Triggered when an error occurs.\n   * @event module:ol/events/Event~BaseEvent#error\n   * @api\n   */\n  ERROR: 'error',\n\n  BLUR: 'blur',\n  CLEAR: 'clear',\n  CONTEXTMENU: 'contextmenu',\n  CLICK: 'click',\n  DBLCLICK: 'dblclick',\n  DRAGENTER: 'dragenter',\n  DRAGOVER: 'dragover',\n  DROP: 'drop',\n  FOCUS: 'focus',\n  KEYDOWN: 'keydown',\n  KEYPRESS: 'keypress',\n  LOAD: 'load',\n  RESIZE: 'resize',\n  TOUCHMOVE: 'touchmove',\n  WHEEL: 'wheel',\n};\n","/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {ListenerFunction} listener Listener.\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @property {string} type Type.\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n/**\n * @typedef {Object} ListenerObject\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\n */\n\n/**\n * @typedef {ListenerFunction|ListenerObject} Listener\n */\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events.unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [opt_this] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean} [opt_once] If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, opt_this, opt_once) {\n  if (opt_this && opt_this !== target) {\n    listener = listener.bind(opt_this);\n  }\n  if (opt_once) {\n    const originalListener = listener;\n    listener = function () {\n      target.removeEventListener(type, listener);\n      originalListener.apply(this, arguments);\n    };\n  }\n  const eventsKey = {\n    target: target,\n    type: type,\n    listener: listener,\n  };\n  target.addEventListener(type, listener);\n  return eventsKey;\n}\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events.listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [opt_this] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.listener);\n    clear(key);\n  }\n}\n","/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type|Type[], listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return} CombinedOnSignature\n */\n\n/***\n * @typedef {import(\"./events\").EventsKey|Array<import(\"./events\").EventsKey>} OnReturn\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    /***\n     * @type {OnSignature<EventTypes, import(\"./events/Event.js\").default, OnReturn>}\n     */\n    this.on = this.onInternal;\n\n    /***\n     * @type {OnSignature<EventTypes, import(\"./events/Event.js\").default, OnReturn>}\n     */\n    this.once = this.onceInternal;\n\n    /***\n     * @type {OnSignature<EventTypes, import(\"./events/Event.js\").default, void>}\n     */\n    this.un = this.unInternal;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function(?): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function(?): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function(?): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n","/**\n * @module ol/util\n */\n\n/**\n * @return {?} Any return.\n */\nexport function abstract() {\n  return /** @type {?} */ (\n    (function () {\n      throw new Error('Unimplemented abstract method.');\n    })()\n  );\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = 'latest';\n","/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport {assign, isEmpty} from './obj.js';\nimport {getUid} from './util.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n   */\n  constructor(opt_values) {\n    super();\n\n    /***\n     * @type {ObjectOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    this.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    this.values_ = null;\n\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return (this.values_ && Object.keys(this.values_)) || [];\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return (this.values_ && assign({}, this.values_)) || {};\n  }\n\n  /**\n   * @return {boolean} The object has properties.\n   */\n  hasProperties() {\n    return !!this.values_;\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n  set(key, value, opt_silent) {\n    const values = this.values_ || (this.values_ = {});\n    if (opt_silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n  setProperties(values, opt_silent) {\n    for (const key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  }\n\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n    assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [opt_silent] Unset without triggering an event.\n   * @api\n   */\n  unset(key, opt_silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\nexport default BaseObject;\n","/**\n * @module ol/AssertionError\n */\nimport {VERSION} from './util.js';\n\n/**\n * Error object thrown when an assertion failed. This is an ECMA-262 Error,\n * extended with a `code` property.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.\n */\nclass AssertionError extends Error {\n  /**\n   * @param {number} code Error code.\n   */\n  constructor(code) {\n    const path = VERSION === 'latest' ? VERSION : 'v' + VERSION.split('-')[0];\n    const message =\n      'Assertion failed. See https://openlayers.org/en/' +\n      path +\n      '/doc/errors/#' +\n      code +\n      ' for details.';\n\n    super(message);\n\n    /**\n     * Error code. The meaning of the code can be found on\n     * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with\n     * the version found in the OpenLayers script's header comment if a version\n     * other than the latest is used).\n     * @type {number}\n     * @api\n     */\n    this.code = code;\n\n    /**\n     * @type {string}\n     */\n    this.name = 'AssertionError';\n\n    // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40\n    this.message = message;\n  }\n}\n\nexport default AssertionError;\n","/**\n * @module ol/asserts\n */\nimport AssertionError from './AssertionError.js';\n\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {number} errorCode Error code.\n */\nexport function assert(assertion, errorCode) {\n  if (!assertion) {\n    throw new AssertionError(errorCode);\n  }\n}\n","/**\n * @module ol/Feature\n */\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport {assert} from './asserts.js';\nimport {listen, unlistenByKey} from './events.js';\n\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\n *     |'change:geometry', Return>} FeatureOnSignature\n */\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n * @template {import(\"./geom/Geometry.js\").default} Geometry\n */\nclass Feature extends BaseObject {\n  /**\n   * @param {Geometry|Object<string, *>} [opt_geometryOrProperties]\n   *     You may pass a Geometry object directly, or an object literal containing\n   *     properties. If you pass an object literal, you may include a Geometry\n   *     associated with a `geometry` key.\n   */\n  constructor(opt_geometryOrProperties) {\n    super();\n\n    /***\n     * @type {FeatureOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {FeatureOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {FeatureOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = undefined;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.geometryName_ = 'geometry';\n\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n    this.style_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n    this.styleFunction_ = undefined;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.geometryChangeKey_ = null;\n\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n\n    if (opt_geometryOrProperties) {\n      if (\n        typeof (\n          /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry\n        ) === 'function'\n      ) {\n        const geometry = /** @type {Geometry} */ (opt_geometryOrProperties);\n        this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        const properties = opt_geometryOrProperties;\n        this.setProperties(properties);\n      }\n    }\n  }\n\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature} The clone.\n   * @api\n   */\n  clone() {\n    const clone = new Feature(\n      this.hasProperties() ? this.getProperties() : null\n    );\n    clone.setGeometryName(this.getGeometryName());\n    const geometry = this.getGeometry();\n    if (geometry) {\n      clone.setGeometry(geometry.clone());\n    }\n    const style = this.getStyle();\n    if (style) {\n      clone.setStyle(style);\n    }\n    return clone;\n  }\n\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {Geometry|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n  getGeometry() {\n    return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));\n  }\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n  getGeometryName() {\n    return this.geometryName_;\n  }\n\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n\n  /**\n   * @private\n   */\n  handleGeometryChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleGeometryChanged_() {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n    const geometry = this.getGeometry();\n    if (geometry) {\n      this.geometryChangeKey_ = listen(\n        geometry,\n        EventType.CHANGE,\n        this.handleGeometryChange_,\n        this\n      );\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {Geometry|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n  setGeometry(geometry) {\n    this.set(this.geometryName_, geometry);\n  }\n\n  /**\n   * Set the style for the feature to override the layer style.  This can be a\n   * single style object, an array of styles, or a function that takes a\n   * resolution and returns an array of styles. To unset the feature style, call\n   * `setStyle()` without arguments or a falsey value.\n   * @param {import(\"./style/Style.js\").StyleLike} [opt_style] Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */\n  setStyle(opt_style) {\n    this.style_ = opt_style;\n    this.styleFunction_ = !opt_style\n      ? undefined\n      : createStyleFunction(opt_style);\n    this.changed();\n  }\n\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */\n  setId(id) {\n    this.id_ = id;\n    this.changed();\n  }\n\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n  setGeometryName(name) {\n    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\n    this.geometryName_ = name;\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n    this.handleGeometryChanged_();\n  }\n}\n\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array<import(\"./style/Style.js\").default>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n      const style = /** @type {import(\"./style/Style.js\").default} */ (obj);\n      styles = [style];\n    }\n    return function () {\n      return styles;\n    };\n  }\n}\nexport default Feature;\n","/**\n * @module ol/proj/Units\n */\n\n/**\n * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or\n * `'us-ft'`.\n * @enum {string}\n */\nconst Units = {\n  /**\n   * Degrees\n   * @api\n   */\n  DEGREES: 'degrees',\n  /**\n   * Feet\n   * @api\n   */\n  FEET: 'ft',\n  /**\n   * Meters\n   * @api\n   */\n  METERS: 'm',\n  /**\n   * Pixels\n   * @api\n   */\n  PIXELS: 'pixels',\n  /**\n   * Tile Pixels\n   * @api\n   */\n  TILE_PIXELS: 'tile-pixels',\n  /**\n   * US Feet\n   * @api\n   */\n  USFEET: 'us-ft',\n};\n\n/**\n * Meters per unit lookup table.\n * @const\n * @type {Object<Units, number>}\n * @api\n */\nexport const METERS_PER_UNIT = {};\n// use the radius of the Normal sphere\nMETERS_PER_UNIT[Units.DEGREES] = (2 * Math.PI * 6370997) / 360;\nMETERS_PER_UNIT[Units.FEET] = 0.3048;\nMETERS_PER_UNIT[Units.METERS] = 1;\nMETERS_PER_UNIT[Units.USFEET] = 1200 / 3937;\n\nexport default Units;\n","/**\n * @module ol/transform\n */\nimport {WORKER_OFFSCREEN_CANVAS} from './has.js';\nimport {assert} from './asserts.js';\n\n/**\n * An array representing an affine 2d transformation for use with\n * {@link module:ol/transform} functions. The array has 6 elements.\n * @typedef {!Array<number>} Transform\n * @api\n */\n\n/**\n * Collection of affine 2d transformation functions. The functions work on an\n * array of 6 elements. The element order is compatible with the [SVGMatrix\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\n * a subset (elements a to f) of a 3×3 matrix:\n * ```\n * [ a c e ]\n * [ b d f ]\n * [ 0 0 1 ]\n * ```\n */\n\n/**\n * @private\n * @type {Transform}\n */\nconst tmp_ = new Array(6);\n\n/**\n * Create an identity transform.\n * @return {!Transform} Identity transform.\n */\nexport function create() {\n  return [1, 0, 0, 1, 0, 0];\n}\n\n/**\n * Resets the given transform to an identity transform.\n * @param {!Transform} transform Transform.\n * @return {!Transform} Transform.\n */\nexport function reset(transform) {\n  return set(transform, 1, 0, 0, 1, 0, 0);\n}\n\n/**\n * Multiply the underlying matrices of two transforms and return the result in\n * the first transform.\n * @param {!Transform} transform1 Transform parameters of matrix 1.\n * @param {!Transform} transform2 Transform parameters of matrix 2.\n * @return {!Transform} transform1 multiplied with transform2.\n */\nexport function multiply(transform1, transform2) {\n  const a1 = transform1[0];\n  const b1 = transform1[1];\n  const c1 = transform1[2];\n  const d1 = transform1[3];\n  const e1 = transform1[4];\n  const f1 = transform1[5];\n  const a2 = transform2[0];\n  const b2 = transform2[1];\n  const c2 = transform2[2];\n  const d2 = transform2[3];\n  const e2 = transform2[4];\n  const f2 = transform2[5];\n\n  transform1[0] = a1 * a2 + c1 * b2;\n  transform1[1] = b1 * a2 + d1 * b2;\n  transform1[2] = a1 * c2 + c1 * d2;\n  transform1[3] = b1 * c2 + d1 * d2;\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\n\n  return transform1;\n}\n\n/**\n * Set the transform components a-f on a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} a The a component of the transform.\n * @param {number} b The b component of the transform.\n * @param {number} c The c component of the transform.\n * @param {number} d The d component of the transform.\n * @param {number} e The e component of the transform.\n * @param {number} f The f component of the transform.\n * @return {!Transform} Matrix with transform applied.\n */\nexport function set(transform, a, b, c, d, e, f) {\n  transform[0] = a;\n  transform[1] = b;\n  transform[2] = c;\n  transform[3] = d;\n  transform[4] = e;\n  transform[5] = f;\n  return transform;\n}\n\n/**\n * Set transform on one matrix from another matrix.\n * @param {!Transform} transform1 Matrix to set transform to.\n * @param {!Transform} transform2 Matrix to set transform from.\n * @return {!Transform} transform1 with transform from transform2 applied.\n */\nexport function setFromArray(transform1, transform2) {\n  transform1[0] = transform2[0];\n  transform1[1] = transform2[1];\n  transform1[2] = transform2[2];\n  transform1[3] = transform2[3];\n  transform1[4] = transform2[4];\n  transform1[5] = transform2[5];\n  return transform1;\n}\n\n/**\n * Transforms the given coordinate with the given transform returning the\n * resulting, transformed coordinate. The coordinate will be modified in-place.\n *\n * @param {Transform} transform The transformation.\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\n *     chained together.\n */\nexport function apply(transform, coordinate) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n  return coordinate;\n}\n\n/**\n * Applies rotation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} angle Angle in radians.\n * @return {!Transform} The rotated transform.\n */\nexport function rotate(transform, angle) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\n}\n\n/**\n * Applies scale to a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scaled transform.\n */\nexport function scale(transform, x, y) {\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\n}\n\n/**\n * Creates a scale transform.\n * @param {!Transform} target Transform to overwrite.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scale transform.\n */\nexport function makeScale(target, x, y) {\n  return set(target, x, 0, 0, y, 0, 0);\n}\n\n/**\n * Applies translation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} dx Translation x.\n * @param {number} dy Translation y.\n * @return {!Transform} The translated transform.\n */\nexport function translate(transform, dx, dy) {\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative).\n * @param {!Transform} transform The transform (will be modified in place).\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {!Transform} The composite transform.\n */\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n  transform[0] = sx * cos;\n  transform[1] = sy * sin;\n  transform[2] = -sx * sin;\n  transform[3] = sy * cos;\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n  return transform;\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative). The resulting transform\n * string can be applied as `transform` property of an HTMLElement's style.\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {string} The composite css transform.\n * @api\n */\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (source) transform.\n */\nexport function invert(source) {\n  return makeInverse(source, source);\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} target Transform to be set as the inverse of\n *     the source transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (target) transform.\n */\nexport function makeInverse(target, source) {\n  const det = determinant(source);\n  assert(det !== 0, 32); // Transformation matrix cannot be inverted\n\n  const a = source[0];\n  const b = source[1];\n  const c = source[2];\n  const d = source[3];\n  const e = source[4];\n  const f = source[5];\n\n  target[0] = d / det;\n  target[1] = -b / det;\n  target[2] = -c / det;\n  target[3] = a / det;\n  target[4] = (c * f - d * e) / det;\n  target[5] = -(a * f - b * e) / det;\n\n  return target;\n}\n\n/**\n * Returns the determinant of the given matrix.\n * @param {!Transform} mat Matrix.\n * @return {number} Determinant.\n */\nexport function determinant(mat) {\n  return mat[0] * mat[3] - mat[1] * mat[2];\n}\n\n/**\n * @type {HTMLElement}\n * @private\n */\nlet transformStringDiv;\n\n/**\n * A rounded string version of the transform.  This can be used\n * for CSS transforms.\n * @param {!Transform} mat Matrix.\n * @return {string} The transform as a string.\n */\nexport function toString(mat) {\n  const transformString = 'matrix(' + mat.join(', ') + ')';\n  if (WORKER_OFFSCREEN_CANVAS) {\n    return transformString;\n  }\n  const node =\n    transformStringDiv || (transformStringDiv = document.createElement('div'));\n  node.style.transform = transformString;\n  return node.style.transform;\n}\n","/**\n * @module ol/has\n */\n\nconst ua =\n  typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'\n    ? navigator.userAgent.toLowerCase()\n    : '';\n\n/**\n * User agent string says we are dealing with Firefox as browser.\n * @type {boolean}\n */\nexport const FIREFOX = ua.indexOf('firefox') !== -1;\n\n/**\n * User agent string says we are dealing with Safari as browser.\n * @type {boolean}\n */\nexport const SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;\n\n/**\n * User agent string says we are dealing with a WebKit engine.\n * @type {boolean}\n */\nexport const WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;\n\n/**\n * User agent string says we are dealing with a Mac as platform.\n * @type {boolean}\n */\nexport const MAC = ua.indexOf('macintosh') !== -1;\n\n/**\n * The ratio between physical pixels and device-independent pixels\n * (dips) on the device (`window.devicePixelRatio`).\n * @const\n * @type {number}\n * @api\n */\nexport const DEVICE_PIXEL_RATIO =\n  typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;\n\n/**\n * The execution context is a worker with OffscreenCanvas available.\n * @const\n * @type {boolean}\n */\nexport const WORKER_OFFSCREEN_CANVAS =\n  typeof WorkerGlobalScope !== 'undefined' &&\n  typeof OffscreenCanvas !== 'undefined' &&\n  self instanceof WorkerGlobalScope; //eslint-disable-line\n\n/**\n * Image.prototype.decode() is supported.\n * @type {boolean}\n */\nexport const IMAGE_DECODE =\n  typeof Image !== 'undefined' && Image.prototype.decode;\n\n/**\n * @type {boolean}\n */\nexport const PASSIVE_EVENT_LISTENERS = (function () {\n  let passive = false;\n  try {\n    const options = Object.defineProperty({}, 'passive', {\n      get: function () {\n        passive = true;\n      },\n    });\n\n    window.addEventListener('_', null, options);\n    window.removeEventListener('_', null, options);\n  } catch (error) {\n    // passive not supported\n  }\n  return passive;\n})();\n","/**\n * @module ol/extent/Corner\n */\n\n/**\n * Extent corner.\n * @enum {string}\n */\nexport default {\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n};\n","/**\n * @module ol/extent/Relationship\n */\n\n/**\n * Relationship to an extent.\n * @enum {number}\n */\nexport default {\n  UNKNOWN: 0,\n  INTERSECTING: 1,\n  ABOVE: 2,\n  RIGHT: 4,\n  BELOW: 8,\n  LEFT: 16,\n};\n","/**\n * @module ol/extent\n */\nimport Corner from './extent/Corner.js';\nimport Relationship from './extent/Relationship.js';\nimport {assert} from './asserts.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [opt_extent] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [\n      extent[0] - value,\n      extent[1] - value,\n      extent[2] + value,\n      extent[3] + value,\n    ];\n  }\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [opt_extent] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(opt_extent) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, opt_extent);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n  const extent = createOrUpdateEmpty(opt_extent);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  opt_extent\n) {\n  const extent = createOrUpdateEmpty(opt_extent);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, opt_extent) {\n  const extent = createOrUpdateEmpty(opt_extent);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./extent/Corner.js\").default} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === Corner.BOTTOM_LEFT) {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === Corner.BOTTOM_RIGHT) {\n    coordinate = getBottomRight(extent);\n  } else if (corner === Corner.TOP_LEFT) {\n    coordinate = getTopLeft(extent);\n  } else if (corner === Corner.TOP_RIGHT) {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [opt_extent] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(\n  center,\n  resolution,\n  rotation,\n  size,\n  opt_extent\n) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  const x0 = x - xCos + ySin;\n  const x1 = x - xCos - ySin;\n  const x2 = x + xCos - ySin;\n  const x3 = x + xCos + ySin;\n  const y0 = y - xSin - yCos;\n  const y1 = y - xSin + yCos;\n  const y2 = y + xSin + yCos;\n  const y3 = y + xSin - yCos;\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    opt_extent\n  );\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [opt_extent] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, opt_extent) {\n  const intersection = opt_extent ? opt_extent : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [opt_extent] Destination extent.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, opt_extent, opt_stops) {\n  let coordinates = [];\n  if (opt_stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < opt_stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / opt_stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / opt_stops,\n        extent[2] - (width * i) / opt_stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / opt_stops\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, opt_extent);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n","/**\n * @module ol/proj/Projection\n */\nimport {METERS_PER_UNIT} from './Units.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").default|string} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution getPointResolution()} function will be used.\n */\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */\nclass Projection {\n  /**\n   * @param {Options} options Projection options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").default}\n     */\n    this.units_ = /** @type {import(\"./Units.js\").default} */ (options.units);\n\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.worldExtent_ =\n      options.worldExtent !== undefined ? options.worldExtent : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.axisOrientation_ =\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.global_ = options.global !== undefined ? options.global : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n    this.getPointResolutionFunc_ = options.getPointResolution;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.defaultTileGrid_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n  canWrapX() {\n    return this.canWrapX_;\n  }\n\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n  getCode() {\n    return this.code_;\n  }\n\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").default} Units.\n   * @api\n   */\n  getUnits() {\n    return this.units_;\n  }\n\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n  getMetersPerUnit() {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  }\n\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getWorldExtent() {\n    return this.worldExtent_;\n  }\n\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n  getAxisOrientation() {\n    return this.axisOrientation_;\n  }\n\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n  isGlobal() {\n    return this.global_;\n  }\n\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n  setGlobal(global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  }\n\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n  getDefaultTileGrid() {\n    return this.defaultTileGrid_;\n  }\n\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n  setDefaultTileGrid(tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  }\n\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  setExtent(extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  }\n\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n  setWorldExtent(worldExtent) {\n    this.worldExtent_ = worldExtent;\n  }\n\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n  setGetPointResolution(func) {\n    this.getPointResolutionFunc_ = func;\n  }\n\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n  getPointResolutionFunc() {\n    return this.getPointResolutionFunc_;\n  }\n}\n\nexport default Projection;\n","/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\nexport const cosh = (function () {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  let cosh;\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function (x) {\n      const y = /** @type {Math} */ (Math).exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n  return cosh;\n})();\n\n/**\n * Return the base 2 logarithm of a given number. The method will use the\n * native `Math.log2` function if it is available, otherwise the base 2\n * logarithm will be calculated via the reference implementation of the\n * Mozilla developer network.\n *\n * @param {number} x X.\n * @return {number} Base 2 logarithm of x.\n */\nexport const log2 = (function () {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  let log2;\n  if ('log2' in Math) {\n    // The environment supports the native Math.log2 function, use it…\n    log2 = Math.log2;\n  } else {\n    // … else, use the reference implementation of MDN:\n    log2 = function (x) {\n      return Math.log(x) * Math.LOG2E;\n    };\n  }\n  return log2;\n})();\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n","/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport {cosh} from '../math.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  const length = input.length;\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  let output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  const length = input.length;\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  let output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n","/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-180, -90, 180, 90];\n\n/**\n * @const\n * @type {number}\n */\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nclass EPSG4326Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   * @param {string} [opt_axisOrientation] Axis orientation.\n   */\n  constructor(code, opt_axisOrientation) {\n    super({\n      code: code,\n      units: Units.DEGREES,\n      extent: EXTENT,\n      axisOrientation: opt_axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT,\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n];\n","/**\n * @module ol/proj/projections\n */\n\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nlet cache = {};\n\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n  cache = {};\n}\n\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\nexport function get(code) {\n  return (\n    cache[code] ||\n    cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n    null\n  );\n}\n\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n  cache[code] = projection;\n}\n","/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  let transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}\n","/**\n * @module ol/geom/GeometryType\n */\n\n/**\n * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, `'Circle'`.\n * @enum {string}\n */\nexport default {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  LINEAR_RING: 'LinearRing',\n  POLYGON: 'Polygon',\n  MULTI_POINT: 'MultiPoint',\n  MULTI_LINE_STRING: 'MultiLineString',\n  MULTI_POLYGON: 'MultiPolygon',\n  GEOMETRY_COLLECTION: 'GeometryCollection',\n  CIRCLE: 'Circle',\n};\n","/**\n * @module ol/sphere\n */\nimport GeometryType from './geom/GeometryType.js';\nimport {toDegrees, toRadians} from './math.js';\n\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport const DEFAULT_RADIUS = 6371008.8;\n\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, opt_radius) {\n  const radius = opt_radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lat2 = toRadians(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  const a =\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n    Math.sin(deltaLonBy2) *\n      Math.sin(deltaLonBy2) *\n      Math.cos(lat1) *\n      Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [opt_options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, opt_options) {\n  const options = opt_options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== GeometryType.GEOMETRY_COLLECTION) {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case GeometryType.POINT:\n    case GeometryType.MULTI_POINT: {\n      break;\n    }\n    case GeometryType.LINE_STRING:\n    case GeometryType.LINEAR_RING: {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      length = getLengthInternal(coordinates, radius);\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING:\n    case GeometryType.POLYGON: {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += getLengthInternal(coordinates[i], radius);\n      }\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += getLengthInternal(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += getLength(geometries[i], opt_options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n}\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area +=\n      toRadians(x2 - x1) *\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return (area * radius * radius) / 2.0;\n}\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [opt_options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, opt_options) {\n  const options = opt_options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== GeometryType.GEOMETRY_COLLECTION) {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case GeometryType.POINT:\n    case GeometryType.MULTI_POINT:\n    case GeometryType.LINE_STRING:\n    case GeometryType.MULTI_LINE_STRING:\n    case GeometryType.LINEAR_RING: {\n      break;\n    }\n    case GeometryType.POLYGON: {\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\n      }\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(getAreaInternal(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(getAreaInternal(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += getArea(geometries[i], opt_options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n}\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [opt_radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, opt_radius) {\n  const radius = opt_radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lon1 = toRadians(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(\n    Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing)\n  );\n  const lon =\n    lon1 +\n    Math.atan2(\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat)\n    );\n  return [toDegrees(lon), toDegrees(lat)];\n}\n","/**\n * @module ol/coordinate\n */\nimport {getWidth} from './extent.js';\nimport {modulo} from './math.js';\nimport {padNumber} from './string.js';\n\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + (r * dx) / d;\n  const y = y0 + (r * dy) / d;\n\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along =\n    dx === 0 && dy === 0\n      ? 0\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(opt_fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, opt_fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const dflPrecision = opt_fractionDigits || 0;\n  const precision = Math.pow(10, dflPrecision);\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = x - deg * 3600 - min * 60;\n  sec = Math.ceil(sec * precision) / precision;\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  return (\n    deg +\n    '\\u00b0 ' +\n    padNumber(min, 2) +\n    '\\u2032 ' +\n    padNumber(sec, 2, dflPrecision) +\n    '\\u2033' +\n    (normalizedDegrees == 0\n      ? ''\n      : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0))\n  );\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, opt_fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(opt_fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, opt_fractionDigits) {\n  if (coordinate) {\n    return (\n      degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) +\n      ' ' +\n      degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits)\n    );\n  } else {\n    return '';\n  }\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, opt_fractionDigits) {\n  return format(coordinate, '{x}, {y}', opt_fractionDigits);\n}\n\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [opt_sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, opt_sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n  if (\n    projection.canWrapX() &&\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\n  ) {\n    const sourceExtentWidth =\n      opt_sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor(\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth\n    );\n  }\n  return worldsAway;\n}\n","/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport Units, {METERS_PER_UNIT} from './proj/Units.js';\nimport {\n  PROJECTIONS as EPSG3857_PROJECTIONS,\n  fromEPSG4326,\n  toEPSG4326,\n} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport {\n  add as addProj,\n  clear as clearProj,\n  get as getProj,\n} from './proj/projections.js';\nimport {\n  add as addTransformFunc,\n  clear as clearTransformFuncs,\n  get as getTransformFunc,\n} from './proj/transforms.js';\nimport {applyTransform, getWidth} from './extent.js';\nimport {clamp, modulo} from './math.js';\nimport {getDistance} from './sphere.js';\nimport {getWorldsAway} from './coordinate.js';\n\n/**\n * A projection as {@link module:ol/proj/Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n  let output;\n  if (opt_output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    output = opt_output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n  if (opt_output !== undefined && input !== opt_output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    input = opt_output;\n  }\n  return input;\n}\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string'\n    ? getProj(/** @type {string} */ (projectionLike))\n    : /** @type {Projection} */ (projectionLike) || null;\n}\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the 'point' pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").default} [opt_units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (opt_units && opt_units !== projection.getUnits()) {\n      const metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution =\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[opt_units];\n      }\n    }\n  } else {\n    const units = projection.getUnits();\n    if ((units == Units.DEGREES && !opt_units) || opt_units == Units.DEGREES) {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(\n        projection,\n        get('EPSG:4326')\n      );\n      if (toEPSG4326 === identityTransform && units !== Units.DEGREES) {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        let vertices = [\n          point[0] - resolution / 2,\n          point[1],\n          point[0] + resolution / 2,\n          point[1],\n          point[0],\n          point[1] - resolution / 2,\n          point[0],\n          point[1] + resolution / 2,\n        ];\n        vertices = toEPSG4326(vertices, vertices, 2);\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      const metersPerUnit = opt_units\n        ? METERS_PER_UNIT[opt_units]\n        : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(\n  projections1,\n  projections2,\n  forwardTransform,\n  inverseTransform\n) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  } else if (typeof projection === 'string') {\n    return get(projection);\n  } else {\n    return /** @type {Projection} */ (projection);\n  }\n}\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [opt_output] Output.\n     * @param {number} [opt_dimension] Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, opt_output, opt_dimension) {\n      const length = input.length;\n      const dimension = opt_dimension !== undefined ? opt_dimension : 2;\n      const output = opt_output !== undefined ? opt_output : new Array(length);\n      for (let i = 0; i < length; i += dimension) {\n        const point = coordTransform([input[i], input[i + 1]]);\n        output[i] = point[0];\n        output[i + 1] = point[1];\n        for (let j = dimension - 1; j >= 2; --j) {\n          output[i + j] = input[i + j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(\n    sourceProj,\n    destProj,\n    createTransformFromCoordinateTransform(forward)\n  );\n  addTransformFunc(\n    destProj,\n    sourceProj,\n    createTransformFromCoordinateTransform(inverse)\n  );\n}\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [opt_projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n  return transform(\n    coordinate,\n    'EPSG:4326',\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857'\n  );\n}\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [opt_projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n  const lonLat = transform(\n    coordinate,\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857',\n    'EPSG:4326'\n  );\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  } else {\n    const transformFunc = getTransformFromProjections(projection1, projection2);\n    return transformFunc === cloneTransform && equalUnits;\n  }\n}\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(\n  sourceProjection,\n  destinationProjection\n) {\n  const sourceCode = sourceProjection.getCode();\n  const destinationCode = destinationProjection.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, opt_stops) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, opt_stops);\n}\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(\n  point,\n  sourceProjection,\n  destinationProjection\n) {\n  const transformFunc = getTransformFromProjections(\n    sourceProjection,\n    destinationProjection\n  );\n  return transformFunc(point);\n}\n\n/**\n * @type {?Projection}\n */\nlet userProjection = null;\n\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @param {ProjectionLike} projection The user projection.\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n\n/**\n * Clear the user projection if set.  Note that this method is not yet a part of\n * the stable API.  Support for user projections is not yet complete and should\n * be considered experimental.\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @return {?Projection} The user projection (or null if not set).\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.  Note that this\n * method is not yet a part of the stable API.  Support for user projections is\n * not yet complete and should be considered experimental.\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destiation).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destiation).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    let sourceX = coord[0];\n    let sourceY = coord[1];\n    let transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      const sourceExtent = sourceProj.getExtent();\n      const sourceExtentWidth = getWidth(sourceExtent);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        sourceX = sourceX - worldsAway * sourceExtentWidth;\n      }\n      sourceX = clamp(sourceX, sourceExtent[0], sourceExtent[2]);\n      sourceY = clamp(sourceY, sourceExtent[1], sourceExtent[3]);\n      transformed = transform([sourceX, sourceY]);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(\n    EPSG4326_PROJECTIONS,\n    EPSG3857_PROJECTIONS,\n    fromEPSG4326,\n    toEPSG4326\n  );\n}\n\naddCommon();\n","/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  opt_dest\n) {\n  const dest = opt_dest ? opt_dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  opt_dest\n) {\n  const dest = opt_dest ? opt_dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  opt_dest\n) {\n  const dest = opt_dest ? opt_dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  opt_dest\n) {\n  const dest = opt_dest ? opt_dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n","/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport Units from '../proj/Units.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(function (\n      revision,\n      squaredTolerance,\n      opt_transform\n    ) {\n      if (!opt_transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      const clone = this.clone();\n      clone.applyTransform(opt_transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, opt_transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      opt_transform\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, opt_closestPoint) {\n    const closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(opt_extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, opt_extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == Units.TILE_PIXELS\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0\n            );\n            transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates\n            );\n            return getTransform(sourceProj, destination)(\n              inCoordinates,\n              outCoordinates,\n              stride\n            );\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n","/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport GeometryType from './GeometryType.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [opt_geometries] Geometries.\n   */\n  constructor(opt_geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = opt_geometries ? opt_geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive()\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.GEOMETRY_COLLECTION;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    let anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;\n","/**\n * @module ol/format/Feature\n */\nimport Units from '../proj/Units.js';\nimport {abstract} from '../util.js';\nimport {assign} from '../obj.js';\nimport {\n  equivalent as equivalentProjection,\n  get as getProjection,\n  transformExtent,\n} from '../proj.js';\n\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\nclass FeatureFormat {\n  constructor() {\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.dataProjection = undefined;\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.defaultFeatureProjection = undefined;\n  }\n\n  /**\n   * Adds the data projection to the read options.\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Options.\n   * @return {ReadOptions|undefined} Options.\n   * @protected\n   */\n  getReadOptions(source, opt_options) {\n    let options;\n    if (opt_options) {\n      let dataProjection = opt_options.dataProjection\n        ? getProjection(opt_options.dataProjection)\n        : this.readProjection(source);\n      if (\n        opt_options.extent &&\n        dataProjection &&\n        dataProjection.getUnits() === Units.TILE_PIXELS\n      ) {\n        dataProjection = getProjection(dataProjection);\n        dataProjection.setWorldExtent(opt_options.extent);\n      }\n      options = {\n        dataProjection: dataProjection,\n        featureProjection: opt_options.featureProjection,\n      };\n    }\n    return this.adaptOptions(options);\n  }\n\n  /**\n   * Sets the `dataProjection` on the options, if no `dataProjection`\n   * is set.\n   * @param {WriteOptions|ReadOptions|undefined} options\n   *     Options.\n   * @protected\n   * @return {WriteOptions|ReadOptions|undefined}\n   *     Updated options.\n   */\n  adaptOptions(options) {\n    return assign(\n      {\n        dataProjection: this.dataProjection,\n        featureProjection: this.defaultFeatureProjection,\n      },\n      options\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Read a single feature from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   */\n  readFeature(source, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read all features from a source.\n   *\n   * @abstract\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n  readFeatures(source, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read a single geometry from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometry(source, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n  readProjection(source) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature in this format.\n   *\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeFeature(feature, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features in this format.\n   *\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeFeatures(features, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Write a single geometry in this format.\n   *\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeGeometry(geometry, opt_options) {\n    return abstract();\n  }\n}\n\nexport default FeatureFormat;\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [opt_options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\nexport function transformGeometryWithOptions(geometry, write, opt_options) {\n  const featureProjection = opt_options\n    ? getProjection(opt_options.featureProjection)\n    : null;\n  const dataProjection = opt_options\n    ? getProjection(opt_options.dataProjection)\n    : null;\n\n  let transformed;\n  if (\n    featureProjection &&\n    dataProjection &&\n    !equivalentProjection(featureProjection, dataProjection)\n  ) {\n    transformed = (write ? geometry.clone() : geometry).transform(\n      write ? featureProjection : dataProjection,\n      write ? dataProjection : featureProjection\n    );\n  } else {\n    transformed = geometry;\n  }\n  if (\n    write &&\n    opt_options &&\n    /** @type {WriteOptions} */ (opt_options).decimals !== undefined\n  ) {\n    const power = Math.pow(\n      10,\n      /** @type {WriteOptions} */ (opt_options).decimals\n    );\n    // if decimals option on write, round each coordinate appropriately\n    /**\n     * @param {Array<number>} coordinates Coordinates.\n     * @return {Array<number>} Transformed coordinates.\n     */\n    const transform = function (coordinates) {\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\n      }\n      return coordinates;\n    };\n    if (transformed === geometry) {\n      transformed = geometry.clone();\n    }\n    transformed.applyTransform(transform);\n  }\n  return transformed;\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [opt_options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\nexport function transformExtentWithOptions(extent, opt_options) {\n  const featureProjection = opt_options\n    ? getProjection(opt_options.featureProjection)\n    : null;\n  const dataProjection = opt_options\n    ? getProjection(opt_options.dataProjection)\n    : null;\n\n  if (\n    featureProjection &&\n    dataProjection &&\n    !equivalentProjection(featureProjection, dataProjection)\n  ) {\n    return transformExtent(extent, dataProjection, featureProjection);\n  } else {\n    return extent;\n  }\n}\n","/**\n * @module ol/format/FormatType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  ARRAY_BUFFER: 'arraybuffer',\n  JSON: 'json',\n  TEXT: 'text',\n  XML: 'xml',\n};\n","/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport FormatType from './FormatType.js';\nimport {abstract} from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n  getType() {\n    return FormatType.JSON;\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, opt_options) {\n    return this.readFeatureFromObject(\n      getObject(source),\n      this.getReadOptions(source, opt_options)\n    );\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, opt_options) {\n    return this.readFeaturesFromObject(\n      getObject(source),\n      this.getReadOptions(source, opt_options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromObject(object, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, opt_options) {\n    return this.readGeometryFromObject(\n      getObject(source),\n      this.getReadOptions(source, opt_options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, opt_options) {\n    return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, opt_options) {\n    return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  writeGeometry(geometry, opt_options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, opt_options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\nexport default JSONFeature;\n","/**\n * @module ol/geom/GeometryLayout\n */\n\n/**\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available. Supported values are `'XY'`,\n * `'XYZ'`, `'XYM'`, `'XYZM'`.\n * @enum {string}\n */\nexport default {\n  XY: 'XY',\n  XYZ: 'XYZ',\n  XYM: 'XYM',\n  XYZM: 'XYZM',\n};\n","/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./GeometryLayout.js\").default}\n     */\n    this.layout = GeometryLayout.XY;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates = null;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*>} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride\n    );\n  }\n\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n   * @return {import(\"./GeometryLayout.js\").default} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    } else {\n      // Simplification did not actually remove any coordinates.  We now know\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\n      // than or equal to the current squaredTolerance will also not have any\n      // effect.  This allows us to short circuit simplification (saving CPU\n      // cycles) and prevents the cache of simplified geometries from filling\n      // up with useless identical copies of this geometry (saving memory).\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  setCoordinates(coordinates, opt_layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = GeometryLayout.XY;\n          this.stride = 2;\n          return;\n        } else {\n          coordinates = /** @type {Array} */ (coordinates[0]);\n        }\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    let sy = opt_sy;\n    if (sy === undefined) {\n      sy = sx;\n    }\n    let anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n  return /** @type {import(\"./GeometryLayout.js\").default} */ (layout);\n}\n\n/**\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    const stride = simpleGeometry.getStride();\n    return transform2D(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n      transform,\n      opt_dest\n    );\n  }\n}\n\nexport default SimpleGeometry;\n","/**\n * @module ol/geom/flat/closest\n */\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\n\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(\n  flatCoordinates,\n  offset1,\n  offset2,\n  stride,\n  x,\n  y,\n  closestPoint\n) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(\n          flatCoordinates[offset1 + i],\n          flatCoordinates[offset2 + i],\n          t\n        );\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  max\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  max\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  opt_tmpPoint\n) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[offset],\n      flatCoordinates[offset + 1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(\n      flatCoordinates,\n      index - stride,\n      index,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index +=\n        stride *\n        Math.max(\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n            maxDelta) |\n            0,\n          1\n        );\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(\n      flatCoordinates,\n      end - stride,\n      offset,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  opt_tmpPoint\n) {\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  opt_tmpPoint\n) {\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n","/**\n * @module ol/geom/flat/deflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\n    flatCoordinates[offset++] = coordinate[i];\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinates(\n  flatCoordinates,\n  offset,\n  coordinates,\n  stride\n) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    const coordinate = coordinates[i];\n    for (let j = 0; j < stride; ++j) {\n      flatCoordinates[offset++] = coordinate[j];\n    }\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\n * @param {number} stride Stride.\n * @param {Array<number>} [opt_ends] Ends.\n * @return {Array<number>} Ends.\n */\nexport function deflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatess,\n  stride,\n  opt_ends\n) {\n  const ends = opt_ends ? opt_ends : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\n    const end = deflateCoordinates(\n      flatCoordinates,\n      offset,\n      coordinatess[j],\n      stride\n    );\n    ends[i++] = end;\n    offset = end;\n  }\n  ends.length = i;\n  return ends;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\n * @param {number} stride Stride.\n * @param {Array<Array<number>>} [opt_endss] Endss.\n * @return {Array<Array<number>>} Endss.\n */\nexport function deflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatesss,\n  stride,\n  opt_endss\n) {\n  const endss = opt_endss ? opt_endss : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\n    const ends = deflateCoordinatesArray(\n      flatCoordinates,\n      offset,\n      coordinatesss[j],\n      stride,\n      endss[i]\n    );\n    endss[i++] = ends;\n    offset = ends[ends.length - 1];\n  }\n  endss.length = i;\n  return endss;\n}\n","/**\n * @module ol/geom/flat/simplify\n */\n// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport {squaredDistance, squaredSegmentDistance} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array<number>} [opt_simplifiedFlatCoordinates] Simplified flat\n *     coordinates.\n * @return {Array<number>} Simplified line string.\n */\nexport function simplifyLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  highQuality,\n  opt_simplifiedFlatCoordinates\n) {\n  const simplifiedFlatCoordinates =\n    opt_simplifiedFlatCoordinates !== undefined\n      ? opt_simplifiedFlatCoordinates\n      : [];\n  if (!highQuality) {\n    end = radialDistance(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = douglasPeucker(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    squaredTolerance,\n    simplifiedFlatCoordinates,\n    0\n  );\n  return simplifiedFlatCoordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function douglasPeucker(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  const n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  /** @type {Array<number>} */\n  const markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array<number>} */\n  const stack = [offset, end - stride];\n  let index = 0;\n  while (stack.length > 0) {\n    const last = stack.pop();\n    const first = stack.pop();\n    let maxSquaredDistance = 0;\n    const x1 = flatCoordinates[first];\n    const y1 = flatCoordinates[first + 1];\n    const x2 = flatCoordinates[last];\n    const y2 = flatCoordinates[last + 1];\n    for (let i = first + stride; i < last; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (let i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = douglasPeucker(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = douglasPeuckerArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function radialDistance(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  // copy first point\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  let x2 = x1;\n  let y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\nexport function snap(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n}\n\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function quantize(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  // snap the first coordinate (P1)\n  let x1 = snap(flatCoordinates[offset], tolerance);\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  // add the first coordinate to the output\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n  let x2, y2;\n  do {\n    x2 = snap(flatCoordinates[offset], tolerance);\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    // snap the next coordinate (P3)\n    const x3 = snap(flatCoordinates[offset], tolerance);\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // skip P3 if it is equal to P2\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    // calculate the delta between P1 and P2\n    const dx1 = x2 - x1;\n    const dy1 = y2 - y1;\n    // calculate the delta between P3 and P1\n    const dx2 = x3 - x1;\n    const dy2 = y3 - y1;\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n    if (\n      dx1 * dy2 == dy1 * dx2 &&\n      ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\n      ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))\n    ) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  // add the last point (P2)\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function quantizeArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = quantize(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function quantizeMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = quantizeArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n","/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  const point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];\n  const point2 = [];\n  let ret;\n  for (; offset + stride < end; offset += stride) {\n    point2[0] = flatCoordinates[offset + stride];\n    point2[1] = flatCoordinates[offset + stride + 1];\n    ret = callback(point1, point2);\n    if (ret) {\n      return ret;\n    }\n    point1[0] = point2[0];\n    point1[1] = point2[1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/inflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [opt_coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */\nexport function inflateCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  opt_coordinates\n) {\n  const coordinates = opt_coordinates !== undefined ? opt_coordinates : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    coordinates[i++] = flatCoordinates.slice(j, j + stride);\n  }\n  coordinates.length = i;\n  return coordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [opt_coordinatess] Coordinatess.\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\n */\nexport function inflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  opt_coordinatess\n) {\n  const coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];\n  let i = 0;\n  for (let j = 0, jj = ends.length; j < jj; ++j) {\n    const end = ends[j];\n    coordinatess[i++] = inflateCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      coordinatess[i]\n    );\n    offset = end;\n  }\n  coordinatess.length = i;\n  return coordinatess;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [opt_coordinatesss]\n *     Coordinatesss.\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\n */\nexport function inflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  opt_coordinatesss\n) {\n  const coordinatesss =\n    opt_coordinatesss !== undefined ? opt_coordinatesss : [];\n  let i = 0;\n  for (let j = 0, jj = endss.length; j < jj; ++j) {\n    const ends = endss[j];\n    coordinatesss[i++] = inflateCoordinatesArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      coordinatesss[i]\n    );\n    offset = ends[ends.length - 1];\n  }\n  coordinatesss.length = i;\n  return coordinatesss;\n}\n","/**\n * @module ol/geom/flat/interpolate\n */\nimport {binarySearch} from '../../array.js';\nimport {lerp} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [opt_dest] Destination.\n * @param {number} [opt_dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  fraction,\n  opt_dest,\n  opt_dimension\n) {\n  let o, t;\n  const n = (end - offset) / stride;\n  if (n === 1) {\n    o = offset;\n  } else if (n === 2) {\n    o = offset;\n    t = fraction;\n  } else if (n !== 0) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    const cumulativeLengths = [0];\n    for (let i = offset + stride; i < end; i += stride) {\n      const x2 = flatCoordinates[i];\n      const y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    const target = fraction * length;\n    const index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      t =\n        (target - cumulativeLengths[-index - 2]) /\n        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      o = offset + (-index - 2) * stride;\n    } else {\n      o = offset + index * stride;\n    }\n  }\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  const dest = opt_dest ? opt_dest : new Array(dimension);\n  for (let i = 0; i < dimension; ++i) {\n    dest[i] =\n      o === undefined\n        ? NaN\n        : t === undefined\n        ? flatCoordinates[o + i]\n        : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringCoordinateAtM(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  m,\n  extrapolate\n) {\n  if (end == offset) {\n    return null;\n  }\n  let coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  let lo = offset / stride;\n  let hi = end / stride;\n  while (lo < hi) {\n    const mid = (lo + hi) >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  const m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\n  const t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (let i = 0; i < stride - 1; ++i) {\n    coordinate.push(\n      lerp(\n        flatCoordinates[(lo - 1) * stride + i],\n        flatCoordinates[lo * stride + i],\n        t\n      )\n    );\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringsCoordinateAtM(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  m,\n  extrapolate,\n  interpolate\n) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(\n      flatCoordinates,\n      offset,\n      ends[ends.length - 1],\n      stride,\n      m,\n      extrapolate\n    );\n  }\n  let coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        m,\n        false\n      );\n    }\n    offset = end;\n  }\n  return null;\n}\n","/**\n * @module ol/geom/flat/contains\n */\nimport {forEachCorner} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const outside = forEachCorner(\n    extent,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n      return !linearRingContainsXY(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        coordinate[0],\n        coordinate[1]\n      );\n    }\n  );\n  return !outside;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  x,\n  y\n) {\n  // https://geomalgorithms.com/a03-_inclusion.html\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\n  // This code may be freely used and modified for any purpose\n  // providing that this copyright notice is included with it.\n  // SoftSurfer makes no warranty for this code, and cannot be held\n  // liable for any real or imagined damage resulting from its use.\n  // Users of this code must verify correctness for their application.\n  let wn = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    if (y1 <= y) {\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n        wn++;\n      }\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n      wn--;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return wn !== 0;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  x,\n  y\n) {\n  if (ends.length === 0) {\n    return false;\n  }\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n    return false;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  x,\n  y\n) {\n  if (endss.length === 0) {\n    return false;\n  }\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {\n  containsExtent,\n  createEmpty,\n  extendFlatCoordinates,\n  intersects,\n  intersectsSegment,\n} from '../../extent.js';\nimport {forEach as forEachSegment} from './segments.js';\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const coordinatesExtent = extendFlatCoordinates(\n    createEmpty(),\n    flatCoordinates,\n    offset,\n    end,\n    stride\n  );\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    }\n  );\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsExtent(\n        flatCoordinates,\n        ends[i - 1],\n        ends[i],\n        stride,\n        extent\n      )\n    ) {\n      if (\n        !intersectsLineString(\n          flatCoordinates,\n          ends[i - 1],\n          ends[i],\n          stride,\n          extent\n        )\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/length\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  let length = 0;\n  for (let i = offset + stride; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    x1 = x2;\n    y1 = y2;\n  }\n  return length;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n  perimeter += Math.sqrt(dx * dx + dy * dy);\n  return perimeter;\n}\n","/**\n * @module ol/geom/LineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        opt_layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  clone() {\n    const lineString = new LineString(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    lineString.applyProperties(this);\n    return lineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      callback\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, opt_extrapolate) {\n    if (\n      this.layout != GeometryLayout.XYM &&\n      this.layout != GeometryLayout.XYZM\n    ) {\n      return null;\n    }\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      m,\n      extrapolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, opt_dest) {\n    return interpolatePoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      fraction,\n      opt_dest,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.LINE_STRING;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LineString;\n","/**\n * @module ol/geom/MultiLineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {douglasPeuckerArray} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {\n  interpolatePoint,\n  lineStringsCoordinateAtM,\n} from './flat/interpolate.js';\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `opt_layout` and `opt_ends` are also accepted.)\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<number>} [opt_ends] Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, opt_layout, opt_ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        opt_layout\n      );\n    } else if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = opt_ends;\n    } else {\n      let layout = this.getLayout();\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n  clone() {\n    const multiLineString = new MultiLineString(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [opt_interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {\n    if (\n      (this.layout != GeometryLayout.XYM &&\n        this.layout != GeometryLayout.XYZM) ||\n      this.flatCoordinates.length === 0\n    ) {\n      return null;\n    }\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      m,\n      extrapolate,\n      interpolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        0.5\n      );\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new MultiLineString(\n      simplifiedFlatCoordinates,\n      GeometryLayout.XY,\n      simplifiedEnds\n    );\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.MULTI_LINE_STRING;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default MultiLineString;\n","/**\n * @module ol/geom/Point\n */\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n    this.setCoordinates(coordinates, opt_layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.POINT;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n","/**\n * @module ol/geom/MultiPoint\n */\nimport GeometryType from './GeometryType.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        opt_layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x,\n        y,\n        flatCoordinates[i],\n        flatCoordinates[i + 1]\n      );\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates\n      ? 0\n      : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(\n      this.flatCoordinates.slice(\n        index * this.stride,\n        (index + 1) * this.stride\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.MULTI_POINT;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default MultiPoint;\n","/**\n * @module ol/geom/flat/area\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRing(flatCoordinates, offset, end, stride) {\n  let twiceArea = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    twiceArea += y1 * x2 - x1 * y2;\n    x1 = x2;\n    y1 = y2;\n  }\n  return twiceArea / 2;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRings(flatCoordinates, offset, ends, stride) {\n  let area = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    area += linearRing(flatCoordinates, offset, end, stride);\n    offset = end;\n  }\n  return area;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  let area = 0;\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    area += linearRings(flatCoordinates, offset, ends, stride);\n    offset = ends[ends.length - 1];\n  }\n  return area;\n}\n","/**\n * @module ol/geom/LinearRing\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        opt_layout\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.LINEAR_RING;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n","/**\n * @module ol/geom/flat/interiorpoint\n */\nimport {linearRingsContainsXY} from './contains.js';\nimport {numberSafeCompareFunction} from '../../array.js';\n\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointOfArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  flatCenters,\n  flatCentersOffset,\n  opt_dest\n) {\n  let i, ii, x, x1, x2, y1, y2;\n  const y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array<number>} */\n  const intersections = [];\n  // Calculate intersections with the horizontal line\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\n    const end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n  let pointX = NaN;\n  let maxSegmentLength = -Infinity;\n  intersections.sort(numberSafeCompareFunction);\n  x1 = intersections[0];\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    const segmentLength = Math.abs(x2 - x1);\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n    x1 = x2;\n  }\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n  if (opt_dest) {\n    opt_dest.push(pointX, y, maxSegmentLength);\n    return opt_dest;\n  } else {\n    return [pointX, y, maxSegmentLength];\n  }\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointsOfMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  flatCenters\n) {\n  let interiorPoints = [];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    interiorPoints = getInteriorPointOfArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      flatCenters,\n      2 * i,\n      interiorPoints\n    );\n    offset = ends[ends.length - 1];\n  }\n  return interiorPoints;\n}\n","/**\n * @module ol/geom/flat/reverse\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\nexport function coordinates(flatCoordinates, offset, end, stride) {\n  while (offset < end - stride) {\n    for (let i = 0; i < stride; ++i) {\n      const tmp = flatCoordinates[offset + i];\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n      flatCoordinates[end - stride + i] = tmp;\n    }\n    offset += stride;\n    end -= stride;\n  }\n}\n","/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  opt_right\n) {\n  const right = opt_right !== undefined ? opt_right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  opt_right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      !linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)\n    ) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  opt_right\n) {\n  const right = opt_right !== undefined ? opt_right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  opt_right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      opt_right\n    );\n  }\n  return offset;\n}\n","/**\n * @module ol/geom/Polygon\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `opt_layout` and `opt_ends` are also accepted.)\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<number>} [opt_ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, opt_layout, opt_ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = opt_ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        opt_layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(opt_right) {\n    let flatCoordinates;\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new Polygon(\n      simplifiedFlatCoordinates,\n      GeometryLayout.XY,\n      simplifiedEnds\n    );\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.POLYGON;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [opt_n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [opt_sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n  const n = opt_n ? opt_n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, opt_sphereRadius)\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [\n    flatCoordinates.length,\n  ]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [\n    flatCoordinates.length,\n  ]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [opt_sides] Number of sides of the polygon. Default is 32.\n * @param {number} [opt_angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, opt_sides, opt_angle) {\n  const sides = opt_sides ? opt_sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [opt_angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, opt_angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = opt_angle ? opt_angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n","/**\n * @module ol/geom/MultiPolygon\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {\n  assignClosestMultiArrayPoint,\n  multiArrayMaxSquaredDelta,\n} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateMultiCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointsOfMultiArray} from './flat/interiorpoint.js';\nimport {inflateMultiCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingMultiArray} from './flat/intersectsextent.js';\nimport {\n  linearRingssAreOriented,\n  orientLinearRingsArray,\n} from './flat/orient.js';\nimport {linearRingss as linearRingssArea} from './flat/area.js';\nimport {linearRingss as linearRingssCenter} from './flat/center.js';\nimport {linearRingssContainsXY} from './flat/contains.js';\nimport {quantizeMultiArray} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\nclass MultiPolygon extends SimpleGeometry {\n  /**\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<Array<number>>} [opt_endss] Array of ends for internal use with flat coordinates.\n   */\n  constructor(coordinates, opt_layout, opt_endss) {\n    super();\n\n    /**\n     * @type {Array<Array<number>>}\n     * @private\n     */\n    this.endss_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointsRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatInteriorPoints_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (!opt_endss && !Array.isArray(coordinates[0])) {\n      let layout = this.getLayout();\n      const polygons = /** @type {Array<Polygon>} */ (coordinates);\n      const flatCoordinates = [];\n      const endss = [];\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\n        const polygon = polygons[i];\n        if (i === 0) {\n          layout = polygon.getLayout();\n        }\n        const offset = flatCoordinates.length;\n        const ends = polygon.getEnds();\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] += offset;\n        }\n        extend(flatCoordinates, polygon.getFlatCoordinates());\n        endss.push(ends);\n      }\n      opt_layout = layout;\n      coordinates = flatCoordinates;\n      opt_endss = endss;\n    }\n    if (opt_layout !== undefined && opt_endss) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.endss_ = opt_endss;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (\n          coordinates\n        ),\n        opt_layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed polygon to this multipolygon.\n   * @param {Polygon} polygon Polygon.\n   * @api\n   */\n  appendPolygon(polygon) {\n    /** @type {Array<number>} */\n    let ends;\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\n      ends = polygon.getEnds().slice();\n      this.endss_.push();\n    } else {\n      const offset = this.flatCoordinates.length;\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\n      ends = polygon.getEnds().slice();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] += offset;\n      }\n    }\n    this.endss_.push(ends);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPolygon} Clone.\n   * @api\n   */\n  clone() {\n    const len = this.endss_.length;\n    const newEndss = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      newEndss[i] = this.endss_[i].slice();\n    }\n\n    const multiPolygon = new MultiPolygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      newEndss\n    );\n    multiPolygon.applyProperties(this);\n\n    return multiPolygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        multiArrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.endss_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestMultiArrayPoint(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingssContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingssArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n   * @api\n   */\n  getCoordinates(opt_right) {\n    let flatCoordinates;\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRingsArray(\n        flatCoordinates,\n        0,\n        this.endss_,\n        this.stride,\n        opt_right\n      );\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateMultiCoordinatesArray(\n      flatCoordinates,\n      0,\n      this.endss_,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<Array<number>>} Endss.\n   */\n  getEndss() {\n    return this.endss_;\n  }\n\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  getFlatInteriorPoints() {\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n      const flatCenters = linearRingssCenter(\n        this.flatCoordinates,\n        0,\n        this.endss_,\n        this.stride\n      );\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.endss_,\n        this.stride,\n        flatCenters\n      );\n      this.flatInteriorPointsRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoints() {\n    return new MultiPoint(\n      this.getFlatInteriorPoints().slice(),\n      GeometryLayout.XYM\n    );\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (\n        linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)\n      ) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(\n          this.orientedFlatCoordinates_,\n          0,\n          this.endss_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiPolygon} Simplified MultiPolygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEndss = [];\n    simplifiedFlatCoordinates.length = quantizeMultiArray(\n      this.flatCoordinates,\n      0,\n      this.endss_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEndss\n    );\n    return new MultiPolygon(\n      simplifiedFlatCoordinates,\n      GeometryLayout.XY,\n      simplifiedEndss\n    );\n  }\n\n  /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {Polygon} Polygon.\n   * @api\n   */\n  getPolygon(index) {\n    if (index < 0 || this.endss_.length <= index) {\n      return null;\n    }\n    let offset;\n    if (index === 0) {\n      offset = 0;\n    } else {\n      const prevEnds = this.endss_[index - 1];\n      offset = prevEnds[prevEnds.length - 1];\n    }\n    const ends = this.endss_[index].slice();\n    const end = ends[ends.length - 1];\n    if (offset !== 0) {\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] -= offset;\n      }\n    }\n    return new Polygon(\n      this.flatCoordinates.slice(offset, end),\n      this.layout,\n      ends\n    );\n  }\n\n  /**\n   * Return the polygons of this multipolygon.\n   * @return {Array<Polygon>} Polygons.\n   * @api\n   */\n  getPolygons() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const endss = this.endss_;\n    const polygons = [];\n    let offset = 0;\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      const ends = endss[i].slice();\n      const end = ends[ends.length - 1];\n      if (offset !== 0) {\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] -= offset;\n        }\n      }\n      const polygon = new Polygon(\n        flatCoordinates.slice(offset, end),\n        layout,\n        ends\n      );\n      polygons.push(polygon);\n      offset = end;\n    }\n    return polygons;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.MULTI_POLYGON;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingMultiArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 3);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const endss = deflateMultiCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.endss_\n    );\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      const lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length =\n        lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n    }\n    this.changed();\n  }\n}\n\nexport default MultiPolygon;\n","/**\n * @module ol/geom/flat/center\n */\nimport {createEmpty, createOrUpdateFromFlatCoordinates} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {Array<number>} Flat centers.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  const flatCenters = [];\n  let extent = createEmpty();\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    extent = createOrUpdateFromFlatCoordinates(\n      flatCoordinates,\n      offset,\n      ends[0],\n      stride\n    );\n    flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\n    offset = ends[ends.length - 1];\n  }\n  return flatCenters;\n}\n","/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assert} from '../asserts.js';\nimport {assign, isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\n    );\n\n    if (options.featureProjection) {\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null,\n      };\n    }\n\n    const geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (\n      this.extractGeometryName_ &&\n      'geometry_name' in geoJSONFeature !== undefined\n    ) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, opt_options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\n        object\n      );\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(\n          this.readFeatureFromObject(geoJSONFeatures[i], opt_options)\n        );\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n    return features;\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, opt_options) {\n    return readGeometry(object, opt_options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null,\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects,\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  let geometry;\n  switch (object['type']) {\n    case GeometryType.POINT: {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case GeometryType.LINE_STRING: {\n      geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */ (object)\n      );\n      break;\n    }\n    case GeometryType.POLYGON: {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case GeometryType.MULTI_POINT: {\n      geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */ (object)\n      );\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING: {\n      geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */ (object)\n      );\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */ (object)\n      );\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */ (object)\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object.type);\n    }\n  }\n  return transformGeometryWithOptions(geometry, false, opt_options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n      return readGeometry(geometry, opt_options);\n    }\n  );\n  return new GeometryCollection(geometries);\n}\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  geometry = transformGeometryWithOptions(geometry, true, opt_options);\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case GeometryType.POINT: {\n      geoJSON = writePointGeometry(\n        /** @type {Point} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.LINE_STRING: {\n      geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.POLYGON: {\n      geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.MULTI_POINT: {\n      geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING: {\n      geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.CIRCLE: {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: [],\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries,\n  };\n}\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\nexport default GeoJSON;\n","/**\n * @module ol/color\n */\nimport {assert} from './asserts.js';\nimport {clamp} from './math.js';\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\nconst HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\nconst NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return toString(color);\n  }\n}\n\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\nfunction fromNamed(color) {\n  const el = document.createElement('div');\n  el.style.color = color;\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    const rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport const fromString = (function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  const MAX_CACHE_SIZE = 1024;\n\n  /**\n   * @type {Object<string, Color>}\n   */\n  const cache = {};\n\n  /**\n   * @type {number}\n   */\n  let cacheSize = 0;\n\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      let color;\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          let i = 0;\n          for (const key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n      return color;\n    }\n  );\n})();\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return fromString(color);\n  }\n}\n\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\nfunction fromStringInternal_(s) {\n  let r, g, b, a, color;\n\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    const n = s.length - 1; // number of hex digits\n    let d; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    const hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.indexOf('rgb(') == 0) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n  return color;\n}\n\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  const a = color[3] === undefined ? 1 : color[3];\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n  return (\n    HEX_COLOR_RE_.test(s) || s.indexOf('rgba(') === 0 || s.indexOf('rgb(') === 0\n  );\n}\n","/**\n * @module ol/style/IconImageCache\n */\nimport {asString} from '../color.js';\n\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n */\nclass IconImageCache {\n  constructor() {\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxCacheSize_ = 32;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.cacheSize_ > this.maxCacheSize_;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  expire() {\n    if (this.canExpireCache()) {\n      let i = 0;\n      for (const key in this.cache_) {\n        const iconImage = this.cache_[key];\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */\n  get(src, crossOrigin, color) {\n    const key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  }\n\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */\n  set(src, crossOrigin, color, iconImage) {\n    const key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  }\n\n  /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */\n  setSize(maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  }\n}\n\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n  const colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n\nexport default IconImageCache;\n\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport const shared = new IconImageCache();\n","/**\n * @module ol/layer/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  OPACITY: 'opacity',\n  VISIBLE: 'visible',\n  EXTENT: 'extent',\n  Z_INDEX: 'zIndex',\n  MAX_RESOLUTION: 'maxResolution',\n  MIN_RESOLUTION: 'minResolution',\n  MAX_ZOOM: 'maxZoom',\n  MIN_ZOOM: 'minZoom',\n  SOURCE: 'source',\n};\n","/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {clamp} from '../math.js';\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      assign(properties, options.properties);\n    }\n\n    properties[LayerProperty.OPACITY] =\n      options.opacity !== undefined ? options.opacity : 1;\n    assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number\n\n    properties[LayerProperty.VISIBLE] =\n      options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n      options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n      options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] =\n      options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] =\n      options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.className_ =\n      properties.className !== undefined ? options.className : 'ol-layer';\n    delete properties.className;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n  }\n\n  /**\n   * @return {string} CSS class name.\n   */\n  getClassName() {\n    return this.className_;\n  }\n\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [opt_managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  getLayerState(opt_managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    const state =\n      this.state_ ||\n      /** @type {?} */ ({\n        layer: this,\n        managed: opt_managed === undefined ? true : opt_managed,\n      });\n    const zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.sourceState = this.getSourceState();\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n\n    return state;\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(opt_array) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(opt_states) {\n    return abstract();\n  }\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  getExtent() {\n    return /** @type {import(\"../extent.js\").Extent|undefined} */ (\n      this.get(LayerProperty.EXTENT)\n    );\n  }\n\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMaxResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMinResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum zoom level of the layer.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));\n  }\n\n  /**\n   * Return the maximum zoom level of the layer.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));\n  }\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  getOpacity() {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  getSourceState() {\n    return abstract();\n  }\n\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n  getVisible() {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  }\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  getZIndex() {\n    return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));\n  }\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMaxZoom(maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  }\n\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMinZoom(minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  }\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  setOpacity(opacity) {\n    assert(typeof opacity === 'number', 64); // Layer opacity must be a number\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default BaseLayer;\n","/**\n * @module ol/render/EventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered before a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#prerender\n   * @api\n   */\n  PRERENDER: 'prerender',\n\n  /**\n   * Triggered after a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered before layers are rendered.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */\n  PRECOMPOSE: 'precompose',\n\n  /**\n   * Triggered after all layers are rendered.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */\n  POSTCOMPOSE: 'postcompose',\n\n  /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */\n  RENDERCOMPLETE: 'rendercomplete',\n};\n\n/**\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\n */\n\n/**\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\n */\n","/**\n * @module ol/source/State\n */\n\n/**\n * @enum {string}\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\nexport default {\n  UNDEFINED: 'undefined',\n  LOADING: 'loading',\n  READY: 'ready',\n  ERROR: 'error',\n};\n","/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} SourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {import(\"../source/State.js\").default} sourceState SourceState.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is be added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link import(\"../PluggableMap.js\").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} SourceType\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../renderer/Layer.js\").default}\n     */\n    this.renderer_ = null;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(opt_array) {\n    const array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(opt_states) {\n    const states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this\n      );\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return new Promise((resolve) => resolve([]));\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        function (evt) {\n          const renderEvent =\n            /** @type {import(\"../render/Event.js\").default} */ (evt);\n          const layerStatesArray = renderEvent.frameState.layerStatesArray;\n          const layerState = this.getLayerState(false);\n          // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n          assert(\n            !layerStatesArray.some(function (arrayLayerState) {\n              return arrayLayerState.layer === layerState.layer;\n            }),\n            67\n          );\n          layerStatesArray.push(layerState);\n        },\n        this\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n","/**\n * @module ol/renderer/Map\n */\nimport Disposable from '../Disposable.js';\nimport {TRUE} from '../functions.js';\nimport {abstract} from '../util.js';\nimport {compose as composeTransform, makeInverse} from '../transform.js';\nimport {getWidth} from '../extent.js';\nimport {shared as iconImageCache} from '../style/IconImageCache.js';\nimport {inView} from '../layer/Layer.js';\nimport {wrapX} from '../coordinate.js';\n\n/**\n * @typedef HitMatch\n * @property {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"../layer/Layer.js\").default} layer Layer.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} distanceSq Squared distance.\n * @property {import(\"./vector.js\").FeatureCallback<T>} callback Callback.\n * @template T\n */\n\n/**\n * @abstract\n */\nclass MapRenderer extends Disposable {\n  /**\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  constructor(map) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n    this.map_ = map;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../render/EventType.js\").default} type Event type.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  dispatchRenderEvent(type, frameState) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n   * @protected\n   */\n  calculateMatrices2D(frameState) {\n    const viewState = frameState.viewState;\n    const coordinateToPixelTransform = frameState.coordinateToPixelTransform;\n    const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;\n\n    composeTransform(\n      coordinateToPixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / viewState.resolution,\n      -1 / viewState.resolution,\n      -viewState.rotation,\n      -viewState.center[0],\n      -viewState.center[1]\n    );\n\n    makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {boolean} checkWrapped Check for wrapped geometries.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    checkWrapped,\n    callback,\n    thisArg,\n    layerFilter,\n    thisArg2\n  ) {\n    let result;\n    const viewState = frameState.viewState;\n\n    /**\n     * @param {boolean} managed Managed layer.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {\n      return callback.call(thisArg, feature, managed ? layer : null, geometry);\n    }\n\n    const projection = viewState.projection;\n\n    const translatedCoordinate = wrapX(coordinate.slice(), projection);\n    const offsets = [[0, 0]];\n    if (projection.canWrapX() && checkWrapped) {\n      const projectionExtent = projection.getExtent();\n      const worldWidth = getWidth(projectionExtent);\n      offsets.push([-worldWidth, 0], [worldWidth, 0]);\n    }\n\n    const layerStates = frameState.layerStatesArray;\n    const numLayers = layerStates.length;\n\n    const matches = /** @type {Array<HitMatch<T>>} */ ([]);\n    const tmpCoord = [];\n    for (let i = 0; i < offsets.length; i++) {\n      for (let j = numLayers - 1; j >= 0; --j) {\n        const layerState = layerStates[j];\n        const layer = layerState.layer;\n        if (\n          layer.hasRenderer() &&\n          inView(layerState, viewState) &&\n          layerFilter.call(thisArg2, layer)\n        ) {\n          const layerRenderer = layer.getRenderer();\n          const source = layer.getSource();\n          if (layerRenderer && source) {\n            const coordinates = source.getWrapX()\n              ? translatedCoordinate\n              : coordinate;\n            const callback = forEachFeatureAtCoordinate.bind(\n              null,\n              layerState.managed\n            );\n            tmpCoord[0] = coordinates[0] + offsets[i][0];\n            tmpCoord[1] = coordinates[1] + offsets[i][1];\n            result = layerRenderer.forEachFeatureAtCoordinate(\n              tmpCoord,\n              frameState,\n              hitTolerance,\n              callback,\n              matches\n            );\n          }\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    if (matches.length === 0) {\n      return undefined;\n    }\n    const order = 1 / matches.length;\n    matches.forEach((m, i) => (m.distanceSq += i * order));\n    matches.sort((a, b) => a.distanceSq - b.distanceSq);\n    matches.some((m) => {\n      return (result = m.callback(m.feature, m.layer, m.geometry));\n    });\n    return result;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n   *     callback.\n   * @param {function(import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachLayerAtPixel(pixel, frameState, hitTolerance, callback, layerFilter) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {boolean} checkWrapped Check for wrapped geometries.\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.\n   * @return {boolean} Is there a feature at the given coordinate?\n   * @template U\n   */\n  hasFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    checkWrapped,\n    layerFilter,\n    thisArg\n  ) {\n    const hasFeature = this.forEachFeatureAtCoordinate(\n      coordinate,\n      frameState,\n      hitTolerance,\n      checkWrapped,\n      TRUE,\n      this,\n      layerFilter,\n      thisArg\n    );\n\n    return hasFeature !== undefined;\n  }\n\n  /**\n   * @return {import(\"../PluggableMap.js\").default} Map.\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Render.\n   * @abstract\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  renderFrame(frameState) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  scheduleExpireIconCache(frameState) {\n    if (iconImageCache.canExpireCache()) {\n      frameState.postRenderFunctions.push(expireIconCache);\n    }\n  }\n}\n\n/**\n * @param {import(\"../PluggableMap.js\").default} map Map.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n */\nfunction expireIconCache(map, frameState) {\n  iconImageCache.expire();\n}\n\nexport default MapRenderer;\n","/**\n * @module ol/render/Event\n */\n\nimport Event from '../events/Event.js';\n\nclass RenderEvent extends Event {\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [opt_inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n   * @param {?CanvasRenderingContext2D} [opt_context] Context.\n   */\n  constructor(type, opt_inversePixelTransform, opt_frameState, opt_context) {\n    super(type);\n\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n    this.inversePixelTransform = opt_inversePixelTransform;\n\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../PluggableMap.js\").FrameState|undefined}\n     * @api\n     */\n    this.frameState = opt_frameState;\n\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. Only available\n     * when a Canvas renderer is used, null otherwise.\n     * @type {CanvasRenderingContext2D|null|undefined}\n     * @api\n     */\n    this.context = opt_context;\n  }\n}\n\nexport default RenderEvent;\n","/**\n * @module ol/css\n */\n\n/**\n * @typedef {Object} FontParameters\n * @property {string} style Style.\n * @property {string} variant Variant.\n * @property {string} weight Weight.\n * @property {string} size Size.\n * @property {string} lineHeight LineHeight.\n * @property {string} family Family.\n * @property {Array<string>} families Families.\n */\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_HIDDEN = 'ol-hidden';\n\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_SELECTABLE = 'ol-selectable';\n\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_UNSELECTABLE = 'ol-unselectable';\n\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_UNSUPPORTED = 'ol-unsupported';\n\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_CONTROL = 'ol-control';\n\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_COLLAPSED = 'ol-collapsed';\n\n/**\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\n * @type {RegExp}\n */\nconst fontRegEx = new RegExp(\n  [\n    '^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)',\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)',\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',\n    '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?',\n    '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))',\n    '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))',\n    '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z]+?)\\\\s*$',\n  ].join(''),\n  'i'\n);\nconst fontRegExMatchIndex = [\n  'style',\n  'variant',\n  'weight',\n  'size',\n  'lineHeight',\n  'family',\n];\n\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} fontSpec The CSS font property.\n * @return {FontParameters} The font parameters (or null if the input spec is invalid).\n */\nexport const getFontParameters = function (fontSpec) {\n  const match = fontSpec.match(fontRegEx);\n  if (!match) {\n    return null;\n  }\n  const style = /** @type {FontParameters} */ ({\n    lineHeight: 'normal',\n    size: '1.2em',\n    style: 'normal',\n    weight: 'normal',\n    variant: 'normal',\n  });\n  for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {\n    const value = match[i + 1];\n    if (value !== undefined) {\n      style[fontRegExMatchIndex[i]] = value;\n    }\n  }\n  style.families = style.family.split(/,\\s?/);\n  return style;\n};\n","import {WORKER_OFFSCREEN_CANVAS} from './has.js';\n\n/**\n * @module ol/dom\n */\n\n//FIXME Move this function to the canvas module\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number} [opt_width] Canvas width.\n * @param {number} [opt_height] Canvas height.\n * @param {Array<HTMLCanvasElement>} [opt_canvasPool] Canvas pool to take existing canvas from.\n * @param {CanvasRenderingContext2DSettings} [opt_Context2DSettings] CanvasRenderingContext2DSettings\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(\n  opt_width,\n  opt_height,\n  opt_canvasPool,\n  opt_Context2DSettings\n) {\n  const canvas =\n    opt_canvasPool && opt_canvasPool.length\n      ? opt_canvasPool.shift()\n      : WORKER_OFFSCREEN_CANVAS\n      ? new OffscreenCanvas(opt_width || 300, opt_height || 300)\n      : document.createElement('canvas');\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n  return /** @type {CanvasRenderingContext2D} */ (\n    canvas.getContext('2d', opt_Context2DSettings)\n  );\n}\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  let width = element.offsetWidth;\n  const style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n}\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  let height = element.offsetHeight;\n  const style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  const parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @return {Node} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}\n\n/**\n * Transform the children of a parent node so they match the\n * provided list of children.  This function aims to efficiently\n * remove, add, and reorder child nodes while maintaining a simple\n * implementation (it is not guaranteed to minimize DOM operations).\n * @param {Node} node The parent node whose children need reworking.\n * @param {Array<Node>} children The desired children.\n */\nexport function replaceChildren(node, children) {\n  const oldChildren = node.childNodes;\n\n  for (let i = 0; true; ++i) {\n    const oldChild = oldChildren[i];\n    const newChild = children[i];\n\n    // check if our work is done\n    if (!oldChild && !newChild) {\n      break;\n    }\n\n    // check if children match\n    if (oldChild === newChild) {\n      continue;\n    }\n\n    // check if a new child needs to be added\n    if (!oldChild) {\n      node.appendChild(newChild);\n      continue;\n    }\n\n    // check if an old child needs to be removed\n    if (!newChild) {\n      node.removeChild(oldChild);\n      --i;\n      continue;\n    }\n\n    // reorder\n    node.insertBefore(newChild, oldChild);\n  }\n}\n","/**\n * @module ol/render/canvas\n */\nimport BaseObject from '../Object.js';\nimport EventTarget from '../events/Target.js';\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\nimport {clear} from '../obj.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getFontParameters} from '../css.js';\n\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\n */\n\n/**\n * @typedef Label\n * @property {number} width Width.\n * @property {number} height Height.\n * @property {Array<string|number>} contextInstructions ContextInstructions.\n */\n\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\n * @property {Array<number>} currentLineDash Current LineDash.\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\n * @property {number} [currentLineWidth] Current LineWidth.\n * @property {number} [currentMiterLimit] Current MiterLimit.\n * @property {number} [lastStroke] Last stroke.\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {CanvasLineCap} [lineCap] LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} [lineDashOffset] LineDashOffset.\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\n * @property {number} [lineWidth] LineWidth.\n * @property {number} [miterLimit] MiterLimit.\n */\n\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} lineWidth LineWidth.\n * @property {number} miterLimit MiterLimit.\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\n */\n\n/**\n * @typedef {Object} TextState\n * @property {string} font Font.\n * @property {string} [textAlign] TextAlign.\n * @property {string} textBaseline TextBaseline.\n * @property {string} [placement] Placement.\n * @property {number} [maxAngle] MaxAngle.\n * @property {boolean} [overflow] Overflow.\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\n * @property {import(\"../size.js\").Size} [scale] Scale.\n * @property {Array<number>} [padding] Padding.\n */\n\n/**\n * @typedef {Object} SerializableInstructions\n * @property {Array<*>} instructions The rendering instructions.\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\n * @property {Array<number>} coordinates The array of all coordinates.\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\n */\n\n/**\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\n */\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultFont = '10px sans-serif';\n\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport const defaultFillStyle = '#000';\n\n/**\n * @const\n * @type {CanvasLineCap}\n */\nexport const defaultLineCap = 'round';\n\n/**\n * @const\n * @type {Array<number>}\n */\nexport const defaultLineDash = [];\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultLineDashOffset = 0;\n\n/**\n * @const\n * @type {CanvasLineJoin}\n */\nexport const defaultLineJoin = 'round';\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultMiterLimit = 10;\n\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport const defaultStrokeStyle = '#000';\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultTextAlign = 'center';\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultTextBaseline = 'middle';\n\n/**\n * @const\n * @type {Array<number>}\n */\nexport const defaultPadding = [0, 0, 0, 0];\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultLineWidth = 1;\n\n/**\n * @type {BaseObject}\n */\nexport const checkedFonts = new BaseObject();\n\n/**\n * The label cache for text rendering. To change the default cache size of 2048\n * entries, use {@link module:ol/structs/LRUCache~LRUCache#setSize cache.setSize()}.\n * Deprecated - there is no label cache any more.\n * @type {?}\n * @api\n * @deprecated\n */\nexport const labelCache = new EventTarget();\nlabelCache.setSize = function () {\n  console.warn('labelCache is deprecated.'); //eslint-disable-line\n};\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet measureContext = null;\n\n/**\n * @type {string}\n */\nlet measureFont;\n\n/**\n * @type {!Object<string, number>}\n */\nexport const textHeights = {};\n\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\nexport const registerFont = (function () {\n  const retries = 100;\n  const size = '32px ';\n  const referenceFonts = ['monospace', 'serif'];\n  const len = referenceFonts.length;\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n  let interval, referenceWidth;\n\n  /**\n   * @param {string} fontStyle Css font-style\n   * @param {string} fontWeight Css font-weight\n   * @param {*} fontFamily Css font-family\n   * @return {boolean} Font with style and weight is available\n   */\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\n    let available = true;\n    for (let i = 0; i < len; ++i) {\n      const referenceFont = referenceFonts[i];\n      referenceWidth = measureTextWidth(\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\n        text\n      );\n      if (fontFamily != referenceFont) {\n        const width = measureTextWidth(\n          fontStyle +\n            ' ' +\n            fontWeight +\n            ' ' +\n            size +\n            fontFamily +\n            ',' +\n            referenceFont,\n          text\n        );\n        // If width and referenceWidth are the same, then the fallback was used\n        // instead of the font we wanted, so the font is not available.\n        available = available && width != referenceWidth;\n      }\n    }\n    if (available) {\n      return true;\n    }\n    return false;\n  }\n\n  function check() {\n    let done = true;\n    const fonts = checkedFonts.getKeys();\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\n      const font = fonts[i];\n      if (checkedFonts.get(font) < retries) {\n        if (isAvailable.apply(this, font.split('\\n'))) {\n          clear(textHeights);\n          // Make sure that loaded fonts are picked up by Safari\n          measureContext = null;\n          measureFont = undefined;\n          checkedFonts.set(font, retries);\n        } else {\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\n          done = false;\n        }\n      }\n    }\n    if (done) {\n      clearInterval(interval);\n      interval = undefined;\n    }\n  }\n\n  return function (fontSpec) {\n    const font = getFontParameters(fontSpec);\n    if (!font) {\n      return;\n    }\n    const families = font.families;\n    for (let i = 0, ii = families.length; i < ii; ++i) {\n      const family = families[i];\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\n      if (checkedFonts.get(key) === undefined) {\n        checkedFonts.set(key, retries, true);\n        if (!isAvailable(font.style, font.weight, family)) {\n          checkedFonts.set(key, 0, true);\n          if (interval === undefined) {\n            interval = setInterval(check, 32);\n          }\n        }\n      }\n    }\n  };\n})();\n\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\nexport const measureTextHeight = (function () {\n  /**\n   * @type {HTMLDivElement}\n   */\n  let measureElement;\n  return function (fontSpec) {\n    let height = textHeights[fontSpec];\n    if (height == undefined) {\n      if (WORKER_OFFSCREEN_CANVAS) {\n        const font = getFontParameters(fontSpec);\n        const metrics = measureText(fontSpec, 'Žg');\n        const lineHeight = isNaN(Number(font.lineHeight))\n          ? 1.2\n          : Number(font.lineHeight);\n        height =\n          lineHeight *\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n      } else {\n        if (!measureElement) {\n          measureElement = document.createElement('div');\n          measureElement.innerHTML = 'M';\n          measureElement.style.minHeight = '0';\n          measureElement.style.maxHeight = 'none';\n          measureElement.style.height = 'auto';\n          measureElement.style.padding = '0';\n          measureElement.style.border = 'none';\n          measureElement.style.position = 'absolute';\n          measureElement.style.display = 'block';\n          measureElement.style.left = '-99999px';\n        }\n        measureElement.style.font = fontSpec;\n        document.body.appendChild(measureElement);\n        height = measureElement.offsetHeight;\n        document.body.removeChild(measureElement);\n      }\n      textHeights[fontSpec] = height;\n    }\n    return height;\n  };\n})();\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {TextMetrics} Text metrics.\n */\nfunction measureText(font, text) {\n  if (!measureContext) {\n    measureContext = createCanvasContext2D(1, 1);\n  }\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n  return measureContext.measureText(text);\n}\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\nexport function measureTextWidth(font, text) {\n  return measureText(font, text).width;\n}\n\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @return {number} The text width.\n */\nexport function measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n  const width = measureTextWidth(font, text);\n  cache[text] = width;\n  return width;\n}\n\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array<string>} lines Lines to measure.\n * @param {Array<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\nexport function measureTextWidths(font, lines, widths) {\n  const numLines = lines.length;\n  let width = 0;\n  for (let i = 0; i < numLines; ++i) {\n    const currentWidth = measureTextWidth(font, lines[i]);\n    width = Math.max(width, currentWidth);\n    widths.push(currentWidth);\n  }\n  return width;\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {import(\"../size.js\").Size} scale Scale.\n */\nexport function drawImageOrLabel(\n  context,\n  transform,\n  opacity,\n  labelOrImage,\n  originX,\n  originY,\n  w,\n  h,\n  x,\n  y,\n  scale\n) {\n  context.save();\n\n  if (opacity !== 1) {\n    context.globalAlpha *= opacity;\n  }\n  if (transform) {\n    context.setTransform.apply(context, transform);\n  }\n\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\n    // label\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\n  } else if (scale[0] < 0 || scale[1] < 0) {\n    // flipped image\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      0,\n      0,\n      w,\n      h\n    );\n  } else {\n    // if image not flipped translate and scale can be avoided\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      x,\n      y,\n      w * scale[0],\n      h * scale[1]\n    );\n  }\n\n  context.restore();\n}\n\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */\nfunction executeLabelInstructions(label, context) {\n  const contextInstructions = label.contextInstructions;\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n    if (Array.isArray(contextInstructions[i + 1])) {\n      context[contextInstructions[i]].apply(\n        context,\n        contextInstructions[i + 1]\n      );\n    } else {\n      context[contextInstructions[i]] = contextInstructions[i + 1];\n    }\n  }\n}\n","/**\n * @module ol/renderer/Composite\n */\nimport MapRenderer from './Map.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RenderEvent from '../render/Event.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\nimport {CLASS_UNSELECTABLE} from '../css.js';\nimport {checkedFonts} from '../render/canvas.js';\nimport {inView} from '../layer/Layer.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {replaceChildren} from '../dom.js';\n\n/**\n * @classdesc\n * Canvas map renderer.\n * @api\n */\nclass CompositeMapRenderer extends MapRenderer {\n  /**\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  constructor(map) {\n    super(map);\n\n    /**\n     * @type {import(\"../events.js\").EventsKey}\n     */\n    this.fontChangeListenerKey_ = listen(\n      checkedFonts,\n      ObjectEventType.PROPERTYCHANGE,\n      map.redrawText.bind(map)\n    );\n\n    /**\n     * @private\n     * @type {HTMLDivElement}\n     */\n    this.element_ = document.createElement('div');\n    const style = this.element_.style;\n    style.position = 'absolute';\n    style.width = '100%';\n    style.height = '100%';\n    style.zIndex = '0';\n\n    this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';\n\n    const container = map.getViewport();\n    container.insertBefore(this.element_, container.firstChild || null);\n\n    /**\n     * @private\n     * @type {Array<HTMLElement>}\n     */\n    this.children_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\n   * @param {import(\"../render/EventType.js\").default} type Event type.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  dispatchRenderEvent(type, frameState) {\n    const map = this.getMap();\n    if (map.hasListener(type)) {\n      const event = new RenderEvent(type, undefined, frameState);\n      map.dispatchEvent(event);\n    }\n  }\n\n  disposeInternal() {\n    unlistenByKey(this.fontChangeListenerKey_);\n    this.element_.parentNode.removeChild(this.element_);\n    super.disposeInternal();\n  }\n\n  /**\n   * Render.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  renderFrame(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element_.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    this.calculateMatrices2D(frameState);\n    this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);\n\n    const layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {\n      return a.zIndex - b.zIndex;\n    });\n    const viewState = frameState.viewState;\n\n    this.children_.length = 0;\n    /**\n     * @type {Array<import(\"../layer/BaseVector.js\").default>}\n     */\n    const declutterLayers = [];\n    let previousElement = null;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      frameState.layerIndex = i;\n      if (\n        !inView(layerState, viewState) ||\n        (layerState.sourceState != SourceState.READY &&\n          layerState.sourceState != SourceState.UNDEFINED)\n      ) {\n        continue;\n      }\n\n      const layer = layerState.layer;\n      const element = layer.render(frameState, previousElement);\n      if (!element) {\n        continue;\n      }\n      if (element !== previousElement) {\n        this.children_.push(element);\n        previousElement = element;\n      }\n      if ('getDeclutter' in layer) {\n        declutterLayers.push(\n          /** @type {import(\"../layer/BaseVector.js\").default} */ (layer)\n        );\n      }\n    }\n    for (let i = declutterLayers.length - 1; i >= 0; --i) {\n      declutterLayers[i].renderDeclutter(frameState);\n    }\n\n    replaceChildren(this.element_, this.children_);\n\n    this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);\n\n    if (!this.renderedVisible_) {\n      this.element_.style.display = '';\n      this.renderedVisible_ = true;\n    }\n\n    this.scheduleExpireIconCache(frameState);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n   *     callback.\n   * @param {function(import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachLayerAtPixel(pixel, frameState, hitTolerance, callback, layerFilter) {\n    const viewState = frameState.viewState;\n\n    const layerStates = frameState.layerStatesArray;\n    const numLayers = layerStates.length;\n\n    for (let i = numLayers - 1; i >= 0; --i) {\n      const layerState = layerStates[i];\n      const layer = layerState.layer;\n      if (\n        layer.hasRenderer() &&\n        inView(layerState, viewState) &&\n        layerFilter(layer)\n      ) {\n        const layerRenderer = layer.getRenderer();\n        const data = layerRenderer.getDataAtPixel(\n          pixel,\n          frameState,\n          hitTolerance\n        );\n        if (data) {\n          const result = callback(layer, data);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n}\n\nexport default CompositeMapRenderer;\n","/**\n * @module ol/CollectionEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when an item is added to the collection.\n   * @event module:ol/Collection.CollectionEvent#add\n   * @api\n   */\n  ADD: 'add',\n  /**\n   * Triggered when an item is removed from the collection.\n   * @event module:ol/Collection.CollectionEvent#remove\n   * @api\n   */\n  REMOVE: 'remove',\n};\n","/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n */\nexport class CollectionEvent extends Event {\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {*} [opt_element] Element.\n   * @param {number} [opt_index] The index of the added or removed element.\n   */\n  constructor(type, opt_element, opt_index) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {*}\n     * @api\n     */\n    this.element = opt_element;\n\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n    this.index = opt_index;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n  /**\n   * @param {Array<T>} [opt_array] Array.\n   * @param {Options} [opt_options] Collection options.\n   */\n  constructor(opt_array, opt_options) {\n    super();\n\n    /***\n     * @type {CollectionOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {CollectionOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {CollectionOnSignature<void>}\n     */\n    this.un;\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = opt_array ? opt_array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.ADD, elem, index)\n    );\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n    );\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index < n) {\n      if (this.unique_) {\n        this.assertUnique_(elem, index);\n      }\n      const prev = this.array_[index];\n      this.array_[index] = elem;\n      this.dispatchEvent(\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      );\n      this.dispatchEvent(\n        new CollectionEvent(CollectionEventType.ADD, elem, index)\n      );\n    } else {\n      for (let j = n; j < index; ++j) {\n        this.insertAt(j, undefined);\n      }\n      this.insertAt(index, elem);\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [opt_except] Optional index to ignore.\n   */\n  assertUnique_(elem, opt_except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== opt_except) {\n        throw new AssertionError(58);\n      }\n    }\n  }\n}\n\nexport default Collection;\n","/**\n * @module ol/layer/Group\n */\nimport BaseLayer from './Base.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport SourceState from '../source/State.js';\nimport {assert} from '../asserts.js';\nimport {assign, clear} from '../obj.js';\nimport {getIntersection} from '../extent.js';\nimport {getUid} from '../util.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<import(\"./Base.js\").default>|import(\"../Collection.js\").default<import(\"./Base.js\").default>} [layers] Child layers.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LAYERS: 'layers',\n};\n\n/**\n * @classdesc\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\n *\n * A generic `change` event is triggered when the group/Collection changes.\n *\n * @api\n */\nclass LayerGroup extends BaseLayer {\n  /**\n   * @param {Options} [opt_options] Layer options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n    const baseOptions = /** @type {Options} */ (assign({}, options));\n    delete baseOptions.layers;\n\n    let layers = options.layers;\n\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.layersListenerKeys_ = [];\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.listenerKeys_ = {};\n\n    this.addChangeListener(Property.LAYERS, this.handleLayersChanged_);\n\n    if (layers) {\n      if (Array.isArray(layers)) {\n        layers = new Collection(layers.slice(), {unique: true});\n      } else {\n        assert(typeof (/** @type {?} */ (layers).getArray) === 'function', 43); // Expected `layers` to be an array or a `Collection`\n      }\n    } else {\n      layers = new Collection(undefined, {unique: true});\n    }\n\n    this.setLayers(layers);\n  }\n\n  /**\n   * @private\n   */\n  handleLayerChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleLayersChanged_() {\n    this.layersListenerKeys_.forEach(unlistenByKey);\n    this.layersListenerKeys_.length = 0;\n\n    const layers = this.getLayers();\n    this.layersListenerKeys_.push(\n      listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),\n      listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this)\n    );\n\n    for (const id in this.listenerKeys_) {\n      this.listenerKeys_[id].forEach(unlistenByKey);\n    }\n    clear(this.listenerKeys_);\n\n    const layersArray = layers.getArray();\n    for (let i = 0, ii = layersArray.length; i < ii; i++) {\n      const layer = layersArray[i];\n      this.listenerKeys_[getUid(layer)] = [\n        listen(\n          layer,\n          ObjectEventType.PROPERTYCHANGE,\n          this.handleLayerChange_,\n          this\n        ),\n        listen(layer, EventType.CHANGE, this.handleLayerChange_, this),\n      ];\n    }\n\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} collectionEvent CollectionEvent.\n   * @private\n   */\n  handleLayersAdd_(collectionEvent) {\n    const layer = /** @type {import(\"./Base.js\").default} */ (\n      collectionEvent.element\n    );\n    this.listenerKeys_[getUid(layer)] = [\n      listen(\n        layer,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleLayerChange_,\n        this\n      ),\n      listen(layer, EventType.CHANGE, this.handleLayerChange_, this),\n    ];\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} collectionEvent CollectionEvent.\n   * @private\n   */\n  handleLayersRemove_(collectionEvent) {\n    const layer = /** @type {import(\"./Base.js\").default} */ (\n      collectionEvent.element\n    );\n    const key = getUid(layer);\n    this.listenerKeys_[key].forEach(unlistenByKey);\n    delete this.listenerKeys_[key];\n    this.changed();\n  }\n\n  /**\n   * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @return {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} Collection of\n   *   {@link module:ol/layer/Base layers} that are part of this group.\n   * @observable\n   * @api\n   */\n  getLayers() {\n    return /** @type {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} */ (\n      this.get(Property.LAYERS)\n    );\n  }\n\n  /**\n   * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @param {!import(\"../Collection.js\").default<import(\"./Base.js\").default>} layers Collection of\n   *   {@link module:ol/layer/Base layers} that are part of this group.\n   * @observable\n   * @api\n   */\n  setLayers(layers) {\n    this.set(Property.LAYERS, layers);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(opt_array) {\n    const array = opt_array !== undefined ? opt_array : [];\n    this.getLayers().forEach(function (layer) {\n      layer.getLayersArray(array);\n    });\n    return array;\n  }\n\n  /**\n   * Get the layer states list and use this groups z-index as the default\n   * for all layers in this and nested groups, if it is unset at this point.\n   * If opt_states is not provided and this group's z-index is undefined\n   * 0 is used a the default z-index.\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list\n   * of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(opt_states) {\n    const states = opt_states !== undefined ? opt_states : [];\n    const pos = states.length;\n\n    this.getLayers().forEach(function (layer) {\n      layer.getLayerStatesArray(states);\n    });\n\n    const ownLayerState = this.getLayerState();\n    let defaultZIndex = ownLayerState.zIndex;\n    if (!opt_states && ownLayerState.zIndex === undefined) {\n      defaultZIndex = 0;\n    }\n    for (let i = pos, ii = states.length; i < ii; i++) {\n      const layerState = states[i];\n      layerState.opacity *= ownLayerState.opacity;\n      layerState.visible = layerState.visible && ownLayerState.visible;\n      layerState.maxResolution = Math.min(\n        layerState.maxResolution,\n        ownLayerState.maxResolution\n      );\n      layerState.minResolution = Math.max(\n        layerState.minResolution,\n        ownLayerState.minResolution\n      );\n      layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\n      layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\n      if (ownLayerState.extent !== undefined) {\n        if (layerState.extent !== undefined) {\n          layerState.extent = getIntersection(\n            layerState.extent,\n            ownLayerState.extent\n          );\n        } else {\n          layerState.extent = ownLayerState.extent;\n        }\n      }\n      if (layerState.zIndex === undefined) {\n        layerState.zIndex = defaultZIndex;\n      }\n    }\n\n    return states;\n  }\n\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  getSourceState() {\n    return SourceState.READY;\n  }\n}\n\nexport default LayerGroup;\n","/**\n * @module ol/MapEvent\n */\nimport Event from './events/Event.js';\n\n/**\n * @classdesc\n * Events emitted as map events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.\n */\nclass MapEvent extends Event {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {?import(\"./PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n   */\n  constructor(type, map, opt_frameState) {\n    super(type);\n\n    /**\n     * The map where the event occurred.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @api\n     */\n    this.map = map;\n\n    /**\n     * The frame state at the time of the event.\n     * @type {?import(\"./PluggableMap.js\").FrameState}\n     * @api\n     */\n    this.frameState = opt_frameState !== undefined ? opt_frameState : null;\n  }\n}\n\nexport default MapEvent;\n","/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nclass MapBrowserEvent extends MapEvent {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [opt_dragging] Is the map currently being dragged?\n   * @param {?import(\"./PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n   */\n  constructor(type, map, originalEvent, opt_dragging, opt_frameState) {\n    super(type, map, opt_frameState);\n\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    this.originalEvent = originalEvent;\n\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n    this.pixel_ = null;\n\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.coordinate_ = null;\n\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n  }\n\n  /**\n   * The map pixel relative to the viewport corresponding to the original event.\n   * @type {import(\"./pixel.js\").Pixel}\n   * @api\n   */\n  get pixel() {\n    if (!this.pixel_) {\n      this.pixel_ = this.map.getEventPixel(this.originalEvent);\n    }\n    return this.pixel_;\n  }\n  set pixel(pixel) {\n    this.pixel_ = pixel;\n  }\n\n  /**\n   * The coordinate corresponding to the original browser event.  This will be in the user\n   * projection if one is set.  Otherwise it will be in the view projection.\n   * @type {import(\"./coordinate.js\").Coordinate}\n   * @api\n   */\n  get coordinate() {\n    if (!this.coordinate_) {\n      this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n    }\n    return this.coordinate_;\n  }\n  set coordinate(coordinate) {\n    this.coordinate_ = coordinate;\n  }\n\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n  preventDefault() {\n    super.preventDefault();\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).preventDefault();\n    }\n  }\n\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n  stopPropagation() {\n    super.stopPropagation();\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).stopPropagation();\n    }\n  }\n}\n\nexport default MapBrowserEvent;\n","/**\n * @module ol/MapBrowserEventType\n */\nimport EventType from './events/EventType.js';\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n  /**\n   * A true single click with no dragging and no double click. Note that this\n   * event is delayed by 250 ms to ensure that it is not a double click.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\n   * @api\n   */\n  SINGLECLICK: 'singleclick',\n\n  /**\n   * A click with no dragging. A double click will fire two of this.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\n   * @api\n   */\n  CLICK: EventType.CLICK,\n\n  /**\n   * A true double click, with no dragging.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\n   * @api\n   */\n  DBLCLICK: EventType.DBLCLICK,\n\n  /**\n   * Triggered when a pointer is dragged.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\n   * @api\n   */\n  POINTERDRAG: 'pointerdrag',\n\n  /**\n   * Triggered when a pointer is moved. Note that on touch devices this is\n   * triggered when the map is panned, so is not the same as mousemove.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\n   * @api\n   */\n  POINTERMOVE: 'pointermove',\n\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel',\n};\n\n/***\n * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types\n */\n","/**\n * @module ol/pointer/EventType\n */\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n  POINTERMOVE: 'pointermove',\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel',\n};\n","/**\n * @module ol/MapBrowserEventHandler\n */\n\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport {PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {VOID} from './functions.js';\nimport {listen, unlistenByKey} from './events.js';\n\nclass MapBrowserEventHandler extends Target {\n  /**\n   * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */\n  constructor(map, moveTolerance) {\n    super(map);\n\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @private\n     */\n    this.map_ = map;\n\n    /**\n     * @type {any}\n     * @private\n     */\n    this.clickTimeoutId_;\n\n    /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */\n    this.emulateClicks_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_ = false;\n\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent}\n     * @private\n     */\n    this.down_ = null;\n\n    const element = this.map_.getViewport();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.activePointers_ = 0;\n\n    /**\n     * @type {!Object<number, boolean>}\n     * @private\n     */\n    this.trackedTouches_ = {};\n\n    this.element_ = element;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.pointerdownListenerKey_ = listen(\n      element,\n      PointerEventType.POINTERDOWN,\n      this.handlePointerDown_,\n      this\n    );\n\n    /**\n     * @type {PointerEvent}\n     * @private\n     */\n    this.originalPointerMoveEvent_;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.relayedListenerKey_ = listen(\n      element,\n      PointerEventType.POINTERMOVE,\n      this.relayEvent_,\n      this\n    );\n\n    /**\n     * @private\n     */\n    this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);\n\n    this.element_.addEventListener(\n      EventType.TOUCHMOVE,\n      this.boundHandleTouchMove_,\n      PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n    );\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  emulateClick_(pointerEvent) {\n    let newEvent = new MapBrowserEvent(\n      MapBrowserEventType.CLICK,\n      this.map_,\n      pointerEvent\n    );\n    this.dispatchEvent(newEvent);\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserEvent(\n        MapBrowserEventType.DBLCLICK,\n        this.map_,\n        pointerEvent\n      );\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(\n        /** @this {MapBrowserEventHandler} */\n        function () {\n          this.clickTimeoutId_ = undefined;\n          const newEvent = new MapBrowserEvent(\n            MapBrowserEventType.SINGLECLICK,\n            this.map_,\n            pointerEvent\n          );\n          this.dispatchEvent(newEvent);\n        }.bind(this),\n        250\n      );\n    }\n  }\n\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  updateActivePointers_(pointerEvent) {\n    const event = pointerEvent;\n\n    if (\n      event.type == MapBrowserEventType.POINTERUP ||\n      event.type == MapBrowserEventType.POINTERCANCEL\n    ) {\n      delete this.trackedTouches_[event.pointerId];\n    } else if (event.type == MapBrowserEventType.POINTERDOWN) {\n      this.trackedTouches_[event.pointerId] = true;\n    }\n    this.activePointers_ = Object.keys(this.trackedTouches_).length;\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerUp_(pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    const newEvent = new MapBrowserEvent(\n      MapBrowserEventType.POINTERUP,\n      this.map_,\n      pointerEvent\n    );\n    this.dispatchEvent(newEvent);\n\n    // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.preventDefault().\n    if (\n      this.emulateClicks_ &&\n      !newEvent.defaultPrevented &&\n      !this.dragging_ &&\n      this.isMouseActionButton_(pointerEvent)\n    ) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_ === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n  isMouseActionButton_(pointerEvent) {\n    return pointerEvent.button === 0;\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerDown_(pointerEvent) {\n    this.emulateClicks_ = this.activePointers_ === 0;\n    this.updateActivePointers_(pointerEvent);\n    const newEvent = new MapBrowserEvent(\n      MapBrowserEventType.POINTERDOWN,\n      this.map_,\n      pointerEvent\n    );\n    this.dispatchEvent(newEvent);\n\n    // Store a copy of the down event\n    this.down_ = /** @type {PointerEvent} */ ({});\n    for (const property in pointerEvent) {\n      const value = pointerEvent[property];\n      this.down_[property] = typeof value === 'function' ? VOID : value;\n    }\n\n    if (this.dragListenerKeys_.length === 0) {\n      const doc = this.map_.getOwnerDocument();\n      this.dragListenerKeys_.push(\n        listen(\n          doc,\n          MapBrowserEventType.POINTERMOVE,\n          this.handlePointerMove_,\n          this\n        ),\n        listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n        /* Note that the listener for `pointercancel is set up on\n         * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n         * the `pointerup` and `pointermove` listeners.\n         *\n         * The reason for this is the following: `TouchSource.vacuumTouches_()`\n         * issues `pointercancel` events, when there was no `touchend` for a\n         * `touchstart`. Now, let's say a first `touchstart` is registered on\n         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n         * But `documentPointerEventHandler_` doesn't know about the first\n         * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n         * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n         * only registered there.\n         */\n        listen(\n          this.element_,\n          MapBrowserEventType.POINTERCANCEL,\n          this.handlePointerUp_,\n          this\n        )\n      );\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n        this.dragListenerKeys_.push(\n          listen(\n            this.element_.getRootNode(),\n            MapBrowserEventType.POINTERUP,\n            this.handlePointerUp_,\n            this\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerMove_(pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.dragging_ = true;\n      const newEvent = new MapBrowserEvent(\n        MapBrowserEventType.POINTERDRAG,\n        this.map_,\n        pointerEvent,\n        this.dragging_\n      );\n      this.dispatchEvent(newEvent);\n    }\n  }\n\n  /**\n   * Wrap and relay a pointer event.  Note that this requires that the type\n   * string for the MapBrowserEvent matches the PointerEvent type.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  relayEvent_(pointerEvent) {\n    this.originalPointerMoveEvent_ = pointerEvent;\n    const dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(\n      new MapBrowserEvent(pointerEvent.type, this.map_, pointerEvent, dragging)\n    );\n  }\n\n  /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */\n  handleTouchMove_(event) {\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n    // may not be initialized yet when we get here on a platform without native pointer events.\n    const originalEvent = this.originalPointerMoveEvent_;\n    if (\n      (!originalEvent || originalEvent.defaultPrevented) &&\n      (typeof event.cancelable !== 'boolean' || event.cancelable === true)\n    ) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n  isMoving_(pointerEvent) {\n    return (\n      this.dragging_ ||\n      Math.abs(pointerEvent.clientX - this.down_.clientX) >\n        this.moveTolerance_ ||\n      Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n    this.element_.removeEventListener(\n      EventType.TOUCHMOVE,\n      this.boundHandleTouchMove_\n    );\n\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n\n    this.element_ = null;\n    super.disposeInternal();\n  }\n}\n\nexport default MapBrowserEventHandler;\n","/**\n * @module ol/MapEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered after a map frame is rendered.\n   * @event module:ol/MapEvent~MapEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered when the map starts moving.\n   * @event module:ol/MapEvent~MapEvent#movestart\n   * @api\n   */\n  MOVESTART: 'movestart',\n\n  /**\n   * Triggered after the map is moved.\n   * @event module:ol/MapEvent~MapEvent#moveend\n   * @api\n   */\n  MOVEEND: 'moveend',\n};\n\n/***\n * @typedef {'postrender'|'movestart'|'moveend'} Types\n */\n","/**\n * @module ol/MapProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LAYERGROUP: 'layergroup',\n  SIZE: 'size',\n  TARGET: 'target',\n  VIEW: 'view',\n};\n","/**\n * @module ol/structs/PriorityQueue\n */\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\n\n/**\n * @type {number}\n */\nexport const DROP = Infinity;\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nclass PriorityQueue {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  constructor(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n    const priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.elements_.length;\n  }\n\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  getParentIndex_(index) {\n    return (index - 1) >> 1;\n  }\n\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  heapify_() {\n    let i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n\n    while (index < count >> 1) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n\n      const smallerChildIndex =\n        rIndex < count && priorities[rIndex] < priorities[lIndex]\n          ? rIndex\n          : lIndex;\n\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n}\n\nexport default PriorityQueue;\n","/**\n * @module ol/TileState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  /**\n   * Indicates that tile loading failed\n   * @type {number}\n   */\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, {DROP} from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\n\nclass TileQueue extends PriorityQueue {\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  constructor(tilePriorityFunction, tileChangeCallback) {\n    super(\n      /**\n       * @param {Array} element Element.\n       * @return {number} Priority.\n       */\n      function (element) {\n        return tilePriorityFunction.apply(null, element);\n      },\n      /**\n       * @param {Array} element Element.\n       * @return {string} Key.\n       */\n      function (element) {\n        return /** @type {import(\"./Tile.js\").default} */ (element[0]).getKey();\n      }\n    );\n\n    /** @private */\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n  }\n\n  /**\n   * @param {Array} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    const added = super.enqueue(element);\n    if (added) {\n      const tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  }\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  getTilesLoading() {\n    return this.tilesLoading_;\n  }\n\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n    const state = tile.getState();\n    if (\n      state === TileState.LOADED ||\n      state === TileState.ERROR ||\n      state === TileState.EMPTY\n    ) {\n      tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      const tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  }\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    let newLoads = 0;\n    let state, tile, tileKey;\n    while (\n      this.tilesLoading_ < maxTotalLoading &&\n      newLoads < maxNewLoads &&\n      this.getCount() > 0\n    ) {\n      tile = /** @type {import(\"./Tile.js\").default} */ (this.dequeue()[0]);\n      tileKey = tile.getKey();\n      state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  }\n}\n\nexport default TileQueue;\n\n/**\n * @param {import('./PluggableMap.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(\n  frameState,\n  tile,\n  tileSourceKey,\n  tileCenter,\n  tileResolution\n) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  const center = frameState.viewState.center;\n  const deltaX = tileCenter[0] - center[0];\n  const deltaY = tileCenter[1] - center[1];\n  return (\n    65536 * Math.log(tileResolution) +\n    Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution\n  );\n}\n","/**\n * @module ol/ViewHint\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  ANIMATING: 0,\n  INTERACTING: 1,\n};\n","/**\n * @module ol/ViewProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  CENTER: 'center',\n  RESOLUTION: 'resolution',\n  ROTATION: 'rotation',\n};\n","/**\n * @module ol/centerconstraint\n */\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [opt_centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, opt_isMoving, opt_centerShift) {\n      if (center) {\n        const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n        const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n        const shiftX = opt_centerShift ? opt_centerShift[0] : 0;\n        const shiftY = opt_centerShift ? opt_centerShift[1] : 0;\n        let minX = extent[0] + viewWidth / 2 + shiftX;\n        let maxX = extent[2] - viewWidth / 2 + shiftX;\n        let minY = extent[1] + viewHeight / 2 + shiftY;\n        let maxY = extent[3] - viewHeight / 2 + shiftY;\n\n        // note: when zooming out of bounds, min and max values for x and y may\n        // end up inverted (min > max); this has to be accounted for\n        if (minX > maxX) {\n          minX = (maxX + minX) / 2;\n          maxX = minX;\n        }\n        if (minY > maxY) {\n          minY = (maxY + minY) / 2;\n          maxY = minY;\n        }\n\n        let x = clamp(center[0], minX, maxX);\n        let y = clamp(center[1], minY, maxY);\n        const ratio = 30 * resolution;\n\n        // during an interaction, allow some overscroll\n        if (opt_isMoving && smooth) {\n          x +=\n            -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n            ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n          y +=\n            -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n            ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n        }\n\n        return [x, y];\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}\n","/**\n * @module ol/resolutionconstraint\n */\nimport {clamp} from './math.js';\nimport {getHeight, getWidth} from './extent.js';\nimport {linearFindNearest} from './array.js';\n\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */\n\n/**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */\nfunction getViewportClampedResolution(\n  resolution,\n  maxExtent,\n  viewportSize,\n  showFullExtent\n) {\n  const xResolution = getWidth(maxExtent) / viewportSize[0];\n  const yResolution = getHeight(maxExtent) / viewportSize[1];\n\n  if (showFullExtent) {\n    return Math.min(resolution, Math.max(xResolution, yResolution));\n  }\n  return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n  let result = Math.min(resolution, maxResolution);\n  const ratio = 50;\n\n  result *=\n    Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +\n    1;\n  if (minResolution) {\n    result = Math.max(result, minResolution);\n    result /=\n      Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /\n        ratio +\n      1;\n  }\n  return clamp(result, minResolution / 2, maxResolution * 2);\n}\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(\n  resolutions,\n  opt_smooth,\n  opt_maxExtent,\n  opt_showFullExtent\n) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, opt_isMoving) {\n      if (resolution !== undefined) {\n        const maxResolution = resolutions[0];\n        const minResolution = resolutions[resolutions.length - 1];\n        const cappedMaxRes = opt_maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              opt_maxExtent,\n              size,\n              opt_showFullExtent\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (opt_isMoving) {\n          const smooth = opt_smooth !== undefined ? opt_smooth : true;\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution\n          );\n        }\n\n        const capped = Math.min(cappedMaxRes, resolution);\n        const z = Math.floor(linearFindNearest(resolutions, capped, direction));\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\n          return resolutions[z + 1];\n        }\n        return resolutions[z];\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number} [opt_minResolution] Minimum resolution.\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(\n  power,\n  maxResolution,\n  opt_minResolution,\n  opt_smooth,\n  opt_maxExtent,\n  opt_showFullExtent\n) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, opt_isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = opt_maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              opt_maxExtent,\n              size,\n              opt_showFullExtent\n            )\n          : maxResolution;\n        const minResolution =\n          opt_minResolution !== undefined ? opt_minResolution : 0;\n\n        // during interacting or animating, allow intermediary values\n        if (opt_isMoving) {\n          const smooth = opt_smooth !== undefined ? opt_smooth : true;\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution\n          );\n        }\n\n        const tolerance = 1e-9;\n        const minZoomLevel = Math.ceil(\n          Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance\n        );\n        const offset = -direction * (0.5 - tolerance) + 0.5;\n        const capped = Math.min(cappedMaxRes, resolution);\n        const cappedZoomLevel = Math.floor(\n          Math.log(maxResolution / capped) / Math.log(power) + offset\n        );\n        const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n        const newResolution = maxResolution / Math.pow(power, zoomLevel);\n        return clamp(newResolution, minResolution, cappedMaxRes);\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createMinMaxResolution(\n  maxResolution,\n  minResolution,\n  opt_smooth,\n  opt_maxExtent,\n  opt_showFullExtent\n) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, opt_isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = opt_maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              opt_maxExtent,\n              size,\n              opt_showFullExtent\n            )\n          : maxResolution;\n        const smooth = opt_smooth !== undefined ? opt_smooth : true;\n\n        if (!smooth || !opt_isMoving) {\n          return clamp(resolution, minResolution, cappedMaxRes);\n        }\n        return getSmoothClampedResolution(\n          resolution,\n          cappedMaxRes,\n          minResolution\n        );\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n","/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = (2 * Math.PI) / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n      if (opt_isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {number} [opt_tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(opt_tolerance) {\n  const tolerance = opt_tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n      if (opt_isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        if (Math.abs(rotation) <= tolerance) {\n          return 0;\n        } else {\n          return rotation;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n","/**\n * @module ol/easing\n */\n\n/**\n * Start slow and speed up.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeIn(t) {\n  return Math.pow(t, 3);\n}\n\n/**\n * Start fast and slow down.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeOut(t) {\n  return 1 - easeIn(1 - t);\n}\n\n/**\n * Start slow, speed up, and then slow down again.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function inAndOut(t) {\n  return 3 * t * t - 2 * t * t * t;\n}\n\n/**\n * Maintain a constant speed over time.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function linear(t) {\n  return t;\n}\n\n/**\n * Start slow, speed up, and at the very end slow down again.  This has the\n * same general behavior as {@link module:ol/easing.inAndOut}, but the final\n * slowdown is delayed.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function upAndDown(t) {\n  if (t < 0.5) {\n    return inAndOut(2 * t);\n  } else {\n    return 1 - inAndOut(2 * (t - 0.5));\n  }\n}\n","/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport GeometryType from './geom/GeometryType.js';\nimport Units from './proj/Units.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {\n  METERS_PER_UNIT,\n  createProjection,\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from './proj.js';\nimport {VOID} from './functions.js';\nimport {\n  add as addCoordinate,\n  equals as coordinatesEqual,\n  rotate as rotateCoordinate,\n} from './coordinate.js';\nimport {assert} from './asserts.js';\nimport {assign} from './obj.js';\nimport {none as centerNone, createExtent} from './centerconstraint.js';\nimport {clamp, modulo} from './math.js';\nimport {createMinMaxResolution} from './resolutionconstraint.js';\nimport {\n  createSnapToN,\n  createSnapToZero,\n  disable,\n  none as rotationNone,\n} from './rotationconstraint.js';\nimport {\n  createSnapToPower,\n  createSnapToResolutions,\n} from './resolutionconstraint.js';\nimport {easeOut} from './easing.js';\nimport {equals} from './coordinate.js';\nimport {\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n  isEmpty,\n} from './extent.js';\nimport {inAndOut} from './easing.js';\nimport {linearFindNearest} from './array.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `opt_anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions} [opt_options] View options.\n   */\n  constructor(opt_options) {\n    super();\n\n    /***\n     * @type {ViewOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    this.un;\n\n    const options = assign({}, opt_options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = {};\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n    this.padding_ = options.padding;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint,\n    };\n\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(\n      options.center !== undefined ? options.center : null\n    );\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n\n    this.setProperties(properties);\n\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n  }\n\n  /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */\n  get padding() {\n    return this.padding_;\n  }\n  set padding(padding) {\n    let oldPadding = this.padding_;\n    this.padding_ = padding;\n    const center = this.getCenter();\n    if (center) {\n      const newPadding = padding || [0, 0, 0, 0];\n      oldPadding = oldPadding || [0, 0, 0, 0];\n      const resolution = this.getResolution();\n      const offsetX =\n        (resolution / 2) *\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n      const offsetY =\n        (resolution / 2) *\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n    }\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = assign({}, this.options_);\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = assign({}, options);\n        options.center = fromUserCoordinate(\n          options.center,\n          this.getProjection()\n        );\n      }\n      if (options.anchor) {\n        options = assign({}, options);\n        options.anchor = fromUserCoordinate(\n          options.anchor,\n          this.getProjection()\n        );\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (\n      animationCount > 1 &&\n      typeof arguments[animationCount - 1] === 'function'\n    ) {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (let i = 0; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback,\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta =\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction =\n          animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution =\n            progress === 1\n              ? animation.targetResolution\n              : animation.sourceResolution +\n                progress *\n                  (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(\n              resolution,\n              0,\n              size,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterZoom(\n              constrainedResolution,\n              animation.anchor\n            );\n          }\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (\n          animation.sourceRotation !== undefined &&\n          animation.targetRotation !== undefined\n        ) {\n          const rotation =\n            progress === 1\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                Math.PI\n              : animation.sourceRotation +\n                progress *\n                  (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(\n              rotation,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterRotate(\n              constrainedRotation,\n              animation.anchor\n            );\n          }\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(\n        this.updateAnimations_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x =\n        anchor[0] -\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n      const y =\n        anchor[1] -\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(opt_rotation) {\n    const size = this.viewportSize_;\n    if (opt_rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [\n        Math.abs(w * Math.cos(opt_rotation)) +\n          Math.abs(h * Math.sin(opt_rotation)),\n        Math.abs(w * Math.sin(opt_rotation)) +\n          Math.abs(h * Math.cos(opt_rotation)),\n      ];\n    } else {\n      return size;\n    }\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [opt_size] Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(opt_size) {\n    this.viewportSize_ = Array.isArray(opt_size)\n      ? opt_size.slice()\n      : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(ViewProperty.CENTER)\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.options_.constrainResolution;\n  }\n\n  /**\n   * @param {Array<number>} [opt_hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(opt_size) {\n    const extent = this.calculateExtentInternal(opt_size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(opt_size) {\n    const size = opt_size || this.getViewportSizeMinusPadding_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    assert(center, 1); // The view center is not defined\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.minResolution_)\n    );\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, opt_size) {\n    return this.getResolutionForExtentInternal(\n      fromUserExtent(extent, this.getProjection()),\n      opt_size\n    );\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, opt_size) {\n    const size = opt_size || this.getViewportSizeMinusPadding_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [opt_power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(opt_power) {\n    const power = opt_power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [opt_power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(opt_power) {\n    const logPower = Math.log(opt_power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n  getViewportSizeMinusPadding_(opt_rotation) {\n    let size = this.getViewportSize_(opt_rotation);\n    const padding = this.padding_;\n    if (padding) {\n      size = [\n        size[0] - padding[1] - padding[3],\n        size[1] - padding[0] - padding[2],\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const projection = this.getProjection();\n    const resolution = /** @type {number} */ (this.getResolution());\n    const rotation = this.getRotation();\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    const padding = this.padding_;\n    if (padding) {\n      const reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(\n        center,\n        this.getViewportSize_(),\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n    }\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      rotation: rotation,\n      zoom: this.getZoom(),\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n      const baseLevel = clamp(\n        Math.floor(zoom),\n        0,\n        this.resolutions_.length - 2\n      );\n      const zoomFactor =\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return (\n        this.resolutions_[baseLevel] /\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\n      );\n    } else {\n      return (\n        this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\n      );\n    }\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [opt_options] Options.\n   * @api\n   */\n  fit(geometryOrExtent, opt_options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(\n      Array.isArray(geometryOrExtent) ||\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\n          'function',\n      24\n    ); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      const extent = fromUserExtent(\n        geometryOrExtent.getExtent(),\n        this.getProjection()\n      );\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n          geometryOrExtent\n            .clone()\n            .transform(userProjection, this.getProjection())\n        );\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, opt_options);\n  }\n\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n  rotatedExtentForGeometry(geometry) {\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(rotation);\n    const sinAngle = Math.sin(-rotation);\n    const coords = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [opt_options] Options.\n   */\n  fitInternal(geometry, opt_options) {\n    const options = opt_options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n    const padding =\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n      size[0] - padding[1] - padding[3],\n      size[1] - padding[0] - padding[2],\n    ]);\n    resolution = isNaN(resolution)\n      ? minResolution\n      : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    const rotation = this.getRotation();\n    const sinAngle = Math.sin(rotation);\n    const cosAngle = Math.cos(rotation);\n    const centerRot = getCenter(rotatedExtent);\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal(\n        {\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing,\n        },\n        callback\n      );\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(\n      fromUserCoordinate(coordinate, this.getProjection()),\n      size,\n      position\n    );\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    this.setCenterInternal(\n      calculateCenterOn(\n        coordinate,\n        size,\n        position,\n        this.getResolution(),\n        this.getRotation()\n      )\n    );\n  }\n\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n  calculateCenterShift(center, resolution, rotation, size) {\n    let centerShift;\n    const padding = this.padding_;\n    if (padding && center) {\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      const shiftedCenter = calculateCenterOn(\n        center,\n        size,\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n      centerShift = [\n        center[0] - shiftedCenter[0],\n        center[1] - shiftedCenter[1],\n      ];\n    }\n    return centerShift;\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, opt_anchor) {\n    const anchor =\n      opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, opt_anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_ * ratio,\n      0,\n      size,\n      isMoving\n    );\n\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, opt_anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n   * @api\n   */\n  adjustRotation(delta, opt_anchor) {\n    if (opt_anchor) {\n      opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, opt_anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n   */\n  adjustRotationInternal(delta, opt_anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_ + delta,\n      isMoving\n    );\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [opt_doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [opt_forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(opt_doNotCancelAnims, opt_forceMoving) {\n    const isMoving =\n      this.getAnimating() || this.getInteracting() || opt_forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_,\n      isMoving\n    );\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      0,\n      size,\n      isMoving\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      isMoving,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n    }\n    if (\n      !this.get(ViewProperty.CENTER) ||\n      !equals(this.get(ViewProperty.CENTER), newCenter)\n    ) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !opt_doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [opt_duration] The animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n  resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor) {\n    const duration = opt_duration !== undefined ? opt_duration : 200;\n    const direction = opt_resolutionDirection || 0;\n\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      direction,\n      size\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      false,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    const anchor =\n      opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (\n      this.getResolution() !== newResolution ||\n      this.getRotation() !== newRotation ||\n      !this.getCenterInternal() ||\n      !equals(this.getCenterInternal(), newCenter)\n    ) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor,\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [opt_duration] Animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n  endInteraction(opt_duration, opt_resolutionDirection, opt_anchor) {\n    const anchor =\n      opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [opt_duration] Animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n  endInteractionInternal(opt_duration, opt_resolutionDirection, opt_anchor) {\n    this.setHint(ViewHint.INTERACTING, -1);\n\n    this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [opt_targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, opt_targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(\n      targetCenter,\n      opt_targetResolution || this.getResolution(),\n      size\n    );\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, opt_direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(\n      this.getConstrainedResolution(targetRes, opt_direction)\n    );\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, opt_direction) {\n    const direction = opt_direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth =\n      options.smoothExtentConstraint !== undefined\n        ? options.smoothExtentConstraint\n        : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom =\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom =\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor =\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  const multiWorld =\n    options.multiWorld !== undefined ? options.multiWorld : false;\n\n  const smooth =\n    options.smoothResolutionConstraint !== undefined\n      ? options.smoothResolutionConstraint\n      : true;\n\n  const showFullExtent =\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution =\n      resolutions[maxZoom] !== undefined\n        ? resolutions[maxZoom]\n        : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(\n        resolutions,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent\n      ? // use an extent that can fit the whole world if need be\n        (360 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit()\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\n\n    const defaultMaxResolution =\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution =\n      defaultMaxResolution /\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom =\n      minZoom +\n      Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor)\n      );\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(\n        zoomFactor,\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor,\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation =\n    options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  const cosAngle = Math.cos(-rotation);\n  let sinAngle = Math.sin(-rotation);\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  const centerX = rotX * cosAngle - rotY * sinAngle;\n  const centerY = rotY * cosAngle + rotX * sinAngle;\n\n  return [centerX, centerY];\n}\n\nexport default View;\n","/**\n * @module ol/tilegrid/common\n */\n\n/**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */\nexport const DEFAULT_MAX_ZOOM = 42;\n\n/**\n * Default tile size.\n * @type {number}\n */\nexport const DEFAULT_TILE_SIZE = 256;\n","/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = (size[0] * ratio + 0.5) | 0;\n  opt_size[1] = (size[1] * ratio + 0.5) | 0;\n  return opt_size;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = size;\n      opt_size[1] = size;\n    }\n    return opt_size;\n  }\n}\n","/**\n * @module ol/PluggableMap\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport EventType from './events/EventType.js';\nimport LayerGroup from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, {getTilePriority} from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {TRUE} from './functions.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n} from './transform.js';\nimport {assert} from './asserts.js';\nimport {\n  clone,\n  createOrUpdateEmpty,\n  equals,\n  getForViewAndSize,\n  isEmpty,\n} from './extent.js';\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\nimport {hasArea} from './size.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {removeNode} from './dom.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n */\n\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} PluggableMapOnSignature\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @api\n */\nclass PluggableMap extends BaseObject {\n  /**\n   * @param {MapOptions} options Map options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {PluggableMapOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {PluggableMapOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {PluggableMapOnSignature<void>}\n     */\n    this.un;\n\n    const optionsInternal = createOptionsInternal(options);\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ =\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ =\n      options.pixelRatio !== undefined\n        ? options.pixelRatio\n        : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = /** @this {PluggableMap} */ function () {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_(Date.now());\n    }.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className =\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.keyHandlerKeys_ = null;\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || new Collection();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions = optionsInternal.interactions || new Collection();\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default}\n     * @private\n     */\n    this.renderer_ = null;\n\n    /**\n     * @type {undefined|function(Event): void}\n     * @private\n     */\n    this.handleResize_;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this)\n    );\n\n    this.addChangeListener(\n      MapProperty.LAYERGROUP,\n      this.handleLayerGroupChanged_\n    );\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       * @this {PluggableMap}\n       */\n      function (control) {\n        control.setMap(this);\n      }.bind(this)\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       * @this {PluggableMap}\n       */\n      function (interaction) {\n        interaction.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n\n    this.overlays_.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        this.addOverlayInternal_(\n          /** @type {import(\"./Overlay.js\").default} */ (event.element)\n        );\n      }.bind(this)\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        const overlay = /** @type {import(\"./Overlay.js\").default} */ (\n          event.element\n        );\n        const id = overlay.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }.bind(this)\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n  createRenderer() {\n    throw new Error('Use a map type that has a createRenderer method');\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteraction()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature feature} or\n   *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    const hitTolerance =\n      opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n    const layerFilter =\n      opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    const checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      callback,\n      null,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, opt_options) {\n    const features = [];\n    this.forEachFeatureAtPixel(\n      pixel,\n      function (feature) {\n        features.push(feature);\n      },\n      opt_options\n    );\n    return features;\n  }\n\n  /**\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   *\n   * Note: this may give false positives unless the map layers have had different `className`\n   * properties assigned to them.\n   *\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions} [opt_options] Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  forEachLayerAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    const options = opt_options || {};\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(\n      pixel,\n      this.frameState_,\n      hitTolerance,\n      callback,\n      layerFilter\n    );\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  hasFeatureAtPixel(pixel, opt_options) {\n    if (!this.frameState_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    const layerFilter =\n      opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    const hitTolerance =\n      opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n    const checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewportPosition = this.viewport_.getBoundingClientRect();\n    const eventPosition =\n      //FIXME Are we really calling this with a TouchEvent anywhere?\n      'changedTouches' in event\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\n        : /** @type {MouseEvent} */ (event);\n\n    return [\n      eventPosition.clientX - viewportPosition.left,\n      eventPosition.clientY - viewportPosition.top,\n    ];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */ (\n      this.get(MapProperty.TARGET)\n    );\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    const target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string'\n        ? document.getElementById(target)\n        : target;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(\n      this.getCoordinateFromPixelInternal(pixel),\n      this.getView().getProjection()\n    );\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.pixelToCoordinateTransform,\n        pixel.slice()\n      );\n    }\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  getLoading() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layer = layerStatesArray[i].layer;\n      const source = /** @type {import(\"./layer/Layer.js\").default} */ (\n        layer\n      ).getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(\n      coordinate,\n      this.getView().getProjection()\n    );\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.coordinateToPixelTransform,\n        coordinate.slice(0, 2)\n      );\n    }\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return /** @type {import(\"./size.js\").Size|undefined} */ (\n      this.get(MapProperty.SIZE)\n    );\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(\n      this.frameState_,\n      tile,\n      tileSourceKey,\n      tileCenter,\n      tileResolution\n    );\n  }\n\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [opt_type] Type.\n   */\n  handleBrowserEvent(browserEvent, opt_type) {\n    const type = opt_type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */ (\n      mapBrowserEvent.originalEvent\n    );\n    const eventType = originalEvent.type;\n    if (\n      eventType === PointerEventType.POINTERDOWN ||\n      eventType === EventType.WHEEL ||\n      eventType === EventType.KEYDOWN\n    ) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode\n        ? this.viewport_.getRootNode()\n        : doc;\n      const target = /** @type {Node} */ (originalEvent.target);\n      if (\n        // Abort if the target is a child of the container for elements whose events are not meant\n        // to be handled by map interactions.\n        this.overlayContainerStopEvent_.contains(target) ||\n        // Abort if the event target is a child of the container that is no longer in the page.\n        // It's possible for the target to no longer be in the page if it has been removed in an\n        // event listener, this might happen in a Control that recreates it's content based on\n        // user interaction either manually or via a render in something like https://reactjs.org/\n        !(rootNode === doc ? doc.documentElement : rootNode).contains(target)\n      ) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (\n          interaction.getMap() !== this ||\n          !interaction.getActive() ||\n          !this.getTargetElement()\n        ) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (\n      frameState &&\n      this.hasListener(RenderEventType.RENDERCOMPLETE) &&\n      !frameState.animate &&\n      !this.tileQueue_.getTilesLoading() &&\n      !this.getLoading()\n    ) {\n      this.renderer_.dispatchRenderEvent(\n        RenderEventType.RENDERCOMPLETE,\n        frameState\n      );\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    let targetElement;\n    if (this.getTarget()) {\n      targetElement = this.getTargetElement();\n    }\n\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.keyHandlerKeys_[i]);\n      }\n      this.keyHandlerKeys_ = null;\n      this.viewport_.removeEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_\n      );\n      this.viewport_.removeEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_\n      );\n      if (this.handleResize_ !== undefined) {\n        removeEventListener(EventType.RESIZE, this.handleResize_, false);\n        this.handleResize_ = undefined;\n      }\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\n        this,\n        this.moveTolerance_\n      );\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(\n          MapBrowserEventType[key],\n          this.handleMapBrowserEvent.bind(this)\n        );\n      }\n      this.viewport_.addEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_,\n        false\n      );\n      this.viewport_.addEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_,\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n      );\n\n      const keyboardEventTarget = !this.keyboardEventTarget_\n        ? targetElement\n        : this.keyboardEventTarget_;\n      this.keyHandlerKeys_ = [\n        listen(\n          keyboardEventTarget,\n          EventType.KEYDOWN,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(\n          keyboardEventTarget,\n          EventType.KEYPRESS,\n          this.handleBrowserEvent,\n          this\n        ),\n      ];\n\n      if (!this.handleResize_) {\n        this.handleResize_ = this.updateSize.bind(this);\n        window.addEventListener(EventType.RESIZE, this.handleResize_, false);\n      }\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n\n      this.viewPropertyListenerKey_ = listen(\n        view,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n      this.viewChangeListenerKey_ = listen(\n        view,\n        EventType.CHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n        listen(layerGroup, EventType.CHANGE, this.render, this),\n      ];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(\n        this.frameState_ ? this.frameState_.viewHints : undefined\n      );\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(\n          viewState.center,\n          viewState.resolution,\n          viewState.rotation,\n          size\n        ),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n      };\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(\n        this.postRenderFunctions_,\n        frameState.postRenderFunctions\n      );\n\n      if (previousFrameState) {\n        const moveStart =\n          !this.previousExtent_ ||\n          (!isEmpty(this.previousExtent_) &&\n            !equals(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState)\n          );\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle =\n        this.previousExtent_ &&\n        !frameState.viewHints[ViewHint.ANIMATING] &&\n        !frameState.viewHints[ViewHint.INTERACTING] &&\n        !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(\n          new MapEvent(MapEventType.MOVEEND, this, frameState)\n        );\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View} view The view that controls this map.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    this.set(MapProperty.VIEW, view);\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n\n    let size = undefined;\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width =\n        targetElement.offsetWidth -\n        parseFloat(computedStyle['borderLeftWidth']) -\n        parseFloat(computedStyle['paddingLeft']) -\n        parseFloat(computedStyle['paddingRight']) -\n        parseFloat(computedStyle['borderRightWidth']);\n      const height =\n        targetElement.offsetHeight -\n        parseFloat(computedStyle['borderTopWidth']) -\n        parseFloat(computedStyle['paddingTop']) -\n        parseFloat(computedStyle['paddingBottom']) -\n        parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (!hasArea(size)) {\n          // eslint-disable-next-line\n          console.warn(\n            \"No map visible because the map container's width or height are 0.\"\n          );\n        }\n      }\n    }\n\n    this.setSize(size);\n    this.updateViewportSize_();\n  }\n\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  updateViewportSize_() {\n    const view = this.getView();\n    if (view) {\n      let size = undefined;\n      const computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [\n          parseInt(computedStyle.width, 10),\n          parseInt(computedStyle.height, 10),\n        ];\n      }\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget =\n      typeof options.keyboardEventTarget === 'string'\n        ? document.getElementById(options.keyboardEventTarget)\n        : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n\n  const layerGroup =\n    options.layers &&\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\n      ? /** @type {LayerGroup} */ (options.layers)\n      : new LayerGroup({layers: /** @type {Collection} */ (options.layers)});\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] =\n    options.view !== undefined ? options.view : new View();\n\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\n        47\n      ); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = /** @type {Collection} */ (options.controls);\n    }\n  }\n\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\n          'function',\n        48\n      ); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = /** @type {Collection} */ (options.interactions);\n    }\n  }\n\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\n        49\n      ); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values,\n  };\n}\nexport default PluggableMap;\n","/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport {VOID} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {removeNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    removeNode(this.element);\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../PluggableMap.js\").default} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (this.map_) {\n      const target = this.target_\n        ? this.target_\n        : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== VOID) {\n        this.listenerKeys.push(\n          listen(map, MapEventType.POSTRENDER, this.render, this)\n        );\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ =\n      typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\n\nexport default Control;\n","/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {equals} from '../array.js';\nimport {inView} from '../layer/Layer.js';\nimport {removeChildren, replaceNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nclass Attribution extends Control {\n  /**\n   * @param {Options} [opt_options] Attribution options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.userCollapsed_ = this.collapsed_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-attribution';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n\n    const expandClassName =\n      options.expandClassName !== undefined\n        ? options.expandClassName\n        : className + '-expand';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n\n    const collapseClassName =\n      options.collapseClassName !== undefined\n        ? options.collapseClassName\n        : className + '-collpase';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n      this.collapseLabel_.className = collapseClassName;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n      this.label_.className = expandClassName;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.toggleButton_ = document.createElement('button');\n    this.toggleButton_.setAttribute('type', 'button');\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    this.toggleButton_.title = tipLabel;\n    this.toggleButton_.appendChild(activeLabel);\n\n    this.toggleButton_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.toggleButton_);\n    element.appendChild(this.ulElement_);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    const lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    const visibleAttributions = [];\n\n    let collapsible = true;\n    const layerStatesArray = frameState.layerStatesArray;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n\n      const source = /** @type {import(\"../layer/Layer.js\").default} */ (\n        layerState.layer\n      ).getSource();\n      if (!source) {\n        continue;\n      }\n\n      const attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n\n      const attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n\n      collapsible =\n        collapsible && source.getAttributionsCollapsible() !== false;\n\n      if (Array.isArray(attributions)) {\n        for (let j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n    return visibleAttributions;\n  }\n\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const attributions = this.collectSourceAttributions_(frameState);\n\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  }\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    this.userCollapsed_ = collapsed;\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  }\n}\n\nexport default Attribution;\n","/**\n * @module ol/control/Rotate\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_CONTROL, CLASS_HIDDEN, CLASS_UNSELECTABLE} from '../css.js';\nimport {easeOut} from '../easing.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-rotate'] CSS class name.\n * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.\n * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {boolean} [autoHide=true] Hide the control when rotation is 0.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control should\n * be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {function():void} [resetNorth] Function called when the control is clicked.\n * This will override the default `resetNorth`.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A button control to reset rotation to 0.\n * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css\n * selector is added to the button when the rotation is 0.\n *\n * @api\n */\nclass Rotate extends Control {\n  /**\n   * @param {Options} [opt_options] Rotate options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-rotate';\n\n    const label = options.label !== undefined ? options.label : '\\u21E7';\n\n    const compassClassName =\n      options.compassClassName !== undefined\n        ? options.compassClassName\n        : 'ol-compass';\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.label_ = null;\n\n    if (typeof label === 'string') {\n      this.label_ = document.createElement('span');\n      this.label_.className = compassClassName;\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n      this.label_.classList.add(compassClassName);\n    }\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';\n\n    const button = document.createElement('button');\n    button.className = className + '-reset';\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(this.label_);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n\n    this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = undefined;\n\n    if (this.autoHide_) {\n      this.element.classList.add(CLASS_HIDDEN);\n    }\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    if (this.callResetNorth_ !== undefined) {\n      this.callResetNorth_();\n    } else {\n      this.resetNorth_();\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetNorth_() {\n    const map = this.getMap();\n    const view = map.getView();\n    if (!view) {\n      // the map does not have a view, so we can't act\n      // upon it\n      return;\n    }\n    const rotation = view.getRotation();\n    if (rotation !== undefined) {\n      if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {\n        view.animate({\n          rotation: 0,\n          duration: this.duration_,\n          easing: easeOut,\n        });\n      } else {\n        view.setRotation(0);\n      }\n    }\n  }\n\n  /**\n   * Update the rotate control element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      return;\n    }\n    const rotation = frameState.viewState.rotation;\n    if (rotation != this.rotation_) {\n      const transform = 'rotate(' + rotation + 'rad)';\n      if (this.autoHide_) {\n        const contains = this.element.classList.contains(CLASS_HIDDEN);\n        if (!contains && rotation === 0) {\n          this.element.classList.add(CLASS_HIDDEN);\n        } else if (contains && rotation !== 0) {\n          this.element.classList.remove(CLASS_HIDDEN);\n        }\n      }\n      this.label_.style.transform = transform;\n    }\n    this.rotation_ = rotation;\n  }\n}\n\nexport default Rotate;\n","/**\n * @module ol/control/Zoom\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {easeOut} from '../easing.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {string} [className='ol-zoom'] CSS class name.\n * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.\n * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.\n * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in\n * button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.\n * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.\n * @property {number} [delta=1] The zoom delta applied on each click.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control with 2 buttons, one for zoom in and one for zoom out.\n * This control is one of the default controls of a map. To style this control\n * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.\n *\n * @api\n */\nclass Zoom extends Control {\n  /**\n   * @param {Options} [opt_options] Zoom options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoom';\n\n    const delta = options.delta !== undefined ? options.delta : 1;\n\n    const zoomInClassName =\n      options.zoomInClassName !== undefined\n        ? options.zoomInClassName\n        : className + '-in';\n\n    const zoomOutClassName =\n      options.zoomOutClassName !== undefined\n        ? options.zoomOutClassName\n        : className + '-out';\n\n    const zoomInLabel =\n      options.zoomInLabel !== undefined ? options.zoomInLabel : '+';\n    const zoomOutLabel =\n      options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\\u2212';\n\n    const zoomInTipLabel =\n      options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';\n    const zoomOutTipLabel =\n      options.zoomOutTipLabel !== undefined\n        ? options.zoomOutTipLabel\n        : 'Zoom out';\n\n    const inElement = document.createElement('button');\n    inElement.className = zoomInClassName;\n    inElement.setAttribute('type', 'button');\n    inElement.title = zoomInTipLabel;\n    inElement.appendChild(\n      typeof zoomInLabel === 'string'\n        ? document.createTextNode(zoomInLabel)\n        : zoomInLabel\n    );\n\n    inElement.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this, delta),\n      false\n    );\n\n    const outElement = document.createElement('button');\n    outElement.className = zoomOutClassName;\n    outElement.setAttribute('type', 'button');\n    outElement.title = zoomOutTipLabel;\n    outElement.appendChild(\n      typeof zoomOutLabel === 'string'\n        ? document.createTextNode(zoomOutLabel)\n        : zoomOutLabel\n    );\n\n    outElement.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this, -delta),\n      false\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(inElement);\n    element.appendChild(outElement);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * @param {number} delta Zoom delta.\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(delta, event) {\n    event.preventDefault();\n    this.zoomByDelta_(delta);\n  }\n\n  /**\n   * @param {number} delta Zoom delta.\n   * @private\n   */\n  zoomByDelta_(delta) {\n    const map = this.getMap();\n    const view = map.getView();\n    if (!view) {\n      // the map does not have a view, so we can't act\n      // upon it\n      return;\n    }\n    const currentZoom = view.getZoom();\n    if (currentZoom !== undefined) {\n      const newZoom = view.getConstrainedZoom(currentZoom + delta);\n      if (this.duration_ > 0) {\n        if (view.getAnimating()) {\n          view.cancelAnimations();\n        }\n        view.animate({\n          zoom: newZoom,\n          duration: this.duration_,\n          easing: easeOut,\n        });\n      } else {\n        view.setZoom(newZoom);\n      }\n    }\n  }\n}\n\nexport default Zoom;\n","/**\n * @module ol/interaction/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  ACTIVE: 'active',\n};\n","/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport InteractionProperty from './Property.js';\nimport {easeOut, linear} from '../easing.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active', Return>} InteractionOnSignature\n */\n\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return). The interactions\n * are traversed in reverse order of the interactions collection of the map.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\nclass Interaction extends BaseObject {\n  /**\n   * @param {InteractionOptions} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    /***\n     * @type {InteractionOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {InteractionOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {InteractionOnSignature<void>}\n     */\n    this.un;\n\n    if (opt_options && opt_options.handleEvent) {\n      this.handleEvent = opt_options.handleEvent;\n    }\n\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n    this.map_ = null;\n\n    this.setActive(true);\n  }\n\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n  getActive() {\n    return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));\n  }\n\n  /**\n   * Get the map associated with this interaction.\n   * @return {import(\"../PluggableMap.js\").default} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event}.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    return true;\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    this.map_ = map;\n  }\n}\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\n * @param {number} [opt_duration] Duration.\n */\nexport function pan(view, delta, opt_duration) {\n  const currentCenter = view.getCenterInternal();\n  if (currentCenter) {\n    const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];\n    view.animateInternal({\n      duration: opt_duration !== undefined ? opt_duration : 250,\n      easing: linear,\n      center: view.getConstrainedCenter(center),\n    });\n  }\n}\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] Anchor coordinate in the user projection.\n * @param {number} [opt_duration] Duration.\n */\nexport function zoomByDelta(view, delta, opt_anchor, opt_duration) {\n  const currentZoom = view.getZoom();\n\n  if (currentZoom === undefined) {\n    return;\n  }\n\n  const newZoom = view.getConstrainedZoom(currentZoom + delta);\n  const newResolution = view.getResolutionForZoom(newZoom);\n\n  if (view.getAnimating()) {\n    view.cancelAnimations();\n  }\n  view.animate({\n    resolution: newResolution,\n    anchor: opt_anchor,\n    duration: opt_duration !== undefined ? opt_duration : 250,\n    easing: easeOut,\n  });\n}\n\nexport default Interaction;\n","/**\n * @module ol/interaction/DoubleClickZoom\n */\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {number} [delta=1] The zoom delta applied on each double click.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom by double-clicking on the map.\n * @api\n */\nclass DoubleClickZoom extends Interaction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a\n   * doubleclick) and eventually zooms the map.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {\n      const browserEvent = /** @type {MouseEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const map = mapBrowserEvent.map;\n      const anchor = mapBrowserEvent.coordinate;\n      const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;\n      const view = map.getView();\n      zoomByDelta(view, delta, anchor, this.duration_);\n      browserEvent.preventDefault();\n      stopEvent = true;\n    }\n    return !stopEvent;\n  }\n}\n\nexport default DoubleClickZoom;\n","/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {getValues} from '../obj.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options)\n    );\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {!Object<string, PointerEvent>}\n     * @private\n     */\n    this.trackedPointers_ = {};\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence =\n          handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      const event = mapBrowserEvent.originalEvent;\n\n      const id = event.pointerId.toString();\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event;\n      }\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  }\n}\n\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return [clientX / length, clientY / length];\n}\n\n/**\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  const type = mapBrowserEvent.type;\n  return (\n    type === MapBrowserEventType.POINTERDOWN ||\n    type === MapBrowserEventType.POINTERDRAG ||\n    type === MapBrowserEventType.POINTERUP\n  );\n}\n\nexport default PointerInteraction;\n","/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {MAC, WEBKIT} from '../has.js';\nimport {assert} from '../asserts.js';\n\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n\n/**\n * Creates a condition function that passes when all provided conditions pass.\n * @param {...Condition} var_args Conditions to check.\n * @return {Condition} Condition function.\n */\nexport function all(var_args) {\n  const conditions = arguments;\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} All conditions passed.\n   */\n  return function (event) {\n    let pass = true;\n    for (let i = 0, ii = conditions.length; i < ii; ++i) {\n      pass = pass && conditions[i](event);\n      if (!pass) {\n        break;\n      }\n    }\n    return pass;\n  };\n}\n\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport const altKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport const altShiftKeysOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport const focus = function (event) {\n  return event.target.getTargetElement().contains(document.activeElement);\n};\n\n/**\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\n */\nexport const focusWithTabindex = function (event) {\n  return event.map.getTargetElement().hasAttribute('tabindex')\n    ? focus(event)\n    : true;\n};\n\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\nexport const always = TRUE;\n\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport const click = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport const mouseActionButton = function (mapBrowserEvent) {\n  const originalEvent = /** @type {MouseEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\nexport const never = FALSE;\n\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport const pointerMove = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport const singleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport const doubleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport const noModifierKeys = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport const platformModifierKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport const shiftKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\n * `<select>`- or `<textarea>`-element, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport const targetNotEditable = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  const tagName = /** @type {Element} */ (originalEvent.target).tagName;\n  return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';\n};\n\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport const mouseOnly = function (mapBrowserEvent) {\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvent.pointerType == 'mouse';\n};\n\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\nexport const touchOnly = function (mapBrowserEvent) {\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'touch';\n};\n\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\nexport const penOnly = function (mapBrowserEvent) {\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'pen';\n};\n\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See https://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport const primaryAction = function (mapBrowserEvent) {\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n","/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  all,\n  focusWithTabindex,\n  noModifierKeys,\n  primaryAction,\n} from '../events/condition.js';\nimport {easeOut} from '../easing.js';\nimport {\n  rotate as rotateCoordinate,\n  scale as scaleCoordinate,\n} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nclass DragPan extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super({\n      stopDown: FALSE,\n    });\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    this.kinetic_ = options.kinetic;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastCentroid = null;\n\n    /**\n     * @type {number}\n     */\n    this.lastPointersCount_;\n\n    /**\n     * @type {boolean}\n     */\n    this.panning_ = false;\n\n    const condition = options.condition\n      ? options.condition\n      : all(noModifierKeys, primaryAction);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.onFocusOnly\n      ? all(focusWithTabindex, condition)\n      : condition;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.noKinetic_ = false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().beginInteraction();\n    }\n    const targetPointers = this.targetPointers;\n    const centroid = centroidFromPointers(targetPointers);\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        const delta = [\n          this.lastCentroid[0] - centroid[0],\n          centroid[1] - this.lastCentroid[1],\n        ];\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        const distance = this.kinetic_.getDistance();\n        const angle = this.kinetic_.getAngle();\n        const center = view.getCenterInternal();\n        const centerpx = map.getPixelFromCoordinateInternal(center);\n        const dest = map.getCoordinateFromPixelInternal([\n          centerpx[0] - distance * Math.cos(angle),\n          centerpx[1] - distance * Math.sin(angle),\n        ]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut,\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n      this.lastCentroid = null;\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragPan;\n","/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  altShiftKeysOnly,\n  mouseActionButton,\n  mouseOnly,\n} from '../events/condition.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nclass DragRotate extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      stopDown: FALSE,\n    });\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    const size = map.getSize();\n    const offset = mapBrowserEvent.pixel;\n    const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      const delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n    this.lastAngle_ = theta;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (\n      mouseActionButton(mapBrowserEvent) &&\n      this.condition_(mapBrowserEvent)\n    ) {\n      const map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragRotate;\n","/**\n * @module ol/render/Box\n */\n\nimport Disposable from '../Disposable.js';\nimport Polygon from '../geom/Polygon.js';\n\nclass RenderBox extends Disposable {\n  /**\n   * @param {string} className CSS class name.\n   */\n  constructor(className) {\n    super();\n\n    /**\n     * @type {import(\"../geom/Polygon.js\").default}\n     * @private\n     */\n    this.geometry_ = null;\n\n    /**\n     * @type {HTMLDivElement}\n     * @private\n     */\n    this.element_ = document.createElement('div');\n    this.element_.style.position = 'absolute';\n    this.element_.style.pointerEvents = 'auto';\n    this.element_.className = 'ol-box ' + className;\n\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n    this.map_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.startPixel_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.endPixel_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setMap(null);\n  }\n\n  /**\n   * @private\n   */\n  render_() {\n    const startPixel = this.startPixel_;\n    const endPixel = this.endPixel_;\n    const px = 'px';\n    const style = this.element_.style;\n    style.left = Math.min(startPixel[0], endPixel[0]) + px;\n    style.top = Math.min(startPixel[1], endPixel[1]) + px;\n    style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n    style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n  }\n\n  /**\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    if (this.map_) {\n      this.map_.getOverlayContainer().removeChild(this.element_);\n      const style = this.element_.style;\n      style.left = 'inherit';\n      style.top = 'inherit';\n      style.width = 'inherit';\n      style.height = 'inherit';\n    }\n    this.map_ = map;\n    if (this.map_) {\n      this.map_.getOverlayContainer().appendChild(this.element_);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\n   * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\n   */\n  setPixels(startPixel, endPixel) {\n    this.startPixel_ = startPixel;\n    this.endPixel_ = endPixel;\n    this.createOrUpdateGeometry();\n    this.render_();\n  }\n\n  /**\n   * Creates or updates the cached geometry.\n   */\n  createOrUpdateGeometry() {\n    const startPixel = this.startPixel_;\n    const endPixel = this.endPixel_;\n    const pixels = [\n      startPixel,\n      [startPixel[0], endPixel[1]],\n      endPixel,\n      [endPixel[0], startPixel[1]],\n    ];\n    const coordinates = pixels.map(\n      this.map_.getCoordinateFromPixelInternal,\n      this.map_\n    );\n    // close the polygon\n    coordinates[4] = coordinates[0].slice();\n    if (!this.geometry_) {\n      this.geometry_ = new Polygon([coordinates]);\n    } else {\n      this.geometry_.setCoordinates([coordinates]);\n    }\n  }\n\n  /**\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n}\n\nexport default RenderBox;\n","/**\n * @module ol/interaction/DragBox\n */\n// FIXME draw drag box\nimport Event from '../events/Event.js';\nimport PointerInteraction from './Pointer.js';\nimport RenderBox from '../render/Box.js';\nimport {mouseActionButton} from '../events/condition.js';\n\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\n * true should be returned.\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link ol/events/condition~mouseActionButton}.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\n * `boxEndCondition` function.\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\n * Default is `true` if the area of the box is bigger than the `minArea` option.\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\n * before `boxend` is fired.\n */\n\n/**\n * @enum {string}\n */\nconst DragBoxEventType = {\n  /**\n   * Triggered upon drag box start.\n   * @event DragBoxEvent#boxstart\n   * @api\n   */\n  BOXSTART: 'boxstart',\n\n  /**\n   * Triggered on drag when box is active.\n   * @event DragBoxEvent#boxdrag\n   * @api\n   */\n  BOXDRAG: 'boxdrag',\n\n  /**\n   * Triggered upon drag box end.\n   * @event DragBoxEvent#boxend\n   * @api\n   */\n  BOXEND: 'boxend',\n\n  /**\n   * Triggered upon drag box canceled.\n   * @event DragBoxEvent#boxcancel\n   * @api\n   */\n  BOXCANCEL: 'boxcancel',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\n * this type.\n */\nexport class DragBoxEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\n   */\n  constructor(type, coordinate, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n    this.coordinate = coordinate;\n\n    /**\n     * @const\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend', DragBoxEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the shift or other key is held down. This is used, for example,\n * for zooming to a specific area of the map\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\n * {@link module:ol/interaction/DragRotateAndZoom}).\n *\n * @fires DragBoxEvent\n * @api\n */\nclass DragBox extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    /***\n     * @type {DragBoxOnSignature<import(\"../Observable\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {DragBoxOnSignature<import(\"../Observable\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {DragBoxOnSignature<void>}\n     */\n    this.un;\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @type {import(\"../render/Box.js\").default}\n     * @private\n     */\n    this.box_ = new RenderBox(options.className || 'ol-dragbox');\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n\n    if (options.onBoxEnd) {\n      this.onBoxEnd = options.onBoxEnd;\n    }\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.startPixel_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : mouseActionButton;\n\n    /**\n     * @private\n     * @type {EndCondition}\n     */\n    this.boxEndCondition_ = options.boxEndCondition\n      ? options.boxEndCondition\n      : this.defaultBoxEndCondition;\n  }\n\n  /**\n   * The default condition for determining whether the boxend event\n   * should fire.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\n   *     leading to the box end.\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\n   * @return {boolean} Whether or not the boxend condition should be fired.\n   */\n  defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {\n    const width = endPixel[0] - startPixel[0];\n    const height = endPixel[1] - startPixel[1];\n    return width * width + height * height >= this.minArea_;\n  }\n\n  /**\n   * Returns geometry of last drawn box.\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   * @api\n   */\n  getGeometry() {\n    return this.box_.getGeometry();\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n\n    this.dispatchEvent(\n      new DragBoxEvent(\n        DragBoxEventType.BOXDRAG,\n        mapBrowserEvent.coordinate,\n        mapBrowserEvent\n      )\n    );\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.box_.setMap(null);\n\n    const completeBox = this.boxEndCondition_(\n      mapBrowserEvent,\n      this.startPixel_,\n      mapBrowserEvent.pixel\n    );\n    if (completeBox) {\n      this.onBoxEnd(mapBrowserEvent);\n    }\n    this.dispatchEvent(\n      new DragBoxEvent(\n        completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL,\n        mapBrowserEvent.coordinate,\n        mapBrowserEvent\n      )\n    );\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.condition_(mapBrowserEvent)) {\n      this.startPixel_ = mapBrowserEvent.pixel;\n      this.box_.setMap(mapBrowserEvent.map);\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\n      this.dispatchEvent(\n        new DragBoxEvent(\n          DragBoxEventType.BOXSTART,\n          mapBrowserEvent.coordinate,\n          mapBrowserEvent\n        )\n      );\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n  onBoxEnd(event) {}\n}\n\nexport default DragBox;\n","/**\n * @module ol/interaction/DragZoom\n */\nimport DragBox from './DragBox.js';\nimport {easeOut} from '../easing.js';\nimport {shiftKeyOnly} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragzoom'] CSS class name for styling the\n * box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.shiftKeyOnly}.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {boolean} [out=false] Use interaction for zooming out.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default\n * `boxEndCondition` function.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when a key, shift by default, is held down.\n *\n * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or\n * your custom one configured with `className`.\n * @api\n */\nclass DragZoom extends DragBox {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const condition = options.condition ? options.condition : shiftKeyOnly;\n\n    super({\n      condition: condition,\n      className: options.className || 'ol-dragzoom',\n      minArea: options.minArea,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.out_ = options.out !== undefined ? options.out : false;\n  }\n\n  /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n  onBoxEnd(event) {\n    const map = this.getMap();\n    const view = /** @type {!import(\"../View.js\").default} */ (map.getView());\n    let geometry = this.getGeometry();\n\n    if (this.out_) {\n      const rotatedExtent = view.rotatedExtentForGeometry(geometry);\n      const resolution = view.getResolutionForExtentInternal(rotatedExtent);\n      const factor = view.getResolution() / resolution;\n      geometry = geometry.clone();\n      geometry.scale(factor * factor);\n    }\n\n    view.fitInternal(geometry, {\n      duration: this.duration_,\n      easing: easeOut,\n    });\n  }\n}\n\nexport default DragZoom;\n","/**\n * @module ol/events/KeyCode\n */\n\n/**\n * @enum {number}\n * @const\n */\nexport default {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n};\n","/**\n * @module ol/interaction/KeyboardPan\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {pan} from './Interaction.js';\nimport KeyCode from '../events/KeyCode.js';\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\nimport {rotate as rotateCoordinate} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.noModifierKeys} and\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nclass KeyboardPan extends Interaction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return (\n        noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent)\n      );\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ =\n      options.condition !== undefined\n        ? options.condition\n        : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ =\n      options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n   * pressed).\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardPan}\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const keyCode = keyEvent.keyCode;\n      if (\n        this.condition_(mapBrowserEvent) &&\n        (keyCode == KeyCode.DOWN ||\n          keyCode == KeyCode.LEFT ||\n          keyCode == KeyCode.RIGHT ||\n          keyCode == KeyCode.UP)\n      ) {\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n        let deltaX = 0,\n          deltaY = 0;\n        if (keyCode == KeyCode.DOWN) {\n          deltaY = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.LEFT) {\n          deltaX = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.RIGHT) {\n          deltaX = mapUnitsDelta;\n        } else {\n          deltaY = mapUnitsDelta;\n        }\n        const delta = [deltaX, deltaY];\n        rotateCoordinate(delta, view.getRotation());\n        pan(view, delta, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardPan;\n","/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {targetNotEditable} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardZoom}\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (\n      mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS\n    ) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const charCode = keyEvent.charCode;\n      if (\n        this.condition_(mapBrowserEvent) &&\n        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))\n      ) {\n        const map = mapBrowserEvent.map;\n        const delta =\n          charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardZoom;\n","/**\n * @module ol/Kinetic\n */\n\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nclass Kinetic {\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  constructor(decay, minVelocity, delay) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minVelocity_ = minVelocity;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delay_ = delay;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.points_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  begin() {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */\n  update(x, y) {\n    this.points_.push(x, y, Date.now());\n  }\n\n  /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */\n  end() {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n    const delay = Date.now() - this.delay_;\n    const lastIndex = this.points_.length - 3;\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    }\n\n    // get the first point which still falls into the delay time\n    let firstIndex = lastIndex - 3;\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n\n    const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n    // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n    if (duration < 1000 / 60) {\n      return false;\n    }\n\n    const dx = this.points_[lastIndex] - this.points_[firstIndex];\n    const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  }\n\n  /**\n   * @return {number} Total distance travelled (pixels).\n   */\n  getDistance() {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  }\n\n  /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */\n  getAngle() {\n    return this.angle_;\n  }\n}\n\nexport default Kinetic;\n","/**\n * @module ol/interaction/MouseWheelZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {DEVICE_PIXEL_RATIO, FIREFOX} from '../has.js';\nimport {all, always, focusWithTabindex} from '../events/condition.js';\nimport {clamp} from '../math.js';\n\n/**\n * @enum {string}\n */\nexport const Mode = {\n  TRACKPAD: 'trackpad',\n  WHEEL: 'wheel',\n};\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.always}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {number} [maxDelta=1] Maximum mouse wheel delta.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.\n * @property {boolean} [useAnchor=true] Enable zooming using the mouse's\n * location as the anchor. When set to `false`, zooming in and out will zoom to\n * the center of the screen instead of zooming on the mouse's location.\n * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom\n * event will always animate to the closest zoom level after an interaction;\n * false means intermediary zoom levels are allowed.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by scrolling the mouse wheel.\n * @api\n */\nclass MouseWheelZoom extends Interaction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options)\n    );\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.totalDelta_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastDelta_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.timeout_ = options.timeout !== undefined ? options.timeout : 80;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useAnchor_ =\n      options.useAnchor !== undefined ? options.useAnchor : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.constrainResolution_ =\n      options.constrainResolution !== undefined\n        ? options.constrainResolution\n        : false;\n\n    const condition = options.condition ? options.condition : always;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.onFocusOnly\n      ? all(focusWithTabindex, condition)\n      : condition;\n\n    /**\n     * @private\n     * @type {?import(\"../coordinate.js\").Coordinate}\n     */\n    this.lastAnchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.startTime_ = undefined;\n\n    /**\n     * @private\n     * @type {?}\n     */\n    this.timeoutId_;\n\n    /**\n     * @private\n     * @type {Mode|undefined}\n     */\n    this.mode_ = undefined;\n\n    /**\n     * Trackpad events separated by this delay will be considered separate\n     * interactions.\n     * @type {number}\n     */\n    this.trackpadEventGap_ = 400;\n\n    /**\n     * @type {?}\n     */\n    this.trackpadTimeoutId_;\n\n    /**\n     * The number of delta values per zoom level\n     * @private\n     * @type {number}\n     */\n    this.deltaPerZoom_ = 300;\n  }\n\n  /**\n   * @private\n   */\n  endInteraction_() {\n    this.trackpadTimeoutId_ = undefined;\n    const view = this.getMap().getView();\n    view.endInteraction(\n      undefined,\n      this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0,\n      this.lastAnchor_\n    );\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually\n   * zooms the map.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!this.condition_(mapBrowserEvent)) {\n      return true;\n    }\n    const type = mapBrowserEvent.type;\n    if (type !== EventType.WHEEL) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const wheelEvent = /** @type {WheelEvent} */ (\n      mapBrowserEvent.originalEvent\n    );\n    wheelEvent.preventDefault();\n\n    if (this.useAnchor_) {\n      this.lastAnchor_ = mapBrowserEvent.coordinate;\n    }\n\n    // Delta normalisation inspired by\n    // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js\n    let delta;\n    if (mapBrowserEvent.type == EventType.WHEEL) {\n      delta = wheelEvent.deltaY;\n      if (FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n        delta /= DEVICE_PIXEL_RATIO;\n      }\n      if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n        delta *= 40;\n      }\n    }\n\n    if (delta === 0) {\n      return false;\n    } else {\n      this.lastDelta_ = delta;\n    }\n\n    const now = Date.now();\n\n    if (this.startTime_ === undefined) {\n      this.startTime_ = now;\n    }\n\n    if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {\n      this.mode_ = Math.abs(delta) < 4 ? Mode.TRACKPAD : Mode.WHEEL;\n    }\n\n    const view = map.getView();\n    if (\n      this.mode_ === Mode.TRACKPAD &&\n      !(view.getConstrainResolution() || this.constrainResolution_)\n    ) {\n      if (this.trackpadTimeoutId_) {\n        clearTimeout(this.trackpadTimeoutId_);\n      } else {\n        if (view.getAnimating()) {\n          view.cancelAnimations();\n        }\n        view.beginInteraction();\n      }\n      this.trackpadTimeoutId_ = setTimeout(\n        this.endInteraction_.bind(this),\n        this.timeout_\n      );\n      view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);\n      this.startTime_ = now;\n      return false;\n    }\n\n    this.totalDelta_ += delta;\n\n    const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);\n\n    clearTimeout(this.timeoutId_);\n    this.timeoutId_ = setTimeout(\n      this.handleWheelZoom_.bind(this, map),\n      timeLeft\n    );\n\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  handleWheelZoom_(map) {\n    const view = map.getView();\n    if (view.getAnimating()) {\n      view.cancelAnimations();\n    }\n    let delta =\n      -clamp(\n        this.totalDelta_,\n        -this.maxDelta_ * this.deltaPerZoom_,\n        this.maxDelta_ * this.deltaPerZoom_\n      ) / this.deltaPerZoom_;\n    if (view.getConstrainResolution() || this.constrainResolution_) {\n      // view has a zoom constraint, zoom by 1\n      delta = delta ? (delta > 0 ? 1 : -1) : 0;\n    }\n    zoomByDelta(view, delta, this.lastAnchor_, this.duration_);\n\n    this.mode_ = undefined;\n    this.totalDelta_ = 0;\n    this.lastAnchor_ = null;\n    this.startTime_ = undefined;\n    this.timeoutId_ = undefined;\n  }\n\n  /**\n   * Enable or disable using the mouse's location as an anchor when zooming\n   * @param {boolean} useAnchor true to zoom to the mouse's location, false\n   * to zoom to the center of the map\n   * @api\n   */\n  setMouseAnchor(useAnchor) {\n    this.useAnchor_ = useAnchor;\n    if (!useAnchor) {\n      this.lastAnchor_ = null;\n    }\n  }\n}\n\nexport default MouseWheelZoom;\n","/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n\n    // angle between touches\n    const angle = Math.atan2(\n      touch1.clientY - touch0.clientY,\n      touch1.clientX - touch0.clientX\n    );\n\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchRotate;\n","/**\n * @module ol/interaction/PinchZoom\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchZoom extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let scaleDelta = 1.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n    const dx = touch0.clientX - touch1.clientX;\n    const dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n\n    // scale, bypass the resolution constraint\n    map.render();\n    view.adjustResolutionInternal(scaleDelta, this.anchor_);\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      const direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n      view.endInteraction(this.duration_, direction);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchZoom;\n","/**\n * @module ol/Map\n */\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport PluggableMap from './PluggableMap.js';\nimport {assign} from './obj.js';\nimport {defaults as defaultControls} from './control.js';\nimport {defaults as defaultInteractions} from './interaction.js';\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     var map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM()\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}\n * is a subclass of {@link module:ol/layer/Base}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @api\n */\nclass Map extends PluggableMap {\n  /**\n   * @param {import(\"./PluggableMap.js\").MapOptions} options Map options.\n   */\n  constructor(options) {\n    options = assign({}, options);\n    if (!options.controls) {\n      options.controls = defaultControls();\n    }\n    if (!options.interactions) {\n      options.interactions = defaultInteractions({\n        onFocusOnly: true,\n      });\n    }\n\n    super(options);\n  }\n\n  createRenderer() {\n    return new CompositeMapRenderer(this);\n  }\n}\n\nexport default Map;\n","/**\n * @module ol/control\n */\nimport Attribution from './control/Attribution.js';\nimport Collection from './Collection.js';\nimport Rotate from './control/Rotate.js';\nimport Zoom from './control/Zoom.js';\n\nexport {default as Attribution} from './control/Attribution.js';\nexport {default as Control} from './control/Control.js';\nexport {default as FullScreen} from './control/FullScreen.js';\nexport {default as MousePosition} from './control/MousePosition.js';\nexport {default as OverviewMap} from './control/OverviewMap.js';\nexport {default as Rotate} from './control/Rotate.js';\nexport {default as ScaleLine} from './control/ScaleLine.js';\nexport {default as Zoom} from './control/Zoom.js';\nexport {default as ZoomSlider} from './control/ZoomSlider.js';\nexport {default as ZoomToExtent} from './control/ZoomToExtent.js';\n\n/**\n * @typedef {Object} DefaultsOptions\n * @property {boolean} [attribution=true] Include\n * {@link module:ol/control/Attribution~Attribution}.\n * @property {import(\"./control/Attribution.js\").Options} [attributionOptions]\n * Options for {@link module:ol/control/Attribution~Attribution}.\n * @property {boolean} [rotate=true] Include\n * {@link module:ol/control/Rotate~Rotate}.\n * @property {import(\"./control/Rotate.js\").Options} [rotateOptions] Options\n * for {@link module:ol/control/Rotate~Rotate}.\n * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.\n * @property {import(\"./control/Zoom.js\").Options} [zoomOptions] Options for\n * {@link module:ol/control/Zoom~Zoom}.\n * @api\n */\n\n/**\n * Set of controls included in maps by default. Unless configured otherwise,\n * this returns a collection containing an instance of each of the following\n * controls:\n * * {@link module:ol/control/Zoom~Zoom}\n * * {@link module:ol/control/Rotate~Rotate}\n * * {@link module:ol/control/Attribution~Attribution}\n *\n * @param {DefaultsOptions} [opt_options]\n * Defaults options.\n * @return {Collection<import(\"./control/Control.js\").default>}\n * Controls.\n * @api\n */\nexport function defaults(opt_options) {\n  const options = opt_options ? opt_options : {};\n\n  const controls = new Collection();\n\n  const zoomControl = options.zoom !== undefined ? options.zoom : true;\n  if (zoomControl) {\n    controls.push(new Zoom(options.zoomOptions));\n  }\n\n  const rotateControl = options.rotate !== undefined ? options.rotate : true;\n  if (rotateControl) {\n    controls.push(new Rotate(options.rotateOptions));\n  }\n\n  const attributionControl =\n    options.attribution !== undefined ? options.attribution : true;\n  if (attributionControl) {\n    controls.push(new Attribution(options.attributionOptions));\n  }\n\n  return controls;\n}\n","/**\n * @module ol/interaction\n */\nimport Collection from './Collection.js';\nimport DoubleClickZoom from './interaction/DoubleClickZoom.js';\nimport DragPan from './interaction/DragPan.js';\nimport DragRotate from './interaction/DragRotate.js';\nimport DragZoom from './interaction/DragZoom.js';\nimport KeyboardPan from './interaction/KeyboardPan.js';\nimport KeyboardZoom from './interaction/KeyboardZoom.js';\nimport Kinetic from './Kinetic.js';\nimport MouseWheelZoom from './interaction/MouseWheelZoom.js';\nimport PinchRotate from './interaction/PinchRotate.js';\nimport PinchZoom from './interaction/PinchZoom.js';\n\nexport {default as DoubleClickZoom} from './interaction/DoubleClickZoom.js';\nexport {default as DragAndDrop} from './interaction/DragAndDrop.js';\nexport {default as DragBox} from './interaction/DragBox.js';\nexport {default as DragPan} from './interaction/DragPan.js';\nexport {default as DragRotate} from './interaction/DragRotate.js';\nexport {default as DragRotateAndZoom} from './interaction/DragRotateAndZoom.js';\nexport {default as DragZoom} from './interaction/DragZoom.js';\nexport {default as Draw} from './interaction/Draw.js';\nexport {default as Extent} from './interaction/Extent.js';\nexport {default as Interaction} from './interaction/Interaction.js';\nexport {default as KeyboardPan} from './interaction/KeyboardPan.js';\nexport {default as KeyboardZoom} from './interaction/KeyboardZoom.js';\nexport {default as Modify} from './interaction/Modify.js';\nexport {default as MouseWheelZoom} from './interaction/MouseWheelZoom.js';\nexport {default as PinchRotate} from './interaction/PinchRotate.js';\nexport {default as PinchZoom} from './interaction/PinchZoom.js';\nexport {default as Pointer} from './interaction/Pointer.js';\nexport {default as Select} from './interaction/Select.js';\nexport {default as Snap} from './interaction/Snap.js';\nexport {default as Translate} from './interaction/Translate.js';\n\n/**\n * @typedef {Object} DefaultsOptions\n * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is\n * desired.\n * @property {boolean} [onFocusOnly=false] Interact only when the map has the\n * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is\n * useful when page scroll is desired for maps that do not have the browser's\n * focus.\n * @property {boolean} [doubleClickZoom=true] Whether double click zoom is\n * desired.\n * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.\n * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.\n * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.\n * @property {boolean} [dragPan=true] Whether drag pan is desired.\n * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.\n * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.\n * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.\n * @property {number} [zoomDuration] Duration of the zoom animation in\n * milliseconds.\n */\n\n/**\n * Set of interactions included in maps by default. Specific interactions can be\n * excluded by setting the appropriate option to false in the constructor\n * options, but the order of the interactions is fixed.  If you want to specify\n * a different order for interactions, you will need to create your own\n * {@link module:ol/interaction/Interaction} instances and insert\n * them into a {@link module:ol/Collection} in the order you want\n * before creating your {@link module:ol/Map~Map} instance. Changing the order can\n * be of interest if the event propagation needs to be stopped at a point.\n * The default set of interactions, in sequence, is:\n * * {@link module:ol/interaction/DragRotate~DragRotate}\n * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}\n * * {@link module:ol/interaction/DragPan~DragPan}\n * * {@link module:ol/interaction/PinchRotate~PinchRotate}\n * * {@link module:ol/interaction/PinchZoom~PinchZoom}\n * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}\n * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}\n * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}\n * * {@link module:ol/interaction/DragZoom~DragZoom}\n *\n * @param {DefaultsOptions} [opt_options] Defaults options.\n * @return {import(\"./Collection.js\").default<import(\"./interaction/Interaction.js\").default>}\n * A collection of interactions to be used with the {@link module:ol/Map~Map}\n * constructor's `interactions` option.\n * @api\n */\nexport function defaults(opt_options) {\n  const options = opt_options ? opt_options : {};\n\n  const interactions = new Collection();\n\n  const kinetic = new Kinetic(-0.005, 0.05, 100);\n\n  const altShiftDragRotate =\n    options.altShiftDragRotate !== undefined\n      ? options.altShiftDragRotate\n      : true;\n  if (altShiftDragRotate) {\n    interactions.push(new DragRotate());\n  }\n\n  const doubleClickZoom =\n    options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;\n  if (doubleClickZoom) {\n    interactions.push(\n      new DoubleClickZoom({\n        delta: options.zoomDelta,\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  const dragPan = options.dragPan !== undefined ? options.dragPan : true;\n  if (dragPan) {\n    interactions.push(\n      new DragPan({\n        onFocusOnly: options.onFocusOnly,\n        kinetic: kinetic,\n      })\n    );\n  }\n\n  const pinchRotate =\n    options.pinchRotate !== undefined ? options.pinchRotate : true;\n  if (pinchRotate) {\n    interactions.push(new PinchRotate());\n  }\n\n  const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;\n  if (pinchZoom) {\n    interactions.push(\n      new PinchZoom({\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  const keyboard = options.keyboard !== undefined ? options.keyboard : true;\n  if (keyboard) {\n    interactions.push(new KeyboardPan());\n    interactions.push(\n      new KeyboardZoom({\n        delta: options.zoomDelta,\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  const mouseWheelZoom =\n    options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;\n  if (mouseWheelZoom) {\n    interactions.push(\n      new MouseWheelZoom({\n        onFocusOnly: options.onFocusOnly,\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  const shiftDragZoom =\n    options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;\n  if (shiftDragZoom) {\n    interactions.push(\n      new DragZoom({\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  return interactions;\n}\n","/**\n * @module ol/style/Fill\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color=null] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n}\n\nexport default Fill;\n","/**\n * @module ol/style/IconAnchorUnits\n */\n\n/**\n * Icon anchor units. One of 'fraction', 'pixels'.\n * @enum {string}\n */\nexport default {\n  /**\n   * Anchor is a fraction\n   * @api\n   */\n  FRACTION: 'fraction',\n  /**\n   * Anchor is in pixels\n   * @api\n   */\n  PIXELS: 'pixels',\n};\n","/**\n * @module ol/style/IconOrigin\n */\n\n/**\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n * @enum {string}\n */\nexport default {\n  /**\n   * Origin is at bottom left\n   * @api\n   */\n  BOTTOM_LEFT: 'bottom-left',\n  /**\n   * Origin is at bottom right\n   * @api\n   */\n  BOTTOM_RIGHT: 'bottom-right',\n  /**\n   * Origin is at top left\n   * @api\n   */\n  TOP_LEFT: 'top-left',\n  /**\n   * Origin is at top right\n   * @api\n   */\n  TOP_RIGHT: 'top-right',\n};\n","/**\n * @module ol/ImageState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/style/Image\n */\nimport {abstract} from '../util.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n */\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nclass ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.displacement_ = options.displacement;\n  }\n\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new ImageStyle({\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n    });\n  }\n\n  /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */\n  getOpacity() {\n    return this.opacity_;\n  }\n\n  /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */\n  getDisplacement() {\n    return this.displacement_;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */\n  getAnchor() {\n    return abstract();\n  }\n\n  /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  getImage(pixelRatio) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  getHitDetectionImage() {\n    return abstract();\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return 1;\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return abstract();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */\n  getOrigin() {\n    return abstract();\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */\n  getSize() {\n    return abstract();\n  }\n\n  /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */\n  setOpacity(opacity) {\n    this.opacity_ = opacity;\n  }\n\n  /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale);\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    abstract();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    abstract();\n  }\n}\n\nexport default ImageStyle;\n","/**\n * @module ol/ImageBase\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {abstract} from './util.js';\n\n/**\n * @abstract\n */\nclass ImageBase extends EventTarget {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default} state State.\n   */\n  constructor(extent, resolution, pixelRatio, state) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number|undefined}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = state;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  getExtent() {\n    return this.extent;\n  }\n\n  /**\n   * @abstract\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    return abstract();\n  }\n\n  /**\n   * @return {number} PixelRatio.\n   */\n  getPixelRatio() {\n    return this.pixelRatio_;\n  }\n\n  /**\n   * @return {number} Resolution.\n   */\n  getResolution() {\n    return /** @type {number} */ (this.resolution);\n  }\n\n  /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  load() {\n    abstract();\n  }\n}\n\nexport default ImageBase;\n","/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport {IMAGE_DECODE} from './has.js';\nimport {getHeight} from './extent.js';\nimport {listenOnce, unlistenByKey} from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~Image} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~Image#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  constructor(\n    extent,\n    resolution,\n    pixelRatio,\n    src,\n    crossOrigin,\n    imageLoadFunction\n  ) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  setImage(image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n\n  if (img.src && IMAGE_DECODE) {\n    const promise = img.decode();\n    let listening = true;\n    const unlisten = function () {\n      listening = false;\n    };\n    promise\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:\n          //        https://bugs.webkit.org/show_bug.cgi?id=198527\n          if (\n            error.name === 'EncodingError' &&\n            error.message === 'Invalid image type.'\n          ) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n    return unlisten;\n  }\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, loadHandler),\n    listenOnce(img, EventType.ERROR, errorHandler),\n  ];\n  return function unlisten() {\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\nexport default ImageWrapper;\n","/**\n * @module ol/style/IconImage\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport {asString} from '../color.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {shared as iconImageCache} from './IconImageCache.js';\nimport {listenImage} from '../Image.js';\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet taintedTestContext = null;\n\nclass IconImage extends EventTarget {\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n   * @param {string|undefined} src Src.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\n   * @param {import(\"../color.js\").Color} color Color.\n   */\n  constructor(image, src, size, crossOrigin, imageState, color) {\n    super();\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = !image ? new Image() : image;\n\n    if (crossOrigin !== null) {\n      /** @type {HTMLImageElement} */ (this.image_).crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = color;\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    this.imageState_ = imageState;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = size;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     */\n    this.tainted_;\n  }\n\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n  isTainted_() {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      if (!taintedTestContext) {\n        taintedTestContext = createCanvasContext2D(1, 1);\n      }\n      taintedTestContext.drawImage(this.image_, 0, 0);\n      try {\n        taintedTestContext.getImageData(0, 0, 1, 1);\n        this.tainted_ = false;\n      } catch (e) {\n        taintedTestContext = null;\n        this.tainted_ = true;\n      }\n    }\n    return this.tainted_ === true;\n  }\n\n  /**\n   * @private\n   */\n  dispatchChangeEvent_() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @private\n   */\n  handleImageError_() {\n    this.imageState_ = ImageState.ERROR;\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @private\n   */\n  handleImageLoad_() {\n    this.imageState_ = ImageState.LOADED;\n    if (this.size_) {\n      this.image_.width = this.size_[0];\n      this.image_.height = this.size_[1];\n    } else {\n      this.size_ = [this.image_.width, this.image_.height];\n    }\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   */\n  getImage(pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Image or Canvas element.\n   */\n  getPixelRatio(pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.imageState_;\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        const width = this.size_[0];\n        const height = this.size_[1];\n        const context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n    return this.hitDetectionImage_;\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {string|undefined} Image src.\n   */\n  getSrc() {\n    return this.src_;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.imageState_ == ImageState.IDLE) {\n      this.imageState_ = ImageState.LOADING;\n      try {\n        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\n      } catch (e) {\n        this.handleImageError_();\n      }\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @private\n   */\n  replaceColor_(pixelRatio) {\n    if (!this.color_ || this.canvas_[pixelRatio]) {\n      return;\n    }\n\n    const canvas = document.createElement('canvas');\n    this.canvas_[pixelRatio] = canvas;\n\n    canvas.width = Math.ceil(this.image_.width * pixelRatio);\n    canvas.height = Math.ceil(this.image_.height * pixelRatio);\n\n    const ctx = canvas.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.drawImage(this.image_, 0, 0);\n\n    ctx.globalCompositeOperation = 'multiply';\n    // Internet Explorer 11 does not support the multiply operation.\n    // If the canvas is tainted in Internet Explorer this still produces\n    // a solid color image with the shape of the icon.\n    if (ctx.globalCompositeOperation === 'multiply' || this.isTainted_()) {\n      ctx.fillStyle = asString(this.color_);\n      ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n\n      ctx.globalCompositeOperation = 'destination-in';\n      ctx.drawImage(this.image_, 0, 0);\n    } else {\n      const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const data = imgData.data;\n      const r = this.color_[0] / 255.0;\n      const g = this.color_[1] / 255.0;\n      const b = this.color_[2] / 255.0;\n      const a = this.color_[3];\n\n      for (let i = 0, ii = data.length; i < ii; i += 4) {\n        data[i] *= r;\n        data[i + 1] *= g;\n        data[i + 2] *= b;\n        data[i + 3] *= a;\n      }\n      ctx.putImageData(imgData, 0, 0);\n    }\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n * @param {string} src Src.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default} imageState Image state.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {IconImage} Icon image.\n */\nexport function get(image, src, size, crossOrigin, imageState, color) {\n  let iconImage = iconImageCache.get(src, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\n    iconImageCache.set(src, crossOrigin, color, iconImage);\n  }\n  return iconImage;\n}\n\nexport default IconImage;\n","/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {Array<number>} [displacement=[0,0]] Displacement the icon\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined\n        ? options.anchorOrigin\n        : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined\n        ? options.anchorXUnits\n        : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined\n        ? options.anchorYUnits\n        : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    const image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    const imgSize = options.imgSize !== undefined ? options.imgSize : null;\n\n    /**\n     * @type {string|undefined}\n     */\n    let src = options.src;\n\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || (image && imgSize), 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    const imageState =\n      options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (src),\n      imgSize,\n      this.crossOrigin_,\n      imageState,\n      this.color_\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined\n        ? options.offsetOrigin\n        : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n    });\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n    let anchor = this.anchor_;\n    const size = this.getSize();\n    if (\n      this.anchorXUnits_ == IconAnchorUnits.FRACTION ||\n      this.anchorYUnits_ == IconAnchorUnits.FRACTION\n    ) {\n      if (!size) {\n        return null;\n      }\n      anchor = this.anchor_.slice();\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n      if (\n        this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||\n        this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT\n      ) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n      if (\n        this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||\n        this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT\n      ) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n    const displacement = this.getDisplacement();\n    anchor[0] -= displacement[0];\n    anchor[1] += displacement[1];\n\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||\n        this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||\n        this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\n\nexport default Icon;\n","/**\n * @module ol/colorlike\n */\nimport {toString} from './color.js';\n\n/**\n * A type accepted by CanvasRenderingContext2D.fillStyle\n * or CanvasRenderingContext2D.strokeStyle.\n * Represents a color, pattern, or gradient. The origin for patterns and\n * gradients as fill style is an increment of 512 css pixels from map coordinate\n * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image\n * must be a factor of two (2, 4, 8, ..., 512).\n *\n * @typedef {string|CanvasPattern|CanvasGradient} ColorLike\n * @api\n */\n\n/**\n * @param {import(\"./color.js\").Color|ColorLike} color Color.\n * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.\n * @api\n */\nexport function asColorLike(color) {\n  if (Array.isArray(color)) {\n    return toString(color);\n  } else {\n    return color;\n  }\n}\n","/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = undefined;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ =\n      options.radius !== undefined ? options.radius : options.radius1;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_ = null;\n\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    return this.anchor_;\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    let image = this.canvas_[pixelRatio];\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(\n        renderOptions.size * pixelRatio,\n        renderOptions.size * pixelRatio\n      );\n      this.draw_(renderOptions, context, pixelRatio);\n\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return ImageState.LOADED;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (\n      strokeWidth === 0 ||\n      this.points_ === Infinity ||\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\n    ) {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points =\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = (2 * Math.PI) / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = (strokeWidth / 2) * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    const displacement = this.getDisplacement();\n    this.canvas_ = {};\n    this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        const context = createCanvasContext2D(\n          renderOptions.size,\n          renderOptions.size\n        );\n        this.hitDetectionCanvas_ = context.canvas;\n\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = (2 * Math.PI) / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n}\n\nexport default RegularShape;\n","/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from './RegularShape.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nclass CircleStyle extends RegularShape {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView:\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n    });\n  }\n\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.radius_ = radius;\n    this.render();\n  }\n}\n\nexport default CircleStyle;\n","/**\n * @module ol/style/Stroke\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth(),\n    });\n  }\n\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>} Line dash.\n   * @api\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n\n  /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n  }\n\n  /**\n   * Set the line dash.\n   *\n   * Please note that Internet Explorer 10 and lower [do not support][mdn] the\n   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\n   * property will have no visual effect in these browsers.\n   *\n   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\n   *\n   * @param {Array<number>} lineDash Line dash.\n   * @api\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n  }\n\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  }\n\n  /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n  }\n\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  setWidth(width) {\n    this.width_ = width;\n  }\n}\n\nexport default Stroke;\n","/**\n * @module ol/style/Style\n */\n\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Stroke from './Stroke.js';\nimport {assert} from '../asserts.js';\n\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void}\n * RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n *\n * @api\n */\nclass Style {\n  /**\n   * @param {Options} [opt_options] Style options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        geometry\n      ).clone();\n    }\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex(),\n    });\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`\n      const style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function () {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>}\n */\nlet defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)',\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25,\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5,\n        }),\n        fill: fill,\n        stroke: stroke,\n      }),\n    ];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles[GeometryType.POLYGON] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5],\n      }),\n    }),\n  ];\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n\n  styles[GeometryType.LINE_STRING] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2,\n      }),\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width,\n      }),\n    }),\n  ];\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(\n    styles[GeometryType.LINE_STRING]\n  );\n\n  styles[GeometryType.POINT] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue,\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2,\n        }),\n      }),\n      zIndex: Infinity,\n    }),\n  ];\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[\n    GeometryType.POLYGON\n  ].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {getUid} from '../util.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nclass RBush {\n  /**\n   * @param {number} [opt_maxEntries] Max entries.\n   */\n  constructor(opt_maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(opt_maxEntries);\n\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n  }\n\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value,\n    };\n\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  load(extents, values) {\n    const items = new Array(values.length);\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n\n      /** @type {Entry} */\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value,\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  }\n\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  remove(value) {\n    const uid = getUid(value);\n\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  forEach(callback) {\n    return this.forEach_(this.getAll(), callback);\n  }\n\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  forEachInExtent(extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  }\n\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n  forEach_(values, callback) {\n    let result;\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n\n  /**\n   * Remove all values from the RBush.\n   */\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getExtent(opt_extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(\n      data.minX,\n      data.minY,\n      data.maxX,\n      data.maxY,\n      opt_extent\n    );\n  }\n\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n}\n\nexport default RBush;\n","/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport SourceState from './State.js';\nimport {abstract} from '../util.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * A function that takes a {@link module:ol/PluggableMap~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../PluggableMap.js\").FrameState): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./State.js\").default} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ =\n      options.attributionsCollapsible !== undefined\n        ? options.attributionsCollapsible\n        : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./State.js\").default}\n     */\n    this.state_ =\n      options.state !== undefined ? options.state : SourceState.READY;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @abstract\n   * @return {Array<number>|undefined} Resolutions.\n   */\n  getResolutions() {\n    return abstract();\n  }\n\n  /**\n   * Get the state of the source, see {@link module:ol/source/State~State} for possible states.\n   * @return {import(\"./State.js\").default} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {Object|undefined} Context options.\n   */\n  getContextOptions() {\n    return undefined;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./State.js\").default} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {?Attribution} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;\n","/**\n * @module ol/source/VectorEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a feature is added to the source.\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\n   * @api\n   */\n  ADDFEATURE: 'addfeature',\n\n  /**\n   * Triggered when a feature is updated.\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\n   * @api\n   */\n  CHANGEFEATURE: 'changefeature',\n\n  /**\n   * Triggered when the clear method is called on the source.\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\n   * @api\n   */\n  CLEAR: 'clear',\n\n  /**\n   * Triggered when a feature is removed from the source.\n   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\n   * @api\n   */\n  REMOVEFEATURE: 'removefeature',\n\n  /**\n   * Triggered when features starts loading.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\n   * @api\n   */\n  FEATURESLOADSTART: 'featuresloadstart',\n\n  /**\n   * Triggered when features finishes loading.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\n   * @api\n   */\n  FEATURESLOADEND: 'featuresloadend',\n\n  /**\n   * Triggered if feature loading results in an error.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\n   * @api\n   */\n  FEATURESLOADERROR: 'featuresloaderror',\n};\n\n/**\n * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes\n */\n","/**\n * @module ol/loadingstrategy\n */\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution) {\n      const z = tileGrid.getZForResolution(resolution);\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      const tileCoord = [z, 0, 0];\n      for (\n        tileCoord[1] = tileRange.minX;\n        tileCoord[1] <= tileRange.maxX;\n        ++tileCoord[1]\n      ) {\n        for (\n          tileCoord[2] = tileRange.minY;\n          tileCoord[2] <= tileRange.maxY;\n          ++tileCoord[2]\n        ) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n      return extents;\n    }\n  );\n}\n","/**\n * @module ol/featureloader\n */\nimport FormatType from './format/FormatType.js';\nimport {VOID} from './functions.js';\n\n/**\n *\n * @type {boolean}\n * @private\n */\nlet withCredentials = false;\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection} for the projection, an optional success callback that should get\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\n * `'featuresloaderror'` events. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\nexport function loadFeaturesXhr(\n  url,\n  format,\n  extent,\n  resolution,\n  projection,\n  success,\n  failure\n) {\n  const xhr = new XMLHttpRequest();\n  xhr.open(\n    'GET',\n    typeof url === 'function' ? url(extent, resolution, projection) : url,\n    true\n  );\n  if (format.getType() == FormatType.ARRAY_BUFFER) {\n    xhr.responseType = 'arraybuffer';\n  }\n  xhr.withCredentials = withCredentials;\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  xhr.onload = function (event) {\n    // status will be 0 for file:// urls\n    if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\n      const type = format.getType();\n      /** @type {Document|Node|Object|string|undefined} */\n      let source;\n      if (type == FormatType.JSON || type == FormatType.TEXT) {\n        source = xhr.responseText;\n      } else if (type == FormatType.XML) {\n        source = xhr.responseXML;\n        if (!source) {\n          source = new DOMParser().parseFromString(\n            xhr.responseText,\n            'application/xml'\n          );\n        }\n      } else if (type == FormatType.ARRAY_BUFFER) {\n        source = /** @type {ArrayBuffer} */ (xhr.response);\n      }\n      if (source) {\n        success(\n          /** @type {Array<import(\"./Feature.js\").default>} */\n          (\n            format.readFeatures(source, {\n              extent: extent,\n              featureProjection: projection,\n            })\n          ),\n          format.readProjection(source)\n        );\n      } else {\n        failure();\n      }\n    } else {\n      failure();\n    }\n  };\n  /**\n   * @private\n   */\n  xhr.onerror = failure;\n  xhr.send();\n}\n\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\n   * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n   *      Function called when loading succeeded.\n   * @param {function(): void} [failure] Failure\n   *      Function called when loading failed.\n   * @this {import(\"./source/Vector\").default}\n   */\n  return function (extent, resolution, projection, success, failure) {\n    const source = /** @type {import(\"./source/Vector\").default} */ (this);\n    loadFeaturesXhr(\n      url,\n      format,\n      extent,\n      resolution,\n      projection,\n      /**\n       * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n       * projection.\n       */\n      function (features, dataProjection) {\n        source.addFeatures(features);\n        if (success !== undefined) {\n          success(features);\n        }\n      },\n      /* FIXME handle error */ failure ? failure : VOID\n    );\n  };\n}\n\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}\n","/**\n * @module ol/source/Vector\n */\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent, equals} from '../extent.js';\nimport {extend} from '../array.js';\nimport {getUid} from '../util.js';\nimport {getValues, isEmpty} from '../obj.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {xhr} from '../featureloader.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nexport class VectorSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>} [opt_feature] Feature.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [opt_features] Features.\n   */\n  constructor(type, opt_feature, opt_features) {\n    super(type);\n\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n     * @api\n     */\n    this.features = opt_features;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          var features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options} [opt_options] Vector source options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    super({\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    });\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {VectorSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(\n        this.url_,\n        /** @type {import(\"../format/Feature.js\").default} */ (this.format_)\n      );\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ =\n      options.strategy !== undefined ? options.strategy : allStrategy;\n\n    const useSpatialIndex =\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.loadingExtentsCount_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.uidIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.featuresCollection_ = null;\n\n    let collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature)\n    );\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\n      listen(\n        feature,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_,\n        this\n      ),\n    ];\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    const id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    }\n    if (valid) {\n      assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\n      this.uidIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    const newFeatures = [];\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      this.dispatchEvent(\n        new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i])\n      );\n    }\n  }\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    this.addEventListener(\n      VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      }\n    );\n    this.addEventListener(\n      VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      }\n    );\n    collection.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(\n            /** @type {import(\"../Feature.js\").default<Geometry>} */ (\n              evt.element\n            )\n          );\n          modifyingCollection = false;\n        }\n      }.bind(this)\n    );\n    collection.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(\n            /** @type {import(\"../Feature.js\").default<Geometry>} */ (\n              evt.element\n            )\n          );\n          modifyingCollection = false;\n        }\n      }.bind(this)\n    );\n    this.featuresCollection_ = collection;\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [opt_fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature removefeature} events.\n   * @api\n   */\n  clear(opt_fast) {\n    if (opt_fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.nullGeometryFeatures_ = {};\n\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  }\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(\n      extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function (feature) {\n        const geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          const result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    );\n  }\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n  /**\n   * Get a snapshot of the features currently on the source in random order. The returned array\n   * is a copy, the features are references to the features in the source.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray().slice(0);\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ (\n      features\n    );\n  }\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.getInExtent(extent);\n    } else if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray().slice(0);\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [opt_filter] Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    const filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(\n      extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       */\n      function (feature) {\n        if (filter(feature)) {\n          const geometry = feature.getGeometry();\n          const previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(\n            x,\n            y,\n            closestPoint,\n            minSquaredDistance\n          );\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            const minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      }\n    );\n    return closestFeature;\n  }\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  }\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   */\n  getFeatureByUid(uid) {\n    const feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {import(\"../Feature.js\").default<Geometry>} */ (\n      event.target\n    );\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n    this.changed();\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature)\n    );\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.uidIndex_;\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution);\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\n        extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function (object) {\n          return containsExtent(object.extent, extentToLoad);\n        }\n      );\n      if (!alreadyLoaded) {\n        ++this.loadingExtentsCount_;\n        this.dispatchEvent(\n          new VectorSourceEvent(VectorEventType.FEATURESLOADSTART)\n        );\n        this.loader_.call(\n          this,\n          extentToLoad,\n          resolution,\n          projection,\n          function (features) {\n            --this.loadingExtentsCount_;\n            this.dispatchEvent(\n              new VectorSourceEvent(\n                VectorEventType.FEATURESLOADEND,\n                undefined,\n                features\n              )\n            );\n          }.bind(this),\n          function () {\n            --this.loadingExtentsCount_;\n            this.dispatchEvent(\n              new VectorSourceEvent(VectorEventType.FEATURESLOADERROR)\n            );\n          }.bind(this)\n        );\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n      }\n    }\n    this.loading =\n      this.loader_ === VOID ? false : this.loadingExtentsCount_ > 0;\n  }\n\n  refresh() {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    super.refresh();\n  }\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    const featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  }\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    }\n    delete this.uidIndex_[featureKey];\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature)\n    );\n  }\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n  setUrl(url) {\n    assert(this.format_, 7); // `format` must be set when `url` is set\n    this.url_ = url;\n    this.setLoader(xhr(url, this.format_));\n  }\n}\n\nexport default VectorSource;\n","/**\n * @module ol/layer/TileProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\n};\n","/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\nimport {assign} from '../obj.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source'|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   'change:source'|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @extends {Layer<TileSourceType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [opt_options] Tile layer options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const baseOptions = assign({}, options);\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true\n    );\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n}\n\nexport default BaseTileLayer;\n","/**\n * @module ol/renderer/Layer\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport Observable from '../Observable.js';\nimport SourceState from '../source/State.js';\nimport {abstract} from '../util.js';\n\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */\nclass LayerRenderer extends Observable {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super();\n\n    /** @private */\n    this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n\n    /**\n     * @protected\n     * @type {LayerType}\n     */\n    this.layer_ = layer;\n\n    /**\n     * @type {import(\"../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    return abstract();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @abstract\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return abstract();\n  }\n\n  /**\n   * Render the layer.\n   * @abstract\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    return abstract();\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (!tiles[zoom]) {\n      tiles[zoom] = {};\n    }\n    tiles[zoom][tile.tileCoord.toString()] = tile;\n    return undefined;\n  }\n\n  /**\n   * Create a function that adds loaded tiles to the tile lookup.\n   * @param {import(\"../source/Tile.js\").default} source Tile source.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection of the tiles.\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @return {function(number, import(\"../TileRange.js\").default):boolean} A function that can be\n   *     called with a zoom level and a tile range to add loaded tiles to the lookup.\n   * @protected\n   */\n  createLoadedTileFinder(source, projection, tiles) {\n    return (\n      /**\n       * @param {number} zoom Zoom level.\n       * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n       * @return {boolean} The tile range is fully loaded.\n       * @this {LayerRenderer}\n       */\n      function (zoom, tileRange) {\n        const callback = this.loadedTileCallback.bind(this, tiles, zoom);\n        return source.forEachLoadedTile(projection, zoom, tileRange, callback);\n      }.bind(this)\n    );\n  }\n  /**\n   * @abstract\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    return undefined;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n  getDataAtPixel(pixel, frameState, hitTolerance) {\n    return abstract();\n  }\n\n  /**\n   * @return {LayerType} Layer.\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @abstract\n   */\n  handleFontsChanged() {}\n\n  /**\n   * Handle changes in image state.\n   * @param {import(\"../events/Event.js\").default} event Image change event.\n   * @private\n   */\n  handleImageChange_(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    if (image.getState() === ImageState.LOADED) {\n      this.renderIfReadyAndVisible();\n    }\n  }\n\n  /**\n   * Load the image if not already loaded, and register the image change\n   * listener if needed.\n   * @param {import(\"../ImageBase.js\").default} image Image.\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n   * @protected\n   */\n  loadImage(image) {\n    let imageState = image.getState();\n    if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\n      image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\n    }\n    if (imageState == ImageState.IDLE) {\n      image.load();\n      imageState = image.getState();\n    }\n    return imageState == ImageState.LOADED;\n  }\n\n  /**\n   * @protected\n   */\n  renderIfReadyAndVisible() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {\n      layer.changed();\n    }\n  }\n}\n\nexport default LayerRenderer;\n","/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {\n  containsCoordinate,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\nimport {createCanvasContext2D} from '../../dom.js';\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n  useContainer(target, transform, opacity) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.style.opacity === '' &&\n      target.className === layerClassName\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (\n      context &&\n      (context.canvas.width === 0 ||\n        context.canvas.style.transform === transform)\n    ) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n  getDataAtPixel(pixel, frameState, hitTolerance) {\n    const renderPixel = applyTransform(\n      this.inversePixelTransform,\n      pixel.slice()\n    );\n    const context = this.context;\n\n    const layer = this.getLayer();\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      const renderCoordinate = applyTransform(\n        frameState.pixelToCoordinateTransform,\n        pixel.slice()\n      );\n\n      /** get only data inside of the layer extent */\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n\n    let data;\n    try {\n      const x = Math.round(renderPixel[0]);\n      const y = Math.round(renderPixel[1]);\n      const newCanvas = document.createElement('canvas');\n      const newContext = newCanvas.getContext('2d');\n      newCanvas.width = 1;\n      newCanvas.height = 1;\n      newContext.clearRect(0, 0, 1, 1);\n      newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = newContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        return new Uint8Array();\n      }\n      return data;\n    }\n\n    if (data[3] === 0) {\n      return null;\n    }\n    return data;\n  }\n}\n\nexport default CanvasLayerRenderer;\n","/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\n\nexport default TileRange;\n","/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n} from '../../transform.js';\nimport {assign} from '../../obj.js';\nimport {\n  createEmpty,\n  equals,\n  getIntersection,\n  getTopLeft,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {numberSafeCompareFunction} from '../../array.js';\nimport {toString as toTransformString} from '../../transform.js';\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n */\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default} tileLayer Tile layer.\n   */\n  constructor(tileLayer) {\n    super(tileLayer);\n\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    this.extentChanged = true;\n\n    /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedPixelRatio;\n\n    /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.newTiles_ = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.tmpExtent = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const tileLayer = this.getLayer();\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return (\n      tileState == TileState.LOADED ||\n      tileState == TileState.EMPTY ||\n      (tileState == TileState.ERROR && !useInterimTilesOnError)\n    );\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == TileState.ERROR) {\n      if (!tileLayer.getUseInterimTilesOnError()) {\n        // When useInterimTilesOnError is false, we consider the error tile as loaded.\n        tile.setState(TileState.LOADED);\n      } else if (tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (this.isDrawableTile(tile)) {\n      return super.loadedTileCallback(tiles, zoom, tile);\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return !!this.getLayer().getSource();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n    const rotation = viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n\n    let extent = frameState.extent;\n    const layerExtent =\n      layerState.extent && fromUserExtent(layerState.extent, projection);\n    if (layerExtent) {\n      extent = getIntersection(\n        extent,\n        fromUserExtent(layerState.extent, projection)\n      );\n    }\n\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n\n    // desired dimensions of the canvas in pixels\n    let width = Math.round(frameState.size[0] * tilePixelRatio);\n    let height = Math.round(frameState.size[1] * tilePixelRatio);\n\n    if (rotation) {\n      const size = Math.round(Math.sqrt(width * width + height * height));\n      width = size;\n      height = size;\n    }\n\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\n    const canvasExtent = [\n      viewCenter[0] - dx,\n      viewCenter[1] - dy,\n      viewCenter[0] + dx,\n      viewCenter[1] + dy,\n    ];\n\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n\n    /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */\n    const tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n\n    const findLoadedTiles = this.createLoadedTileFinder(\n      tileSource,\n      projection,\n      tilesToDrawByZ\n    );\n\n    const tmpExtent = this.tmpExtent;\n    const tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        const tile = this.getTile(z, x, y, frameState);\n        if (this.isDrawableTile(tile)) {\n          const uid = getUid(this);\n          if (tile.getState() == TileState.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            const inTransition = tile.inTransition(uid);\n            if (\n              !this.newTiles_ &&\n              (inTransition || this.renderedTiles.indexOf(tile) === -1)\n            ) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don't look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n\n        const childTileRange = tileGrid.getTileCoordChildTileRange(\n          tile.tileCoord,\n          tmpTileRange,\n          tmpExtent\n        );\n\n        let covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(\n            tile.tileCoord,\n            findLoadedTiles,\n            tmpTileRange,\n            tmpExtent\n          );\n        }\n      }\n    }\n\n    const canvasScale = tileResolution / viewResolution;\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / tilePixelRatio,\n      1 / tilePixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    const context = this.context;\n    const canvas = context.canvas;\n\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    // set scale transform for calculating tile positions on the canvas\n    composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      canvasScale,\n      canvasScale,\n      0,\n      -width / 2,\n      -height / 2\n    );\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    if (layerExtent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n\n    assign(context, tileSource.getContextOptions());\n    this.preRender(context, frameState);\n\n    this.renderedTiles.length = 0;\n    /** @type {Array<number>} */\n    let zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(numberSafeCompareFunction);\n\n    let clips, clipZs, currentClip;\n    if (\n      layerState.opacity === 1 &&\n      (!this.containerReused ||\n        tileSource.getOpaque(frameState.viewState.projection))\n    ) {\n      zs = zs.reverse();\n    } else {\n      clips = [];\n      clipZs = [];\n    }\n    for (let i = zs.length - 1; i >= 0; --i) {\n      const currentZ = zs[i];\n      const currentTilePixelSize = tileSource.getTilePixelSize(\n        currentZ,\n        pixelRatio,\n        projection\n      );\n      const currentResolution = tileGrid.getResolution(currentZ);\n      const currentScale = currentResolution / tileResolution;\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\n        getTopLeft(canvasExtent),\n        currentZ\n      );\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      const origin = applyTransform(this.tempTransform, [\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n          tileResolution,\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n          tileResolution,\n      ]);\n      const tileGutter =\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\n      const tilesToDraw = tilesToDrawByZ[currentZ];\n      for (const tileCoordKey in tilesToDraw) {\n        const tile = /** @type {import(\"../../ImageTile.js\").default} */ (\n          tilesToDraw[tileCoordKey]\n        );\n        const tileCoord = tile.tileCoord;\n\n        // Calculate integer positions and sizes so that tiles align\n        const xIndex = originTileCoord[1] - tileCoord[1];\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n        const yIndex = originTileCoord[2] - tileCoord[2];\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n        const x = Math.round(origin[0] - xIndex * dx);\n        const y = Math.round(origin[1] - yIndex * dy);\n        const w = nextX - x;\n        const h = nextY - y;\n        const transition = z === currentZ;\n\n        const inTransition =\n          transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n        if (!inTransition) {\n          if (clips) {\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            context.save();\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n            for (let i = 0, ii = clips.length; i < ii; ++i) {\n              if (z !== currentZ && currentZ < clipZs[i]) {\n                const clip = clips[i];\n                context.beginPath();\n                // counter-clockwise (outer ring) for current tile\n                context.moveTo(currentClip[0], currentClip[1]);\n                context.lineTo(currentClip[2], currentClip[3]);\n                context.lineTo(currentClip[4], currentClip[5]);\n                context.lineTo(currentClip[6], currentClip[7]);\n                // clockwise (inner ring) for higher z tile\n                context.moveTo(clip[6], clip[7]);\n                context.lineTo(clip[4], clip[5]);\n                context.lineTo(clip[2], clip[3]);\n                context.lineTo(clip[0], clip[1]);\n                context.clip();\n              }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n          } else {\n            context.clearRect(x, y, w, h);\n          }\n        }\n        this.drawTileImage(\n          tile,\n          frameState,\n          x,\n          y,\n          w,\n          h,\n          tileGutter,\n          transition,\n          layerState.opacity\n        );\n        if (clips && !inTransition) {\n          context.restore();\n          this.renderedTiles.unshift(tile);\n        } else {\n          this.renderedTiles.push(tile);\n        }\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged =\n      !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n    this.renderedProjection = projection;\n\n    this.manageTilePyramid(\n      frameState,\n      tileSource,\n      tileGrid,\n      pixelRatio,\n      projection,\n      extent,\n      z,\n      tileLayer.getPreload()\n    );\n    this.scheduleExpireCache(frameState, tileSource);\n\n    this.postRender(context, frameState);\n\n    if (layerState.extent) {\n      context.restore();\n    }\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n\n  /**\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   * @param {number} opacity Opacity.\n   */\n  drawTileImage(tile, frameState, x, y, w, h, gutter, transition, opacity) {\n    const image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    const uid = getUid(this);\n    const tileAlpha = transition ? tile.getAlpha(uid, frameState.time) : 1;\n    const alpha = opacity * tileAlpha;\n    const alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(\n      image,\n      gutter,\n      gutter,\n      image.width - 2 * gutter,\n      image.height - 2 * gutter,\n      x,\n      y,\n      w,\n      h\n    );\n\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (tileAlpha !== 1) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return tile.getImage();\n  }\n\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @protected\n   */\n  scheduleExpireCache(frameState, tileSource) {\n    if (tileSource.canExpireCache()) {\n      /**\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n       * @param {import(\"../../PluggableMap.js\").default} map Map.\n       * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n       */\n      const postRenderFunction = function (tileSource, map, frameState) {\n        const tileSourceKey = getUid(tileSource);\n        if (tileSourceKey in frameState.usedTiles) {\n          tileSource.expireCache(\n            frameState.viewState.projection,\n            frameState.usedTiles[tileSourceKey]\n          );\n        }\n      }.bind(null, tileSource);\n\n      frameState.postRenderFunctions.push(\n        /** @type {import(\"../../PluggableMap.js\").PostRenderFunction} */ (\n          postRenderFunction\n        )\n      );\n    }\n  }\n\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */\n  updateUsedTiles(usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  }\n\n  /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to 'preload' levels.\n   * @param {function(import(\"../../Tile.js\").default):void} [opt_tileCallback] Tile callback.\n   * @protected\n   */\n  manageTilePyramid(\n    frameState,\n    tileSource,\n    tileGrid,\n    pixelRatio,\n    projection,\n    extent,\n    currentZ,\n    preload,\n    opt_tileCallback\n  ) {\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileQueue = frameState.tileQueue;\n    const minZoom = tileGrid.getMinZoom();\n    let tileCount = 0;\n    let tile, tileRange, tileResolution, x, y, z;\n    for (z = minZoom; z <= currentZ; ++z) {\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n      tileResolution = tileGrid.getResolution(z);\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (currentZ - z <= preload) {\n            ++tileCount;\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n            if (tile.getState() == TileState.IDLE) {\n              wantedTiles[tile.getKey()] = true;\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\n                tileQueue.enqueue([\n                  tile,\n                  tileSourceKey,\n                  tileGrid.getTileCoordCenter(tile.tileCoord),\n                  tileResolution,\n                ]);\n              }\n            }\n            if (opt_tileCallback !== undefined) {\n              opt_tileCallback(tile);\n            }\n          } else {\n            tileSource.useTile(z, x, y, projection);\n          }\n        }\n      }\n    }\n    tileSource.updateCacheSize(tileCount, projection);\n  }\n}\n\n/**\n * @function\n * @return {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default}\n */\nCanvasTileLayerRenderer.prototype.getLayer;\n\nexport default CanvasTileLayerRenderer;\n","/**\n * @module ol/layer/Tile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @extends {BaseTileLayer<TileSourceType>}\n * @api\n */\nclass TileLayer extends BaseTileLayer {\n  /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [opt_options] Tile layer options.\n   */\n  constructor(opt_options) {\n    super(opt_options);\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this);\n  }\n}\n\nexport default TileLayer;\n","/**\n * @module ol/layer/BaseVector\n */\nimport Layer from './Layer.js';\nimport RBush from 'rbush';\nimport {assign} from '../obj.js';\nimport {\n  createDefaultStyle,\n  toFunction as toStyleFunction,\n} from '../style/Style.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\n * higher priority.\n * @property {import(\"../style/Style.js\").StyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style} for default style\n * which will be used if this is not set.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\n * be recreated during animations. This means that no vectors will be shown clipped, but the\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\n * batches will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\n * be recreated during interactions. See also `updateWhileAnimating`.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  RENDER_ORDER: 'renderOrder',\n};\n\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @extends {Layer<VectorSourceType>}\n * @api\n */\nclass BaseVectorLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const baseOptions = assign({}, options);\n\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.declutter_ =\n      options.declutter !== undefined ? options.declutter : false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderBuffer_ =\n      options.renderBuffer !== undefined ? options.renderBuffer : 100;\n\n    /**\n     * User provided style.\n     * @type {import(\"../style/Style.js\").StyleLike}\n     * @private\n     */\n    this.style_ = null;\n\n    /**\n     * Style function for use within the library.\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     * @private\n     */\n    this.styleFunction_ = undefined;\n\n    this.setStyle(options.style);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.updateWhileAnimating_ =\n      options.updateWhileAnimating !== undefined\n        ? options.updateWhileAnimating\n        : false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.updateWhileInteracting_ =\n      options.updateWhileInteracting !== undefined\n        ? options.updateWhileInteracting\n        : false;\n  }\n\n  /**\n   * @return {boolean} Declutter.\n   */\n  getDeclutter() {\n    return this.declutter_;\n  }\n\n  /**\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\n   * that resolves with an array of features. The array will either contain the topmost feature\n   * when a hit was detected, or it will be empty.\n   *\n   * The hit detection algorithm used for this method is optimized for performance, but is less\n   * accurate than the one used in {@link import(\"../PluggableMap.js\").default#getFeaturesAtPixel}: Text\n   * is not considered, and icons are only represented by their bounding box instead of the exact\n   * image.\n   *\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with an array of features.\n   * @api\n   */\n  getFeatures(pixel) {\n    return super.getFeatures(pixel);\n  }\n\n  /**\n   * @return {number|undefined} Render buffer.\n   */\n  getRenderBuffer() {\n    return this.renderBuffer_;\n  }\n\n  /**\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\n   *     order.\n   */\n  getRenderOrder() {\n    return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ (\n      this.get(Property.RENDER_ORDER)\n    );\n  }\n\n  /**\n   * Get the style for features.  This returns whatever was passed to the `style`\n   * option at construction or to the `setStyle` method.\n   * @return {import(\"../style/Style.js\").StyleLike|null|undefined} Layer style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Get the style function.\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\n   * @api\n   */\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     animating.\n   */\n  getUpdateWhileAnimating() {\n    return this.updateWhileAnimating_;\n  }\n\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     interacting.\n   */\n  getUpdateWhileInteracting() {\n    return this.updateWhileInteracting_;\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (!frameState.declutterTree) {\n      frameState.declutterTree = new RBush(9);\n    }\n    /** @type {*} */ (this.getRenderer()).renderDeclutter(frameState);\n  }\n\n  /**\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\n   *     Render order.\n   */\n  setRenderOrder(renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  }\n\n  /**\n   * Set the style for features.  This can be a single style object, an array\n   * of styles, or a function that takes a feature and resolution and returns\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\n   * so only features that have their own styles will be rendered in the layer. Call\n   * `setStyle()` without arguments to reset to the default style. See\n   * {@link module:ol/style} for information on the default style.\n   * @param {import(\"../style/Style.js\").StyleLike|null} [opt_style] Layer style.\n   * @api\n   */\n  setStyle(opt_style) {\n    this.style_ = opt_style !== undefined ? opt_style : createDefaultStyle;\n    this.styleFunction_ =\n      opt_style === null ? undefined : toStyleFunction(this.style_);\n    this.changed();\n  }\n}\n\nexport default BaseVectorLayer;\n","/**\n * @module ol/render/canvas/Instruction\n */\n\n/**\n * @enum {number}\n */\nconst Instruction = {\n  BEGIN_GEOMETRY: 0,\n  BEGIN_PATH: 1,\n  CIRCLE: 2,\n  CLOSE_PATH: 3,\n  CUSTOM: 4,\n  DRAW_CHARS: 5,\n  DRAW_IMAGE: 6,\n  END_GEOMETRY: 7,\n  FILL: 8,\n  MOVE_TO_LINE_TO: 9,\n  SET_FILL_STYLE: 10,\n  SET_STROKE_STYLE: 11,\n  STROKE: 12,\n};\n\n/**\n * @type {Array<Instruction>}\n */\nexport const fillInstruction = [Instruction.FILL];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const strokeInstruction = [Instruction.STROKE];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const beginPathInstruction = [Instruction.BEGIN_PATH];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const closePathInstruction = [Instruction.CLOSE_PATH];\n\nexport default Instruction;\n","/**\n * @module ol/render/VectorContext\n */\n\n/**\n * @classdesc\n * Context for drawing geometries.  A vector context is available on render\n * events and does not need to be constructed directly.\n * @api\n */\nclass VectorContext {\n  /**\n   * Render a geometry with a custom renderer.\n   *\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   */\n  drawCustom(geometry, feature, renderer) {}\n\n  /**\n   * Render a geometry.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\n   */\n  drawGeometry(geometry) {}\n\n  /**\n   * Set the rendering style.\n   *\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\n   */\n  setStyle(style) {}\n\n  /**\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   */\n  drawCircle(circleGeometry, feature) {}\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"../style/Style.js\").default} style Style.\n   */\n  drawFeature(feature, style) {}\n\n  /**\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   */\n  drawGeometryCollection(geometryCollectionGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawLineString(lineStringGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiLineString(multiLineStringGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiPoint(multiPointGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiPolygon(multiPolygonGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawPoint(pointGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawPolygon(polygonGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawText(geometry, feature) {}\n\n  /**\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {}\n\n  /**\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [opt_declutterImageWithText] Shared data for combined decluttering with a text style.\n   */\n  setImageStyle(imageStyle, opt_declutterImageWithText) {}\n\n  /**\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [opt_declutterImageWithText] Shared data for combined decluttering with an image style.\n   */\n  setTextStyle(textStyle, opt_declutterImageWithText) {}\n}\n\nexport default VectorContext;\n","/**\n * @module ol/render/canvas/Builder\n */\nimport CanvasInstruction from './Instruction.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport Relationship from '../../extent/Relationship.js';\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  buffer,\n  clone,\n  containsCoordinate,\n  coordinateRelationship,\n} from '../../extent.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../canvas.js';\nimport {equals, reverseSubArray} from '../../array.js';\nimport {\n  inflateCoordinates,\n  inflateCoordinatesArray,\n  inflateMultiCoordinatesArray,\n} from '../../geom/flat/inflate.js';\n\nclass CanvasBuilder extends VectorContext {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super();\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate.js\").Coordinate}\n     */\n    this.tmpCoordinate_ = [];\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\n  }\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  applyPixelRatio(dashArray) {\n    const pixelRatio = this.pixelRatio;\n    return pixelRatio == 1\n      ? dashArray\n      : dashArray.map(function (dash) {\n          return dash * pixelRatio;\n        });\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */\n  appendFlatPointCoordinates(flatCoordinates, stride) {\n    const extent = this.getBufferedMaxExtent();\n    const tmpCoord = this.tmpCoordinate_;\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      tmpCoord[0] = flatCoordinates[i];\n      tmpCoord[1] = flatCoordinates[i + 1];\n      if (containsCoordinate(extent, tmpCoord)) {\n        coordinates[myEnd++] = tmpCoord[0];\n        coordinates[myEnd++] = tmpCoord[1];\n      }\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  appendFlatLineCoordinates(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    closed,\n    skipFirst\n  ) {\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    const extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    let lastXCoord = flatCoordinates[offset];\n    let lastYCoord = flatCoordinates[offset + 1];\n    const nextCoord = this.tmpCoordinate_;\n    let skipped = true;\n\n    let i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          coordinates[myEnd++] = lastXCoord;\n          coordinates[myEnd++] = lastYCoord;\n          skipped = false;\n        }\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n      } else if (nextRel === Relationship.INTERSECTING) {\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastXCoord = nextCoord[0];\n      lastYCoord = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if ((closed && skipped) || i === offset + stride) {\n      coordinates[myEnd++] = lastXCoord;\n      coordinates[myEnd++] = lastYCoord;\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const builderEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        false,\n        false\n      );\n      builderEnds.push(builderEnd);\n      offset = end;\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   */\n  drawCustom(geometry, feature, renderer) {\n    this.beginGeometry(geometry, feature);\n    const type = geometry.getType();\n    const stride = geometry.getStride();\n    const builderBegin = this.coordinates.length;\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\n    let offset;\n    if (type == GeometryType.MULTI_POLYGON) {\n      flatCoordinates =\n        /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n          geometry\n        ).getOrientedFlatCoordinates();\n      builderEndss = [];\n      const endss =\n        /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n          geometry\n        ).getEndss();\n      offset = 0;\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const myEnds = [];\n        offset = this.drawCustomCoordinates_(\n          flatCoordinates,\n          offset,\n          endss[i],\n          stride,\n          myEnds\n        );\n        builderEndss.push(myEnds);\n      }\n      this.instructions.push([\n        CanvasInstruction.CUSTOM,\n        builderBegin,\n        builderEndss,\n        geometry,\n        renderer,\n        inflateMultiCoordinatesArray,\n      ]);\n    } else if (\n      type == GeometryType.POLYGON ||\n      type == GeometryType.MULTI_LINE_STRING\n    ) {\n      builderEnds = [];\n      flatCoordinates =\n        type == GeometryType.POLYGON\n          ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\n              geometry\n            ).getOrientedFlatCoordinates()\n          : geometry.getFlatCoordinates();\n      offset = this.drawCustomCoordinates_(\n        flatCoordinates,\n        0,\n        /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry\n        ).getEnds(),\n        stride,\n        builderEnds\n      );\n      this.instructions.push([\n        CanvasInstruction.CUSTOM,\n        builderBegin,\n        builderEnds,\n        geometry,\n        renderer,\n        inflateCoordinatesArray,\n      ]);\n    } else if (\n      type == GeometryType.LINE_STRING ||\n      type == GeometryType.CIRCLE\n    ) {\n      flatCoordinates = geometry.getFlatCoordinates();\n      builderEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        false,\n        false\n      );\n      this.instructions.push([\n        CanvasInstruction.CUSTOM,\n        builderBegin,\n        builderEnd,\n        geometry,\n        renderer,\n        inflateCoordinates,\n      ]);\n    } else if (type == GeometryType.MULTI_POINT) {\n      flatCoordinates = geometry.getFlatCoordinates();\n      builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (builderEnd > builderBegin) {\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n          inflateCoordinates,\n        ]);\n      }\n    } else if (type == GeometryType.POINT) {\n      flatCoordinates = geometry.getFlatCoordinates();\n      this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n      builderEnd = this.coordinates.length;\n      this.instructions.push([\n        CanvasInstruction.CUSTOM,\n        builderBegin,\n        builderEnd,\n        geometry,\n        renderer,\n      ]);\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  beginGeometry(geometry, feature) {\n    this.beginGeometryInstruction1_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n    ];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n    ];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    return {\n      instructions: this.instructions,\n      hitDetectionInstructions: this.hitDetectionInstructions,\n      coordinates: this.coordinates,\n    };\n  }\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  reverseHitDetectionInstructions() {\n    const hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    let i;\n    const n = hitDetectionInstructions.length;\n    let instruction;\n    let type;\n    let begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    const state = this.state;\n    if (fillStyle) {\n      const fillStyleColor = fillStyle.getColor();\n      state.fillStyle = asColorLike(\n        fillStyleColor ? fillStyleColor : defaultFillStyle\n      );\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      const strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\n      );\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap =\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash.slice()\n        : defaultLineDash;\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset\n        ? strokeStyleLineDashOffset\n        : defaultLineDashOffset;\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin =\n        strokeStyleLineJoin !== undefined\n          ? strokeStyleLineJoin\n          : defaultLineJoin;\n      const strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth =\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit =\n        strokeStyleMiterLimit !== undefined\n          ? strokeStyleMiterLimit\n          : defaultMiterLimit;\n\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */\n  createFill(state) {\n    const fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align it!\n      fillInstruction.push(true);\n    }\n    return fillInstruction;\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  createStroke(state) {\n    return [\n      CanvasInstruction.SET_STROKE_STYLE,\n      state.strokeStyle,\n      state.lineWidth * this.pixelRatio,\n      state.lineCap,\n      state.lineJoin,\n      state.miterLimit,\n      this.applyPixelRatio(state.lineDash),\n      state.lineDashOffset * this.pixelRatio,\n    ];\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\n   */\n  updateFillStyle(state, createFill) {\n    const fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\n   */\n  updateStrokeStyle(state, applyStroke) {\n    const strokeStyle = state.strokeStyle;\n    const lineCap = state.lineCap;\n    const lineDash = state.lineDash;\n    const lineDashOffset = state.lineDashOffset;\n    const lineJoin = state.lineJoin;\n    const lineWidth = state.lineWidth;\n    const miterLimit = state.miterLimit;\n    if (\n      state.currentStrokeStyle != strokeStyle ||\n      state.currentLineCap != lineCap ||\n      (lineDash != state.currentLineDash &&\n        !equals(state.currentLineDash, lineDash)) ||\n      state.currentLineDashOffset != lineDashOffset ||\n      state.currentLineJoin != lineJoin ||\n      state.currentLineWidth != lineWidth ||\n      state.currentMiterLimit != miterLimit\n    ) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  endGeometry(feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  }\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  }\n}\n\nexport default CanvasBuilder;\n","/**\n * @module ol/render/canvas/ImageBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\n\nclass CanvasImageBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.imagePixelRatio_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.anchorX_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.anchorY_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.height_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.opacity_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.originX_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.originY_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = undefined;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size|undefined}\n     */\n    this.scale_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = undefined;\n\n    /**\n     * Data shared with a text builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawPoint(pointGeometry, feature) {\n    if (!this.image_) {\n      return;\n    }\n    this.beginGeometry(pointGeometry, feature);\n    const flatCoordinates = pointGeometry.getFlatCoordinates();\n    const stride = pointGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n    this.instructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.image_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_ * this.imagePixelRatio_,\n      this.anchorY_ * this.imagePixelRatio_,\n      Math.ceil(this.height_ * this.imagePixelRatio_),\n      this.opacity_,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      [\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\n      ],\n      Math.ceil(this.width_ * this.imagePixelRatio_),\n      this.declutterImageWithText_,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.hitDetectionImage_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_,\n      this.anchorY_,\n      this.height_,\n      this.opacity_,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      this.scale_,\n      this.width_,\n      this.declutterImageWithText_,\n    ]);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiPoint(multiPointGeometry, feature) {\n    if (!this.image_) {\n      return;\n    }\n    this.beginGeometry(multiPointGeometry, feature);\n    const flatCoordinates = multiPointGeometry.getFlatCoordinates();\n    const stride = multiPointGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n    this.instructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.image_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_ * this.imagePixelRatio_,\n      this.anchorY_ * this.imagePixelRatio_,\n      Math.ceil(this.height_ * this.imagePixelRatio_),\n      this.opacity_,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      [\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\n      ],\n      Math.ceil(this.width_ * this.imagePixelRatio_),\n      this.declutterImageWithText_,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.hitDetectionImage_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_,\n      this.anchorY_,\n      this.height_,\n      this.opacity_,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      this.scale_,\n      this.width_,\n      this.declutterImageWithText_,\n    ]);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    this.reverseHitDetectionInstructions();\n    // FIXME this doesn't really protect us against further calls to draw*Geometry\n    this.anchorX_ = undefined;\n    this.anchorY_ = undefined;\n    this.hitDetectionImage_ = null;\n    this.image_ = null;\n    this.imagePixelRatio_ = undefined;\n    this.height_ = undefined;\n    this.scale_ = undefined;\n    this.opacity_ = undefined;\n    this.originX_ = undefined;\n    this.originY_ = undefined;\n    this.rotateWithView_ = undefined;\n    this.rotation_ = undefined;\n    this.width_ = undefined;\n    return super.finish();\n  }\n\n  /**\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   * @param {Object} [opt_sharedData] Shared data.\n   */\n  setImageStyle(imageStyle, opt_sharedData) {\n    const anchor = imageStyle.getAnchor();\n    const size = imageStyle.getSize();\n    const hitDetectionImage = imageStyle.getHitDetectionImage();\n    const image = imageStyle.getImage(this.pixelRatio);\n    const origin = imageStyle.getOrigin();\n    this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\n    this.anchorX_ = anchor[0];\n    this.anchorY_ = anchor[1];\n    this.hitDetectionImage_ = hitDetectionImage;\n    this.image_ = image;\n    this.height_ = size[1];\n    this.opacity_ = imageStyle.getOpacity();\n    this.originX_ = origin[0];\n    this.originY_ = origin[1];\n    this.rotateWithView_ = imageStyle.getRotateWithView();\n    this.rotation_ = imageStyle.getRotation();\n    this.scale_ = imageStyle.getScaleArray();\n    this.width_ = size[0];\n    this.declutterImageWithText_ = opt_sharedData;\n  }\n}\n\nexport default CanvasImageBuilder;\n","/**\n * @module ol/render/canvas/LineStringBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, {\n  beginPathInstruction,\n  strokeInstruction,\n} from './Instruction.js';\nimport {defaultLineDash, defaultLineDashOffset} from '../canvas.js';\n\nclass CanvasLineStringBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatLineCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      false,\n      false\n    );\n    const moveToLineToInstruction = [\n      CanvasInstruction.MOVE_TO_LINE_TO,\n      myBegin,\n      myEnd,\n    ];\n    this.instructions.push(moveToLineToInstruction);\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\n    return end;\n  }\n\n  /**\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawLineString(lineStringGeometry, feature) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(lineStringGeometry, feature);\n    this.hitDetectionInstructions.push(\n      [\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ],\n      beginPathInstruction\n    );\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\n    const stride = lineStringGeometry.getStride();\n    this.drawFlatCoordinates_(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride\n    );\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiLineString(multiLineStringGeometry, feature) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(multiLineStringGeometry, feature);\n    this.hitDetectionInstructions.push(\n      [\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        state.lineDash,\n        state.lineDashOffset,\n      ],\n      beginPathInstruction\n    );\n    const ends = multiLineStringGeometry.getEnds();\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n    const stride = multiLineStringGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinates_(\n        flatCoordinates,\n        offset,\n        /** @type {number} */ (ends[i]),\n        stride\n      );\n    }\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const state = this.state;\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(strokeInstruction);\n    }\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    return super.finish();\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(strokeInstruction);\n      state.lastStroke = this.coordinates.length;\n    }\n    state.lastStroke = 0;\n    super.applyStroke(state);\n    this.instructions.push(beginPathInstruction);\n  }\n}\n\nexport default CanvasLineStringBuilder;\n","/**\n * @module ol/render/canvas/PolygonBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, {\n  beginPathInstruction,\n  closePathInstruction,\n  fillInstruction,\n  strokeInstruction,\n} from './Instruction.js';\nimport {defaultFillStyle} from '../canvas.js';\nimport {snap} from '../../geom/flat/simplify.js';\n\nclass CanvasPolygonBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\n    const state = this.state;\n    const fill = state.fillStyle !== undefined;\n    const stroke = state.strokeStyle !== undefined;\n    const numEnds = ends.length;\n    this.instructions.push(beginPathInstruction);\n    this.hitDetectionInstructions.push(beginPathInstruction);\n    for (let i = 0; i < numEnds; ++i) {\n      const end = ends[i];\n      const myBegin = this.coordinates.length;\n      const myEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        true,\n        !stroke\n      );\n      const moveToLineToInstruction = [\n        CanvasInstruction.MOVE_TO_LINE_TO,\n        myBegin,\n        myEnd,\n      ];\n      this.instructions.push(moveToLineToInstruction);\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\n      if (stroke) {\n        // Performance optimization: only call closePath() when we have a stroke.\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\n        this.instructions.push(closePathInstruction);\n        this.hitDetectionInstructions.push(closePathInstruction);\n      }\n      offset = end;\n    }\n    if (fill) {\n      this.instructions.push(fillInstruction);\n      this.hitDetectionInstructions.push(fillInstruction);\n    }\n    if (stroke) {\n      this.instructions.push(strokeInstruction);\n      this.hitDetectionInstructions.push(strokeInstruction);\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   */\n  drawCircle(circleGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(circleGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        state.lineDash,\n        state.lineDashOffset,\n      ]);\n    }\n    const flatCoordinates = circleGeometry.getFlatCoordinates();\n    const stride = circleGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    this.appendFlatLineCoordinates(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n      false,\n      false\n    );\n    const circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\n    this.instructions.push(beginPathInstruction, circleInstruction);\n    this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\n    if (state.fillStyle !== undefined) {\n      this.instructions.push(fillInstruction);\n      this.hitDetectionInstructions.push(fillInstruction);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.instructions.push(strokeInstruction);\n      this.hitDetectionInstructions.push(strokeInstruction);\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawPolygon(polygonGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(polygonGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        state.lineDash,\n        state.lineDashOffset,\n      ]);\n    }\n    const ends = polygonGeometry.getEnds();\n    const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\n    const stride = polygonGeometry.getStride();\n    this.drawFlatCoordinatess_(\n      flatCoordinates,\n      0,\n      /** @type {Array<number>} */ (ends),\n      stride\n    );\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiPolygon(multiPolygonGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(multiPolygonGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        state.lineDash,\n        state.lineDashOffset,\n      ]);\n    }\n    const endss = multiPolygonGeometry.getEndss();\n    const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\n    const stride = multiPolygonGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinatess_(\n        flatCoordinates,\n        offset,\n        endss[i],\n        stride\n      );\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    // We want to preserve topology when drawing polygons.  Polygons are\n    // simplified using quantization and point elimination. However, we might\n    // have received a mix of quantized and non-quantized geometries, so ensure\n    // that all are quantized by quantizing all coordinates in the batch.\n    const tolerance = this.tolerance;\n    if (tolerance !== 0) {\n      const coordinates = this.coordinates;\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = snap(coordinates[i], tolerance);\n      }\n    }\n    return super.finish();\n  }\n\n  /**\n   * @private\n   */\n  setFillStrokeStyles_() {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    if (fillStyle !== undefined) {\n      this.updateFillStyle(state, this.createFill);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.updateStrokeStyle(state, this.applyStroke);\n    }\n  }\n}\n\nexport default CanvasPolygonBuilder;\n","/**\n * @module ol/style/TextPlacement\n */\n\n/**\n * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n * @enum {string}\n */\nexport default {\n  POINT: 'point',\n  LINE: 'line',\n};\n","/**\n * @module ol/geom/flat/straightchunk\n */\n\n/**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\n  let chunkStart = offset;\n  let chunkEnd = offset;\n  let chunkM = 0;\n  let m = 0;\n  let start = offset;\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n  for (i = offset; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    if (x1 !== undefined) {\n      x23 = x2 - x1;\n      y23 = y2 - y1;\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\n      if (x12 !== undefined) {\n        m += m12;\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n        if (acos > maxAngle) {\n          if (m > chunkM) {\n            chunkM = m;\n            chunkStart = start;\n            chunkEnd = i;\n          }\n          m = 0;\n          start = i - stride;\n        }\n      }\n      m12 = m23;\n      x12 = x23;\n      y12 = y23;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  m += m23;\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\n}\n","/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport TextPlacement from '../../style/TextPlacement.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultPadding,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n  registerFont,\n} from '../canvas.js';\nimport {getUid} from '../../util.js';\nimport {intersects} from '../../extent.js';\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @enum {number}\n */\nexport const TEXT_ALIGN = {\n  'left': 0,\n  'end': 0,\n  'center': 0.5,\n  'right': 1,\n  'start': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1,\n};\n\nclass CanvasTextBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawText(geometry, feature) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n      return;\n    }\n\n    const coordinates = this.coordinates;\n    let begin = coordinates.length;\n\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let stride = geometry.getStride();\n\n    if (\n      textState.placement === TextPlacement.LINE &&\n      (geometryType == GeometryType.LINE_STRING ||\n        geometryType == GeometryType.MULTI_LINE_STRING ||\n        geometryType == GeometryType.POLYGON ||\n        geometryType == GeometryType.MULTI_POLYGON)\n    ) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == GeometryType.LINE_STRING) {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == GeometryType.MULTI_LINE_STRING) {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry\n        ).getEnds();\n      } else if (geometryType == GeometryType.POLYGON) {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n          .getEnds()\n          .slice(0, 1);\n      } else if (geometryType == GeometryType.MULTI_POLYGON) {\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        ends = [];\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      const textAlign = textState.textAlign;\n      let flatOffset = 0;\n      let flatEnd;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        if (textAlign == undefined) {\n          const range = matchingChunk(\n            textState.maxAngle,\n            flatCoordinates,\n            flatOffset,\n            ends[o],\n            stride\n          );\n          flatOffset = range[0];\n          flatEnd = range[1];\n        } else {\n          flatEnd = ends[o];\n        }\n        for (let i = flatOffset; i < flatEnd; i += stride) {\n          coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n        }\n        const end = coordinates.length;\n        flatOffset = ends[o];\n        this.drawChars_(begin, end);\n        begin = end;\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = textState.overflow ? null : [];\n      switch (geometryType) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT:\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n              geometry\n            ).getFlatCoordinates();\n          break;\n        case GeometryType.LINE_STRING:\n          flatCoordinates =\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoint();\n          break;\n        case GeometryType.CIRCLE:\n          flatCoordinates =\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\n              geometry\n            ).getCenter();\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoints();\n          stride = 2;\n          break;\n        case GeometryType.POLYGON:\n          flatCoordinates =\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          const interiorPoints =\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n          stride = 2;\n          break;\n        default:\n      }\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (end === begin) {\n        return;\n      }\n      if (\n        geometryWidths &&\n        (end - begin) / 2 !== flatCoordinates.length / stride\n      ) {\n        let beg = begin / 2;\n        geometryWidths = geometryWidths.filter((w, i) => {\n          const keep =\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n          if (!keep) {\n            --beg;\n          }\n          return keep;\n        });\n      }\n\n      this.saveTextStates_();\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(\n          textState.backgroundFill,\n          textState.backgroundStroke\n        );\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n          this.hitDetectionInstructions.push(this.createFill(this.state));\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (\n        padding != defaultPadding &&\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\n      ) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [1, 1],\n        NaN,\n        this.declutterImageWithText_,\n        padding == defaultPadding\n          ? defaultPadding\n          : padding.map(function (p) {\n              return p * pixelRatio;\n            }),\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      const scale = 1 / pixelRatio;\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [scale, scale],\n        NaN,\n        this.declutterImageWithText_,\n        padding,\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash,\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale,\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle,\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  drawChars_(begin, end) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\n      : 0;\n\n    this.instructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      1,\n      offsetY,\n      strokeKey,\n      strokeWidth,\n      text,\n      textKey,\n      1 / pixelRatio,\n    ]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [opt_sharedData] Shared data.\n   */\n  setTextStyle(textStyle, opt_sharedData) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(\n          textFillStyle.getColor() || defaultFillStyle\n        );\n      }\n\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset =\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth =\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit =\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(\n          textStrokeStyle.getColor() || defaultStrokeStyle\n        );\n      }\n\n      textState = this.textState_;\n      const font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.textBaseline =\n        textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ =\n        textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n      this.strokeKey_ = strokeState\n        ? (typeof strokeState.strokeStyle == 'string'\n            ? strokeState.strokeStyle\n            : getUid(strokeState.strokeStyle)) +\n          strokeState.lineCap +\n          strokeState.lineDashOffset +\n          '|' +\n          strokeState.lineWidth +\n          strokeState.lineJoin +\n          strokeState.miterLimit +\n          '[' +\n          strokeState.lineDash.join() +\n          ']'\n        : '';\n      this.textKey_ =\n        textState.font +\n        textState.scale +\n        (textState.textAlign || '?') +\n        (textState.textBaseline || '?');\n      this.fillKey_ = fillState\n        ? typeof fillState.fillStyle == 'string'\n          ? fillState.fillStyle\n          : '|' + getUid(fillState.fillStyle)\n        : '';\n    }\n    this.declutterImageWithText_ = opt_sharedData;\n  }\n}\n\nexport default CanvasTextBuilder;\n","/**\n * @module ol/render/canvas/BuilderGroup\n */\n\nimport Builder from './Builder.js';\nimport ImageBuilder from './ImageBuilder.js';\nimport LineStringBuilder from './LineStringBuilder.js';\nimport PolygonBuilder from './PolygonBuilder.js';\nimport TextBuilder from './TextBuilder.js';\n\n/**\n * @type {Object<import(\"./BuilderType\").default, typeof Builder>}\n */\nconst BATCH_CONSTRUCTORS = {\n  'Circle': PolygonBuilder,\n  'Default': Builder,\n  'Image': ImageBuilder,\n  'LineString': LineStringBuilder,\n  'Polygon': PolygonBuilder,\n  'Text': TextBuilder,\n};\n\nclass BuilderGroup {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tolerance_ = tolerance;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"./BuilderType\").default, Builder>>}\n     */\n    this.buildersByZIndex_ = {};\n  }\n\n  /**\n   * @return {!Object<string, !Object<import(\"./BuilderType\").default, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\n   */\n  finish() {\n    const builderInstructions = {};\n    for (const zKey in this.buildersByZIndex_) {\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\n      const builders = this.buildersByZIndex_[zKey];\n      for (const builderKey in builders) {\n        const builderInstruction = builders[builderKey].finish();\n        builderInstructions[zKey][builderKey] = builderInstruction;\n      }\n    }\n    return builderInstructions;\n  }\n\n  /**\n   * @param {number|undefined} zIndex Z index.\n   * @param {import(\"./BuilderType.js\").default} builderType Replay type.\n   * @return {import(\"../VectorContext.js\").default} Replay.\n   */\n  getBuilder(zIndex, builderType) {\n    const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\n    let replays = this.buildersByZIndex_[zIndexKey];\n    if (replays === undefined) {\n      replays = {};\n      this.buildersByZIndex_[zIndexKey] = replays;\n    }\n    let replay = replays[builderType];\n    if (replay === undefined) {\n      const Constructor = BATCH_CONSTRUCTORS[builderType];\n      replay = new Constructor(\n        this.tolerance_,\n        this.maxExtent_,\n        this.resolution_,\n        this.pixelRatio_\n      );\n      replays[builderType] = replay;\n    }\n    return replay;\n  }\n}\n\nexport default BuilderGroup;\n","/**\n * @module ol/render/canvas/BuilderType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  CIRCLE: 'Circle',\n  DEFAULT: 'Default',\n  IMAGE: 'Image',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  TEXT: 'Text',\n};\n","/**\n * @module ol/geom/flat/textpath\n */\nimport {lerp} from '../../math.js';\nimport {rotate} from './transform.js';\n\n/**\n * @param {Array<number>} flatCoordinates Path to put text on.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @param {string} text Text to place on the path.\n * @param {number} startM m along the path where the text starts.\n * @param {number} maxAngle Max angle between adjacent chars in radians.\n * @param {number} scale The product of the text scale and the device pixel ratio.\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\n * @param {string} font The font.\n * @param {Object<string, number>} cache A cache of measured widths.\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\n * @return {Array<Array<*>>} The result array (or null if `maxAngle` was\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\n */\nexport function drawTextOnPath(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  text,\n  startM,\n  maxAngle,\n  scale,\n  measureAndCacheTextWidth,\n  font,\n  cache,\n  rotation\n) {\n  let x2 = flatCoordinates[offset];\n  let y2 = flatCoordinates[offset + 1];\n  let x1 = 0;\n  let y1 = 0;\n  let segmentLength = 0;\n  let segmentM = 0;\n\n  function advance() {\n    x1 = x2;\n    y1 = y2;\n    offset += stride;\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    segmentM += segmentLength;\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n  do {\n    advance();\n  } while (offset < end - stride && segmentM + segmentLength < startM);\n\n  let interpolate = (startM - segmentM) / segmentLength;\n  const beginX = lerp(x1, x2, interpolate);\n  const beginY = lerp(y1, y2, interpolate);\n\n  const startOffset = offset - stride;\n  const startLength = segmentM;\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\n  while (offset < end - stride && segmentM + segmentLength < endM) {\n    advance();\n  }\n  interpolate = (endM - segmentM) / segmentLength;\n  const endX = lerp(x1, x2, interpolate);\n  const endY = lerp(y1, y2, interpolate);\n\n  // Keep text upright\n  let reverse;\n  if (rotation) {\n    const flat = [beginX, beginY, endX, endY];\n    rotate(flat, 0, 4, 2, rotation, flat, flat);\n    reverse = flat[0] > flat[2];\n  } else {\n    reverse = beginX > endX;\n  }\n\n  const PI = Math.PI;\n  const result = [];\n  const singleSegment = startOffset + stride === offset;\n\n  offset = startOffset;\n  segmentLength = 0;\n  segmentM = startLength;\n  x2 = flatCoordinates[offset];\n  y2 = flatCoordinates[offset + 1];\n\n  // All on the same segment\n  if (singleSegment) {\n    advance();\n\n    let previousAngle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      previousAngle += previousAngle > 0 ? -PI : PI;\n    }\n    const x = (endX + beginX) / 2;\n    const y = (endY + beginY) / 2;\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\n    return result;\n  }\n\n  let previousAngle;\n  for (let i = 0, ii = text.length; i < ii; ) {\n    advance();\n    let angle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      angle += angle > 0 ? -PI : PI;\n    }\n    if (previousAngle !== undefined) {\n      let delta = angle - previousAngle;\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\n      if (Math.abs(delta) > maxAngle) {\n        return null;\n      }\n    }\n    previousAngle = angle;\n\n    const iStart = i;\n    let charLength = 0;\n    for (; i < ii; ++i) {\n      const index = reverse ? ii - i - 1 : i;\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\n      if (\n        offset + stride < end &&\n        segmentM + segmentLength < startM + charLength + len / 2\n      ) {\n        break;\n      }\n      charLength += len;\n    }\n    if (i === iStart) {\n      continue;\n    }\n    const chars = reverse\n      ? text.substring(ii - iStart, ii - i)\n      : text.substring(iStart, i);\n    interpolate = (startM + charLength / 2 - segmentM) / segmentLength;\n    const x = lerp(x1, x2, interpolate);\n    const y = lerp(y1, y2, interpolate);\n    result.push([x, y, charLength / 2, angle, chars]);\n    startM += charLength;\n  }\n  return result;\n}\n","/**\n * @module ol/render/canvas/Executor\n */\nimport CanvasInstruction from './Instruction.js';\nimport {TEXT_ALIGN} from './TextBuilder.js';\nimport {WORKER_OFFSCREEN_CANVAS} from '../../has.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n  setFromArray as transformSetFromArray,\n} from '../../transform.js';\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\nimport {\n  defaultPadding,\n  defaultTextBaseline,\n  drawImageOrLabel,\n} from '../canvas.js';\nimport {\n  defaultTextAlign,\n  measureAndCacheTextWidth,\n  measureTextHeight,\n  measureTextWidths,\n} from '../canvas.js';\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\nimport {equals} from '../../array.js';\nimport {lineStringLength} from '../../geom/flat/length.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @typedef {Object} BBox\n * @property {number} minX Minimal x.\n * @property {number} minY Minimal y.\n * @property {number} maxX Maximal x.\n * @property {number} maxY Maximal y\n * @property {*} value Value.\n */\n\n/**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {BBox} declutterBox DeclutterBox.\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\n */\n\n/**\n * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */\n\n/**\n * @template T\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nconst tmpExtent = createEmpty();\n\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p4 = [];\n\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {BBox} Declutter bbox.\n */\nfunction getDeclutterBox(replayImageOrLabelArgs) {\n  return replayImageOrLabelArgs[3].declutterBox;\n}\n\nconst rtlRegEx = new RegExp(\n  /* eslint-disable prettier/prettier */\n  '[' +\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\n  ']'\n  /* eslint-enable prettier/prettier */\n);\n\n/**\n * @param {string} text Text.\n * @param {string} align Alignment.\n * @return {number} Text alignment.\n */\nfunction horizontalTextAlign(text, align) {\n  if ((align === 'start' || align === 'end') && !rtlRegEx.test(text)) {\n    align = align === 'start' ? 'left' : 'right';\n  }\n  return TEXT_ALIGN[align];\n}\n\nclass Executor {\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions\n   */\n  constructor(resolution, pixelRatio, overlaps, instructions) {\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.alignFill_;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = instructions.instructions;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = instructions.coordinates;\n\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = instructions.fillStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = instructions.strokeStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = instructions.textStates || {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.widths_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../canvas.js\").Label>}\n     */\n    this.labels_ = {};\n  }\n\n  /**\n   * @param {string} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import(\"../canvas.js\").Label} Label.\n   */\n  createLabel(text, textKey, fillKey, strokeKey) {\n    const key = text + textKey + fillKey + strokeKey;\n    if (this.labels_[key]) {\n      return this.labels_[key];\n    }\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\n    const textState = this.textStates[textKey];\n    const pixelRatio = this.pixelRatio;\n    const scale = [\n      textState.scale[0] * pixelRatio,\n      textState.scale[1] * pixelRatio,\n    ];\n    const align = horizontalTextAlign(\n      text,\n      textState.textAlign || defaultTextAlign\n    );\n    const strokeWidth =\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    const lines = text.split('\\n');\n    const numLines = lines.length;\n    const widths = [];\n    const width = measureTextWidths(textState.font, lines, widths);\n    const lineHeight = measureTextHeight(textState.font);\n    const height = lineHeight * numLines;\n    const renderWidth = width + strokeWidth;\n    const contextInstructions = [];\n    // make canvas 2 pixels wider to account for italic text width measurement errors\n    const w = (renderWidth + 2) * scale[0];\n    const h = (height + strokeWidth) * scale[1];\n    /** @type {import(\"../canvas.js\").Label} */\n    const label = {\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\n      contextInstructions: contextInstructions,\n    };\n    if (scale[0] != 1 || scale[1] != 1) {\n      contextInstructions.push('scale', scale);\n    }\n    contextInstructions.push('font', textState.font);\n    if (strokeKey) {\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\n      contextInstructions.push('lineWidth', strokeWidth);\n      contextInstructions.push('lineCap', strokeState.lineCap);\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\n      // eslint-disable-next-line\n      const Context = WORKER_OFFSCREEN_CANVAS ? OffscreenCanvasRenderingContext2D : CanvasRenderingContext2D;\n      if (Context.prototype.setLineDash) {\n        contextInstructions.push('setLineDash', [strokeState.lineDash]);\n        contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\n      }\n    }\n    if (fillKey) {\n      contextInstructions.push('fillStyle', fillState.fillStyle);\n    }\n    contextInstructions.push('textBaseline', 'middle');\n    contextInstructions.push('textAlign', 'center');\n    const leftRight = 0.5 - align;\n    const x = align * renderWidth + leftRight * strokeWidth;\n    let i;\n    if (strokeKey) {\n      for (i = 0; i < numLines; ++i) {\n        contextInstructions.push('strokeText', [\n          lines[i],\n          x + leftRight * widths[i],\n          0.5 * (strokeWidth + lineHeight) + i * lineHeight,\n        ]);\n      }\n    }\n    if (fillKey) {\n      for (i = 0; i < numLines; ++i) {\n        contextInstructions.push('fillText', [\n          lines[i],\n          x + leftRight * widths[i],\n          0.5 * (strokeWidth + lineHeight) + i * lineHeight,\n        ]);\n      }\n    }\n    this.labels_[key] = label;\n    return label;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayTextBackground_(\n    context,\n    p1,\n    p2,\n    p3,\n    p4,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(\n        context,\n        /** @type {Array<*>} */ (strokeInstruction)\n      );\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import(\"../../size.js\").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */\n  calculateImageOrLabelDimensions_(\n    sheetWidth,\n    sheetHeight,\n    centerX,\n    centerY,\n    width,\n    height,\n    anchorX,\n    anchorY,\n    originX,\n    originY,\n    rotation,\n    scale,\n    snapToPixel,\n    padding,\n    fillStroke,\n    feature\n  ) {\n    anchorX *= scale[0];\n    anchorY *= scale[1];\n    let x = centerX - anchorX;\n    let y = centerY - anchorY;\n\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n    const boxW = padding[3] + w * scale[0] + padding[1];\n    const boxH = padding[0] + h * scale[1] + padding[2];\n    const boxX = x - padding[3];\n    const boxY = y - padding[0];\n\n    if (fillStroke || rotation !== 0) {\n      p1[0] = boxX;\n      p4[0] = boxX;\n      p1[1] = boxY;\n      p2[1] = boxY;\n      p2[0] = boxX + boxW;\n      p3[0] = p2[0];\n      p3[1] = boxY + boxH;\n      p4[1] = p3[1];\n    }\n\n    let transform;\n    if (rotation !== 0) {\n      transform = composeTransform(\n        createTransform(),\n        centerX,\n        centerY,\n        1,\n        1,\n        rotation,\n        -centerX,\n        -centerY\n      );\n\n      applyTransform(transform, p1);\n      applyTransform(transform, p2);\n      applyTransform(transform, p3);\n      applyTransform(transform, p4);\n      createOrUpdate(\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\n        tmpExtent\n      );\n    } else {\n      createOrUpdate(\n        Math.min(boxX, boxX + boxW),\n        Math.min(boxY, boxY + boxH),\n        Math.max(boxX, boxX + boxW),\n        Math.max(boxY, boxY + boxH),\n        tmpExtent\n      );\n    }\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    return {\n      drawImageX: x,\n      drawImageY: y,\n      drawImageW: w,\n      drawImageH: h,\n      originX: originX,\n      originY: originY,\n      declutterBox: {\n        minX: tmpExtent[0],\n        minY: tmpExtent[1],\n        maxX: tmpExtent[2],\n        maxY: tmpExtent[3],\n        value: feature,\n      },\n      canvasTransform: transform,\n      scale: scale,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */\n  replayImageOrLabel_(\n    context,\n    contextScale,\n    imageOrLabel,\n    dimensions,\n    opacity,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    const fillStroke = !!(fillInstruction || strokeInstruction);\n\n    const box = dimensions.declutterBox;\n    const canvas = context.canvas;\n    const strokePadding = strokeInstruction\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\n      : 0;\n    const intersects =\n      box.minX - strokePadding <= canvas.width / contextScale &&\n      box.maxX + strokePadding >= 0 &&\n      box.minY - strokePadding <= canvas.height / contextScale &&\n      box.maxY + strokePadding >= 0;\n\n    if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(\n          context,\n          p1,\n          p2,\n          p3,\n          p4,\n          /** @type {Array<*>} */ (fillInstruction),\n          /** @type {Array<*>} */ (strokeInstruction)\n        );\n      }\n      drawImageOrLabel(\n        context,\n        dimensions.canvasTransform,\n        opacity,\n        imageOrLabel,\n        dimensions.originX,\n        dimensions.originY,\n        dimensions.drawImageW,\n        dimensions.drawImageH,\n        dimensions.drawImageX,\n        dimensions.drawImageY,\n        dimensions.scale\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  fill_(context) {\n    if (this.alignFill_) {\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\n      const repeatSize = 512 * this.pixelRatio;\n      context.save();\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (this.alignFill_) {\n      context.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  setStrokeStyle_(context, instruction) {\n    context['strokeStyle'] =\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\n    context.lineWidth = /** @type {number} */ (instruction[2]);\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\n    context.miterLimit = /** @type {number} */ (instruction[5]);\n    if (context.setLineDash) {\n      context.lineDashOffset = /** @type {number} */ (instruction[7]);\n      context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n    const textState = this.textStates[textKey];\n\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\n\n    const strokeState = this.strokeStates[strokeKey];\n    const pixelRatio = this.pixelRatio;\n    const align = horizontalTextAlign(\n      text,\n      textState.textAlign || defaultTextAlign\n    );\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\n    const strokeWidth =\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    // Remove the 2 pixels we added in createLabel() for the anchor\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n    const anchorY =\n      (baseline * label.height) / pixelRatio +\n      2 * (0.5 - baseline) * strokeWidth;\n\n    return {\n      label: label,\n      anchorX: anchorX,\n      anchorY: anchorY,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [opt_hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  execute_(\n    context,\n    contextScale,\n    transform,\n    instructions,\n    snapToPixel,\n    opt_featureCallback,\n    opt_hitExtent,\n    opt_declutterTree\n  ) {\n    /** @type {Array<number>} */\n    let pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(\n        this.coordinates,\n        0,\n        this.coordinates.length,\n        2,\n        transform,\n        this.pixelCoordinates_\n      );\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    let i = 0; // instruction index\n    const ii = instructions.length; // end of instructions\n    let d = 0; // data index\n    let dd; // end of per-instruction data\n    let anchorX,\n      anchorY,\n      prevX,\n      prevY,\n      roundX,\n      roundY,\n      image,\n      text,\n      textKey,\n      strokeKey,\n      fillKey;\n    let pendingFill = 0;\n    let pendingStroke = 0;\n    let lastFillInstruction = null;\n    let lastStrokeInstruction = null;\n    const coordinateCache = this.coordinateCache_;\n    const viewRotation = this.viewRotation_;\n    const viewRotationFromTransform =\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n\n    const state = /** @type {import(\"../../render.js\").State} */ ({\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation,\n    });\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    const batchSize =\n      this.instructions != instructions || this.overlaps ? 0 : 200;\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\n    let x, y, currentGeometry;\n    while (i < ii) {\n      const instruction = instructions[i];\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\n        instruction[0]\n      );\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n            instruction[1]\n          );\n          currentGeometry = instruction[3];\n          if (!feature.getGeometry()) {\n            i = /** @type {number} */ (instruction[2]);\n          } else if (\n            opt_hitExtent !== undefined &&\n            !intersects(opt_hitExtent, currentGeometry.getExtent())\n          ) {\n            i = /** @type {number} */ (instruction[2]) + 1;\n          } else {\n            ++i;\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = NaN;\n            prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */ (instruction[1]);\n          const x1 = pixelCoordinates[d];\n          const y1 = pixelCoordinates[d + 1];\n          const x2 = pixelCoordinates[d + 2];\n          const y2 = pixelCoordinates[d + 3];\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          const r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */ (instruction[1]);\n          dd = instruction[2];\n          const geometry =\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\n              instruction[3]\n            );\n          const renderer = instruction[4];\n          const fn = instruction.length == 6 ? instruction[5] : undefined;\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          const coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          image =\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\n              instruction[3]\n            );\n\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */ (instruction[4]);\n          anchorY = /** @type {number} */ (instruction[5]);\n          let height = /** @type {number} */ (instruction[6]);\n          const opacity = /** @type {number} */ (instruction[7]);\n          const originX = /** @type {number} */ (instruction[8]);\n          const originY = /** @type {number} */ (instruction[9]);\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\n          let rotation = /** @type {number} */ (instruction[11]);\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\n            instruction[12]\n          );\n          let width = /** @type {number} */ (instruction[13]);\n          const declutterImageWithText =\n            /** @type {import(\"../canvas.js\").DeclutterImageWithText} */ (\n              instruction[14]\n            );\n\n          if (!image && instruction.length >= 19) {\n            // create label images\n            text = /** @type {string} */ (instruction[18]);\n            textKey = /** @type {string} */ (instruction[19]);\n            strokeKey = /** @type {string} */ (instruction[20]);\n            fillKey = /** @type {string} */ (instruction[21]);\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\n              text,\n              textKey,\n              strokeKey,\n              fillKey\n            );\n            image = labelWithAnchor.label;\n            instruction[3] = image;\n            const textOffsetX = /** @type {number} */ (instruction[22]);\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n            instruction[4] = anchorX;\n            const textOffsetY = /** @type {number} */ (instruction[23]);\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n            instruction[5] = anchorY;\n            height = image.height;\n            instruction[6] = height;\n            width = image.width;\n            instruction[13] = width;\n          }\n\n          let geometryWidths;\n          if (instruction.length > 24) {\n            geometryWidths = /** @type {number} */ (instruction[24]);\n          }\n\n          let padding, backgroundFill, backgroundStroke;\n          if (instruction.length > 16) {\n            padding = /** @type {Array<number>} */ (instruction[15]);\n            backgroundFill = /** @type {boolean} */ (instruction[16]);\n            backgroundStroke = /** @type {boolean} */ (instruction[17]);\n          } else {\n            padding = defaultPadding;\n            backgroundFill = false;\n            backgroundStroke = false;\n          }\n\n          if (rotateWithView && viewRotationFromTransform) {\n            // Canvas is expected to be rotated to reverse view rotation.\n            rotation += viewRotation;\n          } else if (!rotateWithView && !viewRotationFromTransform) {\n            // Canvas is not rotated, images need to be rotated back to be north-up.\n            rotation -= viewRotation;\n          }\n          let widthIndex = 0;\n          for (; d < dd; d += 2) {\n            if (\n              geometryWidths &&\n              geometryWidths[widthIndex++] < width / this.pixelRatio\n            ) {\n              continue;\n            }\n            const dimensions = this.calculateImageOrLabelDimensions_(\n              image.width,\n              image.height,\n              pixelCoordinates[d],\n              pixelCoordinates[d + 1],\n              width,\n              height,\n              anchorX,\n              anchorY,\n              originX,\n              originY,\n              rotation,\n              scale,\n              snapToPixel,\n              padding,\n              backgroundFill || backgroundStroke,\n              feature\n            );\n            /** @type {ReplayImageOrLabelArgs} */\n            const args = [\n              context,\n              contextScale,\n              image,\n              dimensions,\n              opacity,\n              backgroundFill\n                ? /** @type {Array<*>} */ (lastFillInstruction)\n                : null,\n              backgroundStroke\n                ? /** @type {Array<*>} */ (lastStrokeInstruction)\n                : null,\n            ];\n            let imageArgs;\n            let imageDeclutterBox;\n            if (opt_declutterTree && declutterImageWithText) {\n              const index = dd - d;\n              if (!declutterImageWithText[index]) {\n                // We now have the image for an image+text combination.\n                declutterImageWithText[index] = args;\n                // Don't render anything for now, wait for the text.\n                continue;\n              }\n              imageArgs = declutterImageWithText[index];\n              delete declutterImageWithText[index];\n              imageDeclutterBox = getDeclutterBox(imageArgs);\n              if (opt_declutterTree.collides(imageDeclutterBox)) {\n                continue;\n              }\n            }\n            if (\n              opt_declutterTree &&\n              opt_declutterTree.collides(dimensions.declutterBox)\n            ) {\n              continue;\n            }\n            if (imageArgs) {\n              // We now have image and text for an image+text combination.\n              if (opt_declutterTree) {\n                opt_declutterTree.insert(imageDeclutterBox);\n              }\n              // Render the image before we render the text.\n              this.replayImageOrLabel_.apply(this, imageArgs);\n            }\n            if (opt_declutterTree) {\n              opt_declutterTree.insert(dimensions.declutterBox);\n            }\n            this.replayImageOrLabel_.apply(this, args);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          const begin = /** @type {number} */ (instruction[1]);\n          const end = /** @type {number} */ (instruction[2]);\n          const baseline = /** @type {number} */ (instruction[3]);\n          const overflow = /** @type {number} */ (instruction[4]);\n          fillKey = /** @type {string} */ (instruction[5]);\n          const maxAngle = /** @type {number} */ (instruction[6]);\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\n          const offsetY = /** @type {number} */ (instruction[8]);\n          strokeKey = /** @type {string} */ (instruction[9]);\n          const strokeWidth = /** @type {number} */ (instruction[10]);\n          text = /** @type {string} */ (instruction[11]);\n          textKey = /** @type {string} */ (instruction[12]);\n          const pixelRatioScale = [\n            /** @type {number} */ (instruction[13]),\n            /** @type {number} */ (instruction[13]),\n          ];\n\n          const textState = this.textStates[textKey];\n          const font = textState.font;\n          const textScale = [\n            textState.scale[0] * measurePixelRatio,\n            textState.scale[1] * measurePixelRatio,\n          ];\n\n          let cachedWidths;\n          if (font in this.widths_) {\n            cachedWidths = this.widths_[font];\n          } else {\n            cachedWidths = {};\n            this.widths_[font] = cachedWidths;\n          }\n\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          const textLength =\n            Math.abs(textScale[0]) *\n            measureAndCacheTextWidth(font, text, cachedWidths);\n          if (overflow || textLength <= pathLength) {\n            const textAlign = this.textStates[textKey].textAlign;\n            const startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];\n            const parts = drawTextOnPath(\n              pixelCoordinates,\n              begin,\n              end,\n              2,\n              text,\n              startM,\n              maxAngle,\n              Math.abs(textScale[0]),\n              measureAndCacheTextWidth,\n              font,\n              cachedWidths,\n              viewRotationFromTransform ? 0 : this.viewRotation_\n            );\n            drawChars: if (parts) {\n              /** @type {Array<ReplayImageOrLabelArgs>} */\n              const replayImageOrLabelArgs = [];\n              let c, cc, chars, label, part;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, '', strokeKey);\n                  anchorX =\n                    /** @type {number} */ (part[2]) +\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                  anchorY =\n                    baseline * label.height +\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\n                      textScale[0] -\n                    offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature\n                  );\n                  if (\n                    opt_declutterTree &&\n                    opt_declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    contextScale,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */ (part[2]);\n                  anchorY = baseline * label.height - offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature\n                  );\n                  if (\n                    opt_declutterTree &&\n                    opt_declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    contextScale,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (opt_declutterTree) {\n                opt_declutterTree.load(\n                  replayImageOrLabelArgs.map(getDeclutterBox)\n                );\n              }\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n              }\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (opt_featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n              instruction[1]\n            );\n            const result = opt_featureCallback(feature, currentGeometry);\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          roundX = (x + 0.5) | 0;\n          roundY = (y + 0.5) | 0;\n          if (roundX !== prevX || roundY !== prevY) {\n            context.moveTo(x, y);\n            prevX = roundX;\n            prevY = roundY;\n          }\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = (x + 0.5) | 0;\n            roundY = (y + 0.5) | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          lastFillInstruction = instruction;\n          this.alignFill_ = instruction[2];\n\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n\n          context.fillStyle =\n            /** @type {import(\"../../colorlike.js\").ColorLike} */ (\n              instruction[1]\n            );\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          lastStrokeInstruction = instruction;\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default:\n          ++i; // consume the instruction anyway, to avoid an infinite loop\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    opt_declutterTree\n  ) {\n    this.viewRotation_ = viewRotation;\n    this.execute_(\n      context,\n      contextScale,\n      transform,\n      this.instructions,\n      snapToPixel,\n      undefined,\n      undefined,\n      opt_declutterTree\n    );\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [opt_hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  executeHitDetection(\n    context,\n    transform,\n    viewRotation,\n    opt_featureCallback,\n    opt_hitExtent\n  ) {\n    this.viewRotation_ = viewRotation;\n    return this.execute_(\n      context,\n      1,\n      transform,\n      this.hitDetectionInstructions,\n      true,\n      opt_featureCallback,\n      opt_hitExtent\n    );\n  }\n}\n\nexport default Executor;\n","/**\n * @module ol/render/canvas/ExecutorGroup\n */\n\nimport BuilderType from './BuilderType.js';\nimport Executor from './Executor.js';\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {isEmpty} from '../../obj.js';\nimport {numberSafeCompareFunction} from '../../array.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @const\n * @type {Array<import(\"./BuilderType.js\").default>}\n */\nconst ORDER = [\n  BuilderType.POLYGON,\n  BuilderType.CIRCLE,\n  BuilderType.LINE_STRING,\n  BuilderType.IMAGE,\n  BuilderType.TEXT,\n  BuilderType.DEFAULT,\n];\n\nclass ExecutorGroup {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [opt_renderBuffer] Optional rendering buffer.\n   */\n  constructor(\n    maxExtent,\n    resolution,\n    pixelRatio,\n    overlaps,\n    allInstructions,\n    opt_renderBuffer\n  ) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = opt_renderBuffer;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"./Executor\").default>>}\n     */\n    this.executorsByZIndex_ = {};\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.hitDetectionTransform_ = createTransform();\n\n    this.createExecutors_(allInstructions);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n  createExecutors_(allInstructions) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      const instructionByZindex = allInstructions[zIndex];\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(\n          this.resolution_,\n          this.pixelRatio_,\n          this.overlaps_,\n          instructions\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Array<import(\"./BuilderType.js\").default>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    resolution,\n    rotation,\n    hitTolerance,\n    callback,\n    declutteredFeatures\n  ) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = composeTransform(\n      this.hitDetectionTransform_,\n      hitTolerance + 0.5,\n      hitTolerance + 0.5,\n      1 / resolution,\n      -1 / resolution,\n      -rotation,\n      -coordinate[0],\n      -coordinate[1]\n    );\n\n    const newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(\n        contextSize,\n        contextSize\n      );\n    }\n    const context = this.hitDetectionContext_;\n\n    if (\n      context.canvas.width !== contextSize ||\n      context.canvas.height !== contextSize\n    ) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    let hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(\n        hitExtent,\n        resolution * (this.renderBuffer_ + hitTolerance),\n        hitExtent\n      );\n    }\n\n    const indexes = getPixelIndexArray(hitTolerance);\n\n    let builderType;\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry) {\n      const imageData = context.getImageData(\n        0,\n        0,\n        contextSize,\n        contextSize\n      ).data;\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (\n            !declutteredFeatures ||\n            (builderType !== BuilderType.IMAGE &&\n              builderType !== BuilderType.TEXT) ||\n            declutteredFeatures.indexOf(feature) !== -1\n          ) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - (idx % contextSize);\n            const y = hitTolerance - ((idx / contextSize) | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n            if (result) {\n              return result;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n\n    let i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(\n            context,\n            transform,\n            rotation,\n            featureCallback,\n            hitExtent\n          );\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>} Clip coordinates.\n   */\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.executorsByZIndex_);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"./BuilderType.js\").default>} [opt_builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    opt_builderTypes,\n    opt_declutterTree\n  ) {\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n\n    // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n\n    const builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;\n    let i, ii, j, jj, replays, replay;\n    if (opt_declutterTree) {\n      zs.reverse();\n    }\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        replay = replays[builderType];\n        if (replay !== undefined) {\n          replay.execute(\n            context,\n            contextScale,\n            transform,\n            viewRotation,\n            snapToPixel,\n            opt_declutterTree\n          );\n        }\n      }\n    }\n\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  }\n}\n\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nconst circlePixelIndexArrayCache = {};\n\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      let distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  const pixelIndex = [];\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\n\nexport default ExecutorGroup;\n","/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\nimport GeometryType from '../../geom/GeometryType.js';\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n} from '../canvas.js';\nimport {equals} from '../../array.js';\nimport {intersects} from '../../extent.js';\nimport {transform2D} from '../../geom/flat/transform.js';\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\nclass CanvasImmediateRenderer extends VectorContext {\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {number} [opt_squaredTolerance] Optional squared tolerance for simplification.\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_userTransform] Transform from user to view projection.\n   */\n  constructor(\n    context,\n    pixelRatio,\n    extent,\n    transform,\n    viewRotation,\n    opt_squaredTolerance,\n    opt_userTransform\n  ) {\n    super();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = transform;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = viewRotation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.squaredTolerance_ = opt_squaredTolerance;\n\n    /**\n     * @private\n     * @type {import(\"../../proj.js\").TransformFunction}\n     */\n    this.userTransform_ = opt_userTransform;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.contextFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.contextStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.contextTextState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.fillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.strokeState_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorY_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageHeight_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOpacity_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n    this.imageScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageWidth_ = 0;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.textRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n    this.textScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = [];\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpLocalTransform_ = createTransform();\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawImages_(flatCoordinates, offset, end, stride) {\n    if (!this.image_) {\n      return;\n    }\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    const context = this.context_;\n    const localTransform = this.tmpLocalTransform_;\n    const alpha = context.globalAlpha;\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n    let rotation = this.imageRotation_;\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n      if (\n        rotation !== 0 ||\n        this.imageScale_[0] != 1 ||\n        this.imageScale_[1] != 1\n      ) {\n        const centerX = x + this.imageAnchorX_;\n        const centerY = y + this.imageAnchorY_;\n        composeTransform(\n          localTransform,\n          centerX,\n          centerY,\n          1,\n          1,\n          rotation,\n          -centerX,\n          -centerY\n        );\n        context.setTransform.apply(context, localTransform);\n        context.translate(centerX, centerY);\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          -this.imageAnchorX_,\n          -this.imageAnchorY_,\n          this.imageWidth_,\n          this.imageHeight_\n        );\n        context.setTransform(1, 0, 0, 1, 0, 0);\n      } else {\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          x,\n          y,\n          this.imageWidth_,\n          this.imageHeight_\n        );\n      }\n    }\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawText_(flatCoordinates, offset, end, stride) {\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n    this.setContextTextState_(this.textState_);\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    const context = this.context_;\n    let rotation = this.textRotation_;\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (; offset < end; offset += stride) {\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n      if (\n        rotation !== 0 ||\n        this.textScale_[0] != 1 ||\n        this.textScale_[1] != 1\n      ) {\n        const localTransform = composeTransform(\n          this.tmpLocalTransform_,\n          x,\n          y,\n          1,\n          1,\n          rotation,\n          -x,\n          -y\n        );\n        context.setTransform.apply(context, localTransform);\n        context.translate(x, y);\n        context.scale(this.textScale_[0], this.textScale_[1]);\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, 0, 0);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, 0, 0);\n        }\n        context.setTransform(1, 0, 0, 1, 0, 0);\n      } else {\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, x, y);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, x, y);\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    const context = this.context_;\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    let length = pixelCoordinates.length;\n    if (close) {\n      length -= 2;\n    }\n    for (let i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n    return end;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawRings_(flatCoordinates, offset, ends, stride) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(\n        flatCoordinates,\n        offset,\n        ends[i],\n        stride,\n        true\n      );\n    }\n    return offset;\n  }\n\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\n   * @api\n   */\n  drawCircle(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const pixelCoordinates = transformGeom2D(\n        geometry,\n        this.transform_,\n        this.pixelCoordinates_\n      );\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\n      const radius = Math.sqrt(dx * dx + dy * dy);\n      const context = this.context_;\n      context.beginPath();\n      context.arc(\n        pixelCoordinates[0],\n        pixelCoordinates[1],\n        radius,\n        0,\n        2 * Math.PI\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  }\n\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\n   * @api\n   */\n  setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  setTransform(transform) {\n    this.transform_ = transform;\n  }\n\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\n   *\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\n   * @api\n   */\n  drawGeometry(geometry) {\n    const type = geometry.getType();\n    switch (type) {\n      case GeometryType.POINT:\n        this.drawPoint(\n          /** @type {import(\"../../geom/Point.js\").default} */ (geometry)\n        );\n        break;\n      case GeometryType.LINE_STRING:\n        this.drawLineString(\n          /** @type {import(\"../../geom/LineString.js\").default} */ (geometry)\n        );\n        break;\n      case GeometryType.POLYGON:\n        this.drawPolygon(\n          /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n        );\n        break;\n      case GeometryType.MULTI_POINT:\n        this.drawMultiPoint(\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry)\n        );\n        break;\n      case GeometryType.MULTI_LINE_STRING:\n        this.drawMultiLineString(\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n            geometry\n          )\n        );\n        break;\n      case GeometryType.MULTI_POLYGON:\n        this.drawMultiPolygon(\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry)\n        );\n        break;\n      case GeometryType.GEOMETRY_COLLECTION:\n        this.drawGeometryCollection(\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\n            geometry\n          )\n        );\n        break;\n      case GeometryType.CIRCLE:\n        this.drawCircle(\n          /** @type {import(\"../../geom/Circle.js\").default} */ (geometry)\n        );\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer VectorLayer} instead.\n   *\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {import(\"../../style/Style.js\").default} style Style.\n   * @api\n   */\n  drawFeature(feature, style) {\n    const geometry = style.getGeometryFunction()(feature);\n    if (!geometry || !intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  }\n\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\n   */\n  drawGeometryCollection(geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.drawGeometry(geometries[i]);\n    }\n  }\n\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\n   */\n  drawPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Point.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\n   */\n  drawMultiPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\n   */\n  drawLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/LineString.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        geometry.getStride(),\n        false\n      );\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\n   */\n  drawMultiLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry.simplifyTransformed(\n            this.squaredTolerance_,\n            this.userTransform_\n          )\n        );\n    }\n    const geometryExtent = geometry.getExtent();\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.moveToLineTo_(\n          flatCoordinates,\n          offset,\n          ends[i],\n          stride,\n          false\n        );\n      }\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  }\n\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\n   */\n  drawPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      context.beginPath();\n      this.drawRings_(\n        geometry.getOrientedFlatCoordinates(),\n        0,\n        /** @type {Array<number>} */ (geometry.getEnds()),\n        geometry.getStride()\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   */\n  drawMultiPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\n      let offset = 0;\n      const endss = geometry.getEndss();\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const ends = endss[i];\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\n   * @private\n   */\n  setContextFillState_(fillState) {\n    const context = this.context_;\n    const contextFillState = this.contextFillState_;\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle,\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = fillState.fillStyle;\n        context.fillStyle = fillState.fillStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\n   * @private\n   */\n  setContextStrokeState_(strokeState) {\n    const context = this.context_;\n    const contextStrokeState = this.contextStrokeState_;\n    if (!contextStrokeState) {\n      context.lineCap = strokeState.lineCap;\n      if (context.setLineDash) {\n        context.setLineDash(strokeState.lineDash);\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n      context.lineJoin = strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle,\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = strokeState.lineCap;\n        context.lineCap = strokeState.lineCap;\n      }\n      if (context.setLineDash) {\n        if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n          context.setLineDash(\n            (contextStrokeState.lineDash = strokeState.lineDash)\n          );\n        }\n        if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n          contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\n          context.lineDashOffset = strokeState.lineDashOffset;\n        }\n      }\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = strokeState.lineJoin;\n        context.lineJoin = strokeState.lineJoin;\n      }\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = strokeState.lineWidth;\n        context.lineWidth = strokeState.lineWidth;\n      }\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = strokeState.miterLimit;\n        context.miterLimit = strokeState.miterLimit;\n      }\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\n        context.strokeStyle = strokeState.strokeStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\n   * @private\n   */\n  setContextTextState_(textState) {\n    const context = this.context_;\n    const contextTextState = this.contextTextState_;\n    const textAlign = textState.textAlign\n      ? textState.textAlign\n      : defaultTextAlign;\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);\n      context.textBaseline = /** @type {CanvasTextBaseline} */ (\n        textState.textBaseline\n      );\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline,\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = textState.font;\n        context.font = textState.font;\n      }\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = /** @type {CanvasTextAlign} */ (textAlign);\n        context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);\n      }\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = /** @type {CanvasTextBaseline} */ (\n          textState.textBaseline\n        );\n        context.textBaseline = /** @type {CanvasTextBaseline} */ (\n          textState.textBaseline\n        );\n      }\n    }\n  }\n\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      const fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(\n          fillStyleColor ? fillStyleColor : defaultFillStyle\n        ),\n      };\n    }\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      const strokeStyleColor = strokeStyle.getColor();\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      const strokeStyleWidth = strokeStyle.getWidth();\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      const lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash\n        : defaultLineDash;\n      this.strokeState_ = {\n        lineCap:\n          strokeStyleLineCap !== undefined\n            ? strokeStyleLineCap\n            : defaultLineCap,\n        lineDash:\n          this.pixelRatio_ === 1\n            ? lineDash\n            : lineDash.map((n) => n * this.pixelRatio_),\n        lineDashOffset:\n          (strokeStyleLineDashOffset\n            ? strokeStyleLineDashOffset\n            : defaultLineDashOffset) * this.pixelRatio_,\n        lineJoin:\n          strokeStyleLineJoin !== undefined\n            ? strokeStyleLineJoin\n            : defaultLineJoin,\n        lineWidth:\n          (strokeStyleWidth !== undefined\n            ? strokeStyleWidth\n            : defaultLineWidth) * this.pixelRatio_,\n        miterLimit:\n          strokeStyleMiterLimit !== undefined\n            ? strokeStyleMiterLimit\n            : defaultMiterLimit,\n        strokeStyle: asColorLike(\n          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\n        ),\n      };\n    }\n  }\n\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   */\n  setImageStyle(imageStyle) {\n    let imageSize;\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\n      this.image_ = null;\n      return;\n    }\n    const imageAnchor = imageStyle.getAnchor();\n    const imageOrigin = imageStyle.getOrigin();\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\n    this.imageAnchorX_ = imageAnchor[0] * this.pixelRatio_;\n    this.imageAnchorY_ = imageAnchor[1] * this.pixelRatio_;\n    this.imageHeight_ = imageSize[1] * this.pixelRatio_;\n    this.imageOpacity_ = imageStyle.getOpacity();\n    this.imageOriginX_ = imageOrigin[0];\n    this.imageOriginY_ = imageOrigin[1];\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\n    this.imageRotation_ = imageStyle.getRotation();\n    this.imageScale_ = imageStyle.getScaleArray();\n    this.imageWidth_ = imageSize[0] * this.pixelRatio_;\n  }\n\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   */\n  setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        const textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(\n            textFillStyleColor ? textFillStyleColor : defaultFillStyle\n          ),\n        };\n      }\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        const textStrokeStyleColor = textStrokeStyle.getColor();\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        const textStrokeStyleLineDashOffset =\n          textStrokeStyle.getLineDashOffset();\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap:\n            textStrokeStyleLineCap !== undefined\n              ? textStrokeStyleLineCap\n              : defaultLineCap,\n          lineDash: textStrokeStyleLineDash\n            ? textStrokeStyleLineDash\n            : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset\n            ? textStrokeStyleLineDashOffset\n            : defaultLineDashOffset,\n          lineJoin:\n            textStrokeStyleLineJoin !== undefined\n              ? textStrokeStyleLineJoin\n              : defaultLineJoin,\n          lineWidth:\n            textStrokeStyleWidth !== undefined\n              ? textStrokeStyleWidth\n              : defaultLineWidth,\n          miterLimit:\n            textStrokeStyleMiterLimit !== undefined\n              ? textStrokeStyleMiterLimit\n              : defaultMiterLimit,\n          strokeStyle: asColorLike(\n            textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle\n          ),\n        };\n      }\n      const textFont = textStyle.getFont();\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      const textScale = textStyle.getScaleArray();\n      const textText = textStyle.getText();\n      const textTextAlign = textStyle.getTextAlign();\n      const textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ? textFont : defaultFont,\n        textAlign:\n          textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\n        textBaseline:\n          textTextBaseline !== undefined\n            ? textTextBaseline\n            : defaultTextBaseline,\n      };\n      this.text_ = textText !== undefined ? textText : '';\n      this.textOffsetX_ =\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n      this.textOffsetY_ =\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n      this.textRotateWithView_ =\n        textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = [\n        this.pixelRatio_ * textScale[0],\n        this.pixelRatio_ * textScale[1],\n      ];\n    }\n  }\n}\n\nexport default CanvasImmediateRenderer;\n","/**\n * @module ol/renderer/vector\n */\nimport BuilderType from '../render/canvas/BuilderType.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport ImageState from '../ImageState.js';\nimport {getUid} from '../util.js';\n\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature feature} or {@link module:ol/render/Feature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nconst SIMPLIFY_TOLERANCE = 0.5;\n\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default,\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object): void>}\n */\nconst GEOMETRY_RENDERERS = {\n  'Point': renderPointGeometry,\n  'LineString': renderLineStringGeometry,\n  'Polygon': renderPolygonGeometry,\n  'MultiPoint': renderMultiPointGeometry,\n  'MultiLineString': renderMultiLineStringGeometry,\n  'MultiPolygon': renderMultiPolygonGeometry,\n  'GeometryCollection': renderGeometryCollectionGeometry,\n  'Circle': renderCircleGeometry,\n};\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nexport function defaultOrder(feature1, feature2) {\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nexport function getSquaredTolerance(resolution, pixelRatio) {\n  const tolerance = getTolerance(resolution, pixelRatio);\n  return tolerance * tolerance;\n}\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nexport function getTolerance(resolution, pixelRatio) {\n  return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderCircleGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  opt_declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const circleReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      BuilderType.CIRCLE\n    );\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    circleReplay.drawCircle(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      BuilderType.TEXT\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n * @return {boolean} `true` if style is loading.\n */\nexport function renderFeature(\n  replayGroup,\n  feature,\n  style,\n  squaredTolerance,\n  listener,\n  opt_transform,\n  opt_declutterBuilderGroup\n) {\n  let loading = false;\n  const imageStyle = style.getImage();\n  if (imageStyle) {\n    let imageState = imageStyle.getImageState();\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n      imageStyle.unlistenImageChange(listener);\n    } else {\n      if (imageState == ImageState.IDLE) {\n        imageStyle.load();\n      }\n      imageState = imageStyle.getImageState();\n      imageStyle.listenImageChange(listener);\n      loading = true;\n    }\n  }\n  renderFeatureInternal(\n    replayGroup,\n    feature,\n    style,\n    squaredTolerance,\n    opt_transform,\n    opt_declutterBuilderGroup\n  );\n\n  return loading;\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderFeatureInternal(\n  replayGroup,\n  feature,\n  style,\n  squaredTolerance,\n  opt_transform,\n  opt_declutterBuilderGroup\n) {\n  const geometry = style.getGeometryFunction()(feature);\n  if (!geometry) {\n    return;\n  }\n  const simplifiedGeometry = geometry.simplifyTransformed(\n    squaredTolerance,\n    opt_transform\n  );\n  const renderer = style.getRenderer();\n  if (renderer) {\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n  } else {\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n    geometryRenderer(\n      replayGroup,\n      simplifiedGeometry,\n      style,\n      feature,\n      opt_declutterBuilderGroup\n    );\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n  if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {\n    const geometries =\n      /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\n        geometry\n      ).getGeometries();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      renderGeometry(replayGroup, geometries[i], style, feature);\n    }\n    return;\n  }\n  const replay = replayGroup.getBuilder(style.getZIndex(), BuilderType.DEFAULT);\n  replay.drawCustom(\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry),\n    feature,\n    style.getRenderer()\n  );\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderGeometryCollectionGeometry(\n  replayGroup,\n  geometry,\n  style,\n  feature,\n  opt_declutterBuilderGroup\n) {\n  const geometries = geometry.getGeometriesArray();\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n    geometryRenderer(\n      replayGroup,\n      geometries[i],\n      style,\n      feature,\n      opt_declutterBuilderGroup\n    );\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderLineStringGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  opt_declutterBuilderGroup\n) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      BuilderType.LINE_STRING\n    );\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawLineString(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      BuilderType.TEXT\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiLineStringGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  opt_declutterBuilderGroup\n) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      BuilderType.LINE_STRING\n    );\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawMultiLineString(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      BuilderType.TEXT\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPolygonGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  opt_declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (strokeStyle || fillStyle) {\n    const polygonReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      BuilderType.POLYGON\n    );\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawMultiPolygon(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      BuilderType.TEXT\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPointGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  opt_declutterBuilderGroup\n) {\n  const imageStyle = style.getImage();\n  const textStyle = style.getText();\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n  let declutterImageWithText;\n  if (opt_declutterBuilderGroup) {\n    builderGroup = opt_declutterBuilderGroup;\n    declutterImageWithText =\n      imageStyle && textStyle && textStyle.getText() ? {} : undefined;\n  }\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    const imageReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      BuilderType.IMAGE\n    );\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawPoint(geometry, feature);\n  }\n  if (textStyle && textStyle.getText()) {\n    const textReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      BuilderType.TEXT\n    );\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPointGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  opt_declutterBuilderGroup\n) {\n  const imageStyle = style.getImage();\n  const textStyle = style.getText();\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n  let declutterImageWithText;\n  if (opt_declutterBuilderGroup) {\n    builderGroup = opt_declutterBuilderGroup;\n    declutterImageWithText =\n      imageStyle && textStyle && textStyle.getText() ? {} : undefined;\n  }\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    const imageReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      BuilderType.IMAGE\n    );\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawMultiPoint(geometry, feature);\n  }\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      BuilderType.TEXT\n    );\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPolygonGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  opt_declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const polygonReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      BuilderType.POLYGON\n    );\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawPolygon(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      BuilderType.TEXT\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n","/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  apply,\n  makeInverse,\n  makeScale,\n  toString as transformToString,\n} from '../../transform.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {equals} from '../../array.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.dirty_ = false;\n\n    /**\n     * @type {ImageData}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n  useContainer(target, transform, opacity) {\n    if (opacity < 1) {\n      target = null;\n    }\n    super.useContainer(target, transform, opacity);\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  renderWorlds(executorGroup, frameState, opt_declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.context;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      const transform = this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth\n      );\n      executorGroup.execute(\n        context,\n        1,\n        transform,\n        rotation,\n        snapToPixel,\n        undefined,\n        opt_declutterTree\n      );\n    } while (++world < endWorld);\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.renderWorlds(\n        this.declutterExecutorGroup,\n        frameState,\n        frameState.declutterTree\n      );\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = transformToString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    const context = this.context;\n    const canvas = context.canvas;\n\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n    if (\n      (!replayGroup || replayGroup.isEmpty()) &&\n      (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())\n    ) {\n      if (!this.containerReused && canvas.width > 0) {\n        canvas.width = 0;\n      }\n      return this.container;\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      context.restore();\n    }\n\n    this.postRender(context, frameState);\n\n    const opacity = layerState.opacity;\n    const container = this.container;\n    if (opacity !== parseFloat(container.style.opacity)) {\n      container.style.opacity = opacity === 1 ? '' : String(opacity);\n    }\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise(\n      /**\n       * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n       * @this {CanvasVectorLayerRenderer}\n       */\n      function (resolve) {\n        if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n          const size = [this.context.canvas.width, this.context.canvas.height];\n          apply(this.pixelTransform, size);\n          const center = this.renderedCenter_;\n          const resolution = this.renderedResolution_;\n          const rotation = this.renderedRotation_;\n          const projection = this.renderedProjection_;\n          const extent = this.wrappedRenderedExtent_;\n          const layer = this.getLayer();\n          const transforms = [];\n          const width = size[0] * HIT_DETECT_RESOLUTION;\n          const height = size[1] * HIT_DETECT_RESOLUTION;\n          transforms.push(\n            this.getRenderTransform(\n              center,\n              resolution,\n              rotation,\n              HIT_DETECT_RESOLUTION,\n              width,\n              height,\n              0\n            ).slice()\n          );\n          const source = layer.getSource();\n          const projectionExtent = projection.getExtent();\n          if (\n            source.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, extent)\n          ) {\n            let startX = extent[0];\n            const worldWidth = getWidth(projectionExtent);\n            let world = 0;\n            let offsetX;\n            while (startX < projectionExtent[0]) {\n              --world;\n              offsetX = worldWidth * world;\n              transforms.push(\n                this.getRenderTransform(\n                  center,\n                  resolution,\n                  rotation,\n                  HIT_DETECT_RESOLUTION,\n                  width,\n                  height,\n                  offsetX\n                ).slice()\n              );\n              startX += worldWidth;\n            }\n            world = 0;\n            startX = extent[2];\n            while (startX > projectionExtent[2]) {\n              ++world;\n              offsetX = worldWidth * world;\n              transforms.push(\n                this.getRenderTransform(\n                  center,\n                  resolution,\n                  rotation,\n                  HIT_DETECT_RESOLUTION,\n                  width,\n                  height,\n                  offsetX\n                ).slice()\n              );\n              startX -= worldWidth;\n            }\n          }\n\n          this.hitDetectionImageData_ = createHitDetectionImageData(\n            size,\n            transforms,\n            this.renderedFeatures_,\n            layer.getStyleFunction(),\n            extent,\n            resolution,\n            rotation\n          );\n        }\n        resolve(\n          hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\n        );\n      }.bind(this)\n    );\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          })\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some((executorGroup) => {\n      return (result = executorGroup.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        featureCallback,\n        executorGroup === this.declutterExecutorGroup\n          ? frameState.declutterTree.all().map((item) => item.value)\n          : null\n      ));\n    });\n\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (!this.dirty_ && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      !this.dirty_ &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    this.dirty_ = false;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio\n    );\n\n    let declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(\n        getRenderTolerance(resolution, pixelRatio),\n        extent,\n        resolution,\n        pixelRatio\n      );\n    }\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(\n          toUserExtent(loadExtents[i], projection),\n          resolution,\n          userProjection\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       * @this {CanvasVectorLayerRenderer}\n       */\n      function (feature) {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            declutterBuilderGroup\n          );\n          this.dirty_ = this.dirty_ || dirty;\n        }\n      }.bind(this);\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer()\n    );\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(\n        extent,\n        resolution,\n        pixelRatio,\n        vectorSource.getOverlaps(),\n        declutterBuilderGroup.finish(),\n        vectorLayer.getRenderBuffer()\n      );\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    opt_transform,\n    opt_declutterBuilderGroup\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            opt_transform,\n            opt_declutterBuilderGroup\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        opt_transform,\n        opt_declutterBuilderGroup\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n","/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport {Icon} from '../../style.js';\nimport {clamp} from '../../math.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {intersects} from '../../extent.js';\nimport {numberSafeCompareFunction} from '../../array.js';\n\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(\n  size,\n  transforms,\n  features,\n  styleFunction,\n  extent,\n  resolution,\n  rotation\n) {\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(\n    context,\n    HIT_DETECT_RESOLUTION,\n    extent,\n    null,\n    rotation\n  );\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = '#' + ('000000' + index.toString(16)).slice(-6);\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(\n          imgSize[0],\n          imgSize[1],\n          undefined,\n          {alpha: false}\n        );\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(\n          new Icon({\n            img: img,\n            imgSize: imgSize,\n            anchor: image.getAnchor(),\n            anchorXUnits: IconAnchorUnits.PIXELS,\n            anchorYUnits: IconAnchorUnits.PIXELS,\n            offset: image.getOrigin(),\n            opacity: 1,\n            size: image.getSize(),\n            scale: image.getScale(),\n            rotation: image.getRotation(),\n            rotateWithView: image.getRotateWithView(),\n          })\n        );\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType[GeometryType.POLYGON] = [];\n        byGeometryType[GeometryType.CIRCLE] = [];\n        byGeometryType[GeometryType.LINE_STRING] = [];\n        byGeometryType[GeometryType.POINT] = [];\n      }\n      byGeometryType[geometry.getType().replace('Multi', '')].push(\n        geometry,\n        style\n      );\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex)\n    .map(Number)\n    .sort(numberSafeCompareFunction);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nexport function hitDetect(pixel, features, imageData) {\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index =\n      (clamp(x, 0, imageData.width - 1) +\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\n      4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}\n","/**\n * @module ol/layer/Vector\n */\nimport BaseVectorLayer from './BaseVector.js';\nimport CanvasVectorLayerRenderer from '../renderer/canvas/VectorLayer.js';\n\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default} VectorSourceType\n * @extends {BaseVectorLayer<VectorSourceType>}\n * @api\n */\nclass VectorLayer extends BaseVectorLayer {\n  /**\n   * @param {import(\"./BaseVector.js\").Options<VectorSourceType>} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super(opt_options);\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   */\n  createRenderer() {\n    return new CanvasVectorLayerRenderer(this);\n  }\n}\n\nexport default VectorLayer;\n","/**\n * @module ol/Tile\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport TileState from './TileState.js';\nimport {abstract} from './util.js';\nimport {easeIn} from './easing.js';\n\n/**\n * A function that takes an {@link module:ol/Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   var xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     var data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~Tile} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @api\n */\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\nclass Tile extends EventTarget {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {Options} [opt_options] Tile options.\n   */\n  constructor(tileCoord, state, opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    this.tileCoord = tileCoord;\n\n    /**\n     * @protected\n     * @type {import(\"./TileState.js\").default}\n     */\n    this.state = state;\n\n    /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {Tile}\n     */\n    this.interimTile = null;\n\n    /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */\n    this.key = '';\n\n    /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */\n    this.transition_ =\n      options.transition === undefined ? 250 : options.transition;\n\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object<string, number>}\n     */\n    this.transitionStarts_ = {};\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Called by the tile cache when the tile is removed from the cache due to expiry\n   */\n  release() {}\n\n  /**\n   * @return {string} Key.\n   */\n  getKey() {\n    return this.key + '/' + this.tileCoord;\n  }\n\n  /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!Tile} Best tile for rendering.\n   */\n  getInterimTile() {\n    if (!this.interimTile) {\n      //empty chain\n      return this;\n    }\n    let tile = this.interimTile;\n\n    // find the first loaded tile and return it. Since the chain is sorted in\n    // decreasing order of creation time, there is no need to search the remainder\n    // of the list (all those tiles correspond to older requests and will be\n    // cleaned up by refreshInterimChain)\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        // Show tile immediately instead of fading it in after loading, because\n        // the interim tile is in place already\n        this.transition_ = 0;\n        return tile;\n      }\n      tile = tile.interimTile;\n    } while (tile);\n\n    // we can not find a better tile\n    return this;\n  }\n\n  /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */\n  refreshInterimChain() {\n    if (!this.interimTile) {\n      return;\n    }\n\n    let tile = this.interimTile;\n    let prev = /** @type {Tile} */ (this);\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        //we have a loaded tile, we can discard the rest of the list\n        //we would could abort any LOADING tile request\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\n        tile.interimTile = null;\n        break;\n      } else if (tile.getState() == TileState.LOADING) {\n        //keep this LOADING tile any loaded tiles later in the chain are\n        //older than this tile, so we're still interested in the request\n        prev = tile;\n      } else if (tile.getState() == TileState.IDLE) {\n        //the head of the list is the most current tile, we don't need\n        //to start any other requests for this chain\n        prev.interimTile = tile.interimTile;\n      } else {\n        prev = tile;\n      }\n      tile = prev.interimTile;\n    } while (tile);\n  }\n\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */\n  getTileCoord() {\n    return this.tileCoord;\n  }\n\n  /**\n   * @return {import(\"./TileState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @api\n   */\n  setState(state) {\n    if (this.state !== TileState.ERROR && this.state > state) {\n      throw new Error('Tile load sequence violation');\n    }\n    this.state = state;\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n  getAlpha(id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    let start = this.transitionStarts_[id];\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    const delta = time - start + 1000 / 60; // avoid rendering at 0\n    if (delta >= this.transition_) {\n      return 1;\n    }\n    return easeIn(delta / this.transition_);\n  }\n\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n  inTransition(id) {\n    if (!this.transition_) {\n      return false;\n    }\n    return this.transitionStarts_[id] !== -1;\n  }\n\n  /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */\n  endTransition(id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  }\n}\n\nexport default Tile;\n","/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {listenImage} from './Image.js';\n\nclass ImageTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [opt_options] Tile options.\n   */\n  constructor(\n    tileCoord,\n    state,\n    src,\n    crossOrigin,\n    tileLoadFunction,\n    opt_options\n  ) {\n    super(tileCoord, state, opt_options);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    this.key = src;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n  }\n\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\n   */\n  setImage(element) {\n    this.image_ = element;\n    this.state = TileState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = TileState.ERROR;\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    const image = /** @type {HTMLImageElement} */ (this.image_);\n    if (image.naturalWidth && image.naturalHeight) {\n      this.state = TileState.LOADED;\n    } else {\n      this.state = TileState.EMPTY;\n    }\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @api\n   */\n  load() {\n    if (this.state == TileState.ERROR) {\n      this.state = TileState.IDLE;\n      this.image_ = new Image();\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      this.tileLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\nfunction getBlankImage() {\n  const ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\n\nexport default ImageTile;\n","/**\n * @module ol/reproj/common\n */\n\n/**\n * Default maximum allowed threshold  (in pixels) for reprojection\n * triangulation.\n * @type {number}\n */\nexport const ERROR_THRESHOLD = 0.5;\n\n/**\n * Enable automatic reprojection of raster sources. Default is `true`.\n * TODO: decide if we want to expose this as a build flag or remove it\n * @type {boolean}\n */\nexport const ENABLE_RASTER_REPROJECTION = true;\n","/**\n * @module ol/reproj\n */\nimport {IMAGE_SMOOTHING_DISABLED} from './source/common.js';\nimport {assign} from './obj.js';\nimport {\n  containsCoordinate,\n  createEmpty,\n  extend,\n  forEachCorner,\n  getCenter,\n  getHeight,\n  getTopLeft,\n  getWidth,\n} from './extent.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {getPointResolution, transform} from './proj.js';\nimport {solveLinearSystem} from './math.js';\n\nlet brokenDiagonalRendering_;\n\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return (\n    Math.abs(data[offset * 4] - 210) > 2 ||\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\n  );\n}\n\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = document.createElement('canvas').getContext('2d');\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ =\n      verifyBrokenDiagonalRendering(data, 0) ||\n      verifyBrokenDiagonalRendering(data, 4) ||\n      verifyBrokenDiagonalRendering(data, 8);\n  }\n\n  return brokenDiagonalRendering_;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(\n  sourceProj,\n  targetProj,\n  targetCenter,\n  targetResolution\n) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(\n    targetProj,\n    targetResolution,\n    targetCenter\n  );\n\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor =\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n      sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(\n  sourceProj,\n  targetProj,\n  targetExtent,\n  targetResolution\n) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(\n    sourceProj,\n    targetProj,\n    targetCenter,\n    targetResolution\n  );\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(\n        sourceProj,\n        targetProj,\n        corner,\n        targetResolution\n      );\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [opt_renderEdges] Render reprojection edges.\n * @param {object} [opt_contextOptions] Properties to set on the canvas context.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(\n  width,\n  height,\n  pixelRatio,\n  sourceResolution,\n  sourceExtent,\n  targetResolution,\n  targetExtent,\n  triangulation,\n  sources,\n  gutter,\n  opt_renderEdges,\n  opt_contextOptions\n) {\n  const context = createCanvasContext2D(\n    Math.round(pixelRatio * width),\n    Math.round(pixelRatio * height)\n  );\n  assign(context, opt_contextOptions);\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n\n  const canvasWidthInUnits = getWidth(sourceDataExtent);\n  const canvasHeightInUnits = getHeight(sourceDataExtent);\n  const stitchContext = createCanvasContext2D(\n    Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution),\n    Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution)\n  );\n  assign(stitchContext, opt_contextOptions);\n\n  const stitchScale = pixelRatio / sourceResolution;\n\n  sources.forEach(function (src, i, arr) {\n    const xPos = src.extent[0] - sourceDataExtent[0];\n    const yPos = -(src.extent[3] - sourceDataExtent[3]);\n    const srcWidth = getWidth(src.extent);\n    const srcHeight = getHeight(src.extent);\n\n    // This test should never fail -- but it does. Need to find a fix the upstream condition\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(\n        src.image,\n        gutter,\n        gutter,\n        src.image.width - 2 * gutter,\n        src.image.height - 2 * gutter,\n        xPos * stitchScale,\n        yPos * stitchScale,\n        srcWidth * stitchScale,\n        srcHeight * stitchScale\n      );\n    }\n  });\n\n  const targetTopLeft = getTopLeft(targetExtent);\n\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(\n      -(target[0][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(\n      -(target[1][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(\n      -(target[2][1] - targetTopLeft[1]) / targetResolution\n    );\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n\n    const augmentedMatrix = [\n      [x1, y1, 0, 0, u1 - u0],\n      [x2, y2, 0, 0, u2 - u0],\n      [0, 0, x1, y1, v1 - v0],\n      [0, 0, x2, y2, v2 - v0],\n    ];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (\n      isBrokenDiagonalRendering() ||\n      opt_contextOptions === IMAGE_SMOOTHING_DISABLED\n    ) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(\n          u1 + pixelRound(((step + 1) * ud) / steps),\n          v1 + pixelRound((step * vd) / (steps - 1))\n        );\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(\n            u1 + pixelRound(((step + 1) * ud) / steps),\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1))\n          );\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n\n    context.transform(\n      affineCoefs[0],\n      affineCoefs[2],\n      affineCoefs[1],\n      affineCoefs[3],\n      u0,\n      v0\n    );\n\n    context.translate(\n      sourceDataExtent[0] - sourceNumericalShiftX,\n      sourceDataExtent[3] - sourceNumericalShiftY\n    );\n\n    context.scale(\n      sourceResolution / pixelRatio,\n      -sourceResolution / pixelRatio\n    );\n\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  if (opt_renderEdges) {\n    context.save();\n\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n\n    context.restore();\n  }\n  return context.canvas;\n}\n","/**\n * @module ol/reproj/Triangulation\n */\nimport {\n  boundingExtent,\n  createEmpty,\n  extendCoordinate,\n  getArea,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n  getWidth,\n  intersects,\n} from '../extent.js';\nimport {getTransform} from '../proj.js';\nimport {log2, modulo} from '../math.js';\n\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\n */\n\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\nconst MAX_SUBDIVISION = 10;\n\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\nconst MAX_TRIANGLE_WIDTH = 0.25;\n\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\nclass Triangulation {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   * @param {?number} opt_destinationResolution The (optional) resolution of the destination.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    maxSourceExtent,\n    errorThreshold,\n    opt_destinationResolution\n  ) {\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.sourceProj_ = sourceProj;\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.targetProj_ = targetProj;\n\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n    let transformInvCache = {};\n    const transformInv = getTransform(this.targetProj_, this.sourceProj_);\n\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */\n    this.transformInv_ = function (c) {\n      const key = c[0] + '/' + c[1];\n      if (!transformInvCache[key]) {\n        transformInvCache[key] = transformInv(c);\n      }\n      return transformInvCache[key];\n    };\n\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n\n    /**\n     * @type {Array<Triangle>}\n     * @private\n     */\n    this.triangles_ = [];\n\n    /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */\n    this.wrapsXInSource_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.canWrapXInSource_ =\n      this.sourceProj_.canWrapX() &&\n      !!maxSourceExtent &&\n      !!this.sourceProj_.getExtent() &&\n      getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent()\n      ? getWidth(this.sourceProj_.getExtent())\n      : null;\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.targetWorldWidth_ = this.targetProj_.getExtent()\n      ? getWidth(this.targetProj_.getExtent())\n      : null;\n\n    const destinationTopLeft = getTopLeft(targetExtent);\n    const destinationTopRight = getTopRight(targetExtent);\n    const destinationBottomRight = getBottomRight(targetExtent);\n    const destinationBottomLeft = getBottomLeft(targetExtent);\n    const sourceTopLeft = this.transformInv_(destinationTopLeft);\n    const sourceTopRight = this.transformInv_(destinationTopRight);\n    const sourceBottomRight = this.transformInv_(destinationBottomRight);\n    const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n\n    /*\n     * The maxSubdivision controls how many splittings of the target area can\n     * be done. The idea here is to do a linear mapping of the target areas\n     * but the actual overal reprojection (can be) extremely non-linear. The\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n     * tile size. However this function is also called to remap canvas rendered\n     * layers which can be much larger. This calculation increases the maxSubdivision\n     * value by the right factor so that each 256x256 pixel area has\n     * MAX_SUBDIVISION divisions.\n     */\n    const maxSubdivision =\n      MAX_SUBDIVISION +\n      (opt_destinationResolution\n        ? Math.max(\n            0,\n            Math.ceil(\n              log2(\n                getArea(targetExtent) /\n                  (opt_destinationResolution *\n                    opt_destinationResolution *\n                    256 *\n                    256)\n              )\n            )\n          )\n        : 0);\n\n    this.addQuad_(\n      destinationTopLeft,\n      destinationTopRight,\n      destinationBottomRight,\n      destinationBottomLeft,\n      sourceTopLeft,\n      sourceTopRight,\n      sourceBottomRight,\n      sourceBottomLeft,\n      maxSubdivision\n    );\n\n    if (this.wrapsXInSource_) {\n      let leftBound = Infinity;\n      this.triangles_.forEach(function (triangle, i, arr) {\n        leftBound = Math.min(\n          leftBound,\n          triangle.source[0][0],\n          triangle.source[1][0],\n          triangle.source[2][0]\n        );\n      });\n\n      // Shift triangles to be as close to `leftBound` as possible\n      // (if the distance is more than `worldWidth / 2` it can be closer.\n      this.triangles_.forEach(\n        function (triangle) {\n          if (\n            Math.max(\n              triangle.source[0][0],\n              triangle.source[1][0],\n              triangle.source[2][0]\n            ) -\n              leftBound >\n            this.sourceWorldWidth_ / 2\n          ) {\n            const newTriangle = [\n              [triangle.source[0][0], triangle.source[0][1]],\n              [triangle.source[1][0], triangle.source[1][1]],\n              [triangle.source[2][0], triangle.source[2][1]],\n            ];\n            if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {\n              newTriangle[0][0] -= this.sourceWorldWidth_;\n            }\n            if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {\n              newTriangle[1][0] -= this.sourceWorldWidth_;\n            }\n            if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {\n              newTriangle[2][0] -= this.sourceWorldWidth_;\n            }\n\n            // Rarely (if the extent contains both the dateline and prime meridian)\n            // the shift can in turn break some triangles.\n            // Detect this here and don't shift in such cases.\n            const minX = Math.min(\n              newTriangle[0][0],\n              newTriangle[1][0],\n              newTriangle[2][0]\n            );\n            const maxX = Math.max(\n              newTriangle[0][0],\n              newTriangle[1][0],\n              newTriangle[2][0]\n            );\n            if (maxX - minX < this.sourceWorldWidth_ / 2) {\n              triangle.source = newTriangle;\n            }\n          }\n        }.bind(this)\n      );\n    }\n\n    transformInvCache = {};\n  }\n\n  /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */\n  addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n    this.triangles_.push({\n      source: [aSrc, bSrc, cSrc],\n      target: [a, b, c],\n    });\n  }\n\n  /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */\n  addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n    const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n    const sourceCoverageX = this.sourceWorldWidth_\n      ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_\n      : null;\n    const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\n\n    // when the quad is wrapped in the source projection\n    // it covers most of the projection extent, but not fully\n    const wrapsX =\n      this.sourceProj_.canWrapX() &&\n      sourceCoverageX > 0.5 &&\n      sourceCoverageX < 1;\n\n    let needsSubdivision = false;\n\n    if (maxSubdivision > 0) {\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n        const targetQuadExtent = boundingExtent([a, b, c, d]);\n        const targetCoverageX =\n          getWidth(targetQuadExtent) / this.targetWorldWidth_;\n        needsSubdivision =\n          targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n        needsSubdivision =\n          sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n    }\n\n    if (!needsSubdivision && this.maxSourceExtent_) {\n      if (\n        isFinite(sourceQuadExtent[0]) &&\n        isFinite(sourceQuadExtent[1]) &&\n        isFinite(sourceQuadExtent[2]) &&\n        isFinite(sourceQuadExtent[3])\n      ) {\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n          // whole quad outside source projection extent -> ignore\n          return;\n        }\n      }\n    }\n\n    let isNotFinite = 0;\n\n    if (!needsSubdivision) {\n      if (\n        !isFinite(aSrc[0]) ||\n        !isFinite(aSrc[1]) ||\n        !isFinite(bSrc[0]) ||\n        !isFinite(bSrc[1]) ||\n        !isFinite(cSrc[0]) ||\n        !isFinite(cSrc[1]) ||\n        !isFinite(dSrc[0]) ||\n        !isFinite(dSrc[1])\n      ) {\n        if (maxSubdivision > 0) {\n          needsSubdivision = true;\n        } else {\n          // It might be the case that only 1 of the points is infinite. In this case\n          // we can draw a single triangle with the other three points\n          isNotFinite =\n            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +\n            (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +\n            (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +\n            (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n          if (\n            isNotFinite != 1 &&\n            isNotFinite != 2 &&\n            isNotFinite != 4 &&\n            isNotFinite != 8\n          ) {\n            return;\n          }\n        }\n      }\n    }\n\n    if (maxSubdivision > 0) {\n      if (!needsSubdivision) {\n        const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n        const centerSrc = this.transformInv_(center);\n\n        let dx;\n        if (wrapsX) {\n          const centerSrcEstimX =\n            (modulo(aSrc[0], sourceWorldWidth) +\n              modulo(cSrc[0], sourceWorldWidth)) /\n            2;\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\n        } else {\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n        }\n        const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n        const centerSrcErrorSquared = dx * dx + dy * dy;\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n      }\n      if (needsSubdivision) {\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n          // split horizontally (top & bottom)\n          const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n          const bcSrc = this.transformInv_(bc);\n          const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n          const daSrc = this.transformInv_(da);\n\n          this.addQuad_(\n            a,\n            b,\n            bc,\n            da,\n            aSrc,\n            bSrc,\n            bcSrc,\n            daSrc,\n            maxSubdivision - 1\n          );\n          this.addQuad_(\n            da,\n            bc,\n            c,\n            d,\n            daSrc,\n            bcSrc,\n            cSrc,\n            dSrc,\n            maxSubdivision - 1\n          );\n        } else {\n          // split vertically (left & right)\n          const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n          const abSrc = this.transformInv_(ab);\n          const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n          const cdSrc = this.transformInv_(cd);\n\n          this.addQuad_(\n            a,\n            ab,\n            cd,\n            d,\n            aSrc,\n            abSrc,\n            cdSrc,\n            dSrc,\n            maxSubdivision - 1\n          );\n          this.addQuad_(\n            ab,\n            b,\n            c,\n            cd,\n            abSrc,\n            bSrc,\n            cSrc,\n            cdSrc,\n            maxSubdivision - 1\n          );\n        }\n        return;\n      }\n    }\n\n    if (wrapsX) {\n      if (!this.canWrapXInSource_) {\n        return;\n      }\n      this.wrapsXInSource_ = true;\n    }\n\n    // Exactly zero or one of *Src is not finite\n    // The triangles must have the diagonal line as the first side\n    // This is to allow easy code in reproj.s to make it straight for broken\n    // browsers that can't handle diagonal clipping\n    if ((isNotFinite & 0xb) == 0) {\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n    }\n    if ((isNotFinite & 0xe) == 0) {\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n    }\n    if (isNotFinite) {\n      // Try the other two triangles\n      if ((isNotFinite & 0xd) == 0) {\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n      }\n      if ((isNotFinite & 0x7) == 0) {\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n      }\n    }\n  }\n\n  /**\n   * Calculates extent of the 'source' coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */\n  calculateSourceExtent() {\n    const extent = createEmpty();\n\n    this.triangles_.forEach(function (triangle, i, arr) {\n      const src = triangle.source;\n      extendCoordinate(extent, src[0]);\n      extendCoordinate(extent, src[1]);\n      extendCoordinate(extent, src[2]);\n    });\n\n    return extent;\n  }\n\n  /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */\n  getTriangles() {\n    return this.triangles_;\n  }\n}\n\nexport default Triangulation;\n","/**\n * @module ol/source/common\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n/**\n * Context options to disable image smoothing.\n * @type {Object}\n */\nexport const IMAGE_SMOOTHING_DISABLED = {\n  imageSmoothingEnabled: false,\n  msImageSmoothingEnabled: false,\n};\n","/**\n * @module ol/reproj/Tile\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceExtentResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {clamp} from '../math.js';\nimport {getArea, getIntersection} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(number, number, number, number) : import(\"../Tile.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [opt_errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [opt_renderEdges] Render reprojection edges.\n   * @param {object} [opt_contextOptions] Properties to set on the canvas context.\n   */\n  constructor(\n    sourceProj,\n    sourceTileGrid,\n    targetProj,\n    targetTileGrid,\n    tileCoord,\n    wrappedTileCoord,\n    pixelRatio,\n    gutter,\n    getTileFunction,\n    opt_errorThreshold,\n    opt_renderEdges,\n    opt_contextOptions\n  ) {\n    super(tileCoord, TileState.IDLE);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;\n\n    /**\n     * @private\n     * @type {object}\n     */\n    this.contextOptions_ = opt_contextOptions;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = gutter;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<import(\"../Tile.js\").default>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    const targetExtent = targetTileGrid.getTileCoordExtent(\n      this.wrappedTileCoord_\n    );\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const sourceProjExtent = sourceProj.getExtent();\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = targetTileGrid.getResolution(\n      this.wrappedTileCoord_[0]\n    );\n\n    const sourceResolution = calculateSourceExtentResolution(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      targetResolution\n    );\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels =\n      opt_errorThreshold !== undefined ? opt_errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1],\n          maxSourceExtent[1],\n          maxSourceExtent[3]\n        );\n        sourceExtent[3] = clamp(\n          sourceExtent[3],\n          maxSourceExtent[1],\n          maxSourceExtent[3]\n        );\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\n        sourceExtent,\n        this.sourceZ_\n      );\n\n      for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n        for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n          const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n          if (tile) {\n            this.sourceTiles_.push(tile);\n          }\n        }\n      }\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach(\n      function (tile, i, arr) {\n        if (tile && tile.getState() == TileState.LOADED) {\n          sources.push({\n            extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n            image: tile.getImage(),\n          });\n        }\n      }.bind(this)\n    );\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(\n        this.sourceZ_\n      );\n\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_\n      );\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.pixelRatio_,\n        sourceResolution,\n        this.sourceTileGrid_.getExtent(),\n        targetResolution,\n        targetExtent,\n        this.triangulation_,\n        sources,\n        this.gutter_,\n        this.renderEdges_,\n        this.contextOptions_\n      );\n\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n\n      let leftToLoad = 0;\n\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach(\n        function (tile, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE || state == TileState.LOADING) {\n            leftToLoad++;\n\n            const sourceListenKey = listen(\n              tile,\n              EventType.CHANGE,\n              function (e) {\n                const state = tile.getState();\n                if (\n                  state == TileState.LOADED ||\n                  state == TileState.ERROR ||\n                  state == TileState.EMPTY\n                ) {\n                  unlistenByKey(sourceListenKey);\n                  leftToLoad--;\n                  if (leftToLoad === 0) {\n                    this.unlistenSources_();\n                    this.reproject_();\n                  }\n                }\n              },\n              this\n            );\n            this.sourcesListenerKeys_.push(sourceListenKey);\n          }\n        }.bind(this)\n      );\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      } else {\n        this.sourceTiles_.forEach(function (tile, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE) {\n            tile.load();\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n}\n\nexport default ReprojTile;\n","/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [opt_highWaterMark] High water mark.\n   */\n  constructor(opt_highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark =\n      opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [opt_options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, opt_options) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [opt_tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}\n","/**\n * @module ol/TileCache\n */\nimport LRUCache from './structs/LRUCache.js';\nimport {fromKey, getKey} from './tilecoord.js';\n\nclass TileCache extends LRUCache {\n  /**\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(usedTiles) {\n    while (this.canExpireCache()) {\n      const tile = this.peekLast();\n      if (tile.getKey() in usedTiles) {\n        break;\n      } else {\n        this.pop().release();\n      }\n    }\n  }\n\n  /**\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\n   */\n  pruneExceptNewestZ() {\n    if (this.getCount() === 0) {\n      return;\n    }\n    const key = this.peekFirstKey();\n    const tileCoord = fromKey(key);\n    const z = tileCoord[0];\n    this.forEach(\n      function (tile) {\n        if (tile.tileCoord[0] !== z) {\n          this.remove(getKey(tile.tileCoord));\n          tile.release();\n        }\n      }.bind(this)\n    );\n  }\n}\n\nexport default TileCache;\n","/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\nimport {assert} from '../asserts.js';\nimport {clamp} from '../math.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {toSize} from '../size.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        function (a, b) {\n          return b - a;\n        },\n        true\n      ),\n      17\n    ); // `resolutions` must be sorted in descending order\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      18\n    ); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n        ? DEFAULT_TILE_SIZE\n        : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      22\n    ); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1)\n        );\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    opt_tileRange,\n    opt_extent\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          opt_tileRange\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          opt_tileRange\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(\n        tileCoord,\n        opt_extent || this.tmpExtent_\n      );\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        opt_tileRange\n      );\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, opt_tileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(\n        tileCoordX,\n        tileCoordY,\n        tileCoordX,\n        tileCoordY,\n        opt_tileRange\n      );\n    }\n\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, opt_tileRange);\n      }\n\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, opt_tileRange);\n    }\n\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n  }\n\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getTileRangeExtent(z, tileRange, opt_extent) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, opt_tileRange) {\n    const tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    const minX = tileCoord[1];\n    const minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(\n      minX,\n      tileCoord[1],\n      minY,\n      tileCoord[2],\n      opt_tileRange\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, opt_extent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    const adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n    const adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n    const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n    const yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n    let tileCoordX = (scale * xFromOrigin) / tileSize[0];\n    let tileCoordY = (scale * yFromOrigin) / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = Math.ceil(tileCoordX) - 1;\n      tileCoordY = Math.ceil(tileCoordY) - 1;\n    } else {\n      tileCoordX = Math.floor(tileCoordX);\n      tileCoordY = Math.floor(tileCoordY);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    const adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n    const adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n    const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n    const yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n    let tileCoordX = xFromOrigin / tileSize[0];\n    let tileCoordY = yFromOrigin / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = Math.ceil(tileCoordX) - 1;\n      tileCoordY = Math.ceil(tileCoordY) - 1;\n    } else {\n      tileCoordX = Math.floor(tileCoordX);\n      tileCoordY = Math.floor(tileCoordY);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an `import(\"../size.js\").Size`, run the result through `import(\"../size.js\").Size.toSize()`.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\n        : null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n","/**\n * @module ol/tilegrid\n */\nimport Corner from './extent/Corner.js';\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {toSize} from './size.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  const corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;\n\n  const resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [opt_options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(opt_options) {\n  const xyzOptions = opt_options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [opt_maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(\n  extent,\n  opt_maxZoom,\n  opt_tileSize,\n  opt_maxResolution\n) {\n  const maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  const tileSize = toSize(\n    opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE\n  );\n  const maxResolution =\n    opt_maxResolution > 0\n      ? opt_maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(\n  projection,\n  opt_maxZoom,\n  opt_tileSize,\n  opt_corner\n) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n","/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {equivalent} from '../proj.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {\n  getForProjection as getTileGridForProjection,\n  wrapX,\n} from '../tilegrid.js';\nimport {scale as scaleSize, toSize} from '../size.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./State.js\").default} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n    this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ =\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @protected\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    const tileSize = [256, 256];\n    const tileGrid = options.tileGrid;\n    if (tileGrid) {\n      toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    this.tileCache = new TileCache(options.cacheSize || 0);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {transition: options.transition};\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */ (\n            tileCache.get(tileCoordKey)\n          );\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\n   * @return {Array<number>} Resolutions.\n   */\n  getResolutions() {\n    return this.tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  getTileCacheForProjection(projection) {\n    assert(\n      equivalent(this.getProjection(), projection),\n      68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n    );\n    return this.tileCache;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [opt_projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, opt_projection) {\n    const projection =\n      opt_projection !== undefined ? opt_projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n  clear() {\n    this.tileCache.clear();\n  }\n\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  updateCacheSize(tileCount, projection) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  useTile(z, x, y, projection) {}\n}\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n}\n\nexport default TileSource;\n","/**\n * @module ol/tileurlfunction\n */\nimport {assert} from './asserts.js';\nimport {modulo} from './math.js';\nimport {hash as tileCoordHash} from './tilecoord.js';\n\n/**\n * @param {string} template Template.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplate(template, tileGrid) {\n  const zRegEx = /\\{z\\}/g;\n  const xRegEx = /\\{x\\}/g;\n  const yRegEx = /\\{y\\}/g;\n  const dashYRegEx = /\\{-y\\}/g;\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      } else {\n        return template\n          .replace(zRegEx, tileCoord[0].toString())\n          .replace(xRegEx, tileCoord[1].toString())\n          .replace(yRegEx, tileCoord[2].toString())\n          .replace(dashYRegEx, function () {\n            const z = tileCoord[0];\n            const range = tileGrid.getFullTileRange(z);\n            assert(range, 55); // The {-y} placeholder requires a tile grid with extent\n            const y = range.getHeight() - tileCoord[2] - 1;\n            return y.toString();\n          });\n      }\n    }\n  );\n}\n\n/**\n * @param {Array<string>} templates Templates.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplates(templates, tileGrid) {\n  const len = templates.length;\n  const tileUrlFunctions = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n\n/**\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      } else {\n        const h = tileCoordHash(tileCoord);\n        const index = modulo(h, tileUrlFunctions.length);\n        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n      }\n    }\n  );\n}\n\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {string|undefined} Tile URL.\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}\n\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}\n","/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates, expandUrl} from '../tileurlfunction.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./State.js\").default} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n          ? TileEventType.TILELOADEND\n          : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UrlTile;\n","/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\nimport {IMAGE_SMOOTHING_DISABLED} from './common.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {object|undefined}\n     */\n    this.contextOptions_ =\n      options.imageSmoothing === false ? IMAGE_SMOOTHING_DISABLED : undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.canExpireCache();\n    }\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (const key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      super.expireCache(projection, usedTiles);\n      return;\n    }\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(\n      this.tileCache == usedTileCache ? usedTiles : {}\n    );\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @return {Object|undefined} Context options.\n   */\n  getContextOptions() {\n    return this.contextOptions_;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    if (\n      ENABLE_RASTER_REPROJECTION &&\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n  getKey() {\n    return (\n      super.getKey() +\n      (this.contextOptions_ ? '\\n' + JSON.stringify(this.contextOptions_) : '')\n    );\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    if (\n      ENABLE_RASTER_REPROJECTION &&\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return false;\n    } else {\n      return super.getOpaque(projection);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.getTileGridForProjection(projection);\n    }\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] =\n          getTileGridForProjection(projection);\n      }\n      return this.tileGridForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.getTileCacheForProjection(projection);\n    }\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(\n          this.tileCache.highWaterMark\n        );\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !ENABLE_RASTER_REPROJECTION ||\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection\n      );\n    } else {\n      const cache = this.getTileCacheForProjection(projection);\n      const tileCoord = [z, x, y];\n      let tile;\n      const tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n      const key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n          tileCoord,\n          projection\n        );\n        const newTile = new ReprojTile(\n          sourceProjection,\n          sourceTileGrid,\n          projection,\n          targetTileGrid,\n          tileCoord,\n          wrappedTileCoord,\n          this.getTilePixelRatio(pixelRatio),\n          this.getGutter(),\n          function (z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this),\n          this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_,\n          this.contextOptions_\n        );\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (\n      !ENABLE_RASTER_REPROJECTION ||\n      this.renderReprojectionEdges_ == render\n    ) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      const proj = getProjection(projection);\n      if (proj) {\n        const projKey = getUid(proj);\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/WMTSRequestEncoding\n */\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @enum {string}\n */\nexport default {\n  KVP: 'KVP', // see spec §8\n  REST: 'REST', // see spec §10\n};\n","/**\n * @module ol/uri\n */\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri = uri.indexOf('?') === -1 ? uri + '?' : uri + '&';\n  return uri + qs;\n}\n","/**\n * @module ol/tilegrid/WMTS\n */\n\nimport TileGrid from './TileGrid.js';\nimport {find} from '../array.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [opt_extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [opt_matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  opt_extent,\n  opt_matrixLimits\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  const matrixLimits = opt_matrixLimits !== undefined ? opt_matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = find(matrixLimits, function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (elt[identifierPropName].indexOf(':') === -1) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: opt_extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n","/**\n * @module ol/source/WMTS\n */\n\nimport TileImage from './TileImage.js';\nimport WMTSRequestEncoding from './WMTSRequestEncoding.js';\nimport {appendParams} from '../uri.js';\nimport {assign} from '../obj.js';\nimport {containsExtent} from '../extent.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\nimport {find, findIndex, includes} from '../array.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./WMTSRequestEncoding.js\").default|string} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined\n        ? /** @type {import(\"./WMTSRequestEncoding.js\").default} */ (\n            options.requestEncoding\n          )\n        : WMTSRequestEncoding.KVP;\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {import(\"./WMTSRequestEncoding.js\").default}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      ),\n      key\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {import(\"./WMTSRequestEncoding.js\").default} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.dimensions_) {\n      res[i++] = key + '-' + this.dimensions_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == WMTSRequestEncoding.KVP) {\n      assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == WMTSRequestEncoding.KVP\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        } else {\n          const localContext = {\n            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n            'TileCol': tileCoord[1],\n            'TileRow': tileCoord[2],\n          };\n          assign(localContext, dimensions);\n          let url = template;\n          if (requestEncoding == WMTSRequestEncoding.KVP) {\n            url = appendParams(url, localContext);\n          } else {\n            url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext[p];\n            });\n          }\n          return url;\n        }\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {?Options} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = find(layers, function (elt, index, array) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (l === null) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        const tileMatrixSet = find(tileMatrixSets, function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        } else {\n          return supportedCRS == config['projection'];\n        }\n      });\n    } else {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = findIndex(l['Style'], function (elt, index, array) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    } else {\n      return elt['isDefault'];\n    }\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = find(matrixSets, function (elt, index, array) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = find(\n      matrixSetObj.TileMatrix,\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchOriginXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  const matrixSetExtent = matrixSetObj['BoundingBox'];\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326'\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = find(gets[i]['Constraint'], function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === WMTSRequestEncoding.KVP) {\n          if (includes(encodings, WMTSRequestEncoding.KVP)) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = WMTSRequestEncoding.KVP;\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = WMTSRequestEncoding.REST;\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n","import 'ol/ol.css'; // eslint-disable-line\nimport GeoJSON from 'ol/format/GeoJSON'\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport { Fill, Style } from 'ol/style'\nimport { Vector as VectorSource } from 'ol/source'\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer'\nimport { getVectorContext } from 'ol/render'\nimport { getTopLeft, getWidth } from 'ol/extent.js'\nimport { get as getProjection, fromLonLat } from 'ol/proj'\nimport WMTSSource from 'ol/source/WMTS'\nimport WMTSTileGrid from 'ol/tilegrid/WMTS.js'\nimport gemeenten from './data/gemeenten-simple-4326.json'\n\n// set map to hidden on initial load, to prevent flashing of map\ndocument.getElementById('map').style.visibility = 'hidden'\n\nfunction getHashValue (key) {\n  const matches = location.hash.match(new RegExp(key + '=([^&]*)'))\n  return matches ? matches[1] : null\n}\n\nconst projection = getProjection('EPSG:3857')\nconst projectionExtent = projection.getExtent()\nconst size = getWidth(projectionExtent) / 256\nconst resolutions = new Array(20)\nconst matrixIds = new Array(20)\nfor (let z = 0; z < 20; ++z) {\n  // generate resolutions and matrixIds arrays for WMTS\n  resolutions[z] = size / Math.pow(2, z)\n  matrixIds[z] = z\n}\nconst brtaLayer = new TileLayer({\n  className: 'brta',\n  type: 'base',\n  title: 'grijs WMTS',\n  extent: projectionExtent,\n  source: new WMTSSource({\n    url: 'https://service.pdok.nl/brt/achtergrondkaart/wmts/v2_0',\n    crossOrigin: 'Anonymous',\n    layer: 'grijs',\n    matrixSet: 'EPSG:3857',\n    format: 'image/png',\n    tileGrid: new WMTSTileGrid({\n      origin: getTopLeft(projectionExtent),\n      resolutions: resolutions,\n      matrixIds: matrixIds\n    }),\n    style: 'default'\n  })\n})\n\nconst lufoLayer = new TileLayer({\n  type: 'base',\n  title: '2020_ortho25 WMTS',\n  extent: projectionExtent,\n  source: new WMTSSource({\n    url: 'https://service.pdok.nl/hwh/luchtfotorgb/wmts/v1_0',\n    crossOrigin: 'Anonymous',\n    layer: '2020_ortho25',\n    matrixSet: 'EPSG:3857',\n    format: 'image/png',\n    tileGrid: new WMTSTileGrid({\n      origin: getTopLeft(projectionExtent),\n      resolutions: resolutions,\n      matrixIds: matrixIds\n    }),\n    style: 'default'\n  })\n})\n\nconst clipSource = new VectorSource({\n  format: new GeoJSON()\n})\n\nclipSource.setLoader((extent, resolution, projection, success, failure) => {\n  document.getElementById('map').style.visibility = 'visible'\n  document.getElementById('title').innerText = ''\n  const gmCode = getHashValue('gmcode')\n  if (!gmCode) {\n    failure()\n    return\n  }\n  const features = gemeenten.features\n  const featuresFilter = features.filter(x => x.properties.code === gmCode)\n  console.log(featuresFilter.length)\n  if (featuresFilter.length === 0) {\n    failure()\n    return\n  }\n  const olFeature = new GeoJSON().readFeature(featuresFilter[0], {\n    dataProjection: 'EPSG:4326',\n    featureProjection: 'EPSG:3857'\n  })\n  clipSource.clear()\n  if (olFeature) {\n    clipSource.addFeature(olFeature)\n  }\n  const gemNaam = featuresFilter[0].properties.naam\n  const gemProvincie = featuresFilter[0].properties.ligtInProvincieNaam\n  const gemCode = featuresFilter[0].properties.code\n  document.getElementById('title').innerText = `Gemeente ${gemCode} - ${gemNaam} (Provincie ${gemProvincie})`\n  success(olFeature)\n})\n\nconst style = new Style({\n  fill: new Fill({\n    color: 'red'\n  })\n})\n\nconst clipLayer = new VectorLayer({\n  style: null,\n  source: clipSource\n})\n\n// Giving the clipped layer an extent is necessary to avoid rendering when the feature is outside the viewport\nclipLayer.getSource().on('addfeature', function () {\n  lufoLayer.setExtent(clipLayer.getSource().getExtent())\n})\n\nlufoLayer.on('postrender', function (e) {\n  const vectorContext = getVectorContext(e)\n  e.context.globalCompositeOperation = 'destination-in'\n  clipLayer.getSource().forEachFeature(function (feature) {\n    vectorContext.drawFeature(feature, style)\n  })\n  e.context.globalCompositeOperation = 'source-over'\n})\n\nconst map = new Map({\n  layers: [brtaLayer, lufoLayer, clipLayer],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([5.417633, 52.152916]),\n    zoom: 8\n  })\n})\n\nclipSource.on('featuresloadend', function (e) {\n  console.log('featuresloadend')\n  document.getElementById('errorMessage').innerText = ''\n  document.getElementById('map').style.display = 'block'\n  document.getElementById('error').style.display = 'none'\n  const clipLayerExtent = clipSource.getExtent()\n  const mapSize = map.getSize()\n  const paddingX = parseInt(mapSize[0] * 0.05)\n  const paddingY = parseInt(mapSize[1] * 0.05)\n  map.getView().fit(clipLayerExtent, {\n    size: mapSize,\n    padding: [paddingY, paddingX, paddingY, paddingX]\n  }\n  )\n})\n\n// function to convert literal HTML string in DOM node\nfunction htmlToElement (html) {\n  const template = document.createElement('template')\n  html = html.trim() // Never return a text node of whitespace as the result\n  template.innerHTML = html\n  return template.content.firstChild\n}\n\nclipSource.on('featuresloaderror', function (e) {\n  const gmCode = getHashValue('gmcode')\n  if (gmCode) {\n    document.getElementById('errorMessage').style.color = 'red'\n    document.getElementById('errorMessage').innerText = `ERROR: GEMEENTE MET CODE ${gmCode} BESTAAT NIET`\n  } else {\n    document.getElementById('errorMessage').style.color = 'black'\n    document.getElementById('errorMessage').innerText = 'Zoek een gemeente:'\n    history.pushState(undefined, undefined, '#home')\n  }\n  gemeenten.features.sort(function (a, b) {\n    if (a.properties.naam < b.properties.naam) { return -1 }\n    if (a.properties.naam > b.properties.naam) { return 1 }\n    return 0\n  })\n\n  let options = ''\n  gemeenten.features.forEach(ft => {\n    const gmnaam = ft.properties.naam\n    options += `<option value=\"${gmnaam}\">${gmnaam}</option>`\n  })\n\n  if (!document.getElementById('input-gemeenten')) {\n    const input = '<input id=\"input-gemeenten\" list=\"gemeenten\" placeholder=\"Start met typen...\">'\n    const dataList = `<datalist id=\"gemeenten\">${options}</datalist>`\n\n    const inputEl = htmlToElement(input)\n    const datalistEl = htmlToElement(dataList)\n\n    document.getElementById('error').append(inputEl)\n    document.getElementById('error').append(datalistEl)\n\n    inputEl.addEventListener('input', function (e) {\n      const shownVal = e.target.value\n      const options = document.getElementById('gemeenten').children\n      let validVal = false\n\n      // validate input, if input is valid option fromd datalist trigger change\n      for (let i = 0; i < options.length; i++) {\n        if (options[i].value === shownVal) {\n          validVal = true\n        }\n      }\n      if (!validVal) {\n        return\n      }\n\n      const ft = gemeenten.features.filter(x => x.properties.naam === shownVal)[0]\n      const gmcode = ft.properties.code\n      history.pushState(undefined, undefined, `#gmcode=${gmcode}`)\n      hashHandler(null)\n    })\n  } else {\n    document.getElementById('input-gemeenten').value = ''\n  }\n\n  document.getElementById('map').style.display = 'none'\n  document.getElementById('error').style.display = 'flex'\n})\nfunction hashHandler (e) {\n  clipSource.refresh()\n}\nwindow.onhashchange = hashHandler\n","{\n\"type\": \"FeatureCollection\",\n\"name\": \"gemeenten\",\n\"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\n\"features\": [\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0221\", \"naam\": \"Doesburg\", \"code\": \"0221\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.159205335741348, 51.999639049191231 ], [ 6.157724476711733, 52.004179846887631 ], [ 6.153812677425024, 52.00335582257383 ], [ 6.156594189226548, 52.006452787192138 ], [ 6.159721921520192, 52.006998677944779 ], [ 6.161339627648966, 52.010386359817794 ], [ 6.161008531224693, 52.013786850683537 ], [ 6.164916457551655, 52.014327472144146 ], [ 6.164570863672992, 52.016878490085674 ], [ 6.169633787211088, 52.016561742072746 ], [ 6.176700681464334, 52.019346470435586 ], [ 6.177130486092815, 52.021609129032228 ], [ 6.174421254909973, 52.022760053989238 ], [ 6.176805502281136, 52.025292815460368 ], [ 6.174471026469551, 52.025591647339631 ], [ 6.175280745358209, 52.027285383421138 ], [ 6.173341055046625, 52.027864740570976 ], [ 6.176915348952081, 52.031522313909598 ], [ 6.174970515115359, 52.031818538979131 ], [ 6.17549507639521, 52.039461215600902 ], [ 6.167259983904303, 52.036967348092311 ], [ 6.159074621467901, 52.037304498582692 ], [ 6.15640289810749, 52.040720285256967 ], [ 6.152911868356402, 52.041875809932122 ], [ 6.146656571340525, 52.041066758100101 ], [ 6.142684405263003, 52.036844451119649 ], [ 6.137585771696684, 52.035177918079654 ], [ 6.130547000384814, 52.034089816107809 ], [ 6.121586535441227, 52.03471244463244 ], [ 6.127009027921411, 52.032412961035007 ], [ 6.130852337005518, 52.028990448191173 ], [ 6.132355573154415, 52.025582645026276 ], [ 6.131514566781954, 52.021906478449985 ], [ 6.127512775960163, 52.015701507410043 ], [ 6.12746130716657, 52.012586722405061 ], [ 6.125860083478827, 52.010048059126703 ], [ 6.122305606437238, 52.007238402026879 ], [ 6.114854258094307, 52.004452804592866 ], [ 6.11163569723548, 51.998242447224754 ], [ 6.109659920409489, 51.99655544622469 ], [ 6.110425541214694, 51.995701165694157 ], [ 6.116288801923589, 51.996797740288329 ], [ 6.130711082575854, 51.996990662020956 ], [ 6.14163124247787, 51.997487521164672 ], [ 6.141260627835684, 51.998622668443168 ], [ 6.149891383548041, 52.001965344656007 ], [ 6.159205335741348, 51.999639049191231 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0074\", \"naam\": \"Heerenveen\", \"code\": \"0074\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.084976472449431, 52.936248150913471 ], [ 6.093038008108602, 52.942429719537692 ], [ 6.115079493965879, 52.951074574027054 ], [ 6.124659472717075, 52.952431483863748 ], [ 6.128665356687876, 52.953822354904702 ], [ 6.142842644623527, 52.967607055474254 ], [ 6.145257184630768, 52.969007425777143 ], [ 6.158925784803664, 52.975998252319279 ], [ 6.196175949435352, 52.986510963008186 ], [ 6.200994826636467, 52.988460181424216 ], [ 6.20222744375113, 52.990433712818792 ], [ 6.204480779204211, 53.02552661357538 ], [ 6.205512914092625, 53.037977248174244 ], [ 6.200305283723053, 53.036880242634183 ], [ 6.199459774364598, 53.034337827051907 ], [ 6.196646217230523, 53.033224383188141 ], [ 6.194609579239978, 53.030973115645317 ], [ 6.185724704410894, 53.025087049404263 ], [ 6.176878221113163, 53.021181976924034 ], [ 6.158457806632055, 53.017055252966799 ], [ 6.151270012126665, 53.016535135995682 ], [ 6.142856592793038, 53.014323565642215 ], [ 6.131249379809217, 53.011848192782416 ], [ 6.128832905072545, 53.010447560723648 ], [ 6.130000029633873, 53.008741542250405 ], [ 6.120772747751976, 53.005400962024162 ], [ 6.113933959875078, 53.001762048546652 ], [ 6.10751834667514, 52.999535842120082 ], [ 6.105497245051663, 52.997849227471129 ], [ 6.096246472690498, 52.992808126842782 ], [ 6.099777807797016, 52.989389572000754 ], [ 6.096566578805576, 52.987993023669915 ], [ 6.097345117436047, 52.986855881016552 ], [ 6.092521867963607, 52.984336271138169 ], [ 6.084534239132922, 52.983250622153108 ], [ 6.076493216560931, 52.978767189494441 ], [ 6.069648999828932, 52.974276387926615 ], [ 6.066851476776542, 52.973726071138337 ], [ 6.061230349744799, 52.970926607302204 ], [ 6.044426832071023, 52.966206999396555 ], [ 6.026871983000245, 52.964320362822853 ], [ 6.02091814485338, 52.965767739598746 ], [ 5.977965821234123, 52.970801020951015 ], [ 5.958073877078004, 52.972879607646938 ], [ 5.964932685221908, 52.979358577260498 ], [ 5.962564514863347, 52.981068765516198 ], [ 5.971026924255086, 52.988105899710156 ], [ 5.976667495101379, 52.992608240991089 ], [ 5.974697640796403, 52.994316697128404 ], [ 5.979530608404388, 52.997973487267771 ], [ 5.974804682062668, 53.002243697621175 ], [ 5.972857187339015, 53.005650759049168 ], [ 5.974060855917646, 53.006211107365857 ], [ 5.972113126550215, 53.009618152990193 ], [ 5.977304075590805, 53.010158896329379 ], [ 5.976920711306275, 53.011293287557677 ], [ 5.98469100199559, 53.025410935909498 ], [ 5.983908829995089, 53.026547336243205 ], [ 5.978746659808265, 53.028271721540101 ], [ 5.979160963709831, 53.029402165570986 ], [ 5.952135409992564, 53.037177177302176 ], [ 5.952948085365901, 53.038305824939577 ], [ 5.942215454964349, 53.041470442159003 ], [ 5.937862251931012, 53.04432177340027 ], [ 5.943847748305237, 53.044294072776978 ], [ 5.943488585507716, 53.047410076851754 ], [ 5.944707566452676, 53.049103128963644 ], [ 5.953102923515383, 53.050196198348488 ], [ 5.953527843974432, 53.052176034643921 ], [ 5.957537472861189, 53.053572593527981 ], [ 5.942766487072121, 53.053358969376141 ], [ 5.946035899866546, 53.059289271938624 ], [ 5.947273569997925, 53.062397805617792 ], [ 5.944116283482998, 53.065243737520987 ], [ 5.940904430894983, 53.063843043332142 ], [ 5.936933807214043, 53.065560065763435 ], [ 5.930214183453825, 53.070970005256811 ], [ 5.932239008723672, 53.073225751152009 ], [ 5.935839855960093, 53.073775536901977 ], [ 5.933073204803271, 53.076053134599846 ], [ 5.933497469737128, 53.078033027136058 ], [ 5.927510838580419, 53.07834331803253 ], [ 5.921524120817501, 53.078653309686011 ], [ 5.906744766446091, 53.078435252943642 ], [ 5.903959437436726, 53.079296662743367 ], [ 5.895566309856113, 53.078766367975852 ], [ 5.89513714124199, 53.076220132505227 ], [ 5.871554572608529, 53.074336065558221 ], [ 5.870432271891396, 53.081135409946448 ], [ 5.872061399856124, 53.083959988169674 ], [ 5.874470520456486, 53.08508267195603 ], [ 5.872872875114068, 53.085089164416814 ], [ 5.859655294286207, 53.081744664331588 ], [ 5.855670647752668, 53.082609674181143 ], [ 5.844454920436579, 53.079538764224495 ], [ 5.842866390173946, 53.080394170984334 ], [ 5.832462438327898, 53.078451511636082 ], [ 5.830077879510505, 53.079592823191284 ], [ 5.819258434835618, 53.075951857689923 ], [ 5.814030954537444, 53.072290102103011 ], [ 5.808385867657815, 53.06664776930608 ], [ 5.796333816781052, 53.05876230468882 ], [ 5.79870470946292, 53.056206116463855 ], [ 5.795498207688337, 53.054801513636335 ], [ 5.797844845908264, 53.049697359096797 ], [ 5.800223231316212, 53.047990461788871 ], [ 5.808961616594934, 53.043713192931854 ], [ 5.818903702317034, 53.040280295977084 ], [ 5.823671819029056, 53.038281155984002 ], [ 5.835964281152582, 53.03087454588384 ], [ 5.848660417335736, 53.02431445184218 ], [ 5.857754388383985, 53.016917850686397 ], [ 5.865157067739054, 53.001033612855906 ], [ 5.867520777123779, 52.998476026222058 ], [ 5.884910907783238, 52.985381153124429 ], [ 5.88725634738096, 52.981407607409288 ], [ 5.86730211091394, 52.978658185665751 ], [ 5.869573522171376, 52.967890255180471 ], [ 5.871129116210301, 52.964486446688447 ], [ 5.88669222305657, 52.96697053451647 ], [ 5.891011594912313, 52.961572985121279 ], [ 5.894615882186715, 52.963256494279939 ], [ 5.897400616086527, 52.962961507171833 ], [ 5.90211650506167, 52.957561850775491 ], [ 5.90567708231789, 52.955564554570564 ], [ 5.904863817790408, 52.954152441303165 ], [ 5.914283831711954, 52.942786095652352 ], [ 5.913062188731501, 52.940526446377419 ], [ 5.933439679625197, 52.914670071320309 ], [ 5.937780263814029, 52.911818809636344 ], [ 5.948232836197088, 52.92026410495815 ], [ 5.953475346926913, 52.925618856029487 ], [ 5.959470543580495, 52.927572192648192 ], [ 5.966247199005597, 52.928388916155271 ], [ 5.971019053997989, 52.928082548372487 ], [ 5.97697707604288, 52.927203873037065 ], [ 5.9809566668679, 52.927184150042066 ], [ 5.988545208776634, 52.929128097735678 ], [ 5.998554144010633, 52.933324253010817 ], [ 6.00413034008343, 52.933578707336466 ], [ 6.037335548543236, 52.918113342945297 ], [ 6.043705766687724, 52.918361617639803 ], [ 6.077731116481875, 52.931193855955364 ], [ 6.084976472449431, 52.936248150913471 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0737\", \"naam\": \"Tytsjerksteradiel\", \"code\": \"0737\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.943640669033067, 53.121586249525549 ], [ 5.943277240291211, 53.124419081799978 ], [ 5.955733214979849, 53.129173558169668 ], [ 5.974601125893768, 53.134744820231667 ], [ 5.997176726562231, 53.147655260781349 ], [ 6.011665809132544, 53.153809134965122 ], [ 6.019691349458611, 53.155465731636426 ], [ 6.046516277931916, 53.156736743825114 ], [ 6.050112500302269, 53.15643379426222 ], [ 6.079725785326261, 53.156832583594351 ], [ 6.085363140337898, 53.159064798232592 ], [ 6.086945165398021, 53.157923114287271 ], [ 6.085722122930091, 53.156514673762352 ], [ 6.08888129861743, 53.153948185382731 ], [ 6.094118693657854, 53.156182331527091 ], [ 6.104426305637832, 53.150458781977093 ], [ 6.104849757334415, 53.151871826661775 ], [ 6.114454103969639, 53.175878710306428 ], [ 6.109269946806283, 53.177042497409701 ], [ 6.108855540842681, 53.176195651179796 ], [ 6.104909495778998, 53.179616698143903 ], [ 6.100199540876836, 53.185307055564252 ], [ 6.097038757683306, 53.187873818973806 ], [ 6.087913306264903, 53.193023499149668 ], [ 6.085128811849665, 53.194172181089236 ], [ 6.08239421641112, 53.198434730444788 ], [ 6.08165241510943, 53.202119467768973 ], [ 6.078520984856501, 53.206667321046382 ], [ 6.084155658533194, 53.208333378100725 ], [ 6.08298138040159, 53.210038854460514 ], [ 6.079367342395081, 53.209493540646136 ], [ 6.078584353678696, 53.210630494824315 ], [ 6.081797913917466, 53.211178151687754 ], [ 6.080227424840253, 53.213169001601202 ], [ 6.086268186625502, 53.215115722836266 ], [ 6.030394424941531, 53.229583637113777 ], [ 6.027196912356383, 53.230166945386671 ], [ 6.02404103655788, 53.2335810104167 ], [ 6.019740272885929, 53.240964504243124 ], [ 6.017339341791367, 53.241260238236684 ], [ 5.983507879577643, 53.229825775577488 ], [ 5.967848467145129, 53.227637723486815 ], [ 5.966653890509905, 53.228209708546849 ], [ 5.955830487655858, 53.227978378850644 ], [ 5.95506623679462, 53.230813047716232 ], [ 5.948786646524392, 53.24103435077761 ], [ 5.947205274603745, 53.242740361232912 ], [ 5.942894106704009, 53.25040418162304 ], [ 5.925675025867842, 53.252181269003877 ], [ 5.925713862298605, 53.255295217451469 ], [ 5.922931577275047, 53.257289377812107 ], [ 5.914524389786468, 53.258459004679345 ], [ 5.908159439188915, 53.262733307898735 ], [ 5.900576483850011, 53.265880076122194 ], [ 5.893403494729741, 53.269873931105558 ], [ 5.882250090790836, 53.276714814538288 ], [ 5.877073278097819, 53.280133227671378 ], [ 5.874694776843364, 53.282690791368076 ], [ 5.86151301294528, 53.288122429314342 ], [ 5.861117943879863, 53.288690183680337 ], [ 5.847838895989701, 53.285344673799031 ], [ 5.84579645438001, 53.281955317666061 ], [ 5.838500208299164, 53.274905505351889 ], [ 5.832822452088703, 53.268981639217337 ], [ 5.831932706430379, 53.260491961134285 ], [ 5.829901403052999, 53.257951571141319 ], [ 5.829875276985839, 53.255403767846019 ], [ 5.833013019356893, 53.248597745360847 ], [ 5.830967668721811, 53.244641911503301 ], [ 5.832152831283331, 53.24293891644902 ], [ 5.859418224637889, 53.243400943866426 ], [ 5.856976025056661, 53.240013305196555 ], [ 5.852463070356734, 53.230405403968788 ], [ 5.860481255807216, 53.23065715064925 ], [ 5.860086696158318, 53.231224912004869 ], [ 5.868505840080444, 53.231474542434874 ], [ 5.876129955188076, 53.23229303072312 ], [ 5.8797498017349, 53.233410640314112 ], [ 5.880855105828534, 53.224912994243425 ], [ 5.890071248914404, 53.2248747237497 ], [ 5.889246824045111, 53.222896447084509 ], [ 5.896859797830431, 53.222864351315579 ], [ 5.897237093566606, 53.220881016736456 ], [ 5.888823139771794, 53.220916488931572 ], [ 5.889187636059096, 53.217800814344194 ], [ 5.894395900417756, 53.217778909542631 ], [ 5.893968712486874, 53.215515875475674 ], [ 5.897964821082462, 53.214649613675213 ], [ 5.905980337465864, 53.214898325713122 ], [ 5.905148593382172, 53.212353970805928 ], [ 5.90713449276732, 53.210929852152468 ], [ 5.897894588625753, 53.208704698332234 ], [ 5.857786905068487, 53.20405595669019 ], [ 5.856970506844855, 53.202643629702997 ], [ 5.862080593868031, 53.193847220371225 ], [ 5.850844671466915, 53.191626335564692 ], [ 5.852831411513202, 53.190203105255783 ], [ 5.857919321702852, 53.179425168905915 ], [ 5.861835201092251, 53.171482704249321 ], [ 5.86583102473037, 53.170900600195147 ], [ 5.907831724383485, 53.1690268963238 ], [ 5.92543272946688, 53.16838294392921 ], [ 5.932660875461876, 53.170332043492557 ], [ 5.933843583171166, 53.168911106148791 ], [ 5.932146636876903, 53.161274850453005 ], [ 5.924453196790481, 53.153948695913556 ], [ 5.918793510326429, 53.149161039600394 ], [ 5.908738969001612, 53.144675432906581 ], [ 5.913869593243086, 53.138990749890347 ], [ 5.923369235573145, 53.131021454383522 ], [ 5.92734638261426, 53.129304908235632 ], [ 5.931733684616979, 53.128435705826107 ], [ 5.938490799164708, 53.125290547521303 ], [ 5.943640669033067, 53.121586249525549 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0637\", \"naam\": \"Zoetermeer\", \"code\": \"0637\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.557089703922805, 52.061265086071721 ], [ 4.553140026495369, 52.063785919459505 ], [ 4.533840124402575, 52.072993057600193 ], [ 4.533796916623052, 52.075258284472525 ], [ 4.536106632179006, 52.076974144501541 ], [ 4.530191655541056, 52.080046388569798 ], [ 4.530571191234813, 52.080615532873445 ], [ 4.514405203548237, 52.088709490351647 ], [ 4.513239372617685, 52.088417658118281 ], [ 4.504554430299571, 52.093167208002349 ], [ 4.499896612189903, 52.091716270019141 ], [ 4.497632593106182, 52.087734501837161 ], [ 4.492121031700695, 52.089958315320089 ], [ 4.492947257598185, 52.087699042222489 ], [ 4.474252243579438, 52.085290147979691 ], [ 4.475504314975008, 52.081335125304406 ], [ 4.4568129166729, 52.078923469981667 ], [ 4.42122981119623, 52.063344526235866 ], [ 4.420857927980203, 52.062491885763428 ], [ 4.422534760088851, 52.057124888353755 ], [ 4.415121518767894, 52.057063942748854 ], [ 4.422260563906613, 52.051741896869082 ], [ 4.450408925828625, 52.049137180521917 ], [ 4.456460623883168, 52.039556483915945 ], [ 4.457648319316024, 52.038716275577762 ], [ 4.470874070547736, 52.040519110247573 ], [ 4.476518760097391, 52.031500624694253 ], [ 4.477292914310945, 52.031789805929748 ], [ 4.504589941781456, 52.031997585356237 ], [ 4.507302974489796, 52.032867475978911 ], [ 4.515371055793278, 52.039157773758795 ], [ 4.526556588245652, 52.045753517554189 ], [ 4.53467822240114, 52.049494104340837 ], [ 4.544837201413008, 52.048717619493935 ], [ 4.547536101448364, 52.050436049930461 ], [ 4.550545970959042, 52.05640451861656 ], [ 4.557875388674027, 52.060987427562523 ], [ 4.557089703922805, 52.061265086071721 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0285\", \"naam\": \"Voorst\", \"code\": \"0285\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.184685510719821, 52.161170824828083 ], [ 6.186701883391216, 52.164555414182765 ], [ 6.190659029423519, 52.167077204970639 ], [ 6.192665896049375, 52.169895384053682 ], [ 6.194322821445845, 52.174981415031468 ], [ 6.191259474234685, 52.178683754584782 ], [ 6.188149835360764, 52.179837651224432 ], [ 6.181132388039359, 52.181301012609723 ], [ 6.169528373599052, 52.189024528215285 ], [ 6.158981776028321, 52.190226721738654 ], [ 6.156296059637349, 52.19335928626036 ], [ 6.156359589945384, 52.19704026733146 ], [ 6.158761989439109, 52.200139610058216 ], [ 6.162304638967527, 52.201249132129533 ], [ 6.170916488176182, 52.201192257418143 ], [ 6.185074466387086, 52.204778790132806 ], [ 6.189436802113886, 52.207864250182801 ], [ 6.19109479472383, 52.21295029049886 ], [ 6.189600012980375, 52.216925040441041 ], [ 6.179153109191046, 52.224075180209169 ], [ 6.173318382443965, 52.226379641647149 ], [ 6.16984811719339, 52.229517709990034 ], [ 6.16634762751197, 52.2309567756256 ], [ 6.163169533430897, 52.22842906044346 ], [ 6.168241591570402, 52.227262884873582 ], [ 6.167830056523905, 52.226132874619907 ], [ 6.162772913639695, 52.228148483697169 ], [ 6.16580240157161, 52.222181701095614 ], [ 6.168518982607278, 52.220747837041415 ], [ 6.167701004182827, 52.218770964487014 ], [ 6.163760295615036, 52.217381036698676 ], [ 6.162600315665545, 52.218238211693397 ], [ 6.163839302585632, 52.221911448693305 ], [ 6.161152029544683, 52.225044109191828 ], [ 6.147487501749158, 52.22768153826388 ], [ 6.142859408199834, 52.231958981947386 ], [ 6.141722643906907, 52.234231706948968 ], [ 6.142186423535564, 52.238476468860632 ], [ 6.150080195662922, 52.241823917441252 ], [ 6.153645459601039, 52.244066285910385 ], [ 6.153694231847996, 52.246897785551077 ], [ 6.150191853468299, 52.248336371452851 ], [ 6.143501293300973, 52.246680317691741 ], [ 6.138426371655835, 52.247845431957558 ], [ 6.135711931932276, 52.249561752261599 ], [ 6.123988479371367, 52.251617732521325 ], [ 6.123629394252566, 52.253602234784616 ], [ 6.125654753969154, 52.257554113687888 ], [ 6.130018172625125, 52.260641737109793 ], [ 6.12496478873211, 52.263222025670487 ], [ 6.123816938548488, 52.26492826753163 ], [ 6.123103198397391, 52.269180410210254 ], [ 6.12118969240192, 52.272024107634792 ], [ 6.113039330141445, 52.277171681221539 ], [ 6.111134060960884, 52.280581513907968 ], [ 6.111641578797808, 52.287657863663426 ], [ 6.10583622137508, 52.292507333323584 ], [ 6.105115755427142, 52.296476199348717 ], [ 6.101270206831249, 52.301313509436277 ], [ 6.099290382252086, 52.300192744360125 ], [ 6.091047079697207, 52.299958940954866 ], [ 6.084011912451918, 52.30169968451716 ], [ 6.082919152577853, 52.307086475677067 ], [ 6.084952252836429, 52.311605314111681 ], [ 6.081032415548862, 52.311911560300487 ], [ 6.07994346627688, 52.317581464245578 ], [ 6.071692667124499, 52.317063167800981 ], [ 6.066603485840768, 52.317942047835011 ], [ 6.066245644935896, 52.32020950604138 ], [ 6.070589326162418, 52.321883532157756 ], [ 6.073865228823247, 52.330642981749193 ], [ 6.053061884122344, 52.331045121495976 ], [ 6.052592878655378, 52.325950621328097 ], [ 6.050186803473973, 52.322566040623244 ], [ 6.035671270247533, 52.296311257518731 ], [ 6.035212900623061, 52.291782957168984 ], [ 6.043257933293086, 52.278712449341093 ], [ 6.043604080014139, 52.275595579824738 ], [ 6.041205595187902, 52.272493932116532 ], [ 6.043111709667804, 52.26880205997945 ], [ 6.036442703436016, 52.268555720640585 ], [ 6.034825019405444, 52.265166471594988 ], [ 6.037548449782975, 52.263735622266232 ], [ 6.037507045642298, 52.260904073783536 ], [ 6.034329992346291, 52.258089744363204 ], [ 6.031594496047694, 52.258671054756114 ], [ 6.030704063684414, 52.251313284691157 ], [ 6.028315953281398, 52.248777669589224 ], [ 6.024789072589065, 52.248796762554782 ], [ 6.027866996243546, 52.244815610837612 ], [ 6.026662990235979, 52.242839888063564 ], [ 6.028213967787534, 52.241698765487087 ], [ 6.028569052823888, 52.23914823038313 ], [ 6.033992391868212, 52.23487096612098 ], [ 6.035909887093962, 52.232028655971341 ], [ 6.034330627324103, 52.231187784758845 ], [ 6.034677044327028, 52.228070913615099 ], [ 6.033444422166291, 52.224113155194125 ], [ 6.040885917883562, 52.224072185623299 ], [ 6.042427545071516, 52.222364560753157 ], [ 6.0467230238778, 52.221491101655268 ], [ 6.048213900241519, 52.216385520495606 ], [ 6.047771911927825, 52.212989830526233 ], [ 6.050079125680587, 52.21014509031334 ], [ 6.053471637725824, 52.201347379454234 ], [ 6.058088107043661, 52.195940779166918 ], [ 6.053765663804109, 52.194832548484001 ], [ 6.049308816497246, 52.184663101203199 ], [ 6.06013725913998, 52.17610636511165 ], [ 6.065842010517282, 52.165312731356991 ], [ 6.066568221456128, 52.161627167071806 ], [ 6.064539590907586, 52.156824715469376 ], [ 6.067620608370359, 52.153691957857511 ], [ 6.074576397243887, 52.148271119427363 ], [ 6.076074789482976, 52.144014608777184 ], [ 6.09845828032166, 52.150111778701138 ], [ 6.108274554274705, 52.152600826553638 ], [ 6.125535852676726, 52.155892240087944 ], [ 6.134563262530775, 52.157817674886608 ], [ 6.145150978802941, 52.159449218762873 ], [ 6.155338616647851, 52.160516049908459 ], [ 6.160447341239029, 52.161898596607308 ], [ 6.167863425245971, 52.161000184188154 ], [ 6.167101037555956, 52.162137972813632 ], [ 6.172561542964662, 52.161252179854735 ], [ 6.182333893172688, 52.160903515549812 ], [ 6.184685510719821, 52.161170824828083 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1708\", \"naam\": \"Steenwijkerland\", \"code\": \"1708\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.119484267101312, 52.667903108565625 ], [ 6.122262939903296, 52.668452273194575 ], [ 6.127863442455157, 52.672098534722849 ], [ 6.130227691096035, 52.671517474916058 ], [ 6.13581959610236, 52.674597107451049 ], [ 6.135457689244824, 52.676581469543279 ], [ 6.145813725046349, 52.680480027036218 ], [ 6.152614813550858, 52.684683773394369 ], [ 6.154652921258386, 52.688068495978285 ], [ 6.154291757577258, 52.690052907249552 ], [ 6.159081130613507, 52.692287159727584 ], [ 6.156701266423543, 52.692019424744451 ], [ 6.151322434255754, 52.701398177076136 ], [ 6.151347074492543, 52.702813786240831 ], [ 6.145951102266773, 52.71134291133793 ], [ 6.145555112447546, 52.711345435807672 ], [ 6.128972563212681, 52.737783032257255 ], [ 6.120459066401002, 52.750011211114519 ], [ 6.121719246789336, 52.754250678798108 ], [ 6.126122369128375, 52.756771775470121 ], [ 6.132498487727264, 52.758714080000033 ], [ 6.138850890399267, 52.759240449716209 ], [ 6.156754496922572, 52.762807035469123 ], [ 6.164352383409347, 52.766438636107885 ], [ 6.168327336106651, 52.766978929755098 ], [ 6.172800408253631, 52.773178789712318 ], [ 6.180009967593903, 52.777095105699871 ], [ 6.193665718368409, 52.786347348390869 ], [ 6.201735909108998, 52.793654307805625 ], [ 6.1786665857762, 52.812497478873468 ], [ 6.177104531044667, 52.813923572165756 ], [ 6.172372027377498, 52.815653717470632 ], [ 6.171568013712842, 52.815092719735759 ], [ 6.15745308393517, 52.825094846229014 ], [ 6.149169945216047, 52.828262665527362 ], [ 6.151959177073377, 52.828811093620878 ], [ 6.136643908206735, 52.838818372078691 ], [ 6.130376217774334, 52.843954168494434 ], [ 6.128854698002036, 52.847927631670316 ], [ 6.119822850204541, 52.854212573582004 ], [ 6.092245617636424, 52.84418571587404 ], [ 6.087461119499785, 52.843081343991635 ], [ 6.08103872847736, 52.838871768764449 ], [ 6.075474185696031, 52.838620878582461 ], [ 6.067941613205027, 52.839513545620385 ], [ 6.061582754182206, 52.839266539634409 ], [ 6.052418056318146, 52.837336037838632 ], [ 6.05549129355401, 52.830523465198318 ], [ 6.059793796980471, 52.826252144442165 ], [ 6.053009707531482, 52.824025094663014 ], [ 6.047400203291216, 52.820658592969735 ], [ 6.041816980288799, 52.818990535135995 ], [ 6.031040417163535, 52.815085248439473 ], [ 6.026761031146302, 52.821054262434842 ], [ 6.024399708021737, 52.822482615197316 ], [ 6.017245480087109, 52.821954362352344 ], [ 6.007292390598035, 52.820024569347694 ], [ 5.99851129105312, 52.816672237552439 ], [ 5.996526528108726, 52.816682400848713 ], [ 5.990638621705246, 52.821525747639804 ], [ 5.986672529827313, 52.821828900554991 ], [ 5.9816115600808, 52.829215885102911 ], [ 5.977301122348182, 52.833484391191703 ], [ 5.972252382881511, 52.842003438502132 ], [ 5.969873052050466, 52.842298227800498 ], [ 5.961112631718173, 52.84064188595147 ], [ 5.955912558695213, 52.837835419125568 ], [ 5.956250746832931, 52.833303587414932 ], [ 5.945579490749758, 52.837317983667631 ], [ 5.941590109680813, 52.835920909603125 ], [ 5.932449037982255, 52.835396789403383 ], [ 5.927268908958847, 52.834004677445691 ], [ 5.93041416260554, 52.831442142975682 ], [ 5.923263058816985, 52.831191375441371 ], [ 5.922845162141099, 52.829494423917708 ], [ 5.926401364243592, 52.828062699101061 ], [ 5.922817420801596, 52.827229440751502 ], [ 5.924367378704108, 52.824107940439191 ], [ 5.914780732219517, 52.819337397236197 ], [ 5.911557367622455, 52.815387674423427 ], [ 5.908758495188713, 52.81370112022622 ], [ 5.902390932238409, 52.812313120488824 ], [ 5.899599240475542, 52.811192599186519 ], [ 5.897971946372815, 52.80780191187683 ], [ 5.89199591570834, 52.805845400318006 ], [ 5.88324572780229, 52.804183310303941 ], [ 5.878842256971177, 52.800803885428202 ], [ 5.876461365702963, 52.800813685775609 ], [ 5.868940566894191, 52.802543167612882 ], [ 5.864996980003955, 52.804824160362088 ], [ 5.859437990548521, 52.804563182160166 ], [ 5.857481123111864, 52.807119171957986 ], [ 5.855084745807093, 52.805712911176009 ], [ 5.851122140023202, 52.806294682461861 ], [ 5.843969677446774, 52.805472898536607 ], [ 5.842005979950362, 52.807462380217643 ], [ 5.839216140085097, 52.806340441574072 ], [ 5.836038297919095, 52.806069315574639 ], [ 5.837252187507533, 52.808329844763591 ], [ 5.833714889708325, 52.811740810435481 ], [ 5.828175179858851, 52.813460266131607 ], [ 5.824996888163248, 52.813188846788904 ], [ 5.819867598174842, 52.816322093697316 ], [ 5.819875999254926, 52.817171475571087 ], [ 5.809919003162505, 52.813809560199118 ], [ 5.795163700961115, 52.806499410454094 ], [ 5.799084433722911, 52.801389436302564 ], [ 5.805768157135786, 52.794853954369529 ], [ 5.818791581349757, 52.787729001095336 ], [ 5.818760883141187, 52.784614575047648 ], [ 5.828289539020716, 52.785429090764616 ], [ 5.836225999191182, 52.785682577679651 ], [ 5.843354437500494, 52.78452293201962 ], [ 5.849704132279124, 52.784781587028064 ], [ 5.860383650981011, 52.781908235359097 ], [ 5.868672717968129, 52.778194183857124 ], [ 5.875773806322309, 52.774767568972919 ], [ 5.879723681021563, 52.773335591484617 ], [ 5.885230539372596, 52.76934870207085 ], [ 5.894301560259255, 52.765063283944635 ], [ 5.896257697500368, 52.762789795384109 ], [ 5.900202507820083, 52.761074007768734 ], [ 5.906152672063451, 52.761331367502819 ], [ 5.92267580017104, 52.750781885631781 ], [ 5.930069889246303, 52.739705750332988 ], [ 5.935500692260445, 52.730337050122408 ], [ 5.942438297129646, 52.715014962152992 ], [ 5.951111058427773, 52.711859552202156 ], [ 5.955408481671363, 52.707308739463251 ], [ 5.954964903925863, 52.703629929773065 ], [ 5.958927916437254, 52.703894098763627 ], [ 5.964792426148988, 52.698202794871634 ], [ 5.965128677611076, 52.693670775157102 ], [ 5.961917468078194, 52.69028854169153 ], [ 5.959538905017144, 52.690016861628806 ], [ 5.952748147224683, 52.685235803843781 ], [ 5.949589260724943, 52.685817082454946 ], [ 5.944800447713322, 52.682724985898972 ], [ 5.945192595677423, 52.68243999692428 ], [ 5.934023677759996, 52.675413134696171 ], [ 5.933179538810339, 52.671169762468459 ], [ 5.935133029785065, 52.669178723961856 ], [ 5.939876946732237, 52.66887361687084 ], [ 5.941480857094412, 52.670565053539839 ], [ 5.954104645224809, 52.667674027234668 ], [ 5.958064409689053, 52.667938231909382 ], [ 5.965163057496918, 52.666205029887728 ], [ 5.966749171067728, 52.666480460236336 ], [ 5.970690105350147, 52.665328579346628 ], [ 5.979723695488037, 52.660470321206184 ], [ 5.985215060767264, 52.657044998402483 ], [ 5.999421898375553, 52.654707459745524 ], [ 6.006888299060093, 52.651270934302225 ], [ 6.015112039730652, 52.645564704364226 ], [ 6.017452013050859, 52.643287087629808 ], [ 6.020981919848051, 52.641286237322788 ], [ 6.024552535895284, 52.642116605655893 ], [ 6.038499650305604, 52.649403007905491 ], [ 6.054725524044989, 52.650162456993087 ], [ 6.05831478085583, 52.652124328032706 ], [ 6.061491507364135, 52.65295581403457 ], [ 6.068662621851177, 52.656312774758213 ], [ 6.085385984245324, 52.663294598982013 ], [ 6.097275671760399, 52.664639956784647 ], [ 6.099984984589769, 52.660942732706921 ], [ 6.107178884771744, 52.665429864380933 ], [ 6.119484267101312, 52.667903108565625 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0867\", \"naam\": \"Waalwijk\", \"code\": \"0867\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.101611488859216, 51.676724818950142 ], [ 5.106638042878822, 51.677303354311682 ], [ 5.104604397531528, 51.693157359244118 ], [ 5.102997438250136, 51.702498880585587 ], [ 5.111507805132718, 51.703651984922828 ], [ 5.109155269505129, 51.708460723245786 ], [ 5.106818030948169, 51.710720705834731 ], [ 5.101768104746602, 51.713257261089083 ], [ 5.097481251992411, 51.717494649564912 ], [ 5.093210164621862, 51.719183177643565 ], [ 5.083516485250173, 51.72085762797176 ], [ 5.081570390177883, 51.722268538827677 ], [ 5.075009463779469, 51.71885292389674 ], [ 5.065742748022667, 51.71486316084232 ], [ 5.054146016096463, 51.711998839283865 ], [ 5.044858973730637, 51.71112249700375 ], [ 5.027434074881898, 51.711070302940001 ], [ 5.014646515270533, 51.712163129769678 ], [ 5.006117952572847, 51.713268487962573 ], [ 4.996809591950103, 51.714937021179566 ], [ 4.979344990516615, 51.719125473096803 ], [ 4.969257222505143, 51.721072301842696 ], [ 4.960723207676089, 51.72245753686947 ], [ 4.951422208478012, 51.722989716004577 ], [ 4.943288522430643, 51.722959192989926 ], [ 4.932452172996699, 51.722068063121689 ], [ 4.918142290553961, 51.720029295423721 ], [ 4.933294311046825, 51.67675989665274 ], [ 4.94410874165117, 51.678783685996116 ], [ 4.947610452070639, 51.676814502695031 ], [ 4.953858151892632, 51.670890651205646 ], [ 4.957025775710766, 51.663256010949951 ], [ 4.957834293049073, 51.659577415883405 ], [ 4.957909443773157, 51.651648168131963 ], [ 4.987274382765984, 51.654584122642454 ], [ 4.992114224766471, 51.676123485378518 ], [ 5.030882035534765, 51.666619177361007 ], [ 5.045225041156327, 51.662697194977852 ], [ 5.047154820608495, 51.663269205704722 ], [ 5.04910156014699, 51.661575667243881 ], [ 5.058384689468496, 51.661602099347107 ], [ 5.057948488203454, 51.668397568330327 ], [ 5.061043331822484, 51.668406227353103 ], [ 5.060636055681638, 51.671237046915053 ], [ 5.071859520371246, 51.670701409679424 ], [ 5.080365029730985, 51.671573584573942 ], [ 5.088855942228124, 51.674710663773226 ], [ 5.095046508780719, 51.674726266493785 ], [ 5.101611488859216, 51.676724818950142 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0047\", \"naam\": \"Veendam\", \"code\": \"0047\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.907830170117463, 53.038756407314537 ], [ 6.905614874362822, 53.043881427275707 ], [ 6.920834074720085, 53.045386261570357 ], [ 6.919777013541066, 53.049364052207963 ], [ 6.933352282738127, 53.049472554626533 ], [ 6.933104372810183, 53.053723169846855 ], [ 6.924466216910711, 53.057798698715409 ], [ 6.92891890734014, 53.07076674911206 ], [ 6.930586027362328, 53.072727375694406 ], [ 6.937963536990461, 53.078012040522992 ], [ 6.944483340692361, 53.081608466167062 ], [ 6.943684799110684, 53.081618851538131 ], [ 6.956942524550654, 53.094754215977005 ], [ 6.960578082236649, 53.095839133324255 ], [ 6.961890536400829, 53.109979785362022 ], [ 6.95946324394562, 53.120205322727571 ], [ 6.946316317633506, 53.121509783200217 ], [ 6.943549333453365, 53.122395230713217 ], [ 6.93481771332276, 53.124207282845312 ], [ 6.90215368068586, 53.127739486271068 ], [ 6.896977264644959, 53.128371136149177 ], [ 6.896947688719449, 53.127522052747267 ], [ 6.886185096904948, 53.128506652949255 ], [ 6.88408879202322, 53.125701349688754 ], [ 6.874476880087006, 53.125254762583737 ], [ 6.874018948692306, 53.123561540695555 ], [ 6.86605454342544, 53.124509576561614 ], [ 6.844481323385553, 53.125057096262516 ], [ 6.822926271756392, 53.126166804937768 ], [ 6.821012037427077, 53.128738060177056 ], [ 6.803266927443527, 53.124135617492442 ], [ 6.80594428342724, 53.120423023696908 ], [ 6.801501977212529, 53.119059817276195 ], [ 6.813915380741008, 53.071060224078387 ], [ 6.861208175664277, 53.040755742480911 ], [ 6.865274264395356, 53.042970835143826 ], [ 6.86880670715907, 53.041228193066544 ], [ 6.881367539286741, 53.046735138886227 ], [ 6.898828303165935, 53.032357813100674 ], [ 6.903284478028721, 53.034283538728872 ], [ 6.901728556965984, 53.035435890500359 ], [ 6.907830170117463, 53.038756407314537 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1684\", \"naam\": \"Cuijk\", \"code\": \"1684\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.859929028379662, 51.669887384734608 ], [ 5.861101479907164, 51.671015433295388 ], [ 5.875092985025988, 51.676905093612817 ], [ 5.882441395121934, 51.676591033343591 ], [ 5.895263765770597, 51.681350442056448 ], [ 5.899562011956546, 51.685013280185508 ], [ 5.894953099657862, 51.688148538019817 ], [ 5.898461863509698, 51.690398848771181 ], [ 5.902774146366069, 51.695194298590287 ], [ 5.907845274444442, 51.698570229908448 ], [ 5.909413322400337, 51.700262432820303 ], [ 5.916024170925309, 51.702781541459998 ], [ 5.917609285257035, 51.705889546676033 ], [ 5.922282114428147, 51.708133869110029 ], [ 5.927719658653159, 51.70952488570876 ], [ 5.93360637303463, 51.716011115615899 ], [ 5.927811115132309, 51.71717080008311 ], [ 5.919297969609198, 51.71777618144214 ], [ 5.911939842032561, 51.717809379839892 ], [ 5.899572867172797, 51.720129711442773 ], [ 5.893785728499249, 51.722137262663111 ], [ 5.886470679331715, 51.726133424400381 ], [ 5.885333632107088, 51.728403836847107 ], [ 5.883502610069439, 51.738040280208892 ], [ 5.880471101421081, 51.744283393543476 ], [ 5.880517513253207, 51.748531134436966 ], [ 5.876682075935106, 51.752228761835347 ], [ 5.869360644039492, 51.756223850688023 ], [ 5.864336787682951, 51.757660389348885 ], [ 5.852338241956103, 51.759407797185887 ], [ 5.818980293209479, 51.757269896875044 ], [ 5.799969098358144, 51.755356046204611 ], [ 5.790649037390472, 51.753406148236806 ], [ 5.791391232196491, 51.749722066943484 ], [ 5.788270709065416, 51.747467237031003 ], [ 5.786305519378873, 51.744358811490038 ], [ 5.796342104035896, 51.74007627407255 ], [ 5.793596705759051, 51.736404300934225 ], [ 5.799777549427846, 51.73440033203002 ], [ 5.797417032349526, 51.73044389519255 ], [ 5.794700236473275, 51.729886988708678 ], [ 5.798109358435047, 51.72137922878791 ], [ 5.792292149513, 51.720549909202731 ], [ 5.793359852659901, 51.710067987573296 ], [ 5.788316077313861, 51.708952592613059 ], [ 5.802995781483755, 51.705219842582139 ], [ 5.799108623069904, 51.703534408111139 ], [ 5.805274256288348, 51.700397400971987 ], [ 5.815734698826462, 51.701209169026491 ], [ 5.822686709353413, 51.69948434067512 ], [ 5.822681253524888, 51.698917968651457 ], [ 5.842619945747411, 51.679867924590873 ], [ 5.846454929737081, 51.676454574264895 ], [ 5.859929028379662, 51.669887384734608 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0297\", \"naam\": \"Zaltbommel\", \"code\": \"0297\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.185672267180573, 51.742033977305745 ], [ 5.184485671038821, 51.74741258150619 ], [ 5.185636910652028, 51.749963292571685 ], [ 5.185235432789078, 51.75307771222591 ], [ 5.180948745514058, 51.758167705369111 ], [ 5.174733390581195, 51.760988530730543 ], [ 5.173555704796458, 51.764101499482535 ], [ 5.180522255797077, 51.766662700688777 ], [ 5.189056636982196, 51.76554465707143 ], [ 5.191761898241262, 51.767531533250519 ], [ 5.196026688178492, 51.767538558714428 ], [ 5.20803891116875, 51.769256659704823 ], [ 5.214244652515593, 51.76869958722569 ], [ 5.233623854806781, 51.770708881874512 ], [ 5.23749746295432, 51.771846649605557 ], [ 5.241377664803899, 51.771001961445165 ], [ 5.248743834582497, 51.771294071615628 ], [ 5.251842372217641, 51.772430448316484 ], [ 5.262693165349778, 51.77470798248892 ], [ 5.270061546991789, 51.77443237391482 ], [ 5.266521711517265, 51.793119350657534 ], [ 5.27621507241834, 51.795111239400931 ], [ 5.288230246687045, 51.80021939206695 ], [ 5.280854427553643, 51.801912085718392 ], [ 5.283567863191553, 51.803047268978936 ], [ 5.284336152219731, 51.806446218858547 ], [ 5.280834416730866, 51.810407753492356 ], [ 5.28315831740022, 51.812392159501613 ], [ 5.283147874409699, 51.816923178028745 ], [ 5.284698482283285, 51.817774108104622 ], [ 5.281585398737911, 51.821169620618029 ], [ 5.269556537544269, 51.819459059692953 ], [ 5.253646342674384, 51.818026105807661 ], [ 5.245887024405022, 51.816884271190837 ], [ 5.238129971001054, 51.815175547013411 ], [ 5.227660785122347, 51.812329898182305 ], [ 5.22068032095688, 51.810904260143673 ], [ 5.211369676764522, 51.810041119832 ], [ 5.203218970532392, 51.810311822596731 ], [ 5.195064549254807, 51.811431522668208 ], [ 5.186515329671712, 51.813965931379407 ], [ 5.176024504608269, 51.816496241885915 ], [ 5.170587981038524, 51.817052718748933 ], [ 5.1593349739062, 51.816465041055586 ], [ 5.140717214023068, 51.814161913157719 ], [ 5.132953459919079, 51.81442854769287 ], [ 5.122074729116775, 51.816386817535339 ], [ 5.105342816297762, 51.823144409253189 ], [ 5.093288798984974, 51.826229947631987 ], [ 5.08241507616356, 51.826768606423286 ], [ 5.071943177724662, 51.825325004306578 ], [ 5.059937694828972, 51.821327484740706 ], [ 5.050642818853242, 51.818469297344947 ], [ 5.042112355683779, 51.817311767074038 ], [ 5.035511899788631, 51.817575369875186 ], [ 5.026185343437505, 51.818963014863698 ], [ 5.020353938872623, 51.820077702264655 ], [ 5.007923447612655, 51.821170965590447 ], [ 5.00055075660159, 51.820863722695819 ], [ 5.009506946081141, 51.817494581061233 ], [ 5.010321083373688, 51.812966131299966 ], [ 5.014622872362335, 51.809015180244465 ], [ 5.024748852891598, 51.804515818406024 ], [ 5.029028335363106, 51.8031129973931 ], [ 5.036023536854428, 51.801718178086176 ], [ 5.048079158102032, 51.798072140192623 ], [ 5.052363609345401, 51.795818908757361 ], [ 5.057056280137664, 51.790734752200109 ], [ 5.060974218014974, 51.785365063631666 ], [ 5.066826263116674, 51.780566923969936 ], [ 5.074204608003221, 51.779170878733254 ], [ 5.08001590821553, 51.780035813240943 ], [ 5.083882621311071, 51.781745024008266 ], [ 5.088510321308649, 51.785721579460493 ], [ 5.09431539024175, 51.787718553022685 ], [ 5.100137184445365, 51.787166555941305 ], [ 5.10869140164975, 51.783788872347422 ], [ 5.11609109096213, 51.778708754494886 ], [ 5.127746328085969, 51.775053614949734 ], [ 5.135120310239078, 51.773936922604975 ], [ 5.139401232349048, 51.77111412600712 ], [ 5.139410555244097, 51.769414995936692 ], [ 5.135962006334694, 51.762044675199604 ], [ 5.137537687888491, 51.757516967506092 ], [ 5.142589027735986, 51.755262073243138 ], [ 5.137962803035183, 51.750721259975435 ], [ 5.127526284068582, 51.74588434742185 ], [ 5.125598515665164, 51.744180907996437 ], [ 5.126017116504835, 51.738801180645723 ], [ 5.127960913605432, 51.737672722896299 ], [ 5.141896845987277, 51.739968242921343 ], [ 5.165518685184431, 51.742847195031445 ], [ 5.180244827879195, 51.742590910950703 ], [ 5.185672267180573, 51.742033977305745 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0553\", \"naam\": \"Lisse\", \"code\": \"0553\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.554094336269356, 52.222095120174046 ], [ 4.550897532438922, 52.22547074413221 ], [ 4.550860316435859, 52.227452773387846 ], [ 4.553538435884922, 52.230869920018655 ], [ 4.56055232782835, 52.232901503256038 ], [ 4.562865974233228, 52.23489995945846 ], [ 4.567698043651433, 52.24909274876908 ], [ 4.569464897090278, 52.259582749046018 ], [ 4.567756274931508, 52.267216834081161 ], [ 4.568901101584678, 52.268923857906039 ], [ 4.572780037759538, 52.271216104158057 ], [ 4.56764151586996, 52.273446039874834 ], [ 4.553362111749115, 52.282124807943561 ], [ 4.542687893415246, 52.286579945254701 ], [ 4.536548223953728, 52.279456372859777 ], [ 4.529985708966437, 52.274028493719513 ], [ 4.53274660413045, 52.273198935904816 ], [ 4.520834957109123, 52.260652149255314 ], [ 4.513498853272211, 52.254934452741395 ], [ 4.517854144045495, 52.252701101161271 ], [ 4.52144177282266, 52.249612414661271 ], [ 4.526579838565191, 52.247384477279276 ], [ 4.52389731515222, 52.244249876642691 ], [ 4.530226389898484, 52.241180925898831 ], [ 4.527522112735711, 52.239178984860587 ], [ 4.529502806657399, 52.238060643172105 ], [ 4.524850981067067, 52.235478111851741 ], [ 4.530781578870422, 52.23268940837167 ], [ 4.539061600590614, 52.22991730292361 ], [ 4.547780291511232, 52.224599075863232 ], [ 4.554094336269356, 52.222095120174046 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0957\", \"naam\": \"Roermond\", \"code\": \"0957\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.073081997581692, 51.182848843042464 ], [ 6.069322300289574, 51.213174470897421 ], [ 6.068560522920473, 51.213462149154751 ], [ 6.067899639515463, 51.220546272254403 ], [ 6.073292065658531, 51.222497040811184 ], [ 6.085937680557072, 51.222704928240169 ], [ 6.0837081000429, 51.227249674268769 ], [ 6.072826680140182, 51.242607698319325 ], [ 6.062916764933728, 51.246347433477709 ], [ 6.054184003287747, 51.252062037757007 ], [ 6.051508985872609, 51.252643767314773 ], [ 6.043378031556858, 51.247025745188701 ], [ 6.03838334554255, 51.246204194269389 ], [ 6.032646250388858, 51.247085806251832 ], [ 6.028023135159543, 51.245412121716811 ], [ 6.026130510334079, 51.247121788852489 ], [ 6.02004498859235, 51.250553569212791 ], [ 6.015832482243028, 51.250859625029591 ], [ 6.0162546882719, 51.253689426872249 ], [ 6.013215106394005, 51.255688286881046 ], [ 6.008634098639661, 51.257128896064678 ], [ 6.005969683024627, 51.258559142961104 ], [ 6.008196970567685, 51.253166315040268 ], [ 6.00891365633261, 51.249480777661255 ], [ 6.005694300046077, 51.238169611398739 ], [ 6.002966189688379, 51.23478559138929 ], [ 5.997548893719905, 51.230849241049903 ], [ 5.993308080448315, 51.228888970571056 ], [ 5.986776363234324, 51.227506800880612 ], [ 5.97982531573085, 51.223294324892954 ], [ 5.973984815451731, 51.215960549975762 ], [ 5.968561460354985, 51.211173270851177 ], [ 5.962766958865087, 51.207237203834424 ], [ 5.951201832809577, 51.201063341317976 ], [ 5.934242799264743, 51.1917985782679 ], [ 5.929219267226366, 51.187857222043768 ], [ 5.925351511472194, 51.18447671706096 ], [ 5.921075236047001, 51.1788323067005 ], [ 5.92603722483624, 51.177676567382989 ], [ 5.921751608019436, 51.171182604789387 ], [ 5.916747740971223, 51.168656662803656 ], [ 5.922500397866235, 51.169763120606788 ], [ 5.928226629699692, 51.16860375952453 ], [ 5.941140323219251, 51.160613076810741 ], [ 5.946878747467951, 51.160585563486705 ], [ 5.952596242133513, 51.158858621775813 ], [ 5.955660119981499, 51.159126872359813 ], [ 5.983427836381519, 51.176263343546097 ], [ 5.984553792500604, 51.174558308579051 ], [ 5.987622605762132, 51.175108903470679 ], [ 5.989131043641418, 51.173401845759088 ], [ 5.98602907756133, 51.170302585996502 ], [ 5.986783261582552, 51.169449069907344 ], [ 5.990628201729948, 51.170845200975442 ], [ 5.99253022065016, 51.169985678444526 ], [ 5.991731383427656, 51.16744096164269 ], [ 5.993629500320863, 51.166298232148222 ], [ 5.995576304932388, 51.168836929049192 ], [ 5.998243388071126, 51.167973302451749 ], [ 5.997826868798683, 51.165426614408105 ], [ 6.000080879188917, 51.162299445339592 ], [ 6.005830911186034, 51.163118586049507 ], [ 6.013532705433907, 51.166759024694898 ], [ 6.016948994745824, 51.164758087654128 ], [ 6.026123314068319, 51.164141561980465 ], [ 6.029523013444412, 51.161007505618421 ], [ 6.036026530713059, 51.160971354484495 ], [ 6.039860173571399, 51.161516293261776 ], [ 6.040230655331094, 51.160664581477896 ], [ 6.055553497674175, 51.161993462212052 ], [ 6.057108553427132, 51.163683763704448 ], [ 6.063641624194131, 51.165628369496936 ], [ 6.059894490335876, 51.171031125720965 ], [ 6.0499621428209, 51.172221061999856 ], [ 6.048085574103328, 51.17478064267199 ], [ 6.056899455424703, 51.175579793352746 ], [ 6.054656909236646, 51.179274430118383 ], [ 6.055117924818291, 51.18465276985777 ], [ 6.06084262627656, 51.183486877050726 ], [ 6.066592190111151, 51.18401981710457 ], [ 6.073081997581692, 51.182848843042464 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0534\", \"naam\": \"Hillegom\", \"code\": \"0534\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.611642784650666, 52.313671222527937 ], [ 4.598627004778302, 52.317266480682385 ], [ 4.583300245266885, 52.31829602179571 ], [ 4.573147743807281, 52.315394793901454 ], [ 4.568809923631671, 52.316497576832177 ], [ 4.563839141764888, 52.309383586133528 ], [ 4.555397239820992, 52.299130016620474 ], [ 4.554607324296825, 52.29940763810626 ], [ 4.549200432469592, 52.294838547387229 ], [ 4.548845546074247, 52.292853763093021 ], [ 4.545739706973889, 52.291132611547901 ], [ 4.542687893415246, 52.286579945254701 ], [ 4.553362111749115, 52.282124807943561 ], [ 4.56764151586996, 52.273446039874834 ], [ 4.572780037759538, 52.271216104158057 ], [ 4.587912728185274, 52.280098016878618 ], [ 4.591335578495964, 52.286067900998539 ], [ 4.595951202408456, 52.291196123496981 ], [ 4.597042363963968, 52.296017476637587 ], [ 4.603938786109877, 52.305408273298312 ], [ 4.611284961709939, 52.311686627567923 ], [ 4.611642784650666, 52.313671222527937 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0086\", \"naam\": \"Opsterland\", \"code\": \"0086\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.205512914092625, 53.037977248174244 ], [ 6.212661870331877, 53.036229357521208 ], [ 6.213076948060334, 53.037075880136058 ], [ 6.217497821898074, 53.038744052925111 ], [ 6.222695220685235, 53.039274125743546 ], [ 6.261645412326205, 53.051453480698456 ], [ 6.273310973995456, 53.055897735210188 ], [ 6.280541622668117, 53.058109011423419 ], [ 6.281462288085734, 53.064047851385226 ], [ 6.332012223358566, 53.075267809676141 ], [ 6.305379493909888, 53.081137631392451 ], [ 6.315242176899813, 53.094085479846903 ], [ 6.290593221345063, 53.09993651344557 ], [ 6.288636800534706, 53.101933139302062 ], [ 6.283142662059986, 53.106787504887564 ], [ 6.27403906129484, 53.111102134751441 ], [ 6.262507090149956, 53.114018207267804 ], [ 6.258516261053209, 53.114330428208255 ], [ 6.243712222769971, 53.113587831666209 ], [ 6.234514746806119, 53.113370124479687 ], [ 6.222552551608027, 53.114869761730255 ], [ 6.20497801570797, 53.115557281252102 ], [ 6.189574176932692, 53.125570695428934 ], [ 6.185644321656452, 53.129277516375588 ], [ 6.164302661039176, 53.120924244092578 ], [ 6.159865340909852, 53.118687984804239 ], [ 6.150552542338029, 53.111952803000278 ], [ 6.145702373828638, 53.108869288382095 ], [ 6.124782782417704, 53.100789450034071 ], [ 6.116197371671281, 53.089234052131602 ], [ 6.112935608925329, 53.08529016243893 ], [ 6.104821237751179, 53.077694779741485 ], [ 6.097586970431654, 53.074906706519982 ], [ 6.089536754043369, 53.070990498124509 ], [ 6.07316668559343, 53.071085436706127 ], [ 6.069985872367951, 53.071952990208111 ], [ 6.039258244880398, 53.073256816421832 ], [ 6.03168007145038, 53.073864101866455 ], [ 6.0244843662623, 53.073336388368269 ], [ 6.019746447532073, 53.077042086188165 ], [ 6.01733814283136, 53.076205427628892 ], [ 6.008593579661753, 53.079082342036088 ], [ 5.998633776023382, 53.080832346626543 ], [ 5.993438068161472, 53.080575652768992 ], [ 5.987850894864458, 53.080886936951643 ], [ 5.985039730513081, 53.079768532767986 ], [ 5.982608640802403, 53.077232576248711 ], [ 5.981015180229863, 53.077523611114373 ], [ 5.935533525712922, 53.081138016856805 ], [ 5.930338145843108, 53.080878584651003 ], [ 5.927510838580419, 53.07834331803253 ], [ 5.933497469737128, 53.078033027136058 ], [ 5.933073204803271, 53.076053134599846 ], [ 5.935839855960093, 53.073775536901977 ], [ 5.932239008723672, 53.073225751152009 ], [ 5.930214183453825, 53.070970005256811 ], [ 5.936933807214043, 53.065560065763435 ], [ 5.940904430894983, 53.063843043332142 ], [ 5.944116283482998, 53.065243737520987 ], [ 5.947273569997925, 53.062397805617792 ], [ 5.946035899866546, 53.059289271938624 ], [ 5.942766487072121, 53.053358969376141 ], [ 5.957537472861189, 53.053572593527981 ], [ 5.953527843974432, 53.052176034643921 ], [ 5.953102923515383, 53.050196198348488 ], [ 5.944707566452676, 53.049103128963644 ], [ 5.943488585507716, 53.047410076851754 ], [ 5.943847748305237, 53.044294072776978 ], [ 5.937862251931012, 53.04432177340027 ], [ 5.942215454964349, 53.041470442159003 ], [ 5.952948085365901, 53.038305824939577 ], [ 5.952135409992564, 53.037177177302176 ], [ 5.979160963709831, 53.029402165570986 ], [ 5.978746659808265, 53.028271721540101 ], [ 5.983908829995089, 53.026547336243205 ], [ 5.98469100199559, 53.025410935909498 ], [ 5.976920711306275, 53.011293287557677 ], [ 5.977304075590805, 53.010158896329379 ], [ 5.972113126550215, 53.009618152990193 ], [ 5.974060855917646, 53.006211107365857 ], [ 5.972857187339015, 53.005650759049168 ], [ 5.974804682062668, 53.002243697621175 ], [ 5.979530608404388, 52.997973487267771 ], [ 5.974697640796403, 52.994316697128404 ], [ 5.976667495101379, 52.992608240991089 ], [ 5.971026924255086, 52.988105899710156 ], [ 5.962564514863347, 52.981068765516198 ], [ 5.964932685221908, 52.979358577260498 ], [ 5.958073877078004, 52.972879607646938 ], [ 5.977965821234123, 52.970801020951015 ], [ 6.02091814485338, 52.965767739598746 ], [ 6.026871983000245, 52.964320362822853 ], [ 6.044426832071023, 52.966206999396555 ], [ 6.061230349744799, 52.970926607302204 ], [ 6.066851476776542, 52.973726071138337 ], [ 6.069648999828932, 52.974276387926615 ], [ 6.076493216560931, 52.978767189494441 ], [ 6.084534239132922, 52.983250622153108 ], [ 6.092521867963607, 52.984336271138169 ], [ 6.097345117436047, 52.986855881016552 ], [ 6.096566578805576, 52.987993023669915 ], [ 6.099777807797016, 52.989389572000754 ], [ 6.096246472690498, 52.992808126842782 ], [ 6.105497245051663, 52.997849227471129 ], [ 6.10751834667514, 52.999535842120082 ], [ 6.113933959875078, 53.001762048546652 ], [ 6.120772747751976, 53.005400962024162 ], [ 6.130000029633873, 53.008741542250405 ], [ 6.128832905072545, 53.010447560723648 ], [ 6.131249379809217, 53.011848192782416 ], [ 6.142856592793038, 53.014323565642215 ], [ 6.151270012126665, 53.016535135995682 ], [ 6.158457806632055, 53.017055252966799 ], [ 6.176878221113163, 53.021181976924034 ], [ 6.185724704410894, 53.025087049404263 ], [ 6.194609579239978, 53.030973115645317 ], [ 6.196646217230523, 53.033224383188141 ], [ 6.199459774364598, 53.034337827051907 ], [ 6.200305283723053, 53.036880242634183 ], [ 6.205512914092625, 53.037977248174244 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0629\", \"naam\": \"Wassenaar\", \"code\": \"0629\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.372903984158636, 52.094656502534356 ], [ 4.381008790788367, 52.098973926191142 ], [ 4.391414437005541, 52.105292612101238 ], [ 4.401035488064566, 52.111886990300654 ], [ 4.41371716528168, 52.121621009263016 ], [ 4.418344568424956, 52.124491065140958 ], [ 4.427534237989232, 52.133345215766489 ], [ 4.442916335127967, 52.145363470780971 ], [ 4.443283333358324, 52.146499177137194 ], [ 4.438838483440645, 52.153260137551577 ], [ 4.440354483776988, 52.15553785049584 ], [ 4.431691155928648, 52.158299922353926 ], [ 4.425800919093833, 52.159384839073475 ], [ 4.419867433643292, 52.162451454830581 ], [ 4.418321511004154, 52.161589193006428 ], [ 4.411226275799669, 52.164079447080752 ], [ 4.409152829105897, 52.169442934655166 ], [ 4.40489380167494, 52.167425208322811 ], [ 4.397721532053265, 52.173312327960765 ], [ 4.391796904100888, 52.175811235470654 ], [ 4.375115741813177, 52.186713879905497 ], [ 4.360102900985536, 52.192814442046284 ], [ 4.332495034174148, 52.168499437356708 ], [ 4.309855686244164, 52.150170313080352 ], [ 4.289894054665888, 52.134976801044502 ], [ 4.30136607529699, 52.129419021427488 ], [ 4.330005786842945, 52.108439432920925 ], [ 4.333197444006577, 52.105636031673811 ], [ 4.330490120455732, 52.104478999429581 ], [ 4.332085841722781, 52.103077302022776 ], [ 4.323190517364985, 52.099315756265952 ], [ 4.327573594179867, 52.095673657834496 ], [ 4.337262931305525, 52.098875556126764 ], [ 4.338467724406976, 52.097470290499196 ], [ 4.342372879009334, 52.097504973774377 ], [ 4.356658838193667, 52.104710688043902 ], [ 4.360174062761177, 52.104741367792677 ], [ 4.370138323745002, 52.096048654812414 ], [ 4.372903984158636, 52.094656502534356 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0786\", \"naam\": \"Grave\", \"code\": \"0786\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.792292149513, 51.720549909202731 ], [ 5.798109358435047, 51.72137922878791 ], [ 5.794700236473275, 51.729886988708678 ], [ 5.797417032349526, 51.73044389519255 ], [ 5.799777549427846, 51.73440033203002 ], [ 5.793596705759051, 51.736404300934225 ], [ 5.796342104035896, 51.74007627407255 ], [ 5.786305519378873, 51.744358811490038 ], [ 5.788270709065416, 51.747467237031003 ], [ 5.791391232196491, 51.749722066943484 ], [ 5.790649037390472, 51.753406148236806 ], [ 5.780949626186469, 51.752306368016342 ], [ 5.775133612713359, 51.752042574486659 ], [ 5.765063903399683, 51.752925062632407 ], [ 5.759257238660632, 51.75379322565373 ], [ 5.7522967343119, 51.755797475175008 ], [ 5.745346848595386, 51.759217243386217 ], [ 5.73957437649566, 51.764615412514445 ], [ 5.735732587916356, 51.769157987215927 ], [ 5.729557034661397, 51.772857694742889 ], [ 5.720265663935638, 51.774866814806508 ], [ 5.71134903773082, 51.775175007191457 ], [ 5.708228731752502, 51.772634864988781 ], [ 5.701221648097714, 51.768689157259104 ], [ 5.696130926937766, 51.761339684816335 ], [ 5.690688555956488, 51.759088367205194 ], [ 5.694152209089824, 51.755397840095441 ], [ 5.701906204408441, 51.755660461954555 ], [ 5.699932863747528, 51.75056827452859 ], [ 5.703420899322444, 51.750558911719807 ], [ 5.701439726673421, 51.744333995595397 ], [ 5.698298694810906, 51.738395322359573 ], [ 5.707972997261853, 51.73667006813259 ], [ 5.706003805451621, 51.732144348509173 ], [ 5.709875794657639, 51.731850551554089 ], [ 5.718794277344508, 51.732958416484117 ], [ 5.718392331182946, 51.730977197740216 ], [ 5.709464145705108, 51.728453361012605 ], [ 5.713323526929884, 51.726460321315905 ], [ 5.72915564792809, 51.719901700001571 ], [ 5.733052451716546, 51.723005392548288 ], [ 5.743496740468315, 51.721274917001672 ], [ 5.74811727365435, 51.717862434695867 ], [ 5.752015201718502, 51.720965496089399 ], [ 5.752416241995943, 51.72266341284103 ], [ 5.757057107618576, 51.721799264929849 ], [ 5.762878544986675, 51.723196708294161 ], [ 5.766357318455402, 51.722335913728067 ], [ 5.768690775421285, 51.723461114540932 ], [ 5.782214938497618, 51.719734747554604 ], [ 5.784913520299986, 51.718309639234633 ], [ 5.787639539550718, 51.719999519940039 ], [ 5.792292149513, 51.720549909202731 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0840\", \"naam\": \"Rucphen\", \"code\": \"0840\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.63864342428734, 51.524298615914951 ], [ 4.640259720405282, 51.543283835772115 ], [ 4.635258797457761, 51.542402144270568 ], [ 4.631763417238152, 51.543795636993494 ], [ 4.630163712760655, 51.547183770709658 ], [ 4.625915164926268, 51.547439380594952 ], [ 4.624676959709465, 51.552245830534751 ], [ 4.615783345354608, 51.553320299750673 ], [ 4.61113377758163, 51.554422350047084 ], [ 4.610376585035119, 51.553567697620053 ], [ 4.601799690693846, 51.558608117218313 ], [ 4.598692862949354, 51.559720031623726 ], [ 4.59212257524229, 51.560241942216955 ], [ 4.591721786475628, 51.561088839103647 ], [ 4.548270561235693, 51.552288791857265 ], [ 4.545538217703135, 51.553968404096651 ], [ 4.545194359538945, 51.551700251756507 ], [ 4.533661977307007, 51.549350921025137 ], [ 4.530189675698267, 51.549325510340104 ], [ 4.528212431220454, 51.551859884908801 ], [ 4.528528676164957, 51.555543938276244 ], [ 4.530763766625281, 51.559808484019953 ], [ 4.536440873967941, 51.565797341303764 ], [ 4.530646265701392, 51.566038236217182 ], [ 4.509369659588059, 51.568429293941556 ], [ 4.508652509357523, 51.565591803670841 ], [ 4.504782031305387, 51.566129072135844 ], [ 4.50407071054109, 51.563008385016026 ], [ 4.501749639204189, 51.563274037013663 ], [ 4.500299949981269, 51.558448464856944 ], [ 4.497451400985565, 51.546248743329691 ], [ 4.499022209475001, 51.544844636717542 ], [ 4.507536584932075, 51.543492983625939 ], [ 4.511774488405911, 51.543808018417828 ], [ 4.513735964935004, 51.542123431775686 ], [ 4.515648413427516, 51.542987342802618 ], [ 4.523374312196269, 51.54247828750696 ], [ 4.521237888223817, 51.533116527470362 ], [ 4.522030795293421, 51.531989558834368 ], [ 4.519423063083121, 51.527155636896161 ], [ 4.51753287630387, 51.525159105621242 ], [ 4.516060999192916, 51.521466396430853 ], [ 4.51336198664148, 51.521446238511423 ], [ 4.514203817576622, 51.517770787562299 ], [ 4.50226857847237, 51.516831346075094 ], [ 4.498551601298408, 51.509722833450567 ], [ 4.496651964056679, 51.5082923051772 ], [ 4.497935683473473, 51.501788210773491 ], [ 4.490132549437729, 51.487001485470145 ], [ 4.492901843068227, 51.483340966536026 ], [ 4.485230555969528, 51.481582676648117 ], [ 4.486855505952, 51.477347026705608 ], [ 4.538002713532652, 51.482261661203516 ], [ 4.548186078852022, 51.473272536892111 ], [ 4.556052315525397, 51.485506865978685 ], [ 4.569197397570195, 51.483050808252024 ], [ 4.572284486579767, 51.482789186069738 ], [ 4.57565580873413, 51.488193657073438 ], [ 4.574109564951876, 51.48846610987723 ], [ 4.576350719103471, 51.492446632069957 ], [ 4.583612031160624, 51.495895342374553 ], [ 4.589762941397494, 51.496787134748168 ], [ 4.579496999576939, 51.510593845086319 ], [ 4.610765067027426, 51.508257002502297 ], [ 4.614995611837148, 51.508851465073704 ], [ 4.616551903162303, 51.508012118823309 ], [ 4.618050674266643, 51.510570872067511 ], [ 4.620358834446626, 51.51086925633431 ], [ 4.619497029264661, 51.516244549159154 ], [ 4.626394066145592, 51.518838542637489 ], [ 4.624813843536872, 51.521093903091234 ], [ 4.631331026644855, 51.523401912463761 ], [ 4.63864342428734, 51.524298615914951 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1969\", \"naam\": \"Westerkwartier\", \"code\": \"1969\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.46330383646587, 53.200152170513654 ], [ 6.462545208451242, 53.201857716332448 ], [ 6.467013686108372, 53.204365689173386 ], [ 6.467056095378663, 53.206064048737979 ], [ 6.464688469259981, 53.207500954011323 ], [ 6.473260045170447, 53.229790345214838 ], [ 6.480458677968519, 53.245013525484552 ], [ 6.480988546030396, 53.250104862170772 ], [ 6.488576536664246, 53.248903007638084 ], [ 6.488533227074686, 53.247204682155036 ], [ 6.49252734175688, 53.246601731468921 ], [ 6.492097522530383, 53.245473205040035 ], [ 6.495712381925792, 53.245722999939069 ], [ 6.499392882299565, 53.248520167203928 ], [ 6.502577922584733, 53.247641254114107 ], [ 6.511566382375344, 53.254069192396088 ], [ 6.508804041498367, 53.255793754027003 ], [ 6.508046251364516, 53.257499553671536 ], [ 6.506320286337862, 53.268274206999031 ], [ 6.506787420652128, 53.270817925842074 ], [ 6.502193864820205, 53.279354216496074 ], [ 6.501880457034554, 53.282754540418566 ], [ 6.504353556828326, 53.285279624655161 ], [ 6.503259761704692, 53.289536552502156 ], [ 6.504208867219484, 53.295190069992387 ], [ 6.501108090362036, 53.299465603575925 ], [ 6.48188763287714, 53.317195349669944 ], [ 6.483565685628705, 53.320011189219315 ], [ 6.482404231763657, 53.321720457453857 ], [ 6.477234140404027, 53.323749244571395 ], [ 6.474824697247616, 53.323771070203364 ], [ 6.47194242201191, 53.320965988899779 ], [ 6.467116743942933, 53.320726330157754 ], [ 6.462720920189127, 53.321615081990139 ], [ 6.46116407872405, 53.323610787757133 ], [ 6.462044893012093, 53.326717146388148 ], [ 6.459275928756172, 53.328440543128281 ], [ 6.452857011663625, 53.328780728722521 ], [ 6.447178569041903, 53.326566044193278 ], [ 6.44713679000867, 53.324867744791199 ], [ 6.450279651592922, 53.322008873940241 ], [ 6.441313752041486, 53.316708715704841 ], [ 6.438115458398485, 53.317302947628747 ], [ 6.437422784437437, 53.321838786295828 ], [ 6.432727677174797, 53.326975712979049 ], [ 6.43035229066269, 53.328411901896551 ], [ 6.424293883490583, 53.32704877127469 ], [ 6.416690333684106, 53.328246569738795 ], [ 6.414267105340541, 53.32770107847584 ], [ 6.408490140510071, 53.321238771148231 ], [ 6.400405734562131, 53.319042311469211 ], [ 6.38958393757702, 53.319982379596787 ], [ 6.374733110379737, 53.320388422776325 ], [ 6.367530902580096, 53.321579815543679 ], [ 6.364286291780108, 53.320190692415146 ], [ 6.360563633586483, 53.315408049984299 ], [ 6.357721207200034, 53.314015492680461 ], [ 6.354114096869051, 53.314327676325881 ], [ 6.349371936112137, 53.317763036123019 ], [ 6.345381796009026, 53.318927344954403 ], [ 6.341360103482724, 53.318676231226313 ], [ 6.333260933388993, 53.315626070442576 ], [ 6.329233430294734, 53.315091490840238 ], [ 6.324427639685466, 53.315695278932189 ], [ 6.318843147837312, 53.317437341582071 ], [ 6.316476685660729, 53.319437410702484 ], [ 6.315789473844148, 53.324821746999504 ], [ 6.313854524504063, 53.328233952183488 ], [ 6.304719453773937, 53.333116814671335 ], [ 6.300324989820075, 53.334282692465074 ], [ 6.286815302858303, 53.341462143646957 ], [ 6.280591804314634, 53.312631851866634 ], [ 6.286602327956319, 53.312020807094001 ], [ 6.292588897658524, 53.310277213787984 ], [ 6.294554522815568, 53.308280639193171 ], [ 6.289264619703171, 53.304923178961793 ], [ 6.281614195681485, 53.303847938819253 ], [ 6.278379528700951, 53.302739544101435 ], [ 6.274697029941716, 53.299369513538892 ], [ 6.274237434954983, 53.296541832844028 ], [ 6.270567386497358, 53.293737796699077 ], [ 6.270526803860278, 53.291756340247332 ], [ 6.268479835958696, 53.289789617884082 ], [ 6.265699714153938, 53.291225519854635 ], [ 6.25806373060029, 53.290714900845749 ], [ 6.253191442693801, 53.287919045983834 ], [ 6.251874174966055, 53.282266376050188 ], [ 6.252631168820975, 53.279996057628523 ], [ 6.251370908583296, 53.277174045982441 ], [ 6.252907408341767, 53.273765674280867 ], [ 6.255652658560127, 53.27063165223381 ], [ 6.254398165260391, 53.268092731785721 ], [ 6.249568262425012, 53.267278184405015 ], [ 6.247585479683987, 53.268424844574717 ], [ 6.245162110322836, 53.267592854469676 ], [ 6.243106221955023, 53.265059540205243 ], [ 6.238649995268956, 53.262826343905104 ], [ 6.237803313942884, 53.260567466981527 ], [ 6.238566256227677, 53.258580290343772 ], [ 6.236934436991783, 53.257176299715979 ], [ 6.232111621110183, 53.256644115003986 ], [ 6.231688501685767, 53.255514651664264 ], [ 6.235252686329627, 53.253224646787068 ], [ 6.234005453319854, 53.25096856647292 ], [ 6.229985197940429, 53.250430635268522 ], [ 6.229946529301206, 53.248449132495431 ], [ 6.231923331444139, 53.247019684836765 ], [ 6.231082846754139, 53.245043819378878 ], [ 6.228282298368033, 53.245346585255007 ], [ 6.217794369893195, 53.242022282237023 ], [ 6.224943577945163, 53.238575264249874 ], [ 6.220112069366394, 53.237476443212714 ], [ 6.215692448992057, 53.236940808786372 ], [ 6.214435871072362, 53.234118361815099 ], [ 6.217224914926245, 53.233249770889394 ], [ 6.217993771706617, 53.231545780221204 ], [ 6.220409136776647, 53.23209525958994 ], [ 6.224378205656409, 53.230085853642841 ], [ 6.226321375427943, 53.226958045770587 ], [ 6.22549252343653, 53.225548275364453 ], [ 6.230245523270401, 53.22268384866463 ], [ 6.228977390273231, 53.219295392435093 ], [ 6.230151669580543, 53.217871581144621 ], [ 6.224471794150435, 53.214230873626512 ], [ 6.224828497711872, 53.211963473147271 ], [ 6.222397798116677, 53.210564849227872 ], [ 6.219512231940358, 53.206338191160782 ], [ 6.214662799609077, 53.204106824678959 ], [ 6.209375729486305, 53.199896462082158 ], [ 6.204164540371641, 53.19964895336696 ], [ 6.199733028103593, 53.198263482174994 ], [ 6.199236932311649, 53.193170778396833 ], [ 6.19560170180762, 53.191496646723358 ], [ 6.192751654164835, 53.188967788927513 ], [ 6.18985467826532, 53.183891139263125 ], [ 6.188232506507243, 53.182769524327789 ], [ 6.184109679912562, 53.176285333831437 ], [ 6.181204188070025, 53.170642287136346 ], [ 6.177130059542566, 53.16670556962562 ], [ 6.176600877338706, 53.159631132657239 ], [ 6.175367945070263, 53.135857311761406 ], [ 6.17893564998371, 53.13413507386327 ], [ 6.185644321656452, 53.129277516375588 ], [ 6.189574176932692, 53.125570695428934 ], [ 6.20497801570797, 53.115557281252102 ], [ 6.222552551608027, 53.114869761730255 ], [ 6.234514746806119, 53.113370124479687 ], [ 6.243712222769971, 53.113587831666209 ], [ 6.258516261053209, 53.114330428208255 ], [ 6.262507090149956, 53.114018207267804 ], [ 6.27403906129484, 53.111102134751441 ], [ 6.283142662059986, 53.106787504887564 ], [ 6.288636800534706, 53.101933139302062 ], [ 6.290593221345063, 53.09993651344557 ], [ 6.315242176899813, 53.094085479846903 ], [ 6.34425295796965, 53.087062022038523 ], [ 6.356683816967762, 53.107064162394082 ], [ 6.363489389222267, 53.107575135995837 ], [ 6.365819454680894, 53.122278759557055 ], [ 6.382438532556539, 53.14960511198241 ], [ 6.381638595481302, 53.149611751932248 ], [ 6.381729585286762, 53.153574747212296 ], [ 6.391067468672744, 53.15944252642808 ], [ 6.395166884449013, 53.163654995195216 ], [ 6.402855034168664, 53.167270725125711 ], [ 6.404088666528846, 53.168675889758759 ], [ 6.404188413343256, 53.172921906004724 ], [ 6.405882403165627, 53.176871259339521 ], [ 6.408317101566452, 53.178266168737871 ], [ 6.429651950881691, 53.183178824564948 ], [ 6.434516890748996, 53.185684552118161 ], [ 6.438119556661605, 53.185653035219303 ], [ 6.442978356225829, 53.187875351993576 ], [ 6.445856753024259, 53.190964343102522 ], [ 6.447589953804744, 53.196328384082236 ], [ 6.46330383646587, 53.200152170513654 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1884\", \"naam\": \"Kaag en Braassem\", \"code\": \"1884\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.681080507058603, 52.167418834393615 ], [ 4.688913676907442, 52.191819187662041 ], [ 4.695219561868796, 52.189024495544217 ], [ 4.707513926362027, 52.204104554860891 ], [ 4.707500972479259, 52.204954024278308 ], [ 4.720866605393814, 52.201348851547245 ], [ 4.723455013869459, 52.211557940638627 ], [ 4.728570233378096, 52.209887497708877 ], [ 4.729740653009385, 52.210177200369394 ], [ 4.724612813288709, 52.212697164597927 ], [ 4.723770680376478, 52.216656962319476 ], [ 4.722924174186788, 52.220899907344382 ], [ 4.724326371918778, 52.231951797492357 ], [ 4.720792365947266, 52.232498272902959 ], [ 4.703534530881839, 52.233815554692704 ], [ 4.696117824054104, 52.232073317678314 ], [ 4.687183816877336, 52.227206643086987 ], [ 4.676626494262449, 52.226010879945697 ], [ 4.670282295384376, 52.230786621892264 ], [ 4.66524053180686, 52.227640921631853 ], [ 4.65782636307322, 52.225896282814055 ], [ 4.646548043489019, 52.221012004651605 ], [ 4.644203019957833, 52.22071409313677 ], [ 4.632917923241834, 52.216394819107975 ], [ 4.618067137166222, 52.21459993264618 ], [ 4.6016164174596, 52.214774825759307 ], [ 4.584311015477104, 52.218906197349149 ], [ 4.581961408572024, 52.218890200117528 ], [ 4.571816077045055, 52.216838297722624 ], [ 4.558465447447183, 52.218727656502843 ], [ 4.557750783257181, 52.215041234832007 ], [ 4.554279629662553, 52.212184950433034 ], [ 4.55901495025805, 52.210235960313128 ], [ 4.55832143750975, 52.205416942521275 ], [ 4.561876226574645, 52.203742731509024 ], [ 4.559585264173142, 52.200611652965286 ], [ 4.555681444961778, 52.20001785100375 ], [ 4.557289351318706, 52.197763677789702 ], [ 4.546694516068529, 52.199104654272929 ], [ 4.542989402893351, 52.188033941346063 ], [ 4.543782767990113, 52.187473239151892 ], [ 4.538053132298395, 52.180069291983152 ], [ 4.538889499909341, 52.177243432033002 ], [ 4.542914368117191, 52.171325355961905 ], [ 4.55089191008914, 52.163169720942754 ], [ 4.553624387775866, 52.163472244360129 ], [ 4.560601475342688, 52.16691957754518 ], [ 4.562572890500085, 52.166083809165237 ], [ 4.56065392775275, 52.164088070976447 ], [ 4.562291682588907, 52.160134906870553 ], [ 4.571416018260931, 52.15311865962758 ], [ 4.572604589356184, 52.152277309592762 ], [ 4.618637551762765, 52.158816275479865 ], [ 4.642441335189563, 52.162083967909595 ], [ 4.679978845279221, 52.162881293436826 ], [ 4.681080507058603, 52.167418834393615 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0610\", \"naam\": \"Sliedrecht\", \"code\": \"0610\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.811537683069814, 51.818672967517067 ], [ 4.811505135981331, 51.821221562951685 ], [ 4.804895517207351, 51.822038543669024 ], [ 4.803415598875627, 51.846385936269861 ], [ 4.795666754335923, 51.844931182976353 ], [ 4.787122858574538, 51.8448878290789 ], [ 4.780497886061205, 51.846552953028244 ], [ 4.768105017430637, 51.843939509423507 ], [ 4.759949693743885, 51.843896225120403 ], [ 4.756050342025291, 51.84500811075241 ], [ 4.747150316269965, 51.842694367324704 ], [ 4.742902910771359, 51.840971961362726 ], [ 4.74135368256662, 51.840680253530877 ], [ 4.732252212082677, 51.825620426345786 ], [ 4.729584471259045, 51.822207149589147 ], [ 4.743170080846814, 51.822282480756449 ], [ 4.748996510369381, 51.822031109534983 ], [ 4.754838766896947, 51.820646749576241 ], [ 4.762260690499589, 51.817288148411606 ], [ 4.768105815549749, 51.815619950062377 ], [ 4.782473330537174, 51.815128468214091 ], [ 4.788679204441966, 51.81544347637665 ], [ 4.800296562015504, 51.817484514030532 ], [ 4.811537683069814, 51.818672967517067 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0214\", \"naam\": \"Buren\", \"code\": \"0214\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.453306742887356, 51.9228624585554 ], [ 5.458364383765021, 51.922859498039692 ], [ 5.460311477285132, 51.923991041147545 ], [ 5.465368750855976, 51.923704594287152 ], [ 5.476645740475621, 51.920864684525498 ], [ 5.482875685295605, 51.923408437490352 ], [ 5.49182524240893, 51.923967169762562 ], [ 5.487932112679221, 51.922837834989053 ], [ 5.489095399866331, 51.921137718410471 ], [ 5.486761195117079, 51.921139722176498 ], [ 5.486367153061535, 51.91887457240275 ], [ 5.493368743589801, 51.918585260705385 ], [ 5.498047380092489, 51.922828716292997 ], [ 5.500770003693568, 51.922542927822391 ], [ 5.505442288163053, 51.923954240602676 ], [ 5.512049187286864, 51.921398730090466 ], [ 5.523721128295088, 51.921668920973737 ], [ 5.54784148494255, 51.921638394471977 ], [ 5.551717331556576, 51.917668426855286 ], [ 5.556779721341836, 51.919077153279844 ], [ 5.554071350225128, 51.923045634013818 ], [ 5.554113471967144, 51.934372991542027 ], [ 5.54827625235924, 51.934381142992251 ], [ 5.538559011279778, 51.937792290527391 ], [ 5.533517248132576, 51.9431791930364 ], [ 5.540135994408879, 51.943737129936451 ], [ 5.547526287952227, 51.942311349872092 ], [ 5.560766225669826, 51.943991640225285 ], [ 5.566206421270187, 51.941717995878598 ], [ 5.571654214644482, 51.941426382230986 ], [ 5.575551056195495, 51.942552938550378 ], [ 5.579066131028838, 51.945379099839315 ], [ 5.584524247952358, 51.947352353200678 ], [ 5.586485642207725, 51.95074726074575 ], [ 5.575593863754476, 51.952747524130992 ], [ 5.561196095700114, 51.954468837396973 ], [ 5.555751972830199, 51.956175880953033 ], [ 5.551087174165084, 51.958164771309754 ], [ 5.545650224177252, 51.962136808414826 ], [ 5.5413825296364, 51.966673430138108 ], [ 5.53593711184048, 51.968662736791288 ], [ 5.519199286886239, 51.971514571730594 ], [ 5.512583041600331, 51.97322092072892 ], [ 5.500912132927082, 51.978613281084499 ], [ 5.486121157948334, 51.983723963736502 ], [ 5.477549893784484, 51.983447687622906 ], [ 5.470926066326076, 51.98288623161978 ], [ 5.45300710285258, 51.983747193073413 ], [ 5.444828531990019, 51.985733774199112 ], [ 5.440543328555457, 51.986018983822916 ], [ 5.433139526834385, 51.984606204533122 ], [ 5.420667500358695, 51.977530859382476 ], [ 5.413654900806812, 51.975550373919241 ], [ 5.401969050525094, 51.9735701559609 ], [ 5.391063099682686, 51.970739202736901 ], [ 5.383273926522488, 51.969323294936096 ], [ 5.376263785061764, 51.969322861662995 ], [ 5.361853097053467, 51.971019758458489 ], [ 5.354843300896224, 51.970168498762945 ], [ 5.347056885099886, 51.967051092603505 ], [ 5.338107966240752, 51.959684936517228 ], [ 5.333049240937338, 51.957134068642247 ], [ 5.321761491321297, 51.954862873117371 ], [ 5.314752244466528, 51.955708325130765 ], [ 5.303452070959613, 51.960798145648305 ], [ 5.296829800015865, 51.962209171212081 ], [ 5.285146811577634, 51.962765996926251 ], [ 5.27501901229284, 51.964172705080465 ], [ 5.270343183325399, 51.965300893448813 ], [ 5.2551883838084, 51.954240703205251 ], [ 5.260256750424014, 51.951697618661818 ], [ 5.241979854468616, 51.945446431922512 ], [ 5.245489301406327, 51.943468416713344 ], [ 5.247053272091997, 51.941204811287491 ], [ 5.254850760480538, 51.93668287975995 ], [ 5.255243252784778, 51.935550580644971 ], [ 5.268482124787486, 51.932732828186431 ], [ 5.276264813269647, 51.932740419919021 ], [ 5.27937653201747, 51.933309681017519 ], [ 5.284830284430115, 51.930765884667423 ], [ 5.286781560029059, 51.928218899504813 ], [ 5.28523801207288, 51.922553868098539 ], [ 5.273573060146383, 51.919994516533151 ], [ 5.282928666734791, 51.911790793950452 ], [ 5.28916610096655, 51.905282879706597 ], [ 5.295009990340771, 51.900190253068942 ], [ 5.297340283278042, 51.90160798585287 ], [ 5.307460304100467, 51.896234738960096 ], [ 5.312904701974163, 51.895671928119647 ], [ 5.319519643117461, 51.892277680326686 ], [ 5.323412298107545, 51.888881615984062 ], [ 5.323415102230745, 51.886899311805806 ], [ 5.316811858446717, 51.88349730994176 ], [ 5.314872403261404, 51.880947453548053 ], [ 5.317594084916032, 51.88038272064486 ], [ 5.322644517792499, 51.882084718770734 ], [ 5.327308125617559, 51.88265355638363 ], [ 5.335472157909456, 51.881524677415399 ], [ 5.337805548804114, 51.880392931649894 ], [ 5.339362978123801, 51.877844892799665 ], [ 5.338978250540595, 51.874163305901789 ], [ 5.34131088367959, 51.873314676277793 ], [ 5.344027982273404, 51.876713946288277 ], [ 5.353743193749252, 51.878133036565046 ], [ 5.359182717477823, 51.880966320352535 ], [ 5.370452765542718, 51.886065811598826 ], [ 5.39144525106326, 51.896261607793008 ], [ 5.399999930062114, 51.898526464257941 ], [ 5.401167425762377, 51.901641375703456 ], [ 5.404668773374212, 51.905605504710572 ], [ 5.409725618788946, 51.907870123212518 ], [ 5.411283588925422, 51.912117596668438 ], [ 5.417507660602338, 51.913248889840666 ], [ 5.420620448702734, 51.914663969013688 ], [ 5.421788698019288, 51.916362742012218 ], [ 5.426458355191031, 51.918343566066589 ], [ 5.431515489391462, 51.918341760966662 ], [ 5.434629971028527, 51.920606023489817 ], [ 5.443967763831958, 51.921451427064433 ], [ 5.446300866289924, 51.920600717950634 ], [ 5.453306742887356, 51.9228624585554 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0394\", \"naam\": \"Haarlemmermeer\", \"code\": \"0394\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.670282295384376, 52.230786621892264 ], [ 4.676499991959564, 52.233939182667356 ], [ 4.681899152941581, 52.239351968863978 ], [ 4.692816253127897, 52.24281479773569 ], [ 4.700243356031542, 52.243990933367805 ], [ 4.705298121196952, 52.246568828748202 ], [ 4.713006545597304, 52.255108429050516 ], [ 4.720790017976932, 52.258833896921466 ], [ 4.725042621270703, 52.262822292735017 ], [ 4.729713126238233, 52.265113789297601 ], [ 4.739868540471127, 52.267718442477637 ], [ 4.74646801143327, 52.272285233510338 ], [ 4.755853893442797, 52.274034796323782 ], [ 4.764056239343962, 52.276343729970854 ], [ 4.78004040487254, 52.283223122644415 ], [ 4.788203749488011, 52.288645091633917 ], [ 4.792461462414802, 52.292914206619734 ], [ 4.795516693985579, 52.299159371924944 ], [ 4.799017624006611, 52.301442229413119 ], [ 4.809948079794246, 52.30574369248437 ], [ 4.817323454694958, 52.312009271656578 ], [ 4.816127946816882, 52.313419371378899 ], [ 4.819140836342982, 52.323344924172702 ], [ 4.818719307460759, 52.325608278620457 ], [ 4.815549693156122, 52.327858384962099 ], [ 4.798178688476378, 52.335135663394553 ], [ 4.790627217227708, 52.341893965611852 ], [ 4.771671658529447, 52.349442539597149 ], [ 4.757447748349034, 52.355314325641565 ], [ 4.755046477491079, 52.358416417604793 ], [ 4.758397487087259, 52.371460155050556 ], [ 4.756344086098149, 52.377678993189654 ], [ 4.759071127629545, 52.379392515498459 ], [ 4.758140459421289, 52.389581708484577 ], [ 4.758039992322828, 52.39666042179347 ], [ 4.756066012090937, 52.397216258953932 ], [ 4.72888145720236, 52.400749494962255 ], [ 4.739055195963446, 52.431104685406773 ], [ 4.722101223432554, 52.433276093043879 ], [ 4.711943490725651, 52.428404780380639 ], [ 4.707641480980217, 52.426681172967221 ], [ 4.700577009524832, 52.425507770784982 ], [ 4.690074608495891, 52.417800859934459 ], [ 4.68266370423372, 52.413792635740869 ], [ 4.676429482634975, 52.410074175829507 ], [ 4.672112358309027, 52.409481852296523 ], [ 4.674522210596836, 52.406381492384178 ], [ 4.668659988265315, 52.404080705959572 ], [ 4.668701309470562, 52.401532412309194 ], [ 4.678563537547596, 52.399609626344528 ], [ 4.675454284384842, 52.397325609686462 ], [ 4.673154486365815, 52.393630532191125 ], [ 4.674379474839945, 52.390806191055155 ], [ 4.6775426158288, 52.389692499880084 ], [ 4.681071643566115, 52.390279939106854 ], [ 4.682675631696537, 52.388307288293284 ], [ 4.687013198827443, 52.387483498459815 ], [ 4.685896615051979, 52.383512481232394 ], [ 4.680059396585514, 52.379796523391086 ], [ 4.67735352400841, 52.376948604662701 ], [ 4.672683109894025, 52.374088781101705 ], [ 4.671577278319696, 52.369551329291284 ], [ 4.676099317029478, 52.357118936820449 ], [ 4.676537493634271, 52.354289827657517 ], [ 4.67266874092016, 52.350585267916045 ], [ 4.649660119856566, 52.340532977710339 ], [ 4.639479101776433, 52.338770025764347 ], [ 4.629686711748257, 52.337291858553456 ], [ 4.620321847479416, 52.333833411402388 ], [ 4.616434997005399, 52.331542737893002 ], [ 4.612583121116637, 52.327269920943642 ], [ 4.611494466902922, 52.322165590212123 ], [ 4.611642784650666, 52.313671222527937 ], [ 4.611284961709939, 52.311686627567923 ], [ 4.603938786109877, 52.305408273298312 ], [ 4.597042363963968, 52.296017476637587 ], [ 4.595951202408456, 52.291196123496981 ], [ 4.591335578495964, 52.286067900998539 ], [ 4.587912728185274, 52.280098016878618 ], [ 4.572780037759538, 52.271216104158057 ], [ 4.568901101584678, 52.268923857906039 ], [ 4.567756274931508, 52.267216834081161 ], [ 4.569464897090278, 52.259582749046018 ], [ 4.567698043651433, 52.24909274876908 ], [ 4.562865974233228, 52.23489995945846 ], [ 4.56055232782835, 52.232901503256038 ], [ 4.553538435884922, 52.230869920018655 ], [ 4.550860316435859, 52.227452773387846 ], [ 4.550897532438922, 52.22547074413221 ], [ 4.554094336269356, 52.222095120174046 ], [ 4.558465447447183, 52.218727656502843 ], [ 4.571816077045055, 52.216838297722624 ], [ 4.581961408572024, 52.218890200117528 ], [ 4.584311015477104, 52.218906197349149 ], [ 4.6016164174596, 52.214774825759307 ], [ 4.618067137166222, 52.21459993264618 ], [ 4.632917923241834, 52.216394819107975 ], [ 4.644203019957833, 52.22071409313677 ], [ 4.646548043489019, 52.221012004651605 ], [ 4.65782636307322, 52.225896282814055 ], [ 4.66524053180686, 52.227640921631853 ], [ 4.670282295384376, 52.230786621892264 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0376\", \"naam\": \"Blaricum\", \"code\": \"0376\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.244108431159135, 52.254679297368973 ], [ 5.265983479555971, 52.2818880211044 ], [ 5.305994796806817, 52.277391525605445 ], [ 5.335391050595313, 52.290150613620533 ], [ 5.315366163719469, 52.302316390845718 ], [ 5.305547117173344, 52.307690213687245 ], [ 5.280858167838089, 52.293795397651415 ], [ 5.277321950569993, 52.29605751394638 ], [ 5.271058266515387, 52.290954506309454 ], [ 5.24636968671259, 52.283282150553909 ], [ 5.246372374468252, 52.28243264688318 ], [ 5.241669786108621, 52.281294280703406 ], [ 5.23264962737669, 52.281282842663835 ], [ 5.227566513551088, 52.277028554827396 ], [ 5.210703247688523, 52.277287767517358 ], [ 5.207185395132369, 52.274450770917241 ], [ 5.206803603792677, 52.271901661870331 ], [ 5.203686669280021, 52.267082978292706 ], [ 5.209179969778371, 52.265958693833319 ], [ 5.225621216455917, 52.272778371517596 ], [ 5.2264228127238, 52.267965578157629 ], [ 5.231923548169172, 52.264574887577105 ], [ 5.244108431159135, 52.254679297368973 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0193\", \"naam\": \"Zwolle\", \"code\": \"0193\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.154902087002522, 52.453042024075074 ], [ 6.152224726378585, 52.457590056859075 ], [ 6.152283512201661, 52.460987711829347 ], [ 6.14841917020799, 52.465260135141385 ], [ 6.144126322903204, 52.467552981342905 ], [ 6.151278422028302, 52.471188283991005 ], [ 6.152056296876461, 52.470616929207431 ], [ 6.162365413940541, 52.474514321152064 ], [ 6.167510655005414, 52.475896406268134 ], [ 6.169873918743617, 52.475880825468124 ], [ 6.171080658927184, 52.477288696533478 ], [ 6.177791969038507, 52.47809363273673 ], [ 6.177428449557996, 52.479795071120435 ], [ 6.182145196372507, 52.479197196179292 ], [ 6.182963598220552, 52.480890720181542 ], [ 6.189655101853945, 52.48056244353144 ], [ 6.193640775480528, 52.483083921090021 ], [ 6.192500237610242, 52.485357027865774 ], [ 6.196517626286829, 52.489577207800536 ], [ 6.200084436846595, 52.490685482934403 ], [ 6.198544809331721, 52.492678211272917 ], [ 6.199384915250919, 52.49550414761368 ], [ 6.197020615716942, 52.495520318687682 ], [ 6.188029316375556, 52.499545741241597 ], [ 6.186524709752003, 52.503520244277226 ], [ 6.18380160456566, 52.505520741424611 ], [ 6.183847576950971, 52.508068940451913 ], [ 6.173396734185533, 52.518899019625202 ], [ 6.182469814118734, 52.519121702893422 ], [ 6.183288976646844, 52.520815208153635 ], [ 6.187677368408243, 52.523617342456504 ], [ 6.187303598398739, 52.524752530194256 ], [ 6.192953192941736, 52.531793452805807 ], [ 6.189481045158089, 52.536064472727332 ], [ 6.210982296155494, 52.567914839686956 ], [ 6.209414075434869, 52.568492040530629 ], [ 6.20558797690674, 52.575031251451144 ], [ 6.202218416808129, 52.584965148910072 ], [ 6.195095544235575, 52.584164335529664 ], [ 6.18997806267672, 52.585048531436676 ], [ 6.182916762325893, 52.587644521206222 ], [ 6.1793679784563, 52.587951410112197 ], [ 6.147728697678978, 52.585326644856359 ], [ 6.147319185064615, 52.584479782727328 ], [ 6.155186543606463, 52.582730189508744 ], [ 6.15751593679513, 52.58044980503454 ], [ 6.159005912801462, 52.575343209173298 ], [ 6.166725938626676, 52.565382068888439 ], [ 6.165132241137441, 52.564543034014946 ], [ 6.140449772221769, 52.552243054894134 ], [ 6.127899887859023, 52.556852649533596 ], [ 6.118044178344974, 52.557480071461718 ], [ 6.114539399499568, 52.56033322268992 ], [ 6.109817694947349, 52.561211548188922 ], [ 6.109919814598734, 52.567440484269298 ], [ 6.103209920028643, 52.567481145604944 ], [ 6.099180593263271, 52.562408475768649 ], [ 6.097937284786155, 52.558734825580238 ], [ 6.093151944764105, 52.555648605122038 ], [ 6.092326531138111, 52.553388216821084 ], [ 6.089537448190269, 52.551705783313906 ], [ 6.081282876598282, 52.553736478706178 ], [ 6.074220158039935, 52.556326025505115 ], [ 6.076202017868143, 52.556880859566199 ], [ 6.073475024529406, 52.559161948117641 ], [ 6.070304840404637, 52.558330752640217 ], [ 6.06333627808579, 52.567148632700807 ], [ 6.033218613143724, 52.559104723611952 ], [ 6.033222762135908, 52.559387861086698 ], [ 6.018165917699276, 52.555221461581311 ], [ 6.018552405009533, 52.554653086263947 ], [ 6.003498557203817, 52.550484817156416 ], [ 6.00736844394571, 52.545084613364182 ], [ 6.019553454183841, 52.541905537047292 ], [ 6.030545102218488, 52.538165354778322 ], [ 6.029985639375285, 52.526841918733915 ], [ 6.024851013141169, 52.526303305470513 ], [ 6.023684337115958, 52.527442218539818 ], [ 6.018537564220936, 52.526053911903922 ], [ 6.014916051326657, 52.52097621597963 ], [ 6.014871758690128, 52.517861666424366 ], [ 6.018757663169367, 52.513876764244721 ], [ 6.02776323382183, 52.50958102363014 ], [ 6.036796208915743, 52.507266583253823 ], [ 6.043857508803897, 52.504962384377563 ], [ 6.056371449716218, 52.498379651104948 ], [ 6.059849225019089, 52.49382933746142 ], [ 6.061763238888087, 52.490137317707166 ], [ 6.066417373887214, 52.485296933409991 ], [ 6.069534139159519, 52.483013709458277 ], [ 6.075014145621994, 52.48071671252832 ], [ 6.08600378670472, 52.478103940035339 ], [ 6.094212323507766, 52.47409092826031 ], [ 6.098105446789054, 52.471235970397878 ], [ 6.101572223299815, 52.466401277980268 ], [ 6.103733093719116, 52.453928835717996 ], [ 6.102057660643072, 52.447709245130007 ], [ 6.103178974652, 52.444021277581058 ], [ 6.10942107270142, 52.440585357365507 ], [ 6.120469096958432, 52.442216507358935 ], [ 6.126363346622156, 52.441613538645356 ], [ 6.135809139899182, 52.441554227022557 ], [ 6.136975466514505, 52.440697340635502 ], [ 6.141751378653189, 52.443781890834742 ], [ 6.147665009673877, 52.444310420323617 ], [ 6.154902087002522, 52.453042024075074 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0606\", \"naam\": \"Schiedam\", \"code\": \"0606\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.379378511252573, 51.963307348877905 ], [ 4.36346683338549, 51.96090430312541 ], [ 4.367099492791108, 51.955271804021244 ], [ 4.350834751859874, 51.951447941695854 ], [ 4.361674230573378, 51.937099572998768 ], [ 4.363321079964861, 51.933149068055265 ], [ 4.363832723259872, 51.927772640317308 ], [ 4.361913361293461, 51.926623096780325 ], [ 4.362360518339989, 51.92407815472388 ], [ 4.365135110516469, 51.921836676532735 ], [ 4.366028909195934, 51.916746760706175 ], [ 4.368471694970522, 51.911953478416542 ], [ 4.369766589196743, 51.906300597412475 ], [ 4.369441832389345, 51.903465734116097 ], [ 4.370704350261802, 51.899228584707437 ], [ 4.384751525938421, 51.897083631499946 ], [ 4.390984531085861, 51.896570236313799 ], [ 4.399130143425237, 51.897488632550612 ], [ 4.41383652947317, 51.900726624533611 ], [ 4.412244443282775, 51.902412647019048 ], [ 4.415688825096448, 51.904990005960848 ], [ 4.411294704896696, 51.910334460877912 ], [ 4.408924361450048, 51.912013973544113 ], [ 4.415091811901329, 51.91461397840083 ], [ 4.416920337525345, 51.920009943260084 ], [ 4.416853084622615, 51.923124618020452 ], [ 4.415297058921893, 51.923111762334194 ], [ 4.410493587113352, 51.929302407805913 ], [ 4.408122208285742, 51.930981897403996 ], [ 4.408801689890632, 51.935518795670667 ], [ 4.417690195217932, 51.938424452131095 ], [ 4.415306346299977, 51.94067038711205 ], [ 4.413397390736543, 51.938955378976921 ], [ 4.408344703576741, 51.938630218531756 ], [ 4.404095154651528, 51.937178748639475 ], [ 4.393432130659749, 51.944169172133158 ], [ 4.395315524677131, 51.947017101010744 ], [ 4.388730418399917, 51.945545354530559 ], [ 4.379378511252573, 51.963307348877905 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0537\", \"naam\": \"Katwijk\", \"code\": \"0537\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.44842920834086, 52.162115784127167 ], [ 4.445601949390234, 52.166341123964671 ], [ 4.445536214759159, 52.169455701509229 ], [ 4.448202790232224, 52.172875241444231 ], [ 4.448925606705799, 52.175712897551847 ], [ 4.44651863154195, 52.178525642054105 ], [ 4.435913034516744, 52.180422966891705 ], [ 4.437839153128889, 52.181854430128531 ], [ 4.440204772172367, 52.181023863309214 ], [ 4.455019296839184, 52.183690514768891 ], [ 4.458546725911273, 52.183435131994685 ], [ 4.466085741485406, 52.19737048452582 ], [ 4.461786198774153, 52.197053669573783 ], [ 4.463287242211048, 52.200180505533524 ], [ 4.460506050589064, 52.20214102995152 ], [ 4.462831224574122, 52.203292013110087 ], [ 4.455708133629654, 52.206917484426484 ], [ 4.462286995006453, 52.210650654364919 ], [ 4.462263485900711, 52.211783223752825 ], [ 4.466131950559205, 52.214078968044177 ], [ 4.464133144306991, 52.216045677076437 ], [ 4.455560149921676, 52.213996033263413 ], [ 4.451300712662481, 52.211696841277124 ], [ 4.448542133083833, 52.212524510837476 ], [ 4.444301173754283, 52.209375642559685 ], [ 4.440036742415325, 52.207359186092589 ], [ 4.435266316257966, 52.210719094525828 ], [ 4.433248116578721, 52.2135347001445 ], [ 4.429357054800148, 52.212370443214454 ], [ 4.42574774598315, 52.216305763113823 ], [ 4.422652008559965, 52.214581379740338 ], [ 4.41833881141662, 52.214829258855076 ], [ 4.391081371735692, 52.225363706751324 ], [ 4.360102900985536, 52.192814442046284 ], [ 4.375115741813177, 52.186713879905497 ], [ 4.391796904100888, 52.175811235470654 ], [ 4.397721532053265, 52.173312327960765 ], [ 4.40489380167494, 52.167425208322811 ], [ 4.409152829105897, 52.169442934655166 ], [ 4.411226275799669, 52.164079447080752 ], [ 4.418321511004154, 52.161589193006428 ], [ 4.419867433643292, 52.162451454830581 ], [ 4.425800919093833, 52.159384839073475 ], [ 4.431691155928648, 52.158299922353926 ], [ 4.440354483776988, 52.15553785049584 ], [ 4.444210974978986, 52.158117464443144 ], [ 4.44842920834086, 52.162115784127167 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0935\", \"naam\": \"Maastricht\", \"code\": \"0935\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.693950875232852, 50.810356396843794 ], [ 5.696597297801655, 50.808650119748741 ], [ 5.709503965495766, 50.808331622848442 ], [ 5.708341441428874, 50.80493642232625 ], [ 5.717064992350851, 50.803779024356587 ], [ 5.717141553672574, 50.814540532600866 ], [ 5.718656359175074, 50.813969789254458 ], [ 5.725883237924874, 50.815648047870688 ], [ 5.728557975557718, 50.817905803493922 ], [ 5.743393963489355, 50.821259458278227 ], [ 5.745703232066631, 50.82521716908834 ], [ 5.74496111827754, 50.82748510008728 ], [ 5.746877793391563, 50.829744780583489 ], [ 5.746155407095209, 50.834561493320685 ], [ 5.74617734554009, 50.837393464509752 ], [ 5.74048532173345, 50.838260617746599 ], [ 5.741260284354623, 50.840240673264653 ], [ 5.74695913333013, 50.840223072985189 ], [ 5.748105520408431, 50.841069110544126 ], [ 5.754951000125998, 50.841897142316476 ], [ 5.757257763050233, 50.845288228673965 ], [ 5.757336959551854, 50.855200121789998 ], [ 5.749371500630779, 50.857207782512489 ], [ 5.752809946607515, 50.859462591859597 ], [ 5.763111197847789, 50.864244026821297 ], [ 5.762749454356049, 50.866510837487759 ], [ 5.759323657646625, 50.865955506295279 ], [ 5.75556738403104, 50.871631621860537 ], [ 5.749475628960251, 50.870518052959675 ], [ 5.746067256968796, 50.872227907710993 ], [ 5.742639061600418, 50.871388885096472 ], [ 5.741891723359752, 50.873090405061646 ], [ 5.739230372712165, 50.873098538732762 ], [ 5.733540188618784, 50.874814948062372 ], [ 5.736257167964117, 50.882170084517028 ], [ 5.731320004899806, 50.883034494752337 ], [ 5.732465055376957, 50.883597489727933 ], [ 5.72638473286661, 50.884181892409835 ], [ 5.725270777156837, 50.887866806775001 ], [ 5.725675952928197, 50.891264070154868 ], [ 5.723418594253035, 50.894669103343816 ], [ 5.71810960894118, 50.896950047210971 ], [ 5.720027858555359, 50.899210175194668 ], [ 5.712820037430583, 50.902062731479248 ], [ 5.71246350629349, 50.90546218224555 ], [ 5.714768330864891, 50.908570922325026 ], [ 5.7090827347831, 50.911702126446549 ], [ 5.706421111125788, 50.911992705746634 ], [ 5.699564208632344, 50.910878608757372 ], [ 5.696505014368837, 50.908621198521949 ], [ 5.695725145927604, 50.905791243288213 ], [ 5.697224214358236, 50.902388789552937 ], [ 5.695672251562402, 50.897861678945091 ], [ 5.692220657224258, 50.893622778067602 ], [ 5.685354040572832, 50.890525445520041 ], [ 5.682679013892827, 50.888549886693433 ], [ 5.679223942505005, 50.883461000684306 ], [ 5.679206070547564, 50.880629011084388 ], [ 5.669706564097495, 50.8817854257085 ], [ 5.667796645115006, 50.880374059817683 ], [ 5.661702484889646, 50.878689469561181 ], [ 5.658645603868167, 50.876147857954571 ], [ 5.656365928256887, 50.876436391253137 ], [ 5.653309488835622, 50.873894638443709 ], [ 5.651414945528866, 50.875031796552193 ], [ 5.644170482873266, 50.871366486844053 ], [ 5.649475369889101, 50.868239338516723 ], [ 5.641850440113762, 50.864291545635297 ], [ 5.644123322098756, 50.862870500792425 ], [ 5.64221496287603, 50.861458712137484 ], [ 5.643721241328115, 50.858906552094993 ], [ 5.641813057833922, 50.857494756822746 ], [ 5.643330195454024, 50.856924998650044 ], [ 5.640272664118206, 50.853816502232263 ], [ 5.642532589359893, 50.850129893477536 ], [ 5.640249450289621, 50.849568509794388 ], [ 5.639092498205644, 50.846455806158197 ], [ 5.642113611947845, 50.843050746863746 ], [ 5.641721213709606, 50.840785989279794 ], [ 5.64551262428274, 50.839361561220315 ], [ 5.643605191910749, 50.837949795714927 ], [ 5.646634935436798, 50.836243815497738 ], [ 5.648516831591214, 50.83312434337703 ], [ 5.650041122130747, 50.833970494163019 ], [ 5.651549310441137, 50.831984633322648 ], [ 5.649238129452094, 50.826325842590791 ], [ 5.651903283861504, 50.827452577725381 ], [ 5.656063243275704, 50.824327740029304 ], [ 5.654139798638464, 50.820084158968641 ], [ 5.664376400727195, 50.81722802140785 ], [ 5.668177204803144, 50.81778524438085 ], [ 5.672728870391204, 50.816924474372669 ], [ 5.673103365150212, 50.816073939320205 ], [ 5.678421327583084, 50.816343857368032 ], [ 5.680672813682514, 50.812090114530029 ], [ 5.684478838700839, 50.813496396688514 ], [ 5.688642715904621, 50.811503184042174 ], [ 5.691683952169035, 50.812061613327003 ], [ 5.693950875232852, 50.810356396843794 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1659\", \"naam\": \"Laarbeek\", \"code\": \"1659\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.68399664178392, 51.507627492991944 ], [ 5.685957588153149, 51.512720071492033 ], [ 5.684033632054966, 51.513291377773704 ], [ 5.68520881104793, 51.516120372057856 ], [ 5.682137197933814, 51.518110564816652 ], [ 5.679079870275146, 51.522366229623202 ], [ 5.674859642907745, 51.525775087629093 ], [ 5.680644272442713, 51.525760691220256 ], [ 5.677568188068448, 51.527184375120505 ], [ 5.678346756389105, 51.528315230209678 ], [ 5.682199712810259, 51.527739161330096 ], [ 5.674902689211934, 51.532571744340942 ], [ 5.669923848727199, 51.538247871777799 ], [ 5.666851815603811, 51.540520854720405 ], [ 5.660360211520453, 51.551580940254382 ], [ 5.654654052760331, 51.565470829226769 ], [ 5.65236299933107, 51.569724012813722 ], [ 5.647331799341447, 51.567469746322246 ], [ 5.64500616204302, 51.565775718247714 ], [ 5.641529142958838, 51.565216945880678 ], [ 5.630299359419199, 51.558444122376279 ], [ 5.627195518969723, 51.55533537058232 ], [ 5.621782750497201, 51.553363986792647 ], [ 5.618322830590797, 51.555919661785339 ], [ 5.614070856791071, 51.55451201285603 ], [ 5.608307377625601, 51.559620617288893 ], [ 5.584393160395809, 51.562778612474418 ], [ 5.553499833881824, 51.558295546767717 ], [ 5.533044191677669, 51.557756498798113 ], [ 5.545337250425684, 51.541598269209857 ], [ 5.543016741620191, 51.539902207352434 ], [ 5.547252164763162, 51.537630898775255 ], [ 5.548025662419195, 51.538196229935217 ], [ 5.55756101642704, 51.509296549486301 ], [ 5.566397468739265, 51.501636966080895 ], [ 5.576794888548383, 51.499354947080114 ], [ 5.579875849612995, 51.498783503042688 ], [ 5.6096040689465, 51.509208961425962 ], [ 5.611910085852553, 51.507788552368126 ], [ 5.61073828900438, 51.504675621308543 ], [ 5.614957112642064, 51.500419486709738 ], [ 5.618417325968788, 51.498713490237691 ], [ 5.626508036117785, 51.498130780140031 ], [ 5.627652279215174, 51.495862838520303 ], [ 5.634970050415665, 51.49499793261122 ], [ 5.6411551464654, 51.498383020301475 ], [ 5.644641483797334, 51.501490567094457 ], [ 5.650436156455564, 51.503743229747762 ], [ 5.653136004409657, 51.504020307390604 ], [ 5.656239784441115, 51.507411578384755 ], [ 5.661234037571789, 51.504567970796167 ], [ 5.663916759273587, 51.502012850819582 ], [ 5.675074811052322, 51.498870670680681 ], [ 5.670097911025851, 51.504263622313132 ], [ 5.672803246872064, 51.505389828978593 ], [ 5.682819916927672, 51.504515290139231 ], [ 5.68399664178392, 51.507627492991944 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0678\", \"naam\": \"Kapelle\", \"code\": \"0678\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.013065411236584, 51.538157678709361 ], [ 4.005686208813271, 51.539770045849771 ], [ 4.003688865748437, 51.542012266705399 ], [ 3.998605634912603, 51.544217821919638 ], [ 3.99474853065517, 51.544171919366249 ], [ 3.992408193144104, 51.544993702694484 ], [ 3.987831930365783, 51.543239589289541 ], [ 3.986193078248267, 51.54633550993541 ], [ 3.9609520971995, 51.551411584166999 ], [ 3.937908326872927, 51.535833347577508 ], [ 3.94611436139533, 51.532536038780819 ], [ 3.952328747056479, 51.531196359498814 ], [ 3.965877729401912, 51.52966258987378 ], [ 3.971320003951129, 51.528312510966153 ], [ 3.969866009982596, 51.525462538685325 ], [ 3.967920589853053, 51.526005385294305 ], [ 3.963462473977137, 51.520569679383662 ], [ 3.964140456202355, 51.511231203824877 ], [ 3.965061843375302, 51.506427440001644 ], [ 3.956287076621175, 51.503487895591661 ], [ 3.943758950169366, 51.497385747663969 ], [ 3.940426267730621, 51.493095957083007 ], [ 3.925822469628281, 51.491781124024556 ], [ 3.924866901804355, 51.485537942798388 ], [ 3.920996626723136, 51.486055871023289 ], [ 3.914869965779609, 51.484845809117999 ], [ 3.916896575053306, 51.481755738562349 ], [ 3.912742263791155, 51.479154196356099 ], [ 3.91280646703974, 51.477172341788744 ], [ 3.907663128286991, 51.46945982453235 ], [ 3.909258537523468, 51.46778060940354 ], [ 3.916335821615047, 51.46333821396653 ], [ 3.919443319768312, 51.462527626543242 ], [ 3.928425514621074, 51.458674932411036 ], [ 3.925857873946111, 51.454677478324058 ], [ 3.925572877929609, 51.451558294026313 ], [ 3.933764550258237, 51.44826177778117 ], [ 3.935340203753214, 51.447148447024922 ], [ 3.937586419901993, 51.449159037995557 ], [ 3.942133342386597, 51.451481338316206 ], [ 3.951667084079295, 51.454431389600956 ], [ 3.955874780765857, 51.455332789035928 ], [ 3.969321721686375, 51.456346669735396 ], [ 3.973180143040668, 51.456110255456579 ], [ 3.987545584141987, 51.452318172447526 ], [ 3.991472981465186, 51.449816110013316 ], [ 3.995953550900269, 51.454401367156542 ], [ 4.000119021013859, 51.456716828800225 ], [ 4.003575151400808, 51.457041094681905 ], [ 4.007381994925304, 51.458502338739386 ], [ 4.006876863540828, 51.462461631098051 ], [ 4.005092643888157, 51.495862015423306 ], [ 4.004817315086735, 51.504922201804355 ], [ 4.014349241562653, 51.508433438117692 ], [ 4.015043170961009, 51.510990681671437 ], [ 4.017313110808949, 51.512433489378537 ], [ 4.013681617527658, 51.517772243234667 ], [ 4.013065411236584, 51.538157678709361 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1721\", \"naam\": \"Bernheze\", \"code\": \"1721\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.570470903933007, 51.651441552557991 ], [ 5.56738508514927, 51.653428710096115 ], [ 5.571259307877691, 51.655121843369308 ], [ 5.568957038070119, 51.659656555136294 ], [ 5.564324496975483, 51.661929217610684 ], [ 5.561999296590431, 51.66079993904669 ], [ 5.562394865498582, 51.663064901170202 ], [ 5.569002564964048, 51.670984252661015 ], [ 5.573669659136118, 51.676923979672139 ], [ 5.572900447957069, 51.678057978865311 ], [ 5.577160372785187, 51.678900720832978 ], [ 5.576779361352557, 51.680317308218974 ], [ 5.581813506659767, 51.681158623875838 ], [ 5.586852841230386, 51.683132489812444 ], [ 5.596951224815673, 51.691044248634697 ], [ 5.600082318983694, 51.698401628345415 ], [ 5.597002490261921, 51.702088704632125 ], [ 5.595478705328083, 51.707472098710589 ], [ 5.599347972577926, 51.706898763190665 ], [ 5.600129021267589, 51.708313311156154 ], [ 5.588587505244424, 51.725042118191588 ], [ 5.58086857179641, 51.731568568728726 ], [ 5.579320178846626, 51.73185431206057 ], [ 5.57195606190541, 51.731016587281424 ], [ 5.560339639557667, 51.732450304026507 ], [ 5.548345170051487, 51.736715309848471 ], [ 5.540604948132334, 51.73927443557659 ], [ 5.534021706183653, 51.740415644320557 ], [ 5.523945606763086, 51.739861464511506 ], [ 5.515029747424815, 51.738455581885397 ], [ 5.506890840468053, 51.737614612720485 ], [ 5.503012680394519, 51.736202555835277 ], [ 5.489057786931371, 51.733100425375071 ], [ 5.474327845915769, 51.728864445572057 ], [ 5.480129176930994, 51.724328908337426 ], [ 5.478578674334305, 51.723763745814097 ], [ 5.484753974840364, 51.713563837383752 ], [ 5.487848789357504, 51.71214525290813 ], [ 5.497528261957192, 51.711570138360081 ], [ 5.499845278200488, 51.709019197056115 ], [ 5.499065951399589, 51.707037596611045 ], [ 5.492481730591302, 51.706194130651014 ], [ 5.483179092113186, 51.701387859694357 ], [ 5.478146241882778, 51.701391882643328 ], [ 5.471159241459976, 51.691485359219719 ], [ 5.469223438693549, 51.691203540734485 ], [ 5.469993913833971, 51.689220646294785 ], [ 5.460318414229526, 51.689510293590722 ], [ 5.458774292628504, 51.692059986478689 ], [ 5.456831988274229, 51.68753007208587 ], [ 5.448680177449468, 51.669693469166688 ], [ 5.445580810621513, 51.666296737061657 ], [ 5.445191421602672, 51.664314575540928 ], [ 5.442483989951296, 51.664599082904829 ], [ 5.433973774615601, 51.664602804424597 ], [ 5.432038790032697, 51.66375398327655 ], [ 5.431649736757665, 51.661488582552039 ], [ 5.427776626207724, 51.655826118452239 ], [ 5.42352074533101, 51.65384516505133 ], [ 5.465269640306952, 51.643063327501117 ], [ 5.467587992715334, 51.642212171704372 ], [ 5.49732107541217, 51.626612222516641 ], [ 5.505454660776858, 51.633117753005493 ], [ 5.504688896635725, 51.635950472227066 ], [ 5.517047353256003, 51.631689472193592 ], [ 5.524388297930569, 51.630548305437365 ], [ 5.52671449985867, 51.632811110314229 ], [ 5.530967512064356, 51.633089150719883 ], [ 5.533681666889343, 51.635634533873215 ], [ 5.542182540023725, 51.634490791820703 ], [ 5.542971273622162, 51.639020860275139 ], [ 5.542202906262442, 51.640437855299247 ], [ 5.56427017804106, 51.648052771538552 ], [ 5.570470903933007, 51.651441552557991 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0530\", \"naam\": \"Hellevoetsluis\", \"code\": \"0530\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.192749035290253, 51.79106557219005 ], [ 4.194656871251346, 51.806945078170017 ], [ 4.19999913889935, 51.810397843346678 ], [ 4.207692700861874, 51.813024373068316 ], [ 4.212326981554082, 51.813920511772771 ], [ 4.213424753496777, 51.816480429865891 ], [ 4.213306764812504, 51.821010681347417 ], [ 4.219816529968745, 51.824474189384233 ], [ 4.222086771817342, 51.826762461391368 ], [ 4.220109332363816, 51.828158882844967 ], [ 4.207099660932048, 51.835675575745505 ], [ 4.197020680651376, 51.835007379076167 ], [ 4.195422847268351, 51.836690454309363 ], [ 4.195728704517209, 51.83980892006025 ], [ 4.198058289103328, 51.839832542894847 ], [ 4.198349400704419, 51.843517278471609 ], [ 4.193316568837072, 51.8428997720642 ], [ 4.197863901804149, 51.847194146134299 ], [ 4.198177470171543, 51.850029463887864 ], [ 4.194674804439514, 51.850277151503484 ], [ 4.191217222914973, 51.848825907656988 ], [ 4.18536944513138, 51.849615832878719 ], [ 4.183024219803817, 51.850158230884183 ], [ 4.18256012033592, 51.852985617104544 ], [ 4.175500787746826, 51.855461907748726 ], [ 4.177770319722795, 51.857751025963807 ], [ 4.184648379417306, 51.862069886888364 ], [ 4.186194643917294, 51.862368926472982 ], [ 4.181883709496904, 51.863740827094759 ], [ 4.168987654948623, 51.866439896311888 ], [ 4.165064312199856, 51.867815205346751 ], [ 4.160036955128084, 51.866913131916505 ], [ 4.154404161365401, 51.873934517634979 ], [ 4.153564955047496, 51.876191427414945 ], [ 4.158173697545794, 51.878222250266539 ], [ 4.155360537308697, 51.881591359107041 ], [ 4.140282906336939, 51.878600107510167 ], [ 4.137150572072942, 51.879416459132464 ], [ 4.136801318736374, 51.877996662149343 ], [ 4.134089101428841, 51.877684540084552 ], [ 4.130250730559895, 51.875944227057019 ], [ 4.127300748569069, 51.870248288036528 ], [ 4.120395102322502, 51.86705861153488 ], [ 4.119261539007499, 51.865913508967211 ], [ 4.120958839732082, 51.860833914600583 ], [ 4.116733990837477, 51.859088973033131 ], [ 4.117154363733395, 51.857960650800422 ], [ 4.098252023366379, 51.85322316807013 ], [ 4.08932774502368, 51.852841632457938 ], [ 4.084344568950052, 51.850520683955835 ], [ 4.082881414171935, 51.847389022941258 ], [ 4.039922905964871, 51.842089089185968 ], [ 4.041543639615332, 51.839841906042594 ], [ 4.049569218535236, 51.831153770635844 ], [ 4.056715184389322, 51.825853791220958 ], [ 4.062653613985466, 51.821955869334111 ], [ 4.072455113316347, 51.818667443123566 ], [ 4.10679033850095, 51.812533080129619 ], [ 4.121702017435366, 51.806747263507148 ], [ 4.125589648553558, 51.806505914893933 ], [ 4.131393416810876, 51.807134619724593 ], [ 4.141876589992434, 51.806963144845497 ], [ 4.15046642007098, 51.805071484113057 ], [ 4.152468248084939, 51.802826828153449 ], [ 4.171356684182612, 51.793111511673757 ], [ 4.175273317806871, 51.791735958960743 ], [ 4.181844039754457, 51.792653315806817 ], [ 4.186118003409255, 51.792413941168334 ], [ 4.192749035290253, 51.79106557219005 ] ], [ [ 4.220160667263496, 51.82617689596519 ], [ 4.2197798537126, 51.825889894502822 ], [ 4.220160667263496, 51.82617689596519 ], [ 4.220160667263496, 51.82617689596519 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0420\", \"naam\": \"Medemblik\", \"code\": \"0420\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.034677238651359, 52.666521900979767 ], [ 5.035436748063288, 52.670488207944153 ], [ 5.047295131514653, 52.671938406264417 ], [ 5.063508763830732, 52.673116200052377 ], [ 5.062294560151596, 52.676793792818593 ], [ 5.082426298130547, 52.68392569245357 ], [ 5.086775859413287, 52.684503040938473 ], [ 5.087185158224852, 52.682522055610661 ], [ 5.091563205467224, 52.678852118499741 ], [ 5.125126984633713, 52.691105983856509 ], [ 5.145679169357878, 52.696812332309612 ], [ 5.15990904594364, 52.701087499115445 ], [ 5.187199424715946, 52.70736560416951 ], [ 5.185206507278982, 52.710193667456664 ], [ 5.196281139227075, 52.713326499144976 ], [ 5.210919644979753, 52.717029906560562 ], [ 5.221611347577739, 52.717611529912503 ], [ 5.227553477201528, 52.71733649830751 ], [ 5.257658234951435, 52.716240462050571 ], [ 5.256847635402115, 52.722468689705977 ], [ 5.255208725742365, 52.74058788171449 ], [ 5.254396468872232, 52.747099191943697 ], [ 5.259951795325263, 52.744840134261068 ], [ 5.270255357446606, 52.745133824265707 ], [ 5.271837672488385, 52.746267923310974 ], [ 5.274204741503255, 52.750517278240096 ], [ 5.21137853663146, 52.800273396416692 ], [ 5.281121866203581, 52.840560778470447 ], [ 5.238509396972246, 52.873924801462401 ], [ 5.214891249995786, 52.916079189211011 ], [ 5.121419114923486, 52.845974692988676 ], [ 5.111908649564445, 52.779133125638793 ], [ 5.106384893707971, 52.774590028175666 ], [ 5.103214042649636, 52.774299377849957 ], [ 5.093331737260089, 52.769462063875409 ], [ 5.081830144802483, 52.769716291194783 ], [ 5.076282589818121, 52.769135670664163 ], [ 5.069549694722373, 52.767985359350533 ], [ 5.067577390160423, 52.766564388788545 ], [ 5.062859039378409, 52.761171984482516 ], [ 5.056149093249871, 52.757189569496056 ], [ 5.045870648995677, 52.753479741900989 ], [ 5.033197513533022, 52.752027058732693 ], [ 5.021707241516993, 52.751426083209573 ], [ 4.996728201476897, 52.75219626276111 ], [ 4.99637470764033, 52.747381693068768 ], [ 4.998381481837441, 52.744556838910199 ], [ 4.995218587200466, 52.743697047042247 ], [ 4.998419115693486, 52.74030982705235 ], [ 4.996452883113554, 52.738604538189939 ], [ 4.998862996823124, 52.73493156445543 ], [ 5.0028549892571, 52.731546797612943 ], [ 5.007668067443594, 52.724766794686744 ], [ 5.011221133344896, 52.726193781615599 ], [ 5.01125023068423, 52.722796152308987 ], [ 4.988360515547707, 52.713377931717211 ], [ 4.984366465416855, 52.717045364376602 ], [ 4.971738052388283, 52.712188511377136 ], [ 4.977728473517772, 52.70682950849887 ], [ 4.977744310375319, 52.705130691382777 ], [ 4.985712563161411, 52.699778067739324 ], [ 4.981417749742033, 52.693251149885647 ], [ 4.980652252672603, 52.690417075468169 ], [ 4.979168867170596, 52.679652423581025 ], [ 4.983167749551765, 52.675135712386222 ], [ 5.002163081409975, 52.674915545748931 ], [ 5.004168628421129, 52.671807399316428 ], [ 5.003389676960527, 52.670389152552453 ], [ 5.012110710002077, 52.668434932543825 ], [ 5.021243069250566, 52.664499307268315 ], [ 5.034677238651359, 52.666521900979767 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0405\", \"naam\": \"Hoorn\", \"code\": \"0405\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.091563205467224, 52.678852118499741 ], [ 5.087185158224852, 52.682522055610661 ], [ 5.086775859413287, 52.684503040938473 ], [ 5.082426298130547, 52.68392569245357 ], [ 5.062294560151596, 52.676793792818593 ], [ 5.063508763830732, 52.673116200052377 ], [ 5.047295131514653, 52.671938406264417 ], [ 5.035436748063288, 52.670488207944153 ], [ 5.034677238651359, 52.666521900979767 ], [ 5.039114086931616, 52.655775356930079 ], [ 5.037201854685518, 52.647558447724172 ], [ 5.032088587450668, 52.644145507769821 ], [ 5.022629325291599, 52.640435951556576 ], [ 5.015941424339485, 52.63645117035324 ], [ 5.013619867381404, 52.630497754180112 ], [ 5.02034440927968, 52.629952390436522 ], [ 5.027205376340154, 52.612701182192481 ], [ 5.060252926295052, 52.578818454549904 ], [ 5.074432371670285, 52.583670217796694 ], [ 5.135126948960358, 52.603918183430167 ], [ 5.125183393690064, 52.615222687380587 ], [ 5.095037497230448, 52.63242454977167 ], [ 5.101345809587041, 52.634988217624525 ], [ 5.106082498848616, 52.636132101615274 ], [ 5.104484785244779, 52.638676650259072 ], [ 5.102057600859073, 52.647165297880179 ], [ 5.117066807851815, 52.650031802092521 ], [ 5.119432690511773, 52.651169739929642 ], [ 5.116249732325671, 52.654277152956219 ], [ 5.114671238101091, 52.653707253411113 ], [ 5.111485985265786, 52.657097679542751 ], [ 5.107514529126998, 52.659636732492082 ], [ 5.107498326979517, 52.662185015116869 ], [ 5.100749646521775, 52.665849865758375 ], [ 5.096371790536946, 52.66980329599091 ], [ 5.098736342528927, 52.67122478205097 ], [ 5.095942396671117, 52.674898875098833 ], [ 5.091563205467224, 52.678852118499741 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0356\", \"naam\": \"Nieuwegein\", \"code\": \"0356\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.119432001383494, 51.999885977712857 ], [ 5.123272495743544, 52.009522876369438 ], [ 5.12825157279246, 52.024825789738216 ], [ 5.130981093674743, 52.02483175856834 ], [ 5.121589179919263, 52.030474598968524 ], [ 5.129668119717757, 52.049748885926775 ], [ 5.12459452914616, 52.050020869649117 ], [ 5.126907459628969, 52.054840079787382 ], [ 5.121838308946973, 52.054262412182659 ], [ 5.117922811436565, 52.056518978491184 ], [ 5.111278821052553, 52.05820269591355 ], [ 5.109345282687026, 52.055366342346296 ], [ 5.107427909136194, 52.049981361803454 ], [ 5.104306709302287, 52.049973909710232 ], [ 5.101938757312541, 52.054215921120253 ], [ 5.09722167851304, 52.059584850298073 ], [ 5.095276049768576, 52.058730503443691 ], [ 5.089799722367236, 52.060699078370313 ], [ 5.081600758274385, 52.06124446455803 ], [ 5.075739168282166, 52.062361843425379 ], [ 5.070669831964016, 52.061781974076929 ], [ 5.067956241651875, 52.059226021940326 ], [ 5.064109116801463, 52.051569632670663 ], [ 5.063096413795448, 52.02976181510747 ], [ 5.062726944374978, 52.026928969634781 ], [ 5.06313736791265, 52.024098270191885 ], [ 5.067885038746277, 52.014483010831988 ], [ 5.069056567704513, 52.014202998393664 ], [ 5.074979064074358, 52.003457876852806 ], [ 5.072662445426129, 52.000336688799294 ], [ 5.075776249264528, 52.0009113341656 ], [ 5.07735861159589, 51.997517302536821 ], [ 5.090192227889738, 52.00151495054812 ], [ 5.100316098480924, 52.002955970975165 ], [ 5.106941689865454, 52.002971927758445 ], [ 5.112794734175252, 52.001852980198692 ], [ 5.119432001383494, 51.999885977712857 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0856\", \"naam\": \"Uden\", \"code\": \"0856\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.750450722477336, 51.622701401887021 ], [ 5.747824371807059, 51.632621426114319 ], [ 5.742550449588558, 51.65019575722701 ], [ 5.734056084921702, 51.651920429277361 ], [ 5.732941367019047, 51.6578708470173 ], [ 5.730231865805812, 51.657595626835629 ], [ 5.730631522052743, 51.659293630123109 ], [ 5.736837455957761, 51.661540816536494 ], [ 5.734571025514011, 51.668627463334559 ], [ 5.731517119512541, 51.674017206355757 ], [ 5.678837874829735, 51.664814916601486 ], [ 5.673044430540469, 51.666245190133743 ], [ 5.622539388459208, 51.699208207151962 ], [ 5.624110141856766, 51.703452942643708 ], [ 5.597002490261921, 51.702088704632125 ], [ 5.600082318983694, 51.698401628345415 ], [ 5.596951224815673, 51.691044248634697 ], [ 5.586852841230386, 51.683132489812444 ], [ 5.581813506659767, 51.681158623875838 ], [ 5.576779361352557, 51.680317308218974 ], [ 5.577160372785187, 51.678900720832978 ], [ 5.572900447957069, 51.678057978865311 ], [ 5.573669659136118, 51.676923979672139 ], [ 5.569002564964048, 51.670984252661015 ], [ 5.562394865498582, 51.663064901170202 ], [ 5.561999296590431, 51.66079993904669 ], [ 5.564324496975483, 51.661929217610684 ], [ 5.568957038070119, 51.659656555136294 ], [ 5.571259307877691, 51.655121843369308 ], [ 5.56738508514927, 51.653428710096115 ], [ 5.570470903933007, 51.651441552557991 ], [ 5.571629891843011, 51.651156535733655 ], [ 5.57972914512837, 51.64604597607773 ], [ 5.588220740905482, 51.64263334733932 ], [ 5.585887235070991, 51.639522191080914 ], [ 5.593207086843471, 51.633845620343401 ], [ 5.595141204707264, 51.634125391593443 ], [ 5.602463064179861, 51.629297819197525 ], [ 5.607509926094033, 51.633819543947986 ], [ 5.616382236432528, 51.630120948693147 ], [ 5.62332207679491, 51.626708791952815 ], [ 5.626396144070185, 51.623304194386101 ], [ 5.635295873817555, 51.625268017508667 ], [ 5.651145225998893, 51.625799702826903 ], [ 5.651150176964863, 51.626649279411204 ], [ 5.664691573959111, 51.628883494010644 ], [ 5.665074618499335, 51.628316192353914 ], [ 5.672420176930185, 51.628581701332678 ], [ 5.674350964859656, 51.628293779634049 ], [ 5.686719409871802, 51.62826275190907 ], [ 5.74001397626152, 51.622450160909857 ], [ 5.750450722477336, 51.622701401887021 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1924\", \"naam\": \"Goeree-Overflakkee\", \"code\": \"1924\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.361700148633959, 51.662953577060129 ], [ 4.365142674219416, 51.664682960067275 ], [ 4.372383586482091, 51.669560564510718 ], [ 4.377279605442812, 51.675550356488543 ], [ 4.378770316815962, 51.678112113178123 ], [ 4.379424303514703, 51.683498770461959 ], [ 4.393529750019441, 51.693248488768482 ], [ 4.423380100580502, 51.709357678108113 ], [ 4.398558230933839, 51.711133312431649 ], [ 4.397390493975995, 51.711406662921235 ], [ 4.372649121113432, 51.709495751674844 ], [ 4.357143303906556, 51.710210079380161 ], [ 4.341998000905789, 51.712058424336021 ], [ 4.330723438738898, 51.713939786533736 ], [ 4.316717349392595, 51.716644783662495 ], [ 4.31163635410113, 51.718580744816187 ], [ 4.302206811137845, 51.72415808011813 ], [ 4.295554643383557, 51.726928435062227 ], [ 4.278367414200847, 51.732714565047964 ], [ 4.272494268206719, 51.735207779374093 ], [ 4.265021667328355, 51.73966790284036 ], [ 4.259047879093491, 51.746124497074575 ], [ 4.254622458509382, 51.752595763477238 ], [ 4.25182438877929, 51.755967275286032 ], [ 4.245889493038312, 51.760724301792791 ], [ 4.235609968650863, 51.768553809540293 ], [ 4.230892828032809, 51.771056323998778 ], [ 4.22215200351798, 51.7791830534387 ], [ 4.213071795070576, 51.785323239836181 ], [ 4.208351650664176, 51.787824833417574 ], [ 4.197828341818384, 51.789701106221806 ], [ 4.192749035290253, 51.79106557219005 ], [ 4.186118003409255, 51.792413941168334 ], [ 4.181844039754457, 51.792653315806817 ], [ 4.175273317806871, 51.791735958960743 ], [ 4.171356684182612, 51.793111511673757 ], [ 4.152468248084939, 51.802826828153449 ], [ 4.15046642007098, 51.805071484113057 ], [ 4.141876589992434, 51.806963144845497 ], [ 4.131393416810876, 51.807134619724593 ], [ 4.125589648553558, 51.806505914893933 ], [ 4.121702017435366, 51.806747263507148 ], [ 4.10679033850095, 51.812533080129619 ], [ 4.072455113316347, 51.818667443123566 ], [ 4.062653613985466, 51.821955869334111 ], [ 4.056715184389322, 51.825853791220958 ], [ 4.049569218535236, 51.831153770635844 ], [ 4.041543639615332, 51.839841906042594 ], [ 4.039922905964871, 51.842089089185968 ], [ 4.035159001262747, 51.858461177454622 ], [ 3.955537857072772, 51.857517293712405 ], [ 3.953053660585056, 51.850123101164108 ], [ 3.860559775100752, 51.828280778407709 ], [ 3.773702934784319, 51.781517398219066 ], [ 3.826224533384833, 51.765800644226005 ], [ 3.847588476590997, 51.753337588290648 ], [ 3.876073368502433, 51.747760372560194 ], [ 3.886099552558011, 51.749305375910367 ], [ 3.895136341963828, 51.75735126682585 ], [ 3.904979409625114, 51.764556927934031 ], [ 3.921452335641239, 51.7707118757967 ], [ 3.940355768835813, 51.773778959853125 ], [ 3.959026443204098, 51.772025259033647 ], [ 3.974410794744916, 51.763714809306776 ], [ 4.01332452532439, 51.759079220490548 ], [ 4.01886033437073, 51.742716870018008 ], [ 4.026357572988259, 51.738272550030779 ], [ 4.035125485905463, 51.73016049597976 ], [ 4.036575129712917, 51.720547541366095 ], [ 4.03686272628874, 51.710921175011457 ], [ 4.040204456167453, 51.702746093809317 ], [ 4.047810334274383, 51.694336539182693 ], [ 4.060622791609148, 51.693066242211238 ], [ 4.073796856956219, 51.692648279102592 ], [ 4.098249726123479, 51.690370949582615 ], [ 4.109954765877545, 51.687100517667027 ], [ 4.12315041483452, 51.685827585962443 ], [ 4.151806894515769, 51.685283746011564 ], [ 4.193769182330406, 51.664477441756588 ], [ 4.202760961399342, 51.660886908872605 ], [ 4.242952265679786, 51.647125768820239 ], [ 4.251113836734125, 51.645505971367108 ], [ 4.275132050747392, 51.643754140934277 ], [ 4.299405838232567, 51.647380872434347 ], [ 4.311317252306011, 51.650606344626219 ], [ 4.326356992395253, 51.652442913252536 ], [ 4.332517354102124, 51.653631442237554 ], [ 4.344819500643925, 51.656856997280556 ], [ 4.354416236946872, 51.660057410292211 ], [ 4.361700148633959, 51.662953577060129 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0575\", \"naam\": \"Noordwijk\", \"code\": \"0575\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.464133144306991, 52.216045677076437 ], [ 4.464881107193072, 52.217750649442458 ], [ 4.470322458549882, 52.219775336501321 ], [ 4.47067328020362, 52.221760373024409 ], [ 4.465903608391136, 52.225121512358207 ], [ 4.468615935437671, 52.226558576361732 ], [ 4.501859790921969, 52.248900934856174 ], [ 4.513498853272211, 52.254934452741395 ], [ 4.520834957109123, 52.260652149255314 ], [ 4.53274660413045, 52.273198935904816 ], [ 4.529985708966437, 52.274028493719513 ], [ 4.536548223953728, 52.279456372859777 ], [ 4.542687893415246, 52.286579945254701 ], [ 4.545739706973889, 52.291132611547901 ], [ 4.548845546074247, 52.292853763093021 ], [ 4.549200432469592, 52.294838547387229 ], [ 4.554607324296825, 52.29940763810626 ], [ 4.555397239820992, 52.299130016620474 ], [ 4.563839141764888, 52.309383586133528 ], [ 4.547267524598841, 52.314081119893366 ], [ 4.530305398095519, 52.318490335614491 ], [ 4.477811143072614, 52.332540662970992 ], [ 4.470562285093881, 52.322290169552119 ], [ 4.46330498480004, 52.312605493506922 ], [ 4.443458702581516, 52.286112636530518 ], [ 4.436195009092716, 52.277275671108654 ], [ 4.420531174666712, 52.258175079953702 ], [ 4.391081371735692, 52.225363706751324 ], [ 4.41833881141662, 52.214829258855076 ], [ 4.422652008559965, 52.214581379740338 ], [ 4.42574774598315, 52.216305763113823 ], [ 4.429357054800148, 52.212370443214454 ], [ 4.433248116578721, 52.2135347001445 ], [ 4.435266316257966, 52.210719094525828 ], [ 4.440036742415325, 52.207359186092589 ], [ 4.444301173754283, 52.209375642559685 ], [ 4.448542133083833, 52.212524510837476 ], [ 4.451300712662481, 52.211696841277124 ], [ 4.455560149921676, 52.213996033263413 ], [ 4.464133144306991, 52.216045677076437 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0263\", \"naam\": \"Maasdriel\", \"code\": \"0263\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.353446046666967, 51.755512133617451 ], [ 5.356545943815672, 51.756928935678069 ], [ 5.360032311369576, 51.76061127193104 ], [ 5.360418959948809, 51.762310505049967 ], [ 5.36080086407636, 51.772222262066705 ], [ 5.362347836535323, 51.779585546363329 ], [ 5.366998076481798, 51.7875157552212 ], [ 5.37203874907889, 51.792897115360347 ], [ 5.375917120883373, 51.79657901331165 ], [ 5.383675722344333, 51.804508798500635 ], [ 5.394541869371044, 51.812721094650776 ], [ 5.401530283649, 51.820932919612567 ], [ 5.406188916447396, 51.822348195822535 ], [ 5.410459059459554, 51.822630610031467 ], [ 5.414728211883808, 51.821213736290289 ], [ 5.416281817331024, 51.822629303428364 ], [ 5.415118677521765, 51.824895097460576 ], [ 5.407745025594444, 51.829710836652197 ], [ 5.405417751337663, 51.835091804507371 ], [ 5.400759032480163, 51.837641136260906 ], [ 5.3933805623981, 51.833960318789671 ], [ 5.385226878148635, 51.828296706687702 ], [ 5.379404443014622, 51.822066321442307 ], [ 5.374359868372527, 51.815835729194504 ], [ 5.367764522416612, 51.809321481612514 ], [ 5.364273043071122, 51.8070553419916 ], [ 5.356513773865254, 51.804504875614853 ], [ 5.347589383143875, 51.80421902471047 ], [ 5.339050416047852, 51.806481357717132 ], [ 5.333224675110382, 51.81072666951524 ], [ 5.326230809199244, 51.816953414120526 ], [ 5.319627011510738, 51.820631262776296 ], [ 5.311083054919631, 51.823174743532242 ], [ 5.304482298012777, 51.824019852068673 ], [ 5.292448833540845, 51.823727580677712 ], [ 5.281585398737911, 51.821169620618029 ], [ 5.284698482283285, 51.817774108104622 ], [ 5.283147874409699, 51.816923178028745 ], [ 5.28315831740022, 51.812392159501613 ], [ 5.280834416730866, 51.810407753492356 ], [ 5.284336152219731, 51.806446218858547 ], [ 5.283567863191553, 51.803047268978936 ], [ 5.280854427553643, 51.801912085718392 ], [ 5.288230246687045, 51.80021939206695 ], [ 5.27621507241834, 51.795111239400931 ], [ 5.266521711517265, 51.793119350657534 ], [ 5.270061546991789, 51.77443237391482 ], [ 5.262693165349778, 51.77470798248892 ], [ 5.251842372217641, 51.772430448316484 ], [ 5.248743834582497, 51.771294071615628 ], [ 5.241377664803899, 51.771001961445165 ], [ 5.23749746295432, 51.771846649605557 ], [ 5.233623854806781, 51.770708881874512 ], [ 5.214244652515593, 51.76869958722569 ], [ 5.20803891116875, 51.769256659704823 ], [ 5.196026688178492, 51.767538558714428 ], [ 5.191761898241262, 51.767531533250519 ], [ 5.189056636982196, 51.76554465707143 ], [ 5.180522255797077, 51.766662700688777 ], [ 5.173555704796458, 51.764101499482535 ], [ 5.174733390581195, 51.760988530730543 ], [ 5.180948745514058, 51.758167705369111 ], [ 5.185235432789078, 51.75307771222591 ], [ 5.185636910652028, 51.749963292571685 ], [ 5.184485671038821, 51.74741258150619 ], [ 5.185672267180573, 51.742033977305745 ], [ 5.194591759525669, 51.740349810163252 ], [ 5.206598960413422, 51.741501679632748 ], [ 5.213567165562257, 51.743211352090718 ], [ 5.222091127800083, 51.743506850133848 ], [ 5.229459603007129, 51.741817837654359 ], [ 5.235279535914606, 51.739559983428244 ], [ 5.245370600362468, 51.734191969830633 ], [ 5.249633974618866, 51.73363066232799 ], [ 5.255441947348806, 51.734770096128585 ], [ 5.265502886951715, 51.739312030883511 ], [ 5.27712483318689, 51.740173081812749 ], [ 5.284488136014117, 51.73961337284608 ], [ 5.293017777685968, 51.737071801234428 ], [ 5.2961179323692, 51.736791055715258 ], [ 5.303089324448242, 51.738212215115247 ], [ 5.316253578503018, 51.744167926836731 ], [ 5.322062956679495, 51.746436822141078 ], [ 5.332134915407455, 51.749557076457876 ], [ 5.349571155091108, 51.754095004183135 ], [ 5.353446046666967, 51.755512133617451 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1904\", \"naam\": \"Stichtse Vecht\", \"code\": \"1904\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.106906771859953, 52.133234902888987 ], [ 5.113515262106146, 52.139197142345154 ], [ 5.120514807989556, 52.145443063913646 ], [ 5.095036024711147, 52.155293927132035 ], [ 5.118789199923167, 52.172340896081032 ], [ 5.115221626236105, 52.179978468628896 ], [ 5.082394202772361, 52.17395159609439 ], [ 5.046461372676911, 52.165924408073934 ], [ 5.044464249598806, 52.171298982076983 ], [ 5.042025003365274, 52.183185277019128 ], [ 5.041629303330397, 52.183750471394404 ], [ 5.03262674572042, 52.184006954611561 ], [ 5.034952305677771, 52.186845675074359 ], [ 5.03646647397665, 52.193363223332156 ], [ 5.038016562925193, 52.195350045361586 ], [ 5.037211499857889, 52.198179415508406 ], [ 5.030943866396219, 52.198727024764302 ], [ 5.026225847653906, 52.201261275509125 ], [ 5.022700293119993, 52.201533622088348 ], [ 5.022679457108599, 52.204082134893959 ], [ 5.025811424529054, 52.204091760062099 ], [ 5.036788901806059, 52.202142614820644 ], [ 5.037549653701869, 52.204976619527557 ], [ 5.035198393131761, 52.205252810252453 ], [ 5.036339484277244, 52.209503827930682 ], [ 5.03359643101955, 52.209778822575572 ], [ 5.034352625719691, 52.213179179682278 ], [ 5.036697629611904, 52.21375251029766 ], [ 5.035885450959406, 52.217431364922042 ], [ 5.036615215004575, 52.224229712243847 ], [ 5.038566935452538, 52.225085009532194 ], [ 5.042455263846257, 52.228777678320377 ], [ 5.040487881310535, 52.22990461610258 ], [ 5.057683940544739, 52.235334116407088 ], [ 5.056104224739136, 52.237028739311626 ], [ 5.045867868320565, 52.243512594318879 ], [ 5.046610406145472, 52.24889501791688 ], [ 5.045031962705914, 52.250306321494193 ], [ 5.043424994433755, 52.255398761507415 ], [ 5.041062298221537, 52.256807727581474 ], [ 5.037169415548407, 52.253398195629174 ], [ 5.034430392834071, 52.25282370752273 ], [ 5.031261033877512, 52.257061792371736 ], [ 5.032810847725482, 52.259331827101001 ], [ 5.032013325572689, 52.261028466387842 ], [ 5.027288752947362, 52.263562725092029 ], [ 5.027648744575612, 52.267528227659966 ], [ 5.024888226412041, 52.269502002540172 ], [ 5.022900048847233, 52.272893953313485 ], [ 5.028396321944628, 52.272061246125077 ], [ 5.030744351060189, 52.27263469158224 ], [ 5.033466535119532, 52.275474581322307 ], [ 5.042075708235134, 52.277765393045435 ], [ 5.048748640214919, 52.276935168160108 ], [ 5.049894997181531, 52.280902836917669 ], [ 5.051845188683896, 52.282324237463783 ], [ 5.060452476749551, 52.285180038711744 ], [ 5.06280987377356, 52.284620187623631 ], [ 5.064407467597894, 52.280660171282342 ], [ 5.065579887122873, 52.281229707044929 ], [ 5.065551222293699, 52.28519401622254 ], [ 5.059244525239059, 52.289424250567123 ], [ 5.052597609054973, 52.286573927896164 ], [ 5.050235689497331, 52.287699903624848 ], [ 5.047509524124283, 52.285143569591085 ], [ 5.042822733991925, 52.282581477340273 ], [ 5.039288617316707, 52.283137474161563 ], [ 5.033380957464899, 52.28623482497769 ], [ 5.030617259466677, 52.288491889795907 ], [ 5.024399183426658, 52.281393703915171 ], [ 5.022036826762858, 52.282519116840291 ], [ 5.020874260397072, 52.280816494014566 ], [ 5.007566304372163, 52.231785640062313 ], [ 4.997388537160215, 52.23090297705879 ], [ 4.994631450198119, 52.232592893383867 ], [ 4.994651413570978, 52.230327566281531 ], [ 4.98058032850929, 52.226881882146046 ], [ 4.982971605057851, 52.222359293093106 ], [ 4.973587664626581, 52.220627759750982 ], [ 4.968224526286905, 52.207865963694701 ], [ 4.966733206024412, 52.199931735605283 ], [ 4.961258217793633, 52.199345761606622 ], [ 4.960880303750578, 52.197928516041053 ], [ 4.950694572243247, 52.198740832325939 ], [ 4.94993389647735, 52.196472605256595 ], [ 4.948474062372576, 52.185706466572682 ], [ 4.946123273150473, 52.185980884500026 ], [ 4.934083988069035, 52.176873605852286 ], [ 4.93371863867646, 52.174323601300912 ], [ 4.928705382117812, 52.16722477768532 ], [ 4.913880040883943, 52.163484928288469 ], [ 4.909595737483751, 52.161768593403899 ], [ 4.911172297579076, 52.160642247241157 ], [ 4.91173834794645, 52.144220120857199 ], [ 4.913302213173546, 52.14422641299597 ], [ 4.923435000892925, 52.147381654518121 ], [ 4.935259423861966, 52.13808261632979 ], [ 4.943963496606452, 52.127637986780073 ], [ 4.961105704643475, 52.133364751170305 ], [ 4.970198883187422, 52.122353239972135 ], [ 4.974038586284353, 52.12972942450034 ], [ 4.985350094936487, 52.132317115236283 ], [ 4.986497291795977, 52.135152808816201 ], [ 5.002076763355491, 52.141717807230819 ], [ 5.007600578665836, 52.135788958775059 ], [ 5.011161552908469, 52.130703144994627 ], [ 5.015098374362783, 52.127317481692621 ], [ 5.032768515641696, 52.1168942749621 ], [ 5.03355222005539, 52.116613448248906 ], [ 5.040908074535699, 52.125413822851492 ], [ 5.047517352271001, 52.129963897335053 ], [ 5.061250710325343, 52.122640002170797 ], [ 5.067088120624232, 52.126054129707818 ], [ 5.070206592119616, 52.127195264126868 ], [ 5.07217468258383, 52.125218287941927 ], [ 5.076070915225242, 52.126927698215063 ], [ 5.087345832178006, 52.135735410671252 ], [ 5.101065376878121, 52.129822748222345 ], [ 5.103410460243132, 52.129828412433007 ], [ 5.106906771859953, 52.133234902888987 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1685\", \"naam\": \"Landerd\", \"code\": \"1685\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.742550449588558, 51.65019575722701 ], [ 5.734253683609299, 51.677690664500609 ], [ 5.700049575041342, 51.711487257206258 ], [ 5.705548530414464, 51.722517001146272 ], [ 5.710222681599284, 51.726185721310323 ], [ 5.713323526929884, 51.726460321315905 ], [ 5.709464145705108, 51.728453361012605 ], [ 5.718392331182946, 51.730977197740216 ], [ 5.718794277344508, 51.732958416484117 ], [ 5.709875794657639, 51.731850551554089 ], [ 5.706003805451621, 51.732144348509173 ], [ 5.707972997261853, 51.73667006813259 ], [ 5.698298694810906, 51.738395322359573 ], [ 5.701439726673421, 51.744333995595397 ], [ 5.703420899322444, 51.750558911719807 ], [ 5.699932863747528, 51.75056827452859 ], [ 5.701906204408441, 51.755660461954555 ], [ 5.694152209089824, 51.755397840095441 ], [ 5.690688555956488, 51.759088367205194 ], [ 5.685263562527068, 51.75938548586182 ], [ 5.680237170710355, 51.761380511471486 ], [ 5.677150505460069, 51.763653728767167 ], [ 5.674851553842768, 51.767907277576434 ], [ 5.673686627661413, 51.767626939295738 ], [ 5.66977762764062, 51.7625389724613 ], [ 5.667388336266952, 51.752349785601098 ], [ 5.660044938508803, 51.755765427159311 ], [ 5.652717094679987, 51.762012491435961 ], [ 5.648075008855172, 51.763722071219838 ], [ 5.633715585899991, 51.760921244604852 ], [ 5.635639801759888, 51.758368452264577 ], [ 5.620121499482509, 51.755851606395765 ], [ 5.616628715529515, 51.755008923345159 ], [ 5.615084037073273, 51.756144706178702 ], [ 5.611974694346253, 51.754451562279932 ], [ 5.602658882233747, 51.751637148997787 ], [ 5.597227610941742, 51.750514246227461 ], [ 5.596438042760642, 51.747400547708686 ], [ 5.576275525178611, 51.744886107182595 ], [ 5.577399872933949, 51.735822139411773 ], [ 5.58086857179641, 51.731568568728726 ], [ 5.588587505244424, 51.725042118191588 ], [ 5.600129021267589, 51.708313311156154 ], [ 5.599347972577926, 51.706898763190665 ], [ 5.595478705328083, 51.707472098710589 ], [ 5.597002490261921, 51.702088704632125 ], [ 5.624110141856766, 51.703452942643708 ], [ 5.622539388459208, 51.699208207151962 ], [ 5.673044430540469, 51.666245190133743 ], [ 5.678837874829735, 51.664814916601486 ], [ 5.731517119512541, 51.674017206355757 ], [ 5.734571025514011, 51.668627463334559 ], [ 5.736837455957761, 51.661540816536494 ], [ 5.730631522052743, 51.659293630123109 ], [ 5.730231865805812, 51.657595626835629 ], [ 5.732941367019047, 51.6578708470173 ], [ 5.734056084921702, 51.651920429277361 ], [ 5.742550449588558, 51.65019575722701 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1695\", \"naam\": \"Noord-Beveland\", \"code\": \"1695\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 3.713581326970056, 51.530285669447913 ], [ 3.718833538845479, 51.534326278058998 ], [ 3.729089437982002, 51.53872101347779 ], [ 3.737043628237485, 51.542799093762788 ], [ 3.737753272569517, 51.544508595189477 ], [ 3.743811429243256, 51.54770967516032 ], [ 3.754509408781933, 51.550692110363514 ], [ 3.756001491407632, 51.55212917699847 ], [ 3.762904383410916, 51.553358316620042 ], [ 3.76832514393522, 51.552867052784563 ], [ 3.793390995085626, 51.542448383540567 ], [ 3.801460371587684, 51.543407914088412 ], [ 3.805248122841886, 51.545441960676229 ], [ 3.816701524474819, 51.548995377203482 ], [ 3.834319182702825, 51.552912975094181 ], [ 3.840558875386207, 51.551013045204321 ], [ 3.841773917238273, 51.549329678507249 ], [ 3.852399198686722, 51.543238446897085 ], [ 3.856313271327554, 51.541590358939416 ], [ 3.862117323247741, 51.541099786931625 ], [ 3.870583084882131, 51.541776466142956 ], [ 3.888155959232386, 51.547101539232713 ], [ 3.88966150391642, 51.548253796097733 ], [ 3.89846836599081, 51.550348996337263 ], [ 3.907735597590852, 51.550183460599946 ], [ 3.912392173989035, 51.54939261572185 ], [ 3.914403515050792, 51.546868856144592 ], [ 3.920216785603541, 51.546092277390798 ], [ 3.922512825783217, 51.546687553921089 ], [ 3.927609090957833, 51.544202203591993 ], [ 3.932355385228297, 51.54057933538413 ], [ 3.933244516969338, 51.536908340128967 ], [ 3.937908326872927, 51.535833347577508 ], [ 3.9609520971995, 51.551411584166999 ], [ 3.936862943804252, 51.556496551616739 ], [ 3.924786482828157, 51.607894851006755 ], [ 3.878890118394273, 51.593716556995261 ], [ 3.874143419974163, 51.597054082204735 ], [ 3.867936697226303, 51.597823319493344 ], [ 3.862831136799564, 51.600306018125011 ], [ 3.851874679559613, 51.604411261491045 ], [ 3.848727433569292, 51.606069333534982 ], [ 3.842152130778407, 51.606265888959932 ], [ 3.838260956513088, 51.607064134888418 ], [ 3.828605416739788, 51.606935853790482 ], [ 3.814672095434706, 51.607599055153038 ], [ 3.801184029996017, 51.606567189921236 ], [ 3.790073640002535, 51.603866805508062 ], [ 3.769320623121283, 51.600749096189723 ], [ 3.759300857605596, 51.600043549273806 ], [ 3.751953797518393, 51.600224281391959 ], [ 3.745023589863652, 51.599560672018285 ], [ 3.743133918483755, 51.598401137999055 ], [ 3.72270010399233, 51.597262310179168 ], [ 3.707964667602142, 51.598751103510857 ], [ 3.698988816259231, 51.601171088069535 ], [ 3.695952398971067, 51.599710970869168 ], [ 3.690869075965382, 51.601336827904746 ], [ 3.683929003441518, 51.600952695799876 ], [ 3.681257926108887, 51.600064011082537 ], [ 3.67240887381395, 51.599084826952044 ], [ 3.668976618127557, 51.597901442901431 ], [ 3.654369093566297, 51.595986371221954 ], [ 3.638528182694789, 51.596033784082103 ], [ 3.631556528838159, 51.596495814566744 ], [ 3.631644189738034, 51.594231112548485 ], [ 3.633804405580725, 51.588315231412068 ], [ 3.637023715210804, 51.584964444409813 ], [ 3.653102289928067, 51.568492224641659 ], [ 3.662835002968003, 51.56637021857243 ], [ 3.671034185686709, 51.563941651007958 ], [ 3.677763867758677, 51.559508279738644 ], [ 3.684824926141789, 51.556495609624143 ], [ 3.694711875735213, 51.550124496363466 ], [ 3.698393865993586, 51.544512790736256 ], [ 3.698187146658066, 51.539694566027656 ], [ 3.696427581155087, 51.535137123040855 ], [ 3.695407845752524, 51.531440114992236 ], [ 3.697598789741997, 51.524390588370089 ], [ 3.700370830649919, 51.522447909917922 ], [ 3.704944239302436, 51.523930118766145 ], [ 3.709434340606969, 51.527676939301898 ], [ 3.712007814502434, 51.531112859469815 ], [ 3.713581326970056, 51.530285669447913 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0168\", \"naam\": \"Losser\", \"code\": \"0168\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 7.072026386079137, 52.37274617126409 ], [ 7.039632733106981, 52.368388295350307 ], [ 7.031744830310966, 52.367648543074829 ], [ 7.011183575516658, 52.364250749324128 ], [ 7.008020581999894, 52.363727693416358 ], [ 6.985534915788946, 52.37224673558579 ], [ 6.970869028066245, 52.379807398107424 ], [ 6.962819667663967, 52.363488624531421 ], [ 6.970149944250843, 52.348663765013626 ], [ 6.961451227542893, 52.34708058026726 ], [ 6.958642563343683, 52.345418656482359 ], [ 6.952965929090995, 52.34039612834605 ], [ 6.951305783631058, 52.33786918941847 ], [ 6.953521274530898, 52.33387490139831 ], [ 6.945238431082736, 52.332851466686002 ], [ 6.937388024174033, 52.33295463227639 ], [ 6.936405359664028, 52.327303283627856 ], [ 6.934285144973224, 52.322799658877614 ], [ 6.940946568399777, 52.3224291004666 ], [ 6.945606010771364, 52.320951719706805 ], [ 6.944771527085845, 52.319546653952052 ], [ 6.950265141686212, 52.319474156187589 ], [ 6.949753193479198, 52.316082370273676 ], [ 6.94857608174425, 52.316097921544632 ], [ 6.950258930999667, 52.308145719409737 ], [ 6.944498730949518, 52.300574987472444 ], [ 6.941683750093616, 52.298629549183389 ], [ 6.946181751951555, 52.292622819217719 ], [ 6.941396567410103, 52.290420134928482 ], [ 6.935524241699653, 52.290780429450329 ], [ 6.939208448473376, 52.283934974754963 ], [ 6.941168888597419, 52.283909210316615 ], [ 6.946176657963057, 52.281294320138116 ], [ 6.96039240961656, 52.272892660325859 ], [ 6.968824783344921, 52.267398966606862 ], [ 6.972851761670579, 52.248369428948237 ], [ 6.971525250847962, 52.244138965171913 ], [ 6.968632212402145, 52.239929475455526 ], [ 6.964996545187586, 52.236862713950458 ], [ 6.965940609301596, 52.230336079954135 ], [ 6.981270510198384, 52.220783860143051 ], [ 6.985287359820496, 52.223561748362144 ], [ 6.984946601294281, 52.224982459013766 ], [ 6.988933506192958, 52.226910972857766 ], [ 6.997166869028777, 52.227082203305869 ], [ 7.003493778660282, 52.228695078629251 ], [ 7.013242186083122, 52.227428335046483 ], [ 7.019032856206917, 52.225082665448397 ], [ 7.020630242788662, 52.225910240108014 ], [ 7.026503702293736, 52.225828829673937 ], [ 7.039107188215683, 52.22763570925833 ], [ 7.061312095612005, 52.234686753238286 ], [ 7.065865630189189, 52.241136254217245 ], [ 7.042519810414955, 52.256193363426313 ], [ 7.032113890754403, 52.271632648198803 ], [ 7.028659352927706, 52.273663234408865 ], [ 7.027640075472925, 52.277925685916891 ], [ 7.029736156715863, 52.281578420302957 ], [ 7.026416464347731, 52.287288902149307 ], [ 7.026593986767336, 52.292101160170247 ], [ 7.033648561286955, 52.302482189310453 ], [ 7.039329380483191, 52.307500862755006 ], [ 7.041427843067444, 52.311153359381514 ], [ 7.038723760278486, 52.312324040668713 ], [ 7.043473862452428, 52.313390461261946 ], [ 7.047471260468175, 52.315316922482879 ], [ 7.046347099041733, 52.316748797516482 ], [ 7.048033011598678, 52.319840531757357 ], [ 7.046961668398286, 52.32268776058374 ], [ 7.047831204028371, 52.324941298367662 ], [ 7.055564024138796, 52.332196127806 ], [ 7.056169416847096, 52.33785195108436 ], [ 7.072016023125381, 52.351788202314893 ], [ 7.072198826986943, 52.356600308798939 ], [ 7.072586091649048, 52.366790635237699 ], [ 7.072026386079137, 52.37274617126409 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0796\", \"naam\": \"'s-Hertogenbosch\", \"code\": \"0796\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.456831988274229, 51.68753007208587 ], [ 5.458774292628504, 51.692059986478689 ], [ 5.460318414229526, 51.689510293590722 ], [ 5.469993913833971, 51.689220646294785 ], [ 5.469223438693549, 51.691203540734485 ], [ 5.471159241459976, 51.691485359219719 ], [ 5.478146241882778, 51.701391882643328 ], [ 5.483179092113186, 51.701387859694357 ], [ 5.492481730591302, 51.706194130651014 ], [ 5.499065951399589, 51.707037596611045 ], [ 5.499845278200488, 51.709019197056115 ], [ 5.497528261957192, 51.711570138360081 ], [ 5.487848789357504, 51.71214525290813 ], [ 5.484753974840364, 51.713563837383752 ], [ 5.478578674334305, 51.723763745814097 ], [ 5.480129176930994, 51.724328908337426 ], [ 5.474327845915769, 51.728864445572057 ], [ 5.463088646008696, 51.725757167886449 ], [ 5.462705562475445, 51.728306143291888 ], [ 5.459997608959553, 51.730573395502518 ], [ 5.457672368397898, 51.730008436545347 ], [ 5.454577499797279, 51.732842179009637 ], [ 5.451867241065899, 51.733976476576544 ], [ 5.45419387618052, 51.735391124750258 ], [ 5.450712559243489, 51.739357750271701 ], [ 5.451487899086796, 51.739640517979595 ], [ 5.443752358815519, 51.750688978742801 ], [ 5.44414350519435, 51.753520700054281 ], [ 5.4387305449637, 51.765134038326025 ], [ 5.430975657459202, 51.764004438161074 ], [ 5.392594919220572, 51.760331059867646 ], [ 5.389106034495068, 51.759198410039453 ], [ 5.373989857073226, 51.75325069249606 ], [ 5.361200611128356, 51.751266233758749 ], [ 5.355774431860828, 51.751548103224017 ], [ 5.353446046666967, 51.755512133617451 ], [ 5.349571155091108, 51.754095004183135 ], [ 5.332134915407455, 51.749557076457876 ], [ 5.322062956679495, 51.746436822141078 ], [ 5.316253578503018, 51.744167926836731 ], [ 5.303089324448242, 51.738212215115247 ], [ 5.2961179323692, 51.736791055715258 ], [ 5.293017777685968, 51.737071801234428 ], [ 5.284488136014117, 51.73961337284608 ], [ 5.27712483318689, 51.740173081812749 ], [ 5.265502886951715, 51.739312030883511 ], [ 5.255441947348806, 51.734770096128585 ], [ 5.249633974618866, 51.73363066232799 ], [ 5.245370600362468, 51.734191969830633 ], [ 5.235279535914606, 51.739559983428244 ], [ 5.229459603007129, 51.741817837654359 ], [ 5.222091127800083, 51.743506850133848 ], [ 5.213567165562257, 51.743211352090718 ], [ 5.206598960413422, 51.741501679632748 ], [ 5.21048819949908, 51.737826106620808 ], [ 5.210116273076514, 51.733860855779724 ], [ 5.216326756097808, 51.730754953189482 ], [ 5.219435353893783, 51.728210710170679 ], [ 5.221755437724235, 51.729346774839868 ], [ 5.224864649366618, 51.726519196345322 ], [ 5.227574148242454, 51.727089299699401 ], [ 5.231071155336092, 51.723978891106427 ], [ 5.228392614991136, 51.714629941788473 ], [ 5.229955411439643, 51.710667349759504 ], [ 5.241173860557224, 51.714080167568618 ], [ 5.236165124391068, 51.706427620054853 ], [ 5.23889026379882, 51.701900011851677 ], [ 5.241215879879397, 51.701053351353337 ], [ 5.247017702625567, 51.702759588424613 ], [ 5.251673718108099, 51.699366746647271 ], [ 5.248970762875976, 51.697098047377196 ], [ 5.248975949643738, 51.695398895007969 ], [ 5.245882760665786, 51.694262435245413 ], [ 5.22692784284783, 51.690839735838807 ], [ 5.226156761905346, 51.689989098965867 ], [ 5.231965334411663, 51.689147354599143 ], [ 5.234299985165758, 51.685468908513691 ], [ 5.246691190269318, 51.68321886789554 ], [ 5.254814594543876, 51.684361096206509 ], [ 5.25829917218513, 51.683798592299908 ], [ 5.265649731375323, 51.684656023018547 ], [ 5.288876433830192, 51.681562671120112 ], [ 5.289270137204315, 51.678447873498314 ], [ 5.291987086911708, 51.67448540228704 ], [ 5.291217459678457, 51.672502420164143 ], [ 5.294313201537807, 51.672221719376189 ], [ 5.298965834666464, 51.667127826727516 ], [ 5.300511066717935, 51.668261753718106 ], [ 5.303221177492318, 51.667130950794025 ], [ 5.309793751738747, 51.669401021086244 ], [ 5.318689598015097, 51.670822520407945 ], [ 5.319077329472629, 51.670256359054569 ], [ 5.327584515240622, 51.673376116694023 ], [ 5.338814658661302, 51.664035893932834 ], [ 5.342294667728512, 51.665453244030395 ], [ 5.343840117236272, 51.667436179706471 ], [ 5.353508696960928, 51.671120863734707 ], [ 5.353894129112347, 51.673103327480995 ], [ 5.355828046832201, 51.673953439146452 ], [ 5.350795748686359, 51.677067116245652 ], [ 5.351953478692677, 51.681032174210472 ], [ 5.356984069322309, 51.681033573474188 ], [ 5.357370480822466, 51.681883251507976 ], [ 5.372463085209457, 51.680186943806227 ], [ 5.377106931821871, 51.678771463735977 ], [ 5.369752733344947, 51.684434472003254 ], [ 5.36471910986041, 51.68981428773241 ], [ 5.359295114862012, 51.698592105224137 ], [ 5.361617827436656, 51.698592632370328 ], [ 5.36742534596651, 51.69689459268016 ], [ 5.371683108175069, 51.698027999069197 ], [ 5.374392351605484, 51.700010671479319 ], [ 5.386393398577227, 51.700860930168837 ], [ 5.394522972966787, 51.698878344392426 ], [ 5.399168351865071, 51.69859476273303 ], [ 5.407298100387556, 51.699160023899495 ], [ 5.427430550542764, 51.701420352219735 ], [ 5.439430995594314, 51.700566021067701 ], [ 5.43942869908276, 51.698583673308242 ], [ 5.443298827950994, 51.697732300002848 ], [ 5.441359530003565, 51.694618094879608 ], [ 5.447553262672113, 51.69489825110599 ], [ 5.445222726182899, 51.688669187923068 ], [ 5.451799461014894, 51.686683384170109 ], [ 5.452575955840882, 51.688382110501742 ], [ 5.456831988274229, 51.68753007208587 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1714\", \"naam\": \"Sluis\", \"code\": \"1714\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 3.694118268214898, 51.275928330916415 ], [ 3.698085003168811, 51.282784056822621 ], [ 3.701546595098031, 51.282550997401657 ], [ 3.698001411330046, 51.285048868220599 ], [ 3.703680740332239, 51.287113935297661 ], [ 3.706665565807219, 51.289423095457387 ], [ 3.704892094309007, 51.29591228285684 ], [ 3.705886751894983, 51.300175442049003 ], [ 3.704237743734867, 51.303267389738799 ], [ 3.706829586395106, 51.305854103875788 ], [ 3.706767176640155, 51.307552716945949 ], [ 3.703604014253362, 51.310056286303407 ], [ 3.712221567720579, 51.315845629173126 ], [ 3.703291275205233, 51.31854933695584 ], [ 3.689402287345943, 51.320330412118786 ], [ 3.686279421230223, 51.321701101676645 ], [ 3.684381578706978, 51.321106855551619 ], [ 3.666386596241954, 51.319709279869677 ], [ 3.663870568099526, 51.325337164105825 ], [ 3.660043134126126, 51.324997201371275 ], [ 3.657802761833927, 51.333461603312088 ], [ 3.653260646384572, 51.331694532017842 ], [ 3.644043044229142, 51.341754135702615 ], [ 3.649769984058898, 51.342689472458559 ], [ 3.647185913491089, 51.35001554330934 ], [ 3.654546708876576, 51.348425731425763 ], [ 3.659101240736637, 51.349909663179304 ], [ 3.659442428006128, 51.351047743364425 ], [ 3.682794447526037, 51.353374529576371 ], [ 3.682336424769958, 51.355350600457122 ], [ 3.687702863596765, 51.355712264086982 ], [ 3.689707405193913, 51.353475466822857 ], [ 3.69397398797975, 51.352404548661227 ], [ 3.693106915286461, 51.365421560427251 ], [ 3.691524048719108, 51.397689304636259 ], [ 3.559252566708294, 51.40617079723048 ], [ 3.557161549768937, 51.400756038246811 ], [ 3.557455127373607, 51.403026732682882 ], [ 3.550794123455657, 51.406037866584263 ], [ 3.529532950961302, 51.408533644574909 ], [ 3.514887520812625, 51.409149155241138 ], [ 3.503399554032997, 51.407831040650322 ], [ 3.498157563172117, 51.404347043648542 ], [ 3.491308093536419, 51.402536260276811 ], [ 3.482584373106291, 51.399561396551498 ], [ 3.474174945571483, 51.398290624452805 ], [ 3.465429316504594, 51.395880629064621 ], [ 3.455087270748477, 51.394859853961911 ], [ 3.448289088972418, 51.39191428250853 ], [ 3.4402422203258, 51.391213603442502 ], [ 3.43441672118235, 51.392532491861857 ], [ 3.429420328507438, 51.39244867335757 ], [ 3.422538853231468, 51.391483069161346 ], [ 3.40850297308877, 51.386996555818619 ], [ 3.394420423678407, 51.383640610330872 ], [ 3.379968190658662, 51.37999329713017 ], [ 3.37512306541173, 51.37651045141714 ], [ 3.372037029790278, 51.376740396269078 ], [ 3.372099519061516, 51.375325106019638 ], [ 3.362979615290705, 51.372900831156592 ], [ 3.375128334999776, 51.358947550353015 ], [ 3.373804328953779, 51.354109011290134 ], [ 3.374053877852316, 51.348447837533563 ], [ 3.383591695193146, 51.341247182669562 ], [ 3.385437344565296, 51.33419707911451 ], [ 3.358246896501118, 51.315030292822392 ], [ 3.376852178969844, 51.302322438913905 ], [ 3.37158200780222, 51.299965092042896 ], [ 3.368142565823026, 51.299622201497186 ], [ 3.365903837314942, 51.298166965667903 ], [ 3.366783426403053, 51.295632759325052 ], [ 3.371981071924491, 51.290907199582342 ], [ 3.378995431859396, 51.288478983692428 ], [ 3.380578905246361, 51.28737320124543 ], [ 3.380319609481448, 51.284535984073671 ], [ 3.381952527473178, 51.28229793969107 ], [ 3.380864368028993, 51.280862809061468 ], [ 3.375571561019817, 51.279071773940011 ], [ 3.375658646963412, 51.277090354745695 ], [ 3.378045776567007, 51.275148677456109 ], [ 3.387320236707187, 51.273608822256527 ], [ 3.39457755109268, 51.265518409432936 ], [ 3.396555412014355, 51.264135904014267 ], [ 3.401586823097675, 51.263088802540061 ], [ 3.405146318017751, 51.260600050358995 ], [ 3.406418437531441, 51.257788990921576 ], [ 3.411065734975887, 51.256734948089118 ], [ 3.416679691227024, 51.259946185045855 ], [ 3.418322115579265, 51.257424548695319 ], [ 3.421040988793389, 51.25662072376295 ], [ 3.42459892712492, 51.254131367663526 ], [ 3.425559254864624, 51.249615223177827 ], [ 3.427309807487976, 51.244545849645881 ], [ 3.432253824203753, 51.245478879146908 ], [ 3.44852399924941, 51.24150219463187 ], [ 3.465750587936306, 51.242071373784071 ], [ 3.527696570941728, 51.245911024604723 ], [ 3.528056720649206, 51.246483311332348 ], [ 3.523174212818363, 51.262834511838456 ], [ 3.515280151053153, 51.287068548285653 ], [ 3.529027578770373, 51.288705193318862 ], [ 3.533463800944876, 51.283393931480234 ], [ 3.538053649349478, 51.283750221943514 ], [ 3.542483813985044, 51.288069483087831 ], [ 3.543508788344685, 51.291201619367712 ], [ 3.549656284740299, 51.291015583215362 ], [ 3.553548080280145, 51.289660654870438 ], [ 3.558093456690703, 51.29114849365331 ], [ 3.559841410585389, 51.295424880961981 ], [ 3.562898487737331, 51.295756100495268 ], [ 3.566429296363864, 51.293828559671987 ], [ 3.571877396525559, 51.291930836487545 ], [ 3.571527580442577, 51.29107559613545 ], [ 3.576252966813294, 51.288033352560532 ], [ 3.579670799318158, 51.288936270040942 ], [ 3.581666463917587, 51.28698442548064 ], [ 3.583889243289963, 51.28900171305127 ], [ 3.583371828733669, 51.292392818631512 ], [ 3.587951858259369, 51.293030234632866 ], [ 3.581219548193736, 51.298307909917142 ], [ 3.585688650359152, 51.30177628875343 ], [ 3.590125059453638, 51.306093762907622 ], [ 3.590959048965323, 51.304407076615881 ], [ 3.612705870613765, 51.297942419278222 ], [ 3.618536128876549, 51.296048352910915 ], [ 3.621352178370008, 51.292692017177224 ], [ 3.625549245566607, 51.293322136473975 ], [ 3.639934857294629, 51.288440370547463 ], [ 3.643375575439563, 51.288775233967257 ], [ 3.644472177491489, 51.290207942323484 ], [ 3.658289514908534, 51.290130770428512 ], [ 3.676590122351886, 51.283036580629009 ], [ 3.677835668129255, 51.280505593842143 ], [ 3.682415866118033, 51.281139293078063 ], [ 3.690105802305971, 51.280685189706702 ], [ 3.694118268214898, 51.275928330916415 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0416\", \"naam\": \"Langedijk\", \"code\": \"0416\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.800554180146363, 52.660217903294118 ], [ 4.799713927897636, 52.663894728902939 ], [ 4.801646552478159, 52.667302075336039 ], [ 4.807147665551652, 52.670160536799351 ], [ 4.810271840295074, 52.673290387527395 ], [ 4.822152540559498, 52.67249795454368 ], [ 4.825303285142506, 52.673645478516498 ], [ 4.82724553482336, 52.67648613782174 ], [ 4.827195034688988, 52.680450000073513 ], [ 4.825968091983303, 52.683558866800581 ], [ 4.826669313105318, 52.690640906936274 ], [ 4.825405840702831, 52.696581077500682 ], [ 4.824131134543022, 52.7033706187636 ], [ 4.821704515687697, 52.707323190144074 ], [ 4.819306751970043, 52.709010663881628 ], [ 4.824421854612559, 52.711583285511523 ], [ 4.833897437328186, 52.713892881384758 ], [ 4.831877917380665, 52.716998098480829 ], [ 4.82632593161286, 52.717538367789125 ], [ 4.823964110337529, 52.716394628914458 ], [ 4.81368536579922, 52.714929820542878 ], [ 4.808929228137982, 52.71518996184637 ], [ 4.80498012996173, 52.714321271145451 ], [ 4.797383333151278, 52.719663687338709 ], [ 4.795391502639337, 52.720503246670802 ], [ 4.786669928299642, 52.721025872316972 ], [ 4.785462259761539, 52.722435514222703 ], [ 4.786576952787641, 52.727820946144611 ], [ 4.778999120973602, 52.731463399116215 ], [ 4.77823426030805, 52.729477458677387 ], [ 4.772438552100119, 52.718971204413222 ], [ 4.772850469224585, 52.717840737145764 ], [ 4.770233236400148, 52.70678439731595 ], [ 4.770692788787676, 52.702256387663432 ], [ 4.769552814121284, 52.698852680958439 ], [ 4.766397726048939, 52.697986816221039 ], [ 4.752158399374874, 52.697062240689412 ], [ 4.736769828229173, 52.693581325061025 ], [ 4.731636623529748, 52.692703705746176 ], [ 4.728887034599829, 52.691272770887849 ], [ 4.738891066661266, 52.683965755410043 ], [ 4.741707068790061, 52.680866396401534 ], [ 4.748013934458071, 52.682599353549286 ], [ 4.750788208195151, 52.682331072739963 ], [ 4.778967909278276, 52.676532284476764 ], [ 4.778239296360926, 52.67199813540617 ], [ 4.774373621806664, 52.66546579287445 ], [ 4.77794959262454, 52.664351553235669 ], [ 4.774887489621, 52.656973868012386 ], [ 4.772961344990589, 52.653282949597482 ], [ 4.77573755425227, 52.652730949318588 ], [ 4.773819418149237, 52.648473775225384 ], [ 4.800554180146363, 52.660217903294118 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0050\", \"naam\": \"Zeewolde\", \"code\": \"0050\", \"ligtInProvincieCode\": \"24\", \"ligtInProvincieNaam\": \"Flevoland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.476940796231787, 52.262377139931232 ], [ 5.522047372088008, 52.270546135665548 ], [ 5.53342532677907, 52.272797946047 ], [ 5.536182413699966, 52.276475701529243 ], [ 5.545261041602391, 52.293170864374467 ], [ 5.565818215500792, 52.332501854131756 ], [ 5.575712255545428, 52.350892278880906 ], [ 5.585572677154834, 52.35993743594522 ], [ 5.591087255684858, 52.363042871474661 ], [ 5.598555101970654, 52.363596090463204 ], [ 5.604840226208169, 52.363301525849167 ], [ 5.607980641085399, 52.362729374727351 ], [ 5.611500972843321, 52.359607933171112 ], [ 5.613871234357393, 52.362151900936915 ], [ 5.620560868349439, 52.36412104639836 ], [ 5.615095050166121, 52.370927661761343 ], [ 5.611964200974718, 52.373482133805162 ], [ 5.612368707217612, 52.375746680010295 ], [ 5.61753089061459, 52.385930649630552 ], [ 5.623156545555204, 52.408855784097625 ], [ 5.615683687904122, 52.408870446335939 ], [ 5.588949005028007, 52.411184338166791 ], [ 5.583050313301001, 52.411477408986016 ], [ 5.576352770204172, 52.408939844712215 ], [ 5.555461035744396, 52.396795413976584 ], [ 5.537333375945659, 52.384926964942224 ], [ 5.53300743875187, 52.384366050925365 ], [ 5.509457845375115, 52.397418233737248 ], [ 5.474900380401616, 52.420101847897733 ], [ 5.448169964092585, 52.435692481451369 ], [ 5.438733051813599, 52.442775967489659 ], [ 5.426918050137108, 52.435418380017609 ], [ 5.423767325909242, 52.43258779840626 ], [ 5.421012239638028, 52.432022300193758 ], [ 5.401333114005315, 52.421832533648441 ], [ 5.384809601566309, 52.414188029549138 ], [ 5.370257708346702, 52.407957311818819 ], [ 5.350598856061442, 52.400307526432456 ], [ 5.346277179773157, 52.396058685542918 ], [ 5.339986025117302, 52.396056352789401 ], [ 5.332518763956221, 52.393221526353322 ], [ 5.332912627608723, 52.392655382099676 ], [ 5.313658705484138, 52.385849109572646 ], [ 5.312872018816818, 52.386131782299721 ], [ 5.30108698925497, 52.381876366937931 ], [ 5.316831362917052, 52.368294900629628 ], [ 5.378534948153954, 52.314797164893008 ], [ 5.379320051227109, 52.313947718122364 ], [ 5.35381287818093, 52.30941262974055 ], [ 5.344786447811535, 52.309976083284809 ], [ 5.333400704232298, 52.314218972642742 ], [ 5.320069876338437, 52.305433991444275 ], [ 5.315366163719469, 52.302316390845718 ], [ 5.335391050595313, 52.290150613620533 ], [ 5.33970862397587, 52.287603906416102 ], [ 5.393048541999288, 52.255048771217488 ], [ 5.402845395906115, 52.249667632795635 ], [ 5.404804911932391, 52.249667354363808 ], [ 5.406764427928858, 52.249667043429916 ], [ 5.456158285287802, 52.258709916335235 ], [ 5.463216396120016, 52.260121426264774 ], [ 5.464395335331862, 52.2618196794702 ], [ 5.476159603029471, 52.26379358064878 ], [ 5.476940796231787, 52.262377139931232 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0546\", \"naam\": \"Leiden\", \"code\": \"0546\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.472782408363928, 52.118978747017849 ], [ 4.487464296173143, 52.127304258335514 ], [ 4.491343805518344, 52.12874975174433 ], [ 4.513403639353517, 52.139959696599171 ], [ 4.510650645285509, 52.140788839866971 ], [ 4.513722537089222, 52.143643529033689 ], [ 4.518760640124514, 52.145946247459918 ], [ 4.52420666080517, 52.14740216384866 ], [ 4.52090308271934, 52.156440007006609 ], [ 4.514954364578776, 52.160644014300644 ], [ 4.516028120734368, 52.165749348240254 ], [ 4.51514071538266, 52.171123378554931 ], [ 4.518606174222335, 52.173980821310266 ], [ 4.517785141506979, 52.175957093552633 ], [ 4.518446254726149, 52.182192099951777 ], [ 4.512946228749824, 52.18328424013832 ], [ 4.503527409343126, 52.184630039061105 ], [ 4.497669307068864, 52.184019657954096 ], [ 4.495820399243801, 52.178625123372925 ], [ 4.491970513129499, 52.175480903220958 ], [ 4.487610076838475, 52.178279637040085 ], [ 4.487247405569462, 52.176860926060463 ], [ 4.480930297955491, 52.1796444780123 ], [ 4.47858281133094, 52.179626428422694 ], [ 4.471644985237496, 52.174475395636719 ], [ 4.469688977046756, 52.174460204152581 ], [ 4.46738847694068, 52.172176775021001 ], [ 4.467044017811491, 52.169908567986312 ], [ 4.454106117252302, 52.171222924031433 ], [ 4.452991895251251, 52.168382200732935 ], [ 4.450680677124318, 52.166664734169878 ], [ 4.44842920834086, 52.162115784127167 ], [ 4.444210974978986, 52.158117464443144 ], [ 4.440354483776988, 52.15553785049584 ], [ 4.438838483440645, 52.153260137551577 ], [ 4.443283333358324, 52.146499177137194 ], [ 4.442916335127967, 52.145363470780971 ], [ 4.444581739821442, 52.140562521835705 ], [ 4.449657528288239, 52.140886170345524 ], [ 4.459247761896827, 52.149740954552975 ], [ 4.465509358220243, 52.149506853504541 ], [ 4.466933292653599, 52.137340735113298 ], [ 4.469336747492326, 52.13452754634811 ], [ 4.468986646693319, 52.132542477646027 ], [ 4.464401944621672, 52.127409231733118 ], [ 4.468286536834814, 52.128572335379069 ], [ 4.473074641178438, 52.123795282899025 ], [ 4.472782408363928, 52.118978747017849 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1709\", \"naam\": \"Moerdijk\", \"code\": \"1709\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.601419880239886, 51.625159178050758 ], [ 4.607941060754673, 51.628034847652543 ], [ 4.612574068774788, 51.628348814949696 ], [ 4.618395440038597, 51.626971179097339 ], [ 4.622684917359686, 51.624733639791977 ], [ 4.625786111186743, 51.624187450406588 ], [ 4.631578228895839, 51.624508203320239 ], [ 4.635801113719908, 51.62623462792066 ], [ 4.636536545035272, 51.628504988198387 ], [ 4.640359484817045, 51.631078293332536 ], [ 4.644974484775937, 51.632523678741236 ], [ 4.660399311453582, 51.634886126666089 ], [ 4.66504693008672, 51.634348489776464 ], [ 4.67086748928831, 51.632968242423388 ], [ 4.679375661335308, 51.632736808625886 ], [ 4.683992081414747, 51.634180657309741 ], [ 4.688977901714072, 51.636759340373374 ], [ 4.693599373257009, 51.637919633436248 ], [ 4.699011460186587, 51.637951582118454 ], [ 4.695445801486838, 51.643594623204478 ], [ 4.696940534004234, 51.647001882775776 ], [ 4.692678648509343, 51.647543078972909 ], [ 4.689124533678589, 51.652336388440446 ], [ 4.696824015708295, 51.654647670932384 ], [ 4.694060636850351, 51.658312977167427 ], [ 4.685038037625003, 51.666472091450238 ], [ 4.709697185702991, 51.673131016696196 ], [ 4.706546802253461, 51.676794371978879 ], [ 4.704620792400353, 51.676216757976874 ], [ 4.701856718918297, 51.679882239401067 ], [ 4.704556731890984, 51.680464412303159 ], [ 4.697479588562934, 51.687786195198633 ], [ 4.69522685407675, 51.683241677754722 ], [ 4.69292678869659, 51.681812055516069 ], [ 4.681221058843562, 51.68797252762225 ], [ 4.679308189354797, 51.686544970935707 ], [ 4.673076105932884, 51.689055960183765 ], [ 4.666924476206531, 51.686469469309522 ], [ 4.662162624738476, 51.693803356581903 ], [ 4.659407701957051, 51.696618297566374 ], [ 4.657380947413256, 51.702269737665496 ], [ 4.65692066709707, 51.70679810703615 ], [ 4.655339934459549, 51.708770659450494 ], [ 4.651057904772332, 51.710159845226691 ], [ 4.645101315515001, 51.719184745123712 ], [ 4.620397863287028, 51.714211243839365 ], [ 4.616927318011972, 51.713338870519216 ], [ 4.597312896093555, 51.705561777409144 ], [ 4.589222757685508, 51.703241317772203 ], [ 4.554883203362461, 51.696771855896486 ], [ 4.542533999975838, 51.694701015531614 ], [ 4.530556881540979, 51.69348120795717 ], [ 4.515091702854238, 51.692517459290542 ], [ 4.500373484221363, 51.692973359778392 ], [ 4.488717524728401, 51.695150188734424 ], [ 4.469660209830836, 51.699533786296932 ], [ 4.423380100580502, 51.709357678108113 ], [ 4.393529750019441, 51.693248488768482 ], [ 4.379424303514703, 51.683498770461959 ], [ 4.378770316815962, 51.678112113178123 ], [ 4.377279605442812, 51.675550356488543 ], [ 4.372383586482091, 51.669560564510718 ], [ 4.365142674219416, 51.664682960067275 ], [ 4.361700148633959, 51.662953577060129 ], [ 4.372700862760641, 51.655402679430843 ], [ 4.376263340644536, 51.651751734317621 ], [ 4.380928544768549, 51.650659083443436 ], [ 4.3883937487327, 51.645341987566326 ], [ 4.394991038714065, 51.644265253935799 ], [ 4.397341620362513, 51.642869096742075 ], [ 4.399348691670055, 51.639487507960311 ], [ 4.408773074333163, 51.632769592111003 ], [ 4.413447713659952, 51.631109313758415 ], [ 4.420797205366735, 51.630887031763592 ], [ 4.425078719427153, 51.629506256127549 ], [ 4.427499558663115, 51.624711539081034 ], [ 4.429872045460579, 51.622182070603067 ], [ 4.437707262065184, 51.617148113664626 ], [ 4.443544227068975, 51.615212862176641 ], [ 4.453226682247293, 51.614157720158957 ], [ 4.461720750263151, 51.614508437139413 ], [ 4.472885238785178, 51.616578699910669 ], [ 4.475942120080981, 51.61830181176456 ], [ 4.48131768484009, 51.620042818490148 ], [ 4.489449102310234, 51.619255867365247 ], [ 4.492971411102931, 51.617017165815881 ], [ 4.496140395705687, 51.61307641136834 ], [ 4.499672977629873, 51.610271170198573 ], [ 4.503966699292529, 51.608037992529866 ], [ 4.510175019893602, 51.606668657915684 ], [ 4.515577743498532, 51.606992250190771 ], [ 4.519038187211344, 51.607867611355644 ], [ 4.528948242232643, 51.61502095639085 ], [ 4.532398881189997, 51.616462262012853 ], [ 4.543196526335208, 51.617673489076246 ], [ 4.549336967080818, 51.619983287775781 ], [ 4.553154221916502, 51.622559430496906 ], [ 4.557316894370644, 51.627403555072426 ], [ 4.561537202821305, 51.629132653621767 ], [ 4.570792642551329, 51.630330421560465 ], [ 4.576600333694488, 51.629804383104336 ], [ 4.588270220905653, 51.625636545012362 ], [ 4.59447842919645, 51.624262737844518 ], [ 4.601419880239886, 51.625159178050758 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0917\", \"naam\": \"Heerlen\", \"code\": \"0917\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.02363168882556, 50.818356474321284 ], [ 6.026317128304117, 50.820324113832356 ], [ 6.024813716806985, 50.821465254671637 ], [ 6.022605034414176, 50.826575179124127 ], [ 6.025279213945157, 50.827693280113422 ], [ 6.018849491916977, 50.829711063630974 ], [ 6.016248365828977, 50.833973381877435 ], [ 6.0185738141237, 50.837359207213069 ], [ 6.015933813315885, 50.838789642193049 ], [ 6.017902682051155, 50.843876674415156 ], [ 6.015623038259537, 50.843889090338855 ], [ 6.011105691082824, 50.84702885679058 ], [ 6.008863887718406, 50.849873021470813 ], [ 6.006606663504904, 50.851584389873395 ], [ 6.000609085962641, 50.857846957260286 ], [ 6.008232982272925, 50.859505508904668 ], [ 6.007111726388404, 50.860927569865112 ], [ 6.01095448892634, 50.864022199804985 ], [ 6.020142825149452, 50.868786821649756 ], [ 6.017124782036372, 50.870502556157113 ], [ 6.015980459171383, 50.870225575107405 ], [ 6.015266242917125, 50.873627964465491 ], [ 6.010745979248323, 50.87676772426353 ], [ 6.009628192702791, 50.878472999166462 ], [ 6.008943817106212, 50.884140858756453 ], [ 6.008202272823654, 50.88556088724242 ], [ 5.998792484878964, 50.892974453745381 ], [ 5.996502958517395, 50.892420118799841 ], [ 5.994642151734849, 50.895545200923905 ], [ 5.994365844461062, 50.90347649510197 ], [ 5.990978926761713, 50.906326306968424 ], [ 5.993309897829911, 50.909995832450193 ], [ 6.003300577866121, 50.917306498540306 ], [ 6.005983336332787, 50.918708229096708 ], [ 6.012556194366632, 50.926319544420181 ], [ 6.011794958229601, 50.926323655237212 ], [ 5.975668510434822, 50.929061864278168 ], [ 5.971125838007556, 50.931067331258809 ], [ 5.961267370647968, 50.934231939190227 ], [ 5.954788746742451, 50.933697474673494 ], [ 5.946365766770619, 50.929773563900689 ], [ 5.945206722240426, 50.928363118895419 ], [ 5.941763985726287, 50.926963628232173 ], [ 5.938735861324629, 50.92839413736192 ], [ 5.930047669301895, 50.934099366144899 ], [ 5.928554777996581, 50.936655225938246 ], [ 5.918997967911, 50.933301041783956 ], [ 5.920120416659355, 50.931596634989077 ], [ 5.910552437333232, 50.927108982076142 ], [ 5.905226787677604, 50.927416150436137 ], [ 5.90101464167043, 50.925169272748455 ], [ 5.900608865392138, 50.922905418306783 ], [ 5.898328420523757, 50.923198720171385 ], [ 5.895629970811691, 50.920095332487406 ], [ 5.895994961192176, 50.918677694151377 ], [ 5.899401188337675, 50.916963425529318 ], [ 5.904351464798117, 50.917224613879569 ], [ 5.908137809201679, 50.915508387394162 ], [ 5.904310291778041, 50.913543107539255 ], [ 5.91644797939799, 50.91008973924577 ], [ 5.923624721702875, 50.905525371543455 ], [ 5.923231142149033, 50.904394366728404 ], [ 5.928510936450089, 50.900404880455866 ], [ 5.932268314998104, 50.896422334265793 ], [ 5.940545142411549, 50.888736434766059 ], [ 5.946201940480835, 50.88474432757404 ], [ 5.957087075757006, 50.873079686084779 ], [ 5.964609505364756, 50.866528588504458 ], [ 5.969469282144709, 50.859990435711225 ], [ 5.972456205981734, 50.855727235037854 ], [ 5.977331784137917, 50.850604705949202 ], [ 5.980722739470444, 50.848321681231774 ], [ 5.994700248340098, 50.84201848703092 ], [ 5.99772846663043, 50.841152906670459 ], [ 6.004894080241652, 50.837149916465513 ], [ 6.005243754061896, 50.834882379143529 ], [ 6.002926926760764, 50.832062660863059 ], [ 6.011648081219936, 50.830883033855585 ], [ 6.016896513124472, 50.82575679961748 ], [ 6.015730261124872, 50.823780688176186 ], [ 6.017974240857135, 50.821219583066764 ], [ 6.022136030312824, 50.820063955041405 ], [ 6.02363168882556, 50.818356474321284 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1525\", \"naam\": \"Teylingen\", \"code\": \"1525\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.497669307068864, 52.184019657954096 ], [ 4.503527409343126, 52.184630039061105 ], [ 4.512946228749824, 52.18328424013832 ], [ 4.518446254726149, 52.182192099951777 ], [ 4.52827718964256, 52.179715363724526 ], [ 4.538053132298395, 52.180069291983152 ], [ 4.543782767990113, 52.187473239151892 ], [ 4.542989402893351, 52.188033941346063 ], [ 4.546694516068529, 52.199104654272929 ], [ 4.557289351318706, 52.197763677789702 ], [ 4.555681444961778, 52.20001785100375 ], [ 4.559585264173142, 52.200611652965286 ], [ 4.561876226574645, 52.203742731509024 ], [ 4.55832143750975, 52.205416942521275 ], [ 4.55901495025805, 52.210235960313128 ], [ 4.554279629662553, 52.212184950433034 ], [ 4.557750783257181, 52.215041234832007 ], [ 4.558465447447183, 52.218727656502843 ], [ 4.554094336269356, 52.222095120174046 ], [ 4.547780291511232, 52.224599075863232 ], [ 4.539061600590614, 52.22991730292361 ], [ 4.530781578870422, 52.23268940837167 ], [ 4.524850981067067, 52.235478111851741 ], [ 4.529502806657399, 52.238060643172105 ], [ 4.527522112735711, 52.239178984860587 ], [ 4.530226389898484, 52.241180925898831 ], [ 4.52389731515222, 52.244249876642691 ], [ 4.526579838565191, 52.247384477279276 ], [ 4.52144177282266, 52.249612414661271 ], [ 4.517854144045495, 52.252701101161271 ], [ 4.513498853272211, 52.254934452741395 ], [ 4.501859790921969, 52.248900934856174 ], [ 4.468615935437671, 52.226558576361732 ], [ 4.465903608391136, 52.225121512358207 ], [ 4.47067328020362, 52.221760373024409 ], [ 4.470322458549882, 52.219775336501321 ], [ 4.464881107193072, 52.217750649442458 ], [ 4.464133144306991, 52.216045677076437 ], [ 4.466131950559205, 52.214078968044177 ], [ 4.462263485900711, 52.211783223752825 ], [ 4.462286995006453, 52.210650654364919 ], [ 4.455708133629654, 52.206917484426484 ], [ 4.462831224574122, 52.203292013110087 ], [ 4.460506050589064, 52.20214102995152 ], [ 4.463287242211048, 52.200180505533524 ], [ 4.467557887928011, 52.201912982341959 ], [ 4.476146481881872, 52.203112324413972 ], [ 4.478460565700001, 52.204829287787746 ], [ 4.480084071241199, 52.202009890831327 ], [ 4.486692866567545, 52.204325987406506 ], [ 4.487895828642977, 52.20291921699247 ], [ 4.491401834510328, 52.203795433876984 ], [ 4.493535133616827, 52.195032775509524 ], [ 4.48775006766118, 52.190741012802228 ], [ 4.491380270895545, 52.185388036192215 ], [ 4.489497874074934, 52.181692279644061 ], [ 4.494193078408114, 52.181727898353692 ], [ 4.495321581363492, 52.184001940830989 ], [ 4.497669307068864, 52.184019657954096 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0363\", \"naam\": \"Amsterdam\", \"code\": \"0363\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.955404020302359, 52.278330156559356 ], [ 4.960896791590518, 52.278066916614698 ], [ 4.962054281223817, 52.280053289698344 ], [ 4.966360030322033, 52.280918209551793 ], [ 4.967549898359366, 52.279506578372313 ], [ 4.969868307273915, 52.283196019412408 ], [ 4.975330129469704, 52.286330058582642 ], [ 4.983530733317322, 52.290322735938155 ], [ 4.997661805896268, 52.289237442402445 ], [ 5.001944607846381, 52.292932694231673 ], [ 5.001920072179189, 52.295764321874053 ], [ 5.003857170377835, 52.29860232200685 ], [ 5.005428912404533, 52.298324235164401 ], [ 5.008148632193408, 52.301447856539177 ], [ 5.014407284064282, 52.303733108422485 ], [ 5.021481654793531, 52.302339341980094 ], [ 5.017776257804159, 52.323282372533072 ], [ 5.01619661484575, 52.324410105966116 ], [ 4.997838335307593, 52.313873850701093 ], [ 4.997421035595249, 52.316704173379961 ], [ 4.989472443563326, 52.327721326637217 ], [ 4.983950559681196, 52.330534328994112 ], [ 4.978056211819768, 52.331080434239887 ], [ 4.975313169722112, 52.330504580067334 ], [ 4.970249136708111, 52.32623930462389 ], [ 4.967487766885638, 52.327645389439454 ], [ 4.952616740677412, 52.32277781939343 ], [ 4.947853064537285, 52.328140454251596 ], [ 4.944723658458399, 52.326996114021924 ], [ 4.940419564712671, 52.325564090534122 ], [ 4.93769454648791, 52.323288408468443 ], [ 4.940871875579798, 52.319619224040132 ], [ 4.939700048033154, 52.319048456725938 ], [ 4.938562562019663, 52.31507976154424 ], [ 4.935041855067563, 52.31393367454487 ], [ 4.936233604551817, 52.3125223698121 ], [ 4.92998649241048, 52.309383508637247 ], [ 4.929614481656538, 52.307399872160644 ], [ 4.93715041398713, 52.299499988781854 ], [ 4.946280796972096, 52.288773857377208 ], [ 4.952225312235253, 52.282566089041971 ], [ 4.955404020302359, 52.278330156559356 ] ], [ [ 4.949712799030356, 52.338624613508188 ], [ 4.954007408316636, 52.341188932190221 ], [ 4.959843430892539, 52.346873522582989 ], [ 4.964887258922056, 52.353404495568988 ], [ 4.969577008341466, 52.355969644726422 ], [ 4.974697004463348, 52.354571757189802 ], [ 4.99916584618139, 52.341628770980307 ], [ 5.00426372162875, 52.342494878705693 ], [ 5.008588422940369, 52.341942455508381 ], [ 5.012110860712006, 52.343369510452632 ], [ 5.01599785173136, 52.348195615588125 ], [ 5.039122267724139, 52.354495547101941 ], [ 5.037778832989304, 52.37544589841908 ], [ 5.067189169584985, 52.384590303228528 ], [ 5.079347469074563, 52.388586830450123 ], [ 5.074452201944019, 52.413775584104854 ], [ 5.065380483933637, 52.417149252408187 ], [ 5.063026422796442, 52.416293347518263 ], [ 5.057910486862744, 52.416562405861868 ], [ 5.049267062312678, 52.415122257696233 ], [ 5.042564512010528, 52.417085097881362 ], [ 5.035081329303264, 52.418195752604866 ], [ 5.029987837943687, 52.415632038238726 ], [ 5.029175938785722, 52.4187443856176 ], [ 5.021680460280948, 52.421269974092894 ], [ 5.018158601164588, 52.418993752357053 ], [ 5.000794940751848, 52.42516800524313 ], [ 4.990562753223338, 52.425417366297658 ], [ 4.987044725313805, 52.422857067807293 ], [ 4.982680821577141, 52.426806543295783 ], [ 4.973274782138315, 52.422809772614613 ], [ 4.947713360817372, 52.42158507661479 ], [ 4.943852903013412, 52.414208415414251 ], [ 4.935222345714417, 52.411910487434781 ], [ 4.930499492762401, 52.412175542304013 ], [ 4.915877015136173, 52.418631078398974 ], [ 4.913910081235423, 52.418623238400777 ], [ 4.905608947500905, 52.422270938455313 ], [ 4.89889586023318, 52.424508786964012 ], [ 4.889834068950272, 52.425603761416404 ], [ 4.878814299489647, 52.425840164347377 ], [ 4.875656895462493, 52.42667607319909 ], [ 4.87326329689197, 52.429497370154117 ], [ 4.866167311033086, 52.430599046584319 ], [ 4.862632604022872, 52.430017122971215 ], [ 4.862255902346459, 52.428599627599141 ], [ 4.857985229393752, 52.423766815621818 ], [ 4.859606171092747, 52.419809719948532 ], [ 4.856102966980005, 52.416679241040399 ], [ 4.848218416072472, 52.418059469450355 ], [ 4.767426082765862, 52.428424782812108 ], [ 4.767044513498847, 52.427573283718957 ], [ 4.739055195963446, 52.431104685406773 ], [ 4.72888145720236, 52.400749494962255 ], [ 4.756066012090937, 52.397216258953932 ], [ 4.758039992322828, 52.39666042179347 ], [ 4.758140459421289, 52.389581708484577 ], [ 4.759071127629545, 52.379392515498459 ], [ 4.756344086098149, 52.377678993189654 ], [ 4.758397487087259, 52.371460155050556 ], [ 4.755046477491079, 52.358416417604793 ], [ 4.757447748349034, 52.355314325641565 ], [ 4.771671658529447, 52.349442539597149 ], [ 4.790627217227708, 52.341893965611852 ], [ 4.798178688476378, 52.335135663394553 ], [ 4.815549693156122, 52.327858384962099 ], [ 4.818719307460759, 52.325608278620457 ], [ 4.826174331734197, 52.325927037088263 ], [ 4.839503962588837, 52.327405353240209 ], [ 4.839483011033417, 52.329104286782702 ], [ 4.848102805783436, 52.330559732588057 ], [ 4.855958258948299, 52.330312091311185 ], [ 4.856452376579876, 52.321819162819217 ], [ 4.896483964450163, 52.322558319835082 ], [ 4.901599298629908, 52.321446742418779 ], [ 4.907901088714733, 52.319490244201191 ], [ 4.909090802149618, 52.318362374454139 ], [ 4.912230788205146, 52.318375022569015 ], [ 4.914172176731499, 52.32036499659403 ], [ 4.91062130763565, 52.322049770618598 ], [ 4.910213574926446, 52.323463980965045 ], [ 4.913734393416155, 52.324610805095851 ], [ 4.912885790278158, 52.330553984160424 ], [ 4.921499378282513, 52.332853557950877 ], [ 4.923828548988746, 52.335411229910406 ], [ 4.928528646649707, 52.336562219112352 ], [ 4.936401973519459, 52.334610286399858 ], [ 4.949712799030356, 52.338624613508188 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0715\", \"naam\": \"Terneuzen\", \"code\": \"0715\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.005862277802393, 51.241809612482655 ], [ 4.003520549147058, 51.243197959001179 ], [ 3.99706670750368, 51.241138346338893 ], [ 3.993949803139074, 51.242800471390005 ], [ 3.99311455128507, 51.245056357685257 ], [ 3.994604284065878, 51.246490386971736 ], [ 3.993028401951252, 51.247887693126664 ], [ 3.987628831077233, 51.248955798145651 ], [ 3.987602882985409, 51.249805197097565 ], [ 3.982255058487146, 51.249174254146482 ], [ 3.982299663816676, 51.260221046785794 ], [ 3.97875452897984, 51.300681104913757 ], [ 3.978344717190676, 51.301525857022966 ], [ 3.972624841552399, 51.300323543775399 ], [ 3.957521004890438, 51.304670836827164 ], [ 3.953586558148555, 51.307738073788428 ], [ 3.954212044741013, 51.312277585274806 ], [ 3.956597130305668, 51.321937007032687 ], [ 3.961635254874352, 51.332761821930504 ], [ 3.95980776881786, 51.342086279036749 ], [ 3.959515825296606, 51.351429537849882 ], [ 3.955970427910628, 51.354218411519966 ], [ 3.954720455522228, 51.35731866294158 ], [ 3.957589626845006, 51.363868363867255 ], [ 3.957178846042179, 51.364713035361618 ], [ 3.942570800414356, 51.364816081210144 ], [ 3.924462931693014, 51.378185647648571 ], [ 3.808365645769376, 51.355710501589648 ], [ 3.775571644150594, 51.39208361749062 ], [ 3.738173501430129, 51.394676290617625 ], [ 3.691524048719108, 51.397689304636259 ], [ 3.693106915286461, 51.365421560427251 ], [ 3.69397398797975, 51.352404548661227 ], [ 3.689707405193913, 51.353475466822857 ], [ 3.687702863596765, 51.355712264086982 ], [ 3.682336424769958, 51.355350600457122 ], [ 3.682794447526037, 51.353374529576371 ], [ 3.659442428006128, 51.351047743364425 ], [ 3.659101240736637, 51.349909663179304 ], [ 3.654546708876576, 51.348425731425763 ], [ 3.647185913491089, 51.35001554330934 ], [ 3.649769984058898, 51.342689472458559 ], [ 3.644043044229142, 51.341754135702615 ], [ 3.653260646384572, 51.331694532017842 ], [ 3.657802761833927, 51.333461603312088 ], [ 3.660043134126126, 51.324997201371275 ], [ 3.663870568099526, 51.325337164105825 ], [ 3.666386596241954, 51.319709279869677 ], [ 3.684381578706978, 51.321106855551619 ], [ 3.686279421230223, 51.321701101676645 ], [ 3.689402287345943, 51.320330412118786 ], [ 3.703291275205233, 51.31854933695584 ], [ 3.712221567720579, 51.315845629173126 ], [ 3.703604014253362, 51.310056286303407 ], [ 3.706767176640155, 51.307552716945949 ], [ 3.706829586395106, 51.305854103875788 ], [ 3.704237743734867, 51.303267389738799 ], [ 3.705886751894983, 51.300175442049003 ], [ 3.704892094309007, 51.29591228285684 ], [ 3.706665565807219, 51.289423095457387 ], [ 3.703680740332239, 51.287113935297661 ], [ 3.698001411330046, 51.285048868220599 ], [ 3.701546595098031, 51.282550997401657 ], [ 3.698085003168811, 51.282784056822621 ], [ 3.694118268214898, 51.275928330916415 ], [ 3.709579026166718, 51.272753236585253 ], [ 3.718831765007593, 51.271470018003981 ], [ 3.72298710385281, 51.273229037448978 ], [ 3.730685581087218, 51.272489139954139 ], [ 3.751903170017848, 51.26910702767637 ], [ 3.752246088296828, 51.270244846671297 ], [ 3.755726649294783, 51.26944395425997 ], [ 3.762515015123334, 51.261891211644873 ], [ 3.769101108539787, 51.260000259838243 ], [ 3.772874063582529, 51.261752170130755 ], [ 3.773944171318118, 51.26403300405763 ], [ 3.778220350075214, 51.262392731302342 ], [ 3.785258486164045, 51.258524384885156 ], [ 3.795312173191961, 51.256113167561587 ], [ 3.789535616432555, 51.245837050201331 ], [ 3.788301452570327, 51.22627597327164 ], [ 3.789667511032868, 51.220063291916723 ], [ 3.789422677732438, 51.216094453487479 ], [ 3.79141609063914, 51.213855848482211 ], [ 3.797581763465575, 51.212807329104869 ], [ 3.799181958096573, 51.21084646576525 ], [ 3.804954416983162, 51.21007543570952 ], [ 3.80408117746777, 51.213179267398502 ], [ 3.810609900030979, 51.212701497910089 ], [ 3.821073749768227, 51.209160733268902 ], [ 3.826816744449601, 51.209237963996564 ], [ 3.834378251900045, 51.212171672785125 ], [ 3.836235268598677, 51.213895935836433 ], [ 3.842045663439988, 51.211990591476571 ], [ 3.845846045251815, 51.21289077685573 ], [ 3.849713019670639, 51.211809004210032 ], [ 3.852345889659111, 51.213260018395751 ], [ 3.856250548202543, 51.211045549420234 ], [ 3.859705959449477, 51.210807759610098 ], [ 3.87024885108123, 51.216327439939342 ], [ 3.882737056028178, 51.221021599484793 ], [ 3.888799876768577, 51.223082588919866 ], [ 3.89315118033571, 51.218889948563145 ], [ 3.889880225321438, 51.213466262464287 ], [ 3.877804152319938, 51.207928480071828 ], [ 3.879783603134052, 51.205971463782596 ], [ 3.884470530681956, 51.203199720210158 ], [ 3.886486538002068, 51.200110095427668 ], [ 3.894797629394509, 51.203616013031478 ], [ 3.89869024072916, 51.201683230875126 ], [ 3.905134071792278, 51.203748263963554 ], [ 3.911587593450103, 51.2055298162417 ], [ 3.914577667564933, 51.207833664168099 ], [ 3.918789219947561, 51.207886940107272 ], [ 3.91589117233679, 51.214648082867292 ], [ 3.918562582218399, 51.214965101071641 ], [ 3.919264998355973, 51.2169566584205 ], [ 3.925392125388189, 51.217033858037183 ], [ 3.929505536655117, 51.220201147862461 ], [ 3.933514793464681, 51.214586541437065 ], [ 3.935901955446114, 51.211783965352964 ], [ 3.9431236555951, 51.213573333206874 ], [ 3.942705064845559, 51.214701091629379 ], [ 3.954139893329454, 51.216542037920412 ], [ 3.959127016164275, 51.21632016337788 ], [ 3.961684412609331, 51.220316888950734 ], [ 3.963581725283851, 51.22090661228637 ], [ 3.964634049463965, 51.224035115097458 ], [ 3.979153712699664, 51.22534479695247 ], [ 3.986162930824113, 51.234209817207756 ], [ 3.988104349019908, 51.233383478286633 ], [ 3.992615303938691, 51.236270029887201 ], [ 3.999468540495758, 51.237768190359205 ], [ 4.000183385979443, 51.239476136830028 ], [ 4.005862277802393, 51.241809612482655 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0358\", \"naam\": \"Aalsmeer\", \"code\": \"0358\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.723770680376478, 52.216656962319476 ], [ 4.773171435404271, 52.240994308105883 ], [ 4.768418578254533, 52.244650824075357 ], [ 4.768375283817838, 52.247765552237503 ], [ 4.770695120399862, 52.250043098940523 ], [ 4.795248590035928, 52.260363008806685 ], [ 4.794852840509273, 52.260644202350775 ], [ 4.798343218483351, 52.263493406503265 ], [ 4.810711403767707, 52.277146803816606 ], [ 4.821169180934392, 52.287391625016511 ], [ 4.823875263251176, 52.290519465036354 ], [ 4.811546947978695, 52.30348609609775 ], [ 4.809948079794246, 52.30574369248437 ], [ 4.799017624006611, 52.301442229413119 ], [ 4.795516693985579, 52.299159371924944 ], [ 4.792461462414802, 52.292914206619734 ], [ 4.788203749488011, 52.288645091633917 ], [ 4.78004040487254, 52.283223122644415 ], [ 4.764056239343962, 52.276343729970854 ], [ 4.755853893442797, 52.274034796323782 ], [ 4.74646801143327, 52.272285233510338 ], [ 4.739868540471127, 52.267718442477637 ], [ 4.729713126238233, 52.265113789297601 ], [ 4.725042621270703, 52.262822292735017 ], [ 4.720790017976932, 52.258833896921466 ], [ 4.713006545597304, 52.255108429050516 ], [ 4.705298121196952, 52.246568828748202 ], [ 4.700243356031542, 52.243990933367805 ], [ 4.692816253127897, 52.24281479773569 ], [ 4.681899152941581, 52.239351968863978 ], [ 4.676499991959564, 52.233939182667356 ], [ 4.670282295384376, 52.230786621892264 ], [ 4.676626494262449, 52.226010879945697 ], [ 4.687183816877336, 52.227206643086987 ], [ 4.696117824054104, 52.232073317678314 ], [ 4.703534530881839, 52.233815554692704 ], [ 4.720792365947266, 52.232498272902959 ], [ 4.724326371918778, 52.231951797492357 ], [ 4.722924174186788, 52.220899907344382 ], [ 4.723770680376478, 52.216656962319476 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1729\", \"naam\": \"Gulpen-Wittem\", \"code\": \"1729\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.935941803665281, 50.757067156198374 ], [ 5.932927886482533, 50.758780680625449 ], [ 5.930276453222462, 50.759076390266145 ], [ 5.932189325733605, 50.760483406921473 ], [ 5.929940221939351, 50.762759651964224 ], [ 5.926160549106983, 50.763910183201567 ], [ 5.925431506350049, 50.766462439622494 ], [ 5.920532970990965, 50.769317232473412 ], [ 5.921716619262639, 50.773276644993068 ], [ 5.924015747967439, 50.775248422667268 ], [ 5.931224038325278, 50.775214686970287 ], [ 5.936112491176871, 50.771509868549593 ], [ 5.941050831874276, 50.772052699593431 ], [ 5.943719908262157, 50.773172692548719 ], [ 5.944960073061306, 50.781662908825204 ], [ 5.942029529512077, 50.790456433365939 ], [ 5.944360976330923, 50.794976519086426 ], [ 5.94627234605149, 50.796100110992128 ], [ 5.951558532491073, 50.793808748322412 ], [ 5.955008994426419, 50.79662390823723 ], [ 5.964951523365681, 50.802521959204725 ], [ 5.969112965185333, 50.801368241823148 ], [ 5.976730052940484, 50.803312073199436 ], [ 5.98017912756938, 50.805843289433241 ], [ 5.981354295404008, 50.808669328736457 ], [ 5.983646787065521, 50.809790347275239 ], [ 5.979531973335561, 50.814626048571533 ], [ 5.969304859638699, 50.81666047932768 ], [ 5.972020046392192, 50.821178090577966 ], [ 5.968612884120969, 50.822044907194872 ], [ 5.961840298143129, 50.827176520096778 ], [ 5.959571946300889, 50.828037399823721 ], [ 5.955484256725552, 50.83542096602325 ], [ 5.957010718799286, 50.835979865225212 ], [ 5.955912782756125, 50.839383762571195 ], [ 5.955957967633323, 50.843065237603049 ], [ 5.954852849095341, 50.84590274506656 ], [ 5.951419407335028, 50.844786725335027 ], [ 5.94685998460101, 50.844808890845087 ], [ 5.937690655187159, 50.840604815888149 ], [ 5.93312162634148, 50.839776865642122 ], [ 5.930095603795201, 50.840923946646512 ], [ 5.924868713412155, 50.848878172473363 ], [ 5.916888987569725, 50.848915012985046 ], [ 5.903171575019554, 50.845578577931128 ], [ 5.898970109672831, 50.84361481142821 ], [ 5.891361964706337, 50.842798628385424 ], [ 5.887988430339646, 50.847061387213685 ], [ 5.884951684043966, 50.847357709989112 ], [ 5.879619976086105, 50.846247721883401 ], [ 5.874683379629188, 50.846551852885248 ], [ 5.877669174117058, 50.841441513814608 ], [ 5.873834203834447, 50.838059253063449 ], [ 5.870400334923553, 50.836657631441206 ], [ 5.87117785831944, 50.838353613129406 ], [ 5.866242045853677, 50.8386573826199 ], [ 5.86585043958879, 50.837526182067236 ], [ 5.859351802667472, 50.83358803500122 ], [ 5.86159330502063, 50.829897182194522 ], [ 5.864185115613846, 50.823372783636273 ], [ 5.857697228340134, 50.820284123205333 ], [ 5.854670605267249, 50.821429229843041 ], [ 5.851230043715204, 50.819177455553749 ], [ 5.852734812917657, 50.817755375504007 ], [ 5.848909261880827, 50.814938673475652 ], [ 5.845114936198838, 50.815236979788452 ], [ 5.842406891593525, 50.810149988699251 ], [ 5.839344656410122, 50.807613168834266 ], [ 5.831762458170217, 50.808775416489972 ], [ 5.83023298735843, 50.807648472618197 ], [ 5.819578925349379, 50.805139998811974 ], [ 5.821068318110743, 50.802019162369298 ], [ 5.821774471156467, 50.796352414020127 ], [ 5.828170481232505, 50.790380872162565 ], [ 5.832708310217931, 50.788664227820313 ], [ 5.833068760864972, 50.786680403494444 ], [ 5.835725131435885, 50.786670117050747 ], [ 5.833805921094348, 50.784411917112791 ], [ 5.835299164345716, 50.781857289836921 ], [ 5.838331947590455, 50.781562276677661 ], [ 5.844333248619002, 50.774458554454519 ], [ 5.842433564909162, 50.774182855081655 ], [ 5.845052909248548, 50.770490835969362 ], [ 5.845002646826491, 50.765393349986681 ], [ 5.847961234438053, 50.757735052747201 ], [ 5.84905672698836, 50.753482604928706 ], [ 5.852127253076308, 50.757151939552664 ], [ 5.863571233611712, 50.763618995022654 ], [ 5.86889600491368, 50.765012926149751 ], [ 5.876108720483615, 50.765549017577769 ], [ 5.886398711617524, 50.770036270808795 ], [ 5.889384449939161, 50.765492035113908 ], [ 5.890084792875741, 50.760108082942494 ], [ 5.88966570161147, 50.756428237566851 ], [ 5.901744642589597, 50.751277329228948 ], [ 5.904822333240817, 50.755228447609284 ], [ 5.90824167863197, 50.755779475855107 ], [ 5.908984224355523, 50.754360093279679 ], [ 5.913550837028974, 50.755755390186422 ], [ 5.915434081544754, 50.75461396457662 ], [ 5.915006599459587, 50.750367832869586 ], [ 5.921465704486941, 50.751470941027186 ], [ 5.931008430820386, 50.756807295131509 ], [ 5.935941803665281, 50.757067156198374 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0203\", \"naam\": \"Barneveld\", \"code\": \"0203\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.531694857293188, 52.102329421782379 ], [ 5.541464988020318, 52.103732915548377 ], [ 5.543412152423548, 52.102031280227081 ], [ 5.546147408504344, 52.102310797520516 ], [ 5.545373211869387, 52.104294086123851 ], [ 5.550455498964174, 52.105419861104643 ], [ 5.546570361807538, 52.111371916850686 ], [ 5.550870011129022, 52.111932374778739 ], [ 5.553610142295385, 52.113344422748675 ], [ 5.561060016902712, 52.120129919892442 ], [ 5.561847087022286, 52.121544641950578 ], [ 5.565366342389741, 52.122105725908753 ], [ 5.567696146870299, 52.11842087329164 ], [ 5.567701872576997, 52.119836751569139 ], [ 5.570837290149892, 52.122097323877107 ], [ 5.577474544603206, 52.12067090299184 ], [ 5.584122618061908, 52.121792686701582 ], [ 5.589212996743089, 52.124049486581562 ], [ 5.59741976503046, 52.124035128277747 ], [ 5.601725351072205, 52.125443253893394 ], [ 5.606803100816475, 52.124867543884157 ], [ 5.61071399047198, 52.12542654428978 ], [ 5.61541529524226, 52.127682951201265 ], [ 5.622448738040069, 52.127385940949289 ], [ 5.638100911618892, 52.130751781792867 ], [ 5.643180416792188, 52.130457679654427 ], [ 5.654523641615723, 52.131848381263794 ], [ 5.65687396674676, 52.132692558932355 ], [ 5.661168350751987, 52.131833120982748 ], [ 5.665864034581245, 52.132671643962823 ], [ 5.669003528316901, 52.134646421852914 ], [ 5.675639496373011, 52.133214479381735 ], [ 5.679146272801582, 52.131506777895865 ], [ 5.683842258306544, 52.132344584755764 ], [ 5.68581554857676, 52.135171379222697 ], [ 5.688563276406307, 52.13686345161878 ], [ 5.692476233106931, 52.137419737031479 ], [ 5.701844166551557, 52.135412856447957 ], [ 5.717097438090422, 52.136503862121003 ], [ 5.717496725286099, 52.137635455892131 ], [ 5.721407987104945, 52.137907608788467 ], [ 5.720296532217124, 52.1461229112194 ], [ 5.743385156993992, 52.148604012756572 ], [ 5.76214644267204, 52.147696304002324 ], [ 5.774697804614918, 52.152186568921842 ], [ 5.785248287159543, 52.151301887770863 ], [ 5.809885902888571, 52.151499315659073 ], [ 5.809639664333684, 52.16679182352599 ], [ 5.801913770845103, 52.177296811838417 ], [ 5.811768045920504, 52.184907538586721 ], [ 5.799726065511447, 52.194578267042758 ], [ 5.796218965676802, 52.196289534666889 ], [ 5.791918425537327, 52.196870716758021 ], [ 5.788392995790204, 52.196599580659338 ], [ 5.750398893084899, 52.193607723717847 ], [ 5.741070414611549, 52.201848158145474 ], [ 5.730944460844338, 52.208674288661207 ], [ 5.727500687917112, 52.219161721473832 ], [ 5.74160608544713, 52.219969731042504 ], [ 5.743199799460343, 52.223363024822888 ], [ 5.738172888709165, 52.231590119940854 ], [ 5.730729860080582, 52.231612014557392 ], [ 5.729611288715729, 52.23897777012526 ], [ 5.72650277221466, 52.242384820596463 ], [ 5.718659768667205, 52.241557581247548 ], [ 5.715122894207565, 52.240151593834447 ], [ 5.710023143899654, 52.239316130285992 ], [ 5.693569179594441, 52.23964314938663 ], [ 5.683779575636257, 52.240517666494256 ], [ 5.681327581598556, 52.225232467521884 ], [ 5.670743087650619, 52.223842504595709 ], [ 5.665644263843668, 52.222721951688847 ], [ 5.63344643134822, 52.208068518985698 ], [ 5.634988932693939, 52.203817683339231 ], [ 5.625533899492569, 52.19279337631604 ], [ 5.619664369948823, 52.193088264771085 ], [ 5.618479869349074, 52.191108373352726 ], [ 5.616528771374275, 52.192244880324282 ], [ 5.617321802505979, 52.194225555259905 ], [ 5.607927883101031, 52.194243509055894 ], [ 5.607932092819828, 52.195093023380586 ], [ 5.601676173449635, 52.196520434911442 ], [ 5.600115853587623, 52.197655957398389 ], [ 5.595411909999777, 52.196248485671013 ], [ 5.589930580717621, 52.19597486087887 ], [ 5.587968329341111, 52.19484552198378 ], [ 5.58327379142332, 52.19541976784641 ], [ 5.577791426118212, 52.194862407410234 ], [ 5.575041934637705, 52.192601427894353 ], [ 5.576995313145411, 52.191748778444641 ], [ 5.577753869194977, 52.186084072767898 ], [ 5.566406071787043, 52.186385039266057 ], [ 5.564444838241704, 52.18525530697675 ], [ 5.565209404674048, 52.180723365947003 ], [ 5.567165882715863, 52.180720395795504 ], [ 5.568719528231465, 52.177886268758009 ], [ 5.565199222816146, 52.178174810806937 ], [ 5.554234011977742, 52.175642285583088 ], [ 5.548755466734798, 52.175366746522933 ], [ 5.542113094929984, 52.177924233427618 ], [ 5.534703313747206, 52.18529626783171 ], [ 5.530810038876769, 52.191530899663597 ], [ 5.529242668096589, 52.190966451086609 ], [ 5.521026111202001, 52.191825585692619 ], [ 5.512798053354447, 52.188719729141653 ], [ 5.500664963473457, 52.188448860208645 ], [ 5.494396995977481, 52.185906164608127 ], [ 5.485386756808763, 52.181666409003235 ], [ 5.484973685723608, 52.171755654838051 ], [ 5.480662560295767, 52.168077885413766 ], [ 5.479875474258106, 52.165813109928244 ], [ 5.478699067342527, 52.164398155935856 ], [ 5.472830673916111, 52.163836219734556 ], [ 5.4728268625043, 52.161853998520499 ], [ 5.47830270050691, 52.161849889481942 ], [ 5.482209784605546, 52.159864577368843 ], [ 5.48142456204199, 52.158449332916611 ], [ 5.484161655414508, 52.158163936078253 ], [ 5.483761349814876, 52.153916636648809 ], [ 5.481407794428587, 52.150520438258653 ], [ 5.485314995876987, 52.149101369887219 ], [ 5.496650385042212, 52.147392326549955 ], [ 5.498996411171051, 52.147390122961895 ], [ 5.497417689227526, 52.141444918479927 ], [ 5.502494942080564, 52.139457824912249 ], [ 5.507575565160627, 52.138886389208189 ], [ 5.514213304239673, 52.136047655540764 ], [ 5.511862333910508, 52.134067933095935 ], [ 5.512247663461213, 52.132085289520433 ], [ 5.504818888196838, 52.131243414260489 ], [ 5.501297499380328, 52.129830996484664 ], [ 5.497780546140196, 52.130117528514909 ], [ 5.49659478845612, 52.124738280135837 ], [ 5.494640758090075, 52.124740079630762 ], [ 5.495024718264294, 52.12190796038518 ], [ 5.496973049629977, 52.119640744175562 ], [ 5.505179038572797, 52.119632806630428 ], [ 5.503607865481089, 52.116519422492978 ], [ 5.507512915183837, 52.115665964823471 ], [ 5.507508333982337, 52.113966905877355 ], [ 5.503600477668142, 52.113687657392177 ], [ 5.498917637698718, 52.115957612604667 ], [ 5.495791114396763, 52.115677361147199 ], [ 5.487977216617347, 52.115967487776025 ], [ 5.486413039194792, 52.115402462406081 ], [ 5.491880523551229, 52.114265017880328 ], [ 5.493826651263963, 52.111148320579197 ], [ 5.500858298813867, 52.110858563342582 ], [ 5.50202743784476, 52.109724718826726 ], [ 5.50710164320493, 52.108020594405978 ], [ 5.510226140231559, 52.107734192827053 ], [ 5.515678222741791, 52.101781635511166 ], [ 5.51918948214893, 52.100361861025668 ], [ 5.52310747665232, 52.104321893695754 ], [ 5.525049245213879, 52.100638322998549 ], [ 5.531694857293188, 52.102329421782379 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1950\", \"naam\": \"Westerwolde\", \"code\": \"1950\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 7.092719584336533, 52.838320299892658 ], [ 7.087215452227783, 52.85000957862993 ], [ 7.104450912431891, 52.863921989574045 ], [ 7.181570607007696, 52.94151326184231 ], [ 7.209524414777083, 53.000558924857188 ], [ 7.217369376177977, 53.006952293861865 ], [ 7.213151748817683, 53.010981338577849 ], [ 7.199336315229148, 53.081419780139086 ], [ 7.202670242800178, 53.113367961834449 ], [ 7.183034013987268, 53.12187596639513 ], [ 7.185936907535747, 53.124380948890973 ], [ 7.183562616464971, 53.124982918332556 ], [ 7.180870600112093, 53.127571789509297 ], [ 7.178917245946509, 53.138361463891968 ], [ 7.182985158486962, 53.139999580461442 ], [ 7.185983278702085, 53.144768486333788 ], [ 7.189711113428042, 53.147827330154058 ], [ 7.189205769964792, 53.154914146446544 ], [ 7.183195441153496, 53.15472119540226 ], [ 7.176703402014724, 53.152552963836605 ], [ 7.174117268173937, 53.14806086793525 ], [ 7.145422255226592, 53.16066141594878 ], [ 7.143273216703701, 53.157011777164584 ], [ 7.139559297560319, 53.154234485441741 ], [ 7.1330808970194, 53.152346879654388 ], [ 7.125437504958301, 53.151325324356655 ], [ 7.111238743549609, 53.146433477647875 ], [ 7.108783460491416, 53.145052957435297 ], [ 7.101907947368883, 53.143169393584593 ], [ 7.097121363761849, 53.143520954916269 ], [ 7.089591562705743, 53.145327139898214 ], [ 7.080728800305119, 53.143753746776291 ], [ 7.070924075390741, 53.138511841553353 ], [ 7.060754781281463, 53.134123726855158 ], [ 7.0510089678542, 53.130295205571777 ], [ 7.048513117153052, 53.127781390065088 ], [ 7.035400464507055, 53.119467684553918 ], [ 7.034493719259431, 53.116648544860233 ], [ 7.02963443840023, 53.115016308223851 ], [ 7.025942084806589, 53.112518433163373 ], [ 7.028307202966841, 53.11163656506492 ], [ 7.030176195854781, 53.108213000154464 ], [ 7.033717983447501, 53.106748548072339 ], [ 7.042722520678734, 53.101810637691571 ], [ 7.037724612553515, 53.096499529691371 ], [ 7.015621856209711, 53.07188381641302 ], [ 7.019203743065763, 53.071551865515232 ], [ 7.029799166179468, 53.06659311439072 ], [ 7.033002842383814, 53.066832266452344 ], [ 7.034114330133095, 53.064551649939055 ], [ 7.054533460854956, 53.065967909749276 ], [ 7.060153690781014, 53.066738979171312 ], [ 7.060120979593491, 53.065889934198232 ], [ 7.06576317665383, 53.067226769478296 ], [ 7.076019150096428, 53.063967630788781 ], [ 7.079910732570907, 53.061364128372318 ], [ 7.080232564620728, 53.059377391026871 ], [ 7.077673062265578, 53.055166036493745 ], [ 7.076720937859734, 53.051215109778894 ], [ 7.075081071989389, 53.050105576004135 ], [ 7.06832063503693, 53.050767095675134 ], [ 7.069872655581497, 53.049612600925862 ], [ 7.067669875044984, 53.044263339145161 ], [ 7.070041397781241, 53.043663663406299 ], [ 7.080456922441902, 53.044649379335397 ], [ 7.086340942688776, 53.042017414653834 ], [ 7.086673415427558, 53.040313664309629 ], [ 7.083039417599259, 53.039232551352654 ], [ 7.083261551598659, 53.03469865964874 ], [ 7.080282411045786, 53.029926947879446 ], [ 7.082897189491467, 53.025359150872177 ], [ 7.088523724803023, 53.026411932934678 ], [ 7.091979210855896, 53.022964651334121 ], [ 7.097505452896024, 53.021469878577726 ], [ 7.100095624656433, 53.016335674352391 ], [ 7.072084363029372, 53.003707686203931 ], [ 7.071613185173161, 52.991537847036732 ], [ 7.070124934882175, 52.953046888029576 ], [ 7.064475644336063, 52.951144104508096 ], [ 7.063702534072883, 52.93104931928201 ], [ 7.036163411283995, 52.929167370102952 ], [ 7.033669373926519, 52.926370014130541 ], [ 7.02960573697818, 52.924160563016009 ], [ 7.027027272563299, 52.919098813940316 ], [ 7.045614701649903, 52.91601027407728 ], [ 7.014963698441735, 52.873105810364642 ], [ 7.04040475788737, 52.873039145277978 ], [ 7.043293776984347, 52.865353150844754 ], [ 7.046493495993148, 52.865875049038252 ], [ 7.051485626612727, 52.861274567962454 ], [ 7.052290891714836, 52.861546512489319 ], [ 7.062636504586478, 52.851490176618348 ], [ 7.065824560526691, 52.851728529191618 ], [ 7.068860177969569, 52.848004350069388 ], [ 7.076095737645633, 52.850167580368478 ], [ 7.076438174662912, 52.848746800144433 ], [ 7.072325095461881, 52.845123576877491 ], [ 7.072471209715256, 52.838608226661457 ], [ 7.092719584336533, 52.838320299892658 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1507\", \"naam\": \"Horst aan de Maas\", \"code\": \"1507\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.073205786875499, 51.395821576888466 ], [ 6.071748441077685, 51.401211097149314 ], [ 6.073359156226786, 51.406016161339991 ], [ 6.076872049461969, 51.409393925943533 ], [ 6.077804329509843, 51.42015030573544 ], [ 6.08166025310677, 51.420693818433278 ], [ 6.101648603938684, 51.419440217282499 ], [ 6.116684454305386, 51.42132957403598 ], [ 6.121984029134063, 51.415915326672796 ], [ 6.124658539925091, 51.414765603709277 ], [ 6.131198110826793, 51.414724054364001 ], [ 6.132718307228898, 51.413581505899771 ], [ 6.13545283081554, 51.416112871840376 ], [ 6.136931051529416, 51.412421652619258 ], [ 6.140872084801654, 51.394837238654191 ], [ 6.153195461674016, 51.395889738992985 ], [ 6.151709593155388, 51.399014806132989 ], [ 6.149164435042032, 51.407810980775857 ], [ 6.151201417810997, 51.41459468587621 ], [ 6.157451949468387, 51.420217756992649 ], [ 6.158298050646254, 51.424743522869356 ], [ 6.153876217743555, 51.436384275822036 ], [ 6.155135815448477, 51.44260659806578 ], [ 6.157493185935191, 51.445423148243528 ], [ 6.16492787648046, 51.452454053475563 ], [ 6.173510250083106, 51.458910343406892 ], [ 6.178229250990086, 51.464542638027346 ], [ 6.179063483863512, 51.468218705572561 ], [ 6.177621320228934, 51.473892675943638 ], [ 6.1708100310995, 51.481018846198879 ], [ 6.167040162877258, 51.485858652143946 ], [ 6.166713109764582, 51.489259344581598 ], [ 6.169214818919349, 51.500287756940757 ], [ 6.169263519202012, 51.503119518313973 ], [ 6.168536462430836, 51.505673264798169 ], [ 6.16550620971972, 51.508808799490808 ], [ 6.161704539408788, 51.511949372576538 ], [ 6.157878338776145, 51.513673939800569 ], [ 6.150582074989836, 51.515421118220601 ], [ 6.14483215165269, 51.517441022808768 ], [ 6.141009543762443, 51.519448216004172 ], [ 6.132016233062878, 51.511859324681012 ], [ 6.127046186305083, 51.514439789706273 ], [ 6.121965711927451, 51.510223762427131 ], [ 6.114709398063469, 51.514517308113717 ], [ 6.106671623373849, 51.518248799885214 ], [ 6.107492104180116, 51.521359015112701 ], [ 6.102887391396351, 51.522803359892002 ], [ 6.095543394527322, 51.521715312742742 ], [ 6.09363306277144, 51.522859710073327 ], [ 6.087086619861265, 51.52346554107546 ], [ 6.079751520590226, 51.522942860661978 ], [ 6.076692504584824, 51.52466019713377 ], [ 6.066649589744749, 51.523586238908024 ], [ 6.064607590008126, 51.515951551478757 ], [ 6.066416811850397, 51.508011279187684 ], [ 6.069813791793805, 51.50317696501525 ], [ 6.073933795236611, 51.495223027038726 ], [ 6.068051580824062, 51.48846053585838 ], [ 6.061865651992125, 51.487080426613716 ], [ 6.059189491620185, 51.488511896212074 ], [ 6.050352149439219, 51.490261678195616 ], [ 6.043773020715424, 51.488316433617321 ], [ 6.040690554997476, 51.488333733346792 ], [ 6.039891496094521, 51.486355765217489 ], [ 6.03601030576475, 51.484394966926111 ], [ 6.035604850307207, 51.482981192298276 ], [ 6.030167136869553, 51.479896016863641 ], [ 6.022454469252102, 51.479371845473992 ], [ 6.013173787584819, 51.476873150436468 ], [ 6.00701037382311, 51.476906050197215 ], [ 5.994275632531973, 51.475273767369764 ], [ 5.978804990370084, 51.47053875181264 ], [ 5.952911090897733, 51.463587068382601 ], [ 5.928200411545917, 51.458323403750612 ], [ 5.874934274069863, 51.446663753945025 ], [ 5.915619391900068, 51.402873093960046 ], [ 5.931171494253361, 51.384676437284504 ], [ 5.947300524807095, 51.383183999661227 ], [ 5.958000661989953, 51.378034374011946 ], [ 5.989139200342559, 51.378160873920287 ], [ 6.006074975563588, 51.379771391069781 ], [ 6.018795223195396, 51.382251998208972 ], [ 6.070121107214141, 51.395273276252553 ], [ 6.073205786875499, 51.395821576888466 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0889\", \"naam\": \"Beesel\", \"code\": \"0889\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.072826680140182, 51.242607698319325 ], [ 6.085551229746446, 51.247629758868847 ], [ 6.124321038657842, 51.27486195135004 ], [ 6.124750176283259, 51.277691341132055 ], [ 6.124403139426987, 51.279959227992947 ], [ 6.122878052892138, 51.280535302977896 ], [ 6.119882173076671, 51.285085579588213 ], [ 6.114574918281114, 51.289083825566827 ], [ 6.106938051287946, 51.291396994759523 ], [ 6.103057290333774, 51.288588830387134 ], [ 6.0935716718184, 51.295443838055128 ], [ 6.090872844845825, 51.294610558589319 ], [ 6.086281751422894, 51.295487858291125 ], [ 6.084777259190753, 51.297479354152522 ], [ 6.070904869485468, 51.293596748822686 ], [ 6.070103718588234, 51.291335778122196 ], [ 6.066996672130841, 51.288805086735756 ], [ 6.063160413209203, 51.288827435271202 ], [ 6.058577674846729, 51.290270012283408 ], [ 6.052798372790139, 51.288603959359001 ], [ 6.046231873112255, 51.285526037998515 ], [ 6.029945630432696, 51.273155967444204 ], [ 6.02834024332139, 51.268067071646797 ], [ 6.02563631503619, 51.266665900583817 ], [ 6.020639800580764, 51.265843591490537 ], [ 6.014512577187527, 51.266443213524539 ], [ 6.009516284823524, 51.265620426375627 ], [ 6.005628378222411, 51.261676248105879 ], [ 6.005969683024627, 51.258559142961104 ], [ 6.008634098639661, 51.257128896064678 ], [ 6.013215106394005, 51.255688286881046 ], [ 6.0162546882719, 51.253689426872249 ], [ 6.015832482243028, 51.250859625029591 ], [ 6.02004498859235, 51.250553569212791 ], [ 6.026130510334079, 51.247121788852489 ], [ 6.028023135159543, 51.245412121716811 ], [ 6.032646250388858, 51.247085806251832 ], [ 6.03838334554255, 51.246204194269389 ], [ 6.043378031556858, 51.247025745188701 ], [ 6.051508985872609, 51.252643767314773 ], [ 6.054184003287747, 51.252062037757007 ], [ 6.062916764933728, 51.246347433477709 ], [ 6.072826680140182, 51.242607698319325 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0448\", \"naam\": \"Texel\", \"code\": \"0448\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.144252644901232, 53.026091193633945 ], [ 5.095578577338109, 53.087135559264134 ], [ 5.050804646189787, 53.143357377577836 ], [ 4.818291951362585, 53.214389498860264 ], [ 4.818704910819578, 53.182966484735452 ], [ 4.715691571414791, 53.087873358406085 ], [ 4.686388101672205, 53.047218927632613 ], [ 4.687108388365182, 53.002489159441581 ], [ 4.612966320416003, 52.979381693369106 ], [ 4.613293258214619, 52.960980155392441 ], [ 4.646292074362315, 52.9410867650952 ], [ 4.74086292067043, 52.980141475355445 ], [ 4.791465093399684, 52.980404297182233 ], [ 4.876251650281505, 53.021849639610103 ], [ 4.9322559986729, 53.04415905213655 ], [ 5.006876384212918, 53.044419372189822 ], [ 5.074504178475847, 53.018285093562696 ], [ 5.144252644901232, 53.026091193633945 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0677\", \"naam\": \"Hulst\", \"code\": \"0677\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.236962842692232, 51.349684224392206 ], [ 4.22915174201315, 51.35470488856086 ], [ 4.220911361792417, 51.36142009286268 ], [ 4.214872270193324, 51.372122043738067 ], [ 4.211224105108788, 51.37944914148985 ], [ 4.20914161697289, 51.385659063609218 ], [ 4.206791302809409, 51.38733463794469 ], [ 4.197188470724932, 51.386953777896132 ], [ 4.189190305511246, 51.384039595035368 ], [ 4.181155756710953, 51.382540610654836 ], [ 4.175834754686007, 51.380219621496529 ], [ 4.168969435071177, 51.378165480985963 ], [ 4.162850573925056, 51.376968456808143 ], [ 4.146463526547524, 51.371697058538608 ], [ 4.140353863626175, 51.37021571169727 ], [ 4.130010117649221, 51.368971669942574 ], [ 4.118474903310498, 51.369129886698353 ], [ 4.102392412275411, 51.366971076482578 ], [ 4.114793323356137, 51.390898406552438 ], [ 4.047912263235291, 51.389865973818651 ], [ 4.019702744219191, 51.420127683826507 ], [ 3.963078586843509, 51.421999092492008 ], [ 3.924462931693014, 51.378185647648571 ], [ 3.942570800414356, 51.364816081210144 ], [ 3.957178846042179, 51.364713035361618 ], [ 3.957589626845006, 51.363868363867255 ], [ 3.954720455522228, 51.35731866294158 ], [ 3.955970427910628, 51.354218411519966 ], [ 3.959515825296606, 51.351429537849882 ], [ 3.95980776881786, 51.342086279036749 ], [ 3.961635254874352, 51.332761821930504 ], [ 3.956597130305668, 51.321937007032687 ], [ 3.954212044741013, 51.312277585274806 ], [ 3.953586558148555, 51.307738073788428 ], [ 3.957521004890438, 51.304670836827164 ], [ 3.972624841552399, 51.300323543775399 ], [ 3.978344717190676, 51.301525857022966 ], [ 3.97875452897984, 51.300681104913757 ], [ 3.982299663816676, 51.260221046785794 ], [ 3.982255058487146, 51.249174254146482 ], [ 3.987602882985409, 51.249805197097565 ], [ 3.987628831077233, 51.248955798145651 ], [ 3.993028401951252, 51.247887693126664 ], [ 3.994604284065878, 51.246490386971736 ], [ 3.99311455128507, 51.245056357685257 ], [ 3.993949803139074, 51.242800471390005 ], [ 3.99706670750368, 51.241138346338893 ], [ 4.003520549147058, 51.243197959001179 ], [ 4.005862277802393, 51.241809612482655 ], [ 4.014581781713616, 51.245028435226082 ], [ 4.021087617440816, 51.245388263106761 ], [ 4.0246542557918, 51.241464804759843 ], [ 4.032267314218574, 51.243253150632775 ], [ 4.036415522238103, 51.245567276555008 ], [ 4.040372355045567, 51.24136464304987 ], [ 4.054891516656232, 51.242948032517262 ], [ 4.061747817449508, 51.244442533163628 ], [ 4.063957035801216, 51.247583253044475 ], [ 4.071548272939872, 51.250218457476741 ], [ 4.070765516278673, 51.250776067662294 ], [ 4.076473731044604, 51.252256688757257 ], [ 4.078349586834666, 51.253693972195443 ], [ 4.093121312076657, 51.260090329482047 ], [ 4.159799069851244, 51.290268628724093 ], [ 4.166252098204406, 51.292885548280154 ], [ 4.236962842692232, 51.349684224392206 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1895\", \"naam\": \"Oldambt\", \"code\": \"1895\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 7.02963443840023, 53.115016308223851 ], [ 7.034493719259431, 53.116648544860233 ], [ 7.035400464507055, 53.119467684553918 ], [ 7.048513117153052, 53.127781390065088 ], [ 7.0510089678542, 53.130295205571777 ], [ 7.060754781281463, 53.134123726855158 ], [ 7.070924075390741, 53.138511841553353 ], [ 7.080728800305119, 53.143753746776291 ], [ 7.089591562705743, 53.145327139898214 ], [ 7.097121363761849, 53.143520954916269 ], [ 7.101907947368883, 53.143169393584593 ], [ 7.108783460491416, 53.145052957435297 ], [ 7.111238743549609, 53.146433477647875 ], [ 7.125437504958301, 53.151325324356655 ], [ 7.1330808970194, 53.152346879654388 ], [ 7.139559297560319, 53.154234485441741 ], [ 7.143273216703701, 53.157011777164584 ], [ 7.145422255226592, 53.16066141594878 ], [ 7.174117268173937, 53.14806086793525 ], [ 7.176703402014724, 53.152552963836605 ], [ 7.183195441153496, 53.15472119540226 ], [ 7.189205769964792, 53.154914146446544 ], [ 7.189311757971683, 53.157461066906201 ], [ 7.19100577884031, 53.159700929317502 ], [ 7.191100097226832, 53.161964853393926 ], [ 7.203716558370559, 53.176499058354189 ], [ 7.208929784999121, 53.176703126744506 ], [ 7.215367277676187, 53.177454643766602 ], [ 7.227502852911739, 53.180383843153038 ], [ 7.208229617386879, 53.188606785134553 ], [ 7.211598394424575, 53.192519914631433 ], [ 7.216533013113976, 53.195559578022703 ], [ 7.217429361401395, 53.197811235061813 ], [ 7.216946842740538, 53.214808536705512 ], [ 7.211746592512629, 53.224515314762471 ], [ 7.2103115506657, 53.228501413954994 ], [ 7.21270308489262, 53.228181892446884 ], [ 7.18777796870086, 53.332193844568721 ], [ 7.171751052446467, 53.333282293442878 ], [ 7.132753010305292, 53.332722308460568 ], [ 7.111023057140216, 53.331903295307107 ], [ 7.101318005669032, 53.330343200317685 ], [ 7.100507694268903, 53.30996816850103 ], [ 7.134152454513856, 53.28796424758459 ], [ 7.135023356977135, 53.279740147800538 ], [ 7.113476828860143, 53.262779471978661 ], [ 7.084276709078296, 53.254701187455048 ], [ 7.07646129770793, 53.249714678312813 ], [ 7.07961225566348, 53.248254534644992 ], [ 7.067357346636648, 53.242480496808973 ], [ 7.059561744543257, 53.248252393196459 ], [ 7.057524948372079, 53.247431298609477 ], [ 7.041537199291237, 53.259261827923289 ], [ 7.038709268103318, 53.258734462651887 ], [ 7.037138146117041, 53.259605509745363 ], [ 7.031786278814016, 53.255998006575538 ], [ 7.022892107109444, 53.254137475438348 ], [ 7.021657411941222, 53.253304846846788 ], [ 7.013115884650839, 53.260782662520768 ], [ 7.012704312966743, 53.260505088226658 ], [ 7.013339759187041, 53.266725711748094 ], [ 6.995295971690745, 53.266968708093678 ], [ 6.968561743489658, 53.259962008544839 ], [ 6.952391670957987, 53.256493025322754 ], [ 6.946092270760536, 53.248646962511422 ], [ 6.945528061791524, 53.244123981419015 ], [ 6.942651314124588, 53.242179283599029 ], [ 6.93751261034575, 53.244227772310126 ], [ 6.928432993224646, 53.236982960628822 ], [ 6.923304288494529, 53.239313859187561 ], [ 6.921691313066359, 53.23905134796113 ], [ 6.91624139410185, 53.243651185838957 ], [ 6.911412152413225, 53.24314632024641 ], [ 6.910010291624372, 53.237501261017783 ], [ 6.908678566720073, 53.23383729166305 ], [ 6.912776273803668, 53.225007816148697 ], [ 6.920077390760155, 53.227463072453375 ], [ 6.925474510475667, 53.221447964629924 ], [ 6.922640394592436, 53.22063482913795 ], [ 6.926834811404825, 53.214635021775521 ], [ 6.929577730675162, 53.212900913651417 ], [ 6.920566284690766, 53.207353506357592 ], [ 6.924490128632472, 53.205038114165013 ], [ 6.918253458177268, 53.198605504121595 ], [ 6.916942285414873, 53.195507616624589 ], [ 6.925308841449638, 53.194268023230407 ], [ 6.922776353511227, 53.190619553263737 ], [ 6.918803614118482, 53.191519797844556 ], [ 6.915891581626066, 53.188442327997869 ], [ 6.913700549933097, 53.183090428450441 ], [ 6.911639668166258, 53.18141775758879 ], [ 6.911539972289449, 53.178587542634219 ], [ 6.913080777701583, 53.176869053324126 ], [ 6.91182049536908, 53.175186193603622 ], [ 6.908999621748382, 53.174655733604951 ], [ 6.907739562933418, 53.172972828974459 ], [ 6.912110947666772, 53.172067862537432 ], [ 6.90803029603722, 53.169854504543721 ], [ 6.903110279610932, 53.16651903089052 ], [ 6.929214733656566, 53.16901759544016 ], [ 6.929883776029341, 53.165328031771899 ], [ 6.942335934481815, 53.166582896654496 ], [ 6.943105528076027, 53.165723456562944 ], [ 6.943661427481755, 53.158920598381336 ], [ 6.950461126376282, 53.158832110091495 ], [ 6.954687213247215, 53.142920326832282 ], [ 6.954461969954386, 53.136693876067547 ], [ 6.955661298750506, 53.136678182658812 ], [ 6.960826487254915, 53.124717922894561 ], [ 6.960016887748065, 53.124445398889776 ], [ 6.965968250575915, 53.112191363173856 ], [ 6.965117659500103, 53.110786784551578 ], [ 6.967135960976147, 53.111326492266521 ], [ 6.979812714412364, 53.119087022878858 ], [ 6.982609982653552, 53.119049798618107 ], [ 6.987700414265323, 53.11615030669951 ], [ 7.028079020674864, 53.116170271415676 ], [ 7.02963443840023, 53.115016308223851 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0590\", \"naam\": \"Papendrecht\", \"code\": \"0590\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.729584471259045, 51.822207149589147 ], [ 4.732252212082677, 51.825620426345786 ], [ 4.74135368256662, 51.840680253530877 ], [ 4.742902910771359, 51.840971961362726 ], [ 4.743266946635402, 51.842673133357174 ], [ 4.73898302045964, 51.843499147719086 ], [ 4.737384711322361, 51.846605466928104 ], [ 4.715323705987554, 51.841383767205457 ], [ 4.705615623071529, 51.841327809695834 ], [ 4.690012627263235, 51.845767344517476 ], [ 4.683366264397845, 51.848559662102403 ], [ 4.681812730192928, 51.848550339526049 ], [ 4.680321417531198, 51.844576609890247 ], [ 4.672648777923647, 51.838583015832441 ], [ 4.672675724880309, 51.836883993469407 ], [ 4.670038884602237, 51.83177035237631 ], [ 4.669334588373893, 51.827234877845051 ], [ 4.670557723693594, 51.823560775273705 ], [ 4.67176717475509, 51.820736170808871 ], [ 4.676041218838928, 51.820478948076889 ], [ 4.685352210050828, 51.820818194756733 ], [ 4.695417911140416, 51.822577141147924 ], [ 4.707442367048005, 51.823213791454322 ], [ 4.714041208647267, 51.823251822655998 ], [ 4.729584471259045, 51.822207149589147 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0352\", \"naam\": \"Wijk bij Duurstede\", \"code\": \"0352\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.391063099682686, 51.970739202736901 ], [ 5.391842301752616, 51.973287822334541 ], [ 5.394958395458709, 51.974420386315273 ], [ 5.394179627737576, 51.975836351569505 ], [ 5.38755798390101, 51.976402933274088 ], [ 5.378207758288212, 51.986030819240817 ], [ 5.39963617102871, 51.988012754327748 ], [ 5.415226271661687, 51.996788706009767 ], [ 5.398860898669315, 52.003021493767065 ], [ 5.381712217692709, 52.002172421261555 ], [ 5.355981686464592, 52.013495713511055 ], [ 5.348571641158395, 52.017174883704783 ], [ 5.344280120022409, 52.020288397307716 ], [ 5.341550854069058, 52.020287374259738 ], [ 5.323612073939024, 52.022827706161458 ], [ 5.314637116192741, 52.027070244740308 ], [ 5.291279836048148, 52.008363584585751 ], [ 5.288157759315363, 52.010060093976179 ], [ 5.279970486445677, 52.010619294175932 ], [ 5.275694530734276, 52.005801233485258 ], [ 5.275702971314455, 52.002403056072261 ], [ 5.277657194498377, 52.000139430941864 ], [ 5.272206926320148, 51.997868779752906 ], [ 5.268698135183263, 51.998431668042159 ], [ 5.266354572492395, 52.000411564253412 ], [ 5.264787963619535, 52.003241769729499 ], [ 5.259727697259519, 52.000970945906786 ], [ 5.243366455262033, 51.998686647844011 ], [ 5.245323938414541, 51.995857196150347 ], [ 5.256241641033027, 51.993604378053099 ], [ 5.253517377729542, 51.992468587399614 ], [ 5.254315960420303, 51.985956285818595 ], [ 5.271470592324602, 51.981160277279386 ], [ 5.266420091939851, 51.976057909501947 ], [ 5.256307686434548, 51.970949803074049 ], [ 5.260987638628858, 51.968689442905251 ], [ 5.270343183325399, 51.965300893448813 ], [ 5.27501901229284, 51.964172705080465 ], [ 5.285146811577634, 51.962765996926251 ], [ 5.296829800015865, 51.962209171212081 ], [ 5.303452070959613, 51.960798145648305 ], [ 5.314752244466528, 51.955708325130765 ], [ 5.321761491321297, 51.954862873117371 ], [ 5.333049240937338, 51.957134068642247 ], [ 5.338107966240752, 51.959684936517228 ], [ 5.347056885099886, 51.967051092603505 ], [ 5.354843300896224, 51.970168498762945 ], [ 5.361853097053467, 51.971019758458489 ], [ 5.376263785061764, 51.969322861662995 ], [ 5.383273926522488, 51.969323294936096 ], [ 5.391063099682686, 51.970739202736901 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0279\", \"naam\": \"Scherpenzeel\", \"code\": \"0279\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.496074740925467, 52.071784479790786 ], [ 5.499976744655979, 52.071214445195089 ], [ 5.501934254600085, 52.073477985740197 ], [ 5.504666761117589, 52.073475289103229 ], [ 5.505066084943612, 52.076873038550865 ], [ 5.509360349095642, 52.076868658268175 ], [ 5.509756952032646, 52.079133677538451 ], [ 5.519517133676926, 52.079123107209256 ], [ 5.522635239702578, 52.077420485783165 ], [ 5.526940182608477, 52.080813600462058 ], [ 5.531240300195865, 52.082507489481351 ], [ 5.531634399005112, 52.083639721880722 ], [ 5.526562128597165, 52.084778552387256 ], [ 5.530873543633632, 52.089870583977152 ], [ 5.537117753954911, 52.088730082427887 ], [ 5.53830263791001, 52.092693066886426 ], [ 5.535179372759995, 52.092980212929753 ], [ 5.538705651548344, 52.09637386762973 ], [ 5.539101025256423, 52.097789249395994 ], [ 5.532859295512572, 52.100062562655317 ], [ 5.531694857293188, 52.102329421782379 ], [ 5.525049245213879, 52.100638322998549 ], [ 5.52310747665232, 52.104321893695754 ], [ 5.51918948214893, 52.100361861025668 ], [ 5.515678222741791, 52.101781635511166 ], [ 5.510226140231559, 52.107734192827053 ], [ 5.50710164320493, 52.108020594405978 ], [ 5.50202743784476, 52.109724718826726 ], [ 5.500858298813867, 52.110858563342582 ], [ 5.493826651263963, 52.111148320579197 ], [ 5.484437811425509, 52.105492902630168 ], [ 5.485205403508351, 52.099262355231595 ], [ 5.48480924575729, 52.096714082947855 ], [ 5.485974035497052, 52.093598151898945 ], [ 5.475032394938809, 52.090208691442413 ], [ 5.464086070080784, 52.083136896892142 ], [ 5.459789356819308, 52.082006913899335 ], [ 5.459396174987384, 52.080308084185845 ], [ 5.465639380294914, 52.078321833458197 ], [ 5.4668060372954, 52.075772439761295 ], [ 5.483969184105134, 52.069529628771321 ], [ 5.49060927721342, 52.071506232469837 ], [ 5.496074740925467, 52.071784479790786 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0289\", \"naam\": \"Wageningen\", \"code\": \"0289\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.665914409330522, 51.952851185713769 ], [ 5.669814600058151, 51.95397461274672 ], [ 5.674893856057788, 51.956794142527649 ], [ 5.68191684854979, 51.959042224320932 ], [ 5.701017201976, 51.962107818729244 ], [ 5.709589771445052, 51.962934175478779 ], [ 5.717379688706061, 51.963195737675484 ], [ 5.722448156546275, 51.964030948421154 ], [ 5.720911620286315, 51.966867176061612 ], [ 5.71779621455657, 51.966875978803742 ], [ 5.713520770596096, 51.968020666464831 ], [ 5.714703552990527, 51.969999674535899 ], [ 5.718631566271804, 51.974519629947757 ], [ 5.717858846395067, 51.975371361150771 ], [ 5.72140233193416, 51.980458672796019 ], [ 5.716734051311707, 51.981321403743834 ], [ 5.724282438370222, 52.000839740109853 ], [ 5.689557090411355, 51.994987275913338 ], [ 5.682925209045765, 51.993871404321879 ], [ 5.682915865962274, 51.992455507938523 ], [ 5.675503423071201, 51.991057994912829 ], [ 5.672402544930608, 51.993614211764601 ], [ 5.669682069191342, 51.994753513504826 ], [ 5.664223195594005, 51.994200132503522 ], [ 5.663059431257157, 51.995052419433748 ], [ 5.655255821693141, 51.993371364992541 ], [ 5.654096968158811, 51.995073102779642 ], [ 5.645514373806147, 51.993393168311471 ], [ 5.64512797557925, 51.993960383645003 ], [ 5.637323645988785, 51.991994958986616 ], [ 5.633056181024708, 51.99540216088468 ], [ 5.627587043652888, 51.992864818515251 ], [ 5.624871481574963, 51.995135805917371 ], [ 5.619402839300844, 51.992598082730858 ], [ 5.614373257246604, 51.99968748772384 ], [ 5.60695758367601, 51.997436116533613 ], [ 5.606161587193565, 51.994039403977141 ], [ 5.610056824507374, 51.993748902079645 ], [ 5.613936248667371, 51.990343284747951 ], [ 5.615066267423887, 51.982695143273553 ], [ 5.620102665852079, 51.977304779175356 ], [ 5.625928861041936, 51.974178065986351 ], [ 5.624740881392195, 51.970499077518284 ], [ 5.619660285293549, 51.967111023397322 ], [ 5.625074757719204, 51.960020574530802 ], [ 5.627383675522601, 51.954918550700484 ], [ 5.627370030665197, 51.952369913431234 ], [ 5.619968873364607, 51.951535252701774 ], [ 5.620340509513893, 51.948136294637301 ], [ 5.616453637596884, 51.949276683392007 ], [ 5.605912812675376, 51.943066704911722 ], [ 5.610190035013171, 51.942209108334723 ], [ 5.619137579271976, 51.941342228301842 ], [ 5.628843353842402, 51.936791696553421 ], [ 5.63429013663456, 51.936497180941515 ], [ 5.637406610864687, 51.93705695636028 ], [ 5.640140371876304, 51.938750216807748 ], [ 5.645233952934444, 51.944686038850598 ], [ 5.64524535172756, 51.946668312302471 ], [ 5.649546996690608, 51.950057011882407 ], [ 5.646046726674369, 51.950631145096587 ], [ 5.644110020950032, 51.952334506874919 ], [ 5.648791547388639, 51.954023290007264 ], [ 5.653852657430001, 51.954011914914211 ], [ 5.659685516421136, 51.952865793736969 ], [ 5.665914409330522, 51.952851185713769 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0944\", \"naam\": \"Mook en Middelaar\", \"code\": \"0944\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.938176936701066, 51.741477468955388 ], [ 5.93275917133241, 51.74206921530066 ], [ 5.930074067411511, 51.744347261786757 ], [ 5.930876339704932, 51.746609115884027 ], [ 5.933218559755591, 51.748014208350831 ], [ 5.915441931826912, 51.752343641184275 ], [ 5.913152828700381, 51.755469095368795 ], [ 5.913580051527219, 51.758865529712295 ], [ 5.9112937790052, 51.762274127058873 ], [ 5.905518031448837, 51.76569816091488 ], [ 5.89977036165743, 51.771670541748286 ], [ 5.893248780098864, 51.777929170647148 ], [ 5.887438252387639, 51.778520499527296 ], [ 5.879666939562592, 51.777137430313445 ], [ 5.869572513337814, 51.776046624641459 ], [ 5.868015388376998, 51.775486632719286 ], [ 5.867191642677974, 51.77095889386716 ], [ 5.867543190722285, 51.767559116046897 ], [ 5.86943023456536, 51.762737052741059 ], [ 5.864336787682951, 51.757660389348885 ], [ 5.869360644039492, 51.756223850688023 ], [ 5.876682075935106, 51.752228761835347 ], [ 5.880517513253207, 51.748531134436966 ], [ 5.880471101421081, 51.744283393543476 ], [ 5.883502610069439, 51.738040280208892 ], [ 5.885333632107088, 51.728403836847107 ], [ 5.886470679331715, 51.726133424400381 ], [ 5.893785728499249, 51.722137262663111 ], [ 5.899572867172797, 51.720129711442773 ], [ 5.911939842032561, 51.717809379839892 ], [ 5.919297969609198, 51.71777618144214 ], [ 5.921281176740022, 51.721731917182531 ], [ 5.928704420592775, 51.727078582584831 ], [ 5.934209597999919, 51.733849738260147 ], [ 5.933458759803994, 51.735835621646338 ], [ 5.934669089682874, 51.739794730735305 ], [ 5.938176936701066, 51.741477468955388 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0344\", \"naam\": \"Utrecht\", \"code\": \"0344\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.062726944374978, 52.026928969634781 ], [ 5.063096413795448, 52.02976181510747 ], [ 5.064109116801463, 52.051569632670663 ], [ 5.067956241651875, 52.059226021940326 ], [ 5.070669831964016, 52.061781974076929 ], [ 5.075739168282166, 52.062361843425379 ], [ 5.081600758274385, 52.06124446455803 ], [ 5.089799722367236, 52.060699078370313 ], [ 5.095276049768576, 52.058730503443691 ], [ 5.09722167851304, 52.059584850298073 ], [ 5.101938757312541, 52.054215921120253 ], [ 5.104306709302287, 52.049973909710232 ], [ 5.107427909136194, 52.049981361803454 ], [ 5.109345282687026, 52.055366342346296 ], [ 5.111278821052553, 52.05820269591355 ], [ 5.117922811436565, 52.056518978491184 ], [ 5.121838308946973, 52.054262412182659 ], [ 5.126907459628969, 52.054840079787382 ], [ 5.145258782574065, 52.052613736506942 ], [ 5.153040059060256, 52.05687716540087 ], [ 5.157715340879803, 52.058302264249711 ], [ 5.156908682568081, 52.063397938731185 ], [ 5.159620411852117, 52.067367728491291 ], [ 5.156489233871167, 52.069060722515154 ], [ 5.155696884546544, 52.071324609378024 ], [ 5.160736892068509, 52.078130713896059 ], [ 5.160723996656126, 52.080679305313282 ], [ 5.163079273552525, 52.078135189840019 ], [ 5.166990209550519, 52.076726661205306 ], [ 5.171665283123804, 52.078717557277415 ], [ 5.179477272751018, 52.07788204031975 ], [ 5.181437058334774, 52.076186399549819 ], [ 5.193141109225155, 52.077905320030986 ], [ 5.195095517569537, 52.07734216152852 ], [ 5.192715034943441, 52.086116815054339 ], [ 5.189590047112717, 52.086394799044832 ], [ 5.186046546163019, 52.092901922964998 ], [ 5.180571331998977, 52.094591529993423 ], [ 5.180577870682984, 52.093175647648167 ], [ 5.170810550147018, 52.09400766735623 ], [ 5.166906588007076, 52.093717260709504 ], [ 5.160652324639013, 52.094838127600568 ], [ 5.156337358188558, 52.098511084336032 ], [ 5.16176116496485, 52.10730011013716 ], [ 5.150412780722139, 52.110959192597988 ], [ 5.148830422750112, 52.114637321588916 ], [ 5.149198527224735, 52.118885734348964 ], [ 5.146846398873773, 52.120296854904815 ], [ 5.140589474486425, 52.121133474970705 ], [ 5.126501868849308, 52.124501319533039 ], [ 5.106906771859953, 52.133234902888987 ], [ 5.103410460243132, 52.129828412433007 ], [ 5.101065376878121, 52.129822748222345 ], [ 5.087345832178006, 52.135735410671252 ], [ 5.076070915225242, 52.126927698215063 ], [ 5.07217468258383, 52.125218287941927 ], [ 5.070206592119616, 52.127195264126868 ], [ 5.067088120624232, 52.126054129707818 ], [ 5.061250710325343, 52.122640002170797 ], [ 5.047517352271001, 52.129963897335053 ], [ 5.040908074535699, 52.125413822851492 ], [ 5.03355222005539, 52.116613448248906 ], [ 5.032768515641696, 52.1168942749621 ], [ 5.015098374362783, 52.127317481692621 ], [ 5.011161552908469, 52.130703144994627 ], [ 5.007600578665836, 52.135788958775059 ], [ 5.002076763355491, 52.141717807230819 ], [ 4.986497291795977, 52.135152808816201 ], [ 4.985350094936487, 52.132317115236283 ], [ 4.974038586284353, 52.12972942450034 ], [ 4.970198883187422, 52.122353239972135 ], [ 4.978102572268884, 52.112752799240099 ], [ 4.980058620404685, 52.112476388507325 ], [ 4.979315995450995, 52.108226117468398 ], [ 4.976193366139309, 52.107932094336554 ], [ 4.975438144112773, 52.105097654002037 ], [ 4.973125854700089, 52.101691387733581 ], [ 4.975487687366615, 52.099717392881409 ], [ 4.989150430773436, 52.100613852925889 ], [ 4.994317640991201, 52.090436676333752 ], [ 5.004878074768659, 52.088489131580488 ], [ 5.003406033208472, 52.078006643936376 ], [ 5.001451636612209, 52.078283445260745 ], [ 4.999605138198503, 52.066100572383135 ], [ 5.017981360536056, 52.062195034076808 ], [ 5.017210214313931, 52.061059887466584 ], [ 5.021152012892647, 52.05625810348856 ], [ 5.027011880467079, 52.055426615946132 ], [ 5.028611211347239, 52.050617396861043 ], [ 5.039594851655604, 52.043004391609934 ], [ 5.043935720666056, 52.036503920957585 ], [ 5.049436713160569, 52.031139350520334 ], [ 5.055296965473795, 52.029740095454279 ], [ 5.054913292480162, 52.028889465042425 ], [ 5.061171272710786, 52.026358307799292 ], [ 5.062726944374978, 52.026928969634781 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0626\", \"naam\": \"Voorschoten\", \"code\": \"0626\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.464401944621672, 52.127409231733118 ], [ 4.468986646693319, 52.132542477646027 ], [ 4.469336747492326, 52.13452754634811 ], [ 4.466933292653599, 52.137340735113298 ], [ 4.465509358220243, 52.149506853504541 ], [ 4.459247761896827, 52.149740954552975 ], [ 4.449657528288239, 52.140886170345524 ], [ 4.444581739821442, 52.140562521835705 ], [ 4.442916335127967, 52.145363470780971 ], [ 4.427534237989232, 52.133345215766489 ], [ 4.418344568424956, 52.124491065140958 ], [ 4.41371716528168, 52.121621009263016 ], [ 4.401035488064566, 52.111886990300654 ], [ 4.421111606940729, 52.104973349044144 ], [ 4.427830628216196, 52.101346691998188 ], [ 4.434013145577072, 52.104511989810021 ], [ 4.435905814627303, 52.107359222627011 ], [ 4.438976639746062, 52.109932710543035 ], [ 4.443628380115356, 52.111669197607746 ], [ 4.447866010498111, 52.114534974132013 ], [ 4.452080480978912, 52.118533183195375 ], [ 4.464401944621672, 52.127409231733118 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0513\", \"naam\": \"Gouda\", \"code\": \"0513\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.750946553841411, 52.01376322122087 ], [ 4.748961170663335, 52.016301175562958 ], [ 4.745834340446547, 52.016850560789564 ], [ 4.743803811493235, 52.022503260591051 ], [ 4.736781606260035, 52.022747867023099 ], [ 4.734409228497507, 52.025000249752487 ], [ 4.730120158356529, 52.02497639242651 ], [ 4.727374073438642, 52.026093792103488 ], [ 4.719957076857284, 52.026618373527349 ], [ 4.719830541687887, 52.03511332851825 ], [ 4.717486291962876, 52.035383209045378 ], [ 4.716273863878696, 52.038208196805179 ], [ 4.706102969048374, 52.040132137041319 ], [ 4.686751309649978, 52.03039018044101 ], [ 4.680547695205536, 52.028087593472961 ], [ 4.678987939379974, 52.028078222368585 ], [ 4.667335291659211, 52.025175652436538 ], [ 4.670490830566829, 52.022929377878505 ], [ 4.680269452970824, 52.021006164423177 ], [ 4.681855704991915, 52.019316535336479 ], [ 4.674094504886621, 52.017004254631097 ], [ 4.666751239065298, 52.012994869443247 ], [ 4.670680995176242, 52.011036516316338 ], [ 4.666416074294397, 52.009594522343662 ], [ 4.659469046756868, 52.005303904339456 ], [ 4.66261899874812, 52.00334099569762 ], [ 4.670821280199265, 52.002258438049076 ], [ 4.680263713957743, 51.996651702695239 ], [ 4.684138174890927, 51.998090868966976 ], [ 4.688845187954923, 51.996136554341028 ], [ 4.699738370183865, 51.997333453266002 ], [ 4.707077741214351, 52.001623955828485 ], [ 4.712961727505411, 51.999109094304416 ], [ 4.714499244221884, 52.000533844719953 ], [ 4.718819731706981, 51.998292935692191 ], [ 4.727736631110036, 52.001458328364343 ], [ 4.725381650541536, 52.002577870687091 ], [ 4.722611638616103, 52.005394164176778 ], [ 4.728428683722803, 52.007409193201255 ], [ 4.737413749199084, 52.006043186669686 ], [ 4.737791194978143, 52.006894838630338 ], [ 4.743292554270326, 52.003809975576395 ], [ 4.748379245722892, 52.002421744569162 ], [ 4.757358731565109, 52.00133737940682 ], [ 4.75694513907789, 52.003034301750795 ], [ 4.750946553841411, 52.01376322122087 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0479\", \"naam\": \"Zaanstad\", \"code\": \"0479\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.862632604022872, 52.430017122971215 ], [ 4.86184899255335, 52.429730486430827 ], [ 4.855844818328558, 52.438198677944158 ], [ 4.853435675216978, 52.442152163260495 ], [ 4.84307696397401, 52.452298996984986 ], [ 4.845034969878943, 52.453157460757808 ], [ 4.84538358811395, 52.456840190001515 ], [ 4.849276068316251, 52.460539045956459 ], [ 4.852700138810652, 52.470465252565909 ], [ 4.846395163495015, 52.4707198303295 ], [ 4.842439258916841, 52.472117540522191 ], [ 4.838054072357641, 52.476344764050808 ], [ 4.837224019007884, 52.479738874012341 ], [ 4.826967587683586, 52.480823523003657 ], [ 4.816703349030144, 52.482473575070031 ], [ 4.812351494100922, 52.483868379246921 ], [ 4.811541447975205, 52.4855634295116 ], [ 4.804401337045959, 52.489209682874694 ], [ 4.798858829303025, 52.491164463813988 ], [ 4.794134314939405, 52.490857774178416 ], [ 4.7917511026051, 52.492261650959662 ], [ 4.795240539994438, 52.49652655887791 ], [ 4.793531107743418, 52.50642870463826 ], [ 4.78873595717381, 52.51121837212547 ], [ 4.789811349049594, 52.519152319377042 ], [ 4.782312363365422, 52.519680657477238 ], [ 4.763781254765439, 52.519584758317656 ], [ 4.761037369285303, 52.518437663955346 ], [ 4.752322789291878, 52.52122298567479 ], [ 4.74997338251343, 52.520077744807814 ], [ 4.748465878009304, 52.515255877518094 ], [ 4.75287163310799, 52.510465743614155 ], [ 4.742725830196671, 52.503331987380939 ], [ 4.736859707433978, 52.500185175196748 ], [ 4.731401101349258, 52.496190828109683 ], [ 4.720384329875825, 52.49499675545281 ], [ 4.714499359064459, 52.493264539873742 ], [ 4.708264322115676, 52.488698373871244 ], [ 4.707905135283672, 52.486430993822566 ], [ 4.705991967794995, 52.482738867535339 ], [ 4.701295376528561, 52.480729637086263 ], [ 4.698590808059306, 52.477315969935709 ], [ 4.699422645110423, 52.474489133313924 ], [ 4.697895710677114, 52.47136543484698 ], [ 4.695183113783316, 52.468517966868319 ], [ 4.688541887748598, 52.465081014867728 ], [ 4.684232733612199, 52.463639707372351 ], [ 4.685038260330955, 52.462511810404216 ], [ 4.674909838328454, 52.455655360463041 ], [ 4.70786551091935, 52.437726041400516 ], [ 4.711433351455439, 52.436047427847782 ], [ 4.722101223432554, 52.433276093043879 ], [ 4.739055195963446, 52.431104685406773 ], [ 4.767044513498847, 52.427573283718957 ], [ 4.767426082765862, 52.428424782812108 ], [ 4.848218416072472, 52.418059469450355 ], [ 4.856102966980005, 52.416679241040399 ], [ 4.859606171092747, 52.419809719948532 ], [ 4.857985229393752, 52.423766815621818 ], [ 4.862255902346459, 52.428599627599141 ], [ 4.862632604022872, 52.430017122971215 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0589\", \"naam\": \"Oudewater\", \"code\": \"0589\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.920178808789324, 52.010025203522993 ], [ 4.917807423360797, 52.013130815149331 ], [ 4.904800074695471, 52.026387959992107 ], [ 4.912610819526669, 52.025286956914158 ], [ 4.920016502826036, 52.025599755548456 ], [ 4.923907030963487, 52.02646468099892 ], [ 4.926601674072665, 52.029873469314055 ], [ 4.91128163641225, 52.040290392109725 ], [ 4.917096853412882, 52.043711958018804 ], [ 4.906458088110252, 52.053580469035637 ], [ 4.895567428926832, 52.050420496317642 ], [ 4.895592299418775, 52.048155124357372 ], [ 4.875540594329873, 52.061662596161945 ], [ 4.871277296136067, 52.059095344972008 ], [ 4.868106280014215, 52.063329183285347 ], [ 4.856058725324449, 52.059027719049126 ], [ 4.848264577963286, 52.058142768201215 ], [ 4.829636768853059, 52.049843700898727 ], [ 4.829640294818698, 52.049560531843774 ], [ 4.818860284155245, 52.038181564639252 ], [ 4.811894206263318, 52.033899941800918 ], [ 4.806831575524448, 52.033308727243011 ], [ 4.810035422821202, 52.026811171774234 ], [ 4.798786793641297, 52.022224499185597 ], [ 4.803572487296894, 52.014035876122215 ], [ 4.815657062881399, 52.014095163836174 ], [ 4.824973818273725, 52.017255085587657 ], [ 4.833171253195901, 52.01644438426591 ], [ 4.842130856586638, 52.017052578527021 ], [ 4.846795435524593, 52.018206828123738 ], [ 4.85707590259149, 52.006076532878232 ], [ 4.853195186922457, 52.004643056860139 ], [ 4.817789638903981, 51.999662918807218 ], [ 4.835103820838376, 51.986152379984546 ], [ 4.861496047628961, 51.994768867601117 ], [ 4.878183969246476, 52.000789148749881 ], [ 4.892166774013163, 52.005096581945551 ], [ 4.908865690201798, 52.010829339647721 ], [ 4.913930128426636, 52.011132993047092 ], [ 4.920178808789324, 52.010025203522993 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0907\", \"naam\": \"Gennep\", \"code\": \"0907\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.976428173406712, 51.643870803185777 ], [ 5.991601379799023, 51.650873418902123 ], [ 6.001330161696697, 51.655353972833758 ], [ 6.002092084603485, 51.654500368793606 ], [ 6.00675214420908, 51.655891791950097 ], [ 6.014162861130439, 51.66038353629547 ], [ 6.015350690283539, 51.662359573242455 ], [ 6.024601737344394, 51.660043940925377 ], [ 6.031607933645399, 51.663120784111214 ], [ 6.024354488252254, 51.669957326505553 ], [ 6.031793462405981, 51.676147016033191 ], [ 6.029887085912871, 51.678139905368518 ], [ 6.030733442366405, 51.683232870415551 ], [ 6.032305544156062, 51.684923422132748 ], [ 6.028116955255689, 51.689760839062423 ], [ 6.031636482775532, 51.692290323767502 ], [ 6.030559952680973, 51.698243453277264 ], [ 6.02788238102314, 51.700523736823357 ], [ 6.026062849706483, 51.708746479782185 ], [ 6.028430157170507, 51.711848740786479 ], [ 6.033484164742222, 51.713236959654814 ], [ 6.037735476433669, 51.71264702229999 ], [ 6.037751781114626, 51.71377973205287 ], [ 6.042007190305065, 51.713472817107309 ], [ 6.044767212169059, 51.716855755509755 ], [ 6.037841473711541, 51.720009633247216 ], [ 6.038200197036979, 51.718025240570519 ], [ 6.035485278747998, 51.717757099152166 ], [ 6.035146741712945, 51.72115737048096 ], [ 6.032827035390119, 51.721453379437442 ], [ 6.032088821714768, 51.724006243124613 ], [ 6.029014424349015, 51.72572232597539 ], [ 6.003558636096312, 51.733788601024578 ], [ 5.994321876786319, 51.738368007285068 ], [ 5.985034504309662, 51.739265360424767 ], [ 5.978440430247322, 51.738732426224018 ], [ 5.973410980711513, 51.739324094672334 ], [ 5.968363176780818, 51.73849964921223 ], [ 5.956739822486477, 51.738556729731599 ], [ 5.955182916138851, 51.737997892962021 ], [ 5.952140067662446, 51.742543762744305 ], [ 5.953369971797152, 51.74791857325431 ], [ 5.952552366730888, 51.744524154824035 ], [ 5.94399250069671, 51.741733173309797 ], [ 5.938176936701066, 51.741477468955388 ], [ 5.934669089682874, 51.739794730735305 ], [ 5.933458759803994, 51.735835621646338 ], [ 5.934209597999919, 51.733849738260147 ], [ 5.928704420592775, 51.727078582584831 ], [ 5.921281176740022, 51.721731917182531 ], [ 5.919297969609198, 51.71777618144214 ], [ 5.927811115132309, 51.71717080008311 ], [ 5.93360637303463, 51.716011115615899 ], [ 5.942883039993558, 51.714551478788607 ], [ 5.949057761863185, 51.712822829993669 ], [ 5.953292411022696, 51.710820049759683 ], [ 5.956343717372401, 51.707123681562038 ], [ 5.956627441141625, 51.698909544537919 ], [ 5.962250345019394, 51.684438915633692 ], [ 5.963751347067033, 51.680749941991621 ], [ 5.964821800054161, 51.673664678498007 ], [ 5.963119249849268, 51.661495482563261 ], [ 5.964185749129937, 51.654127029945016 ], [ 5.967604532763563, 51.649295717959653 ], [ 5.9721971414034, 51.645591239593919 ], [ 5.976428173406712, 51.643870803185777 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0293\", \"naam\": \"Westervoort\", \"code\": \"0293\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.001843090609974, 51.977628115064476 ], [ 6.001885784274705, 51.980742981595633 ], [ 5.999112682455802, 51.977359164343184 ], [ 5.990501681868465, 51.974288567974249 ], [ 5.979195593801377, 51.973496461602366 ], [ 5.965538502845704, 51.971582098638144 ], [ 5.958885266624139, 51.969065929896814 ], [ 5.954962248643429, 51.966819423487408 ], [ 5.950618221720847, 51.962026099776693 ], [ 5.949382686268449, 51.956651411730633 ], [ 5.951275928797892, 51.952394494890363 ], [ 5.955122244740562, 51.948694503755689 ], [ 5.958971534365128, 51.945277558677184 ], [ 5.960877865946862, 51.942153174389567 ], [ 5.961612789006229, 51.938751297473345 ], [ 5.965893670957735, 51.938730296228748 ], [ 5.969399879283797, 51.938996170102499 ], [ 5.975274560611967, 51.941798830226183 ], [ 5.980349083038782, 51.942906093646243 ], [ 5.984241143572232, 51.942886387257452 ], [ 5.986232515789892, 51.9462745465758 ], [ 5.984683113404946, 51.946848814582459 ], [ 5.987457021815453, 51.950516162636333 ], [ 5.98474719840799, 51.951662732017965 ], [ 5.984777361536674, 51.953928103792464 ], [ 5.987623709184612, 51.962975695350906 ], [ 5.985298753976204, 51.963837116490005 ], [ 5.986535007550596, 51.968928243527976 ], [ 5.983854183182927, 51.972340156619879 ], [ 5.990085559723909, 51.972308372574297 ], [ 5.998692290531994, 51.975095830950337 ], [ 6.001843090609974, 51.977628115064476 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0988\", \"naam\": \"Weert\", \"code\": \"0988\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.745483392835747, 51.189418774754827 ], [ 5.746656234045143, 51.192530396918883 ], [ 5.745899419876943, 51.193665552586623 ], [ 5.752464176262403, 51.200725201703307 ], [ 5.754018446646507, 51.203552346480059 ], [ 5.753286504691398, 51.207802716527219 ], [ 5.74907613967954, 51.208099109110016 ], [ 5.751006700125059, 51.210075509130064 ], [ 5.7518019437582, 51.213754669169028 ], [ 5.756416348709247, 51.216005732699735 ], [ 5.761400385295703, 51.216556199638362 ], [ 5.768280909560116, 51.214834616148124 ], [ 5.773647985960789, 51.215383301440731 ], [ 5.774818616098871, 51.217928241716429 ], [ 5.777514415573449, 51.219618445382871 ], [ 5.782118469898059, 51.220452505474078 ], [ 5.783292147615825, 51.223280555478262 ], [ 5.789899262982313, 51.234019620279113 ], [ 5.789921666244053, 51.236568382052219 ], [ 5.791845182482704, 51.237411315946304 ], [ 5.787283764709748, 51.241675167691305 ], [ 5.782350433946164, 51.247356123325297 ], [ 5.778158384034128, 51.250202335297715 ], [ 5.769753793003595, 51.253628737788418 ], [ 5.768234548342292, 51.255332949346318 ], [ 5.764788975467317, 51.255910596272983 ], [ 5.750263746200134, 51.261337722858912 ], [ 5.746061761725467, 51.263333190103147 ], [ 5.74226042973841, 51.26759290949262 ], [ 5.736961187168951, 51.276671472207063 ], [ 5.730472871460276, 51.280938848464928 ], [ 5.723580992581597, 51.282658200528296 ], [ 5.709010509057745, 51.283549030644494 ], [ 5.695576910757528, 51.282452608476937 ], [ 5.684821650056381, 51.280215004198567 ], [ 5.674445658097568, 51.277125864042162 ], [ 5.667927115572314, 51.277424982941923 ], [ 5.656817555515836, 51.279716886317779 ], [ 5.654147452495759, 51.282271865742104 ], [ 5.648793394671937, 51.285116052597964 ], [ 5.643836610645295, 51.290507934591744 ], [ 5.633811084333654, 51.281183955189455 ], [ 5.626099532411317, 51.273553596352798 ], [ 5.625322180950294, 51.271572776153469 ], [ 5.623287786926357, 51.248920748961545 ], [ 5.618972452157673, 51.229388470590273 ], [ 5.594426632358252, 51.224053992793316 ], [ 5.594435599823676, 51.226036392804623 ], [ 5.566064770657444, 51.220985895118119 ], [ 5.636835327799676, 51.202730416503329 ], [ 5.646392427049922, 51.199877456792166 ], [ 5.652888605923704, 51.197597156635851 ], [ 5.654017476100315, 51.19419613278297 ], [ 5.649802849528373, 51.193639331551644 ], [ 5.658173639467686, 51.184840808622802 ], [ 5.663923801172329, 51.186243266484176 ], [ 5.672341575604699, 51.185656499142205 ], [ 5.676162251335671, 51.184514243160017 ], [ 5.676534306149395, 51.182814096828146 ], [ 5.689564845272548, 51.185329735863597 ], [ 5.695287494732929, 51.182482662022416 ], [ 5.696445301399089, 51.18389560290143 ], [ 5.701421255937576, 51.183882247865498 ], [ 5.701411558036056, 51.182466255976273 ], [ 5.707916390052897, 51.182165272695791 ], [ 5.709435460355864, 51.180461845792749 ], [ 5.714433254866202, 51.183563113915163 ], [ 5.719800140631004, 51.184680685144599 ], [ 5.733975522274489, 51.186338454138536 ], [ 5.740102259058731, 51.186603206232157 ], [ 5.745483392835747, 51.189418774754827 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1900\", \"naam\": \"Súdwest-Fryslân\", \"code\": \"1900\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.771080772370868, 53.046955056511166 ], [ 5.769506934428232, 53.049508157555159 ], [ 5.7667232063395, 53.050649492032051 ], [ 5.762019518537596, 53.060573421232533 ], [ 5.766018833731964, 53.061410176186357 ], [ 5.767228816947559, 53.062821922458816 ], [ 5.775243396133004, 53.066193598174713 ], [ 5.773716999800335, 53.074125787258126 ], [ 5.764187530409904, 53.080384720753315 ], [ 5.770984374613835, 53.081212464950724 ], [ 5.772988825142991, 53.082055366112009 ], [ 5.774624288406665, 53.086296806019483 ], [ 5.771441408424412, 53.087722637933396 ], [ 5.771453944457665, 53.089138169716769 ], [ 5.778277816162092, 53.092796556844092 ], [ 5.782282992177129, 53.093915862647762 ], [ 5.785502357944775, 53.096453221371057 ], [ 5.788301613818855, 53.096726989937075 ], [ 5.787518245376961, 53.098428294863844 ], [ 5.784726668338671, 53.099003823525145 ], [ 5.777972686554753, 53.10327275850765 ], [ 5.774381494103256, 53.103850651106001 ], [ 5.770775181738764, 53.102729805800081 ], [ 5.767598420737591, 53.1050048444392 ], [ 5.770405621575277, 53.106128344869425 ], [ 5.762435473669017, 53.108701599724881 ], [ 5.760858896142351, 53.111254540840136 ], [ 5.762859634144651, 53.111531393460886 ], [ 5.7612805364009, 53.113801233590465 ], [ 5.757274063324331, 53.112681233585036 ], [ 5.756144919051128, 53.120894956212638 ], [ 5.754577128188545, 53.124580220055478 ], [ 5.75139553919148, 53.126571712121994 ], [ 5.746593258327869, 53.126019996045613 ], [ 5.743778396399371, 53.124046633604294 ], [ 5.736164419334639, 53.121804172478207 ], [ 5.736957076154819, 53.120952527322139 ], [ 5.729757145337209, 53.120407115196038 ], [ 5.727774003728046, 53.122394547202092 ], [ 5.724584730633647, 53.123536016589497 ], [ 5.720962803444008, 53.120431946549857 ], [ 5.720167666898003, 53.121000381519394 ], [ 5.708964195717135, 53.119615451956449 ], [ 5.700541083435151, 53.115674234636643 ], [ 5.696168598012725, 53.119082926057295 ], [ 5.695397317879766, 53.123048460450164 ], [ 5.693398477550785, 53.123053587554963 ], [ 5.695423492885767, 53.126728825137619 ], [ 5.691429447519186, 53.127305256855216 ], [ 5.692239026780118, 53.128718746921649 ], [ 5.685849702837554, 53.129867287407386 ], [ 5.685038364337595, 53.128170649668448 ], [ 5.679842672377689, 53.12846656691702 ], [ 5.673425003764779, 53.125367868712573 ], [ 5.671809109066389, 53.122823730048758 ], [ 5.667804109346791, 53.121700740816834 ], [ 5.664987667769811, 53.118876204828055 ], [ 5.659373661438273, 53.116057992272971 ], [ 5.65655285822763, 53.112383931991367 ], [ 5.64579213889131, 53.117503645065405 ], [ 5.643025861065492, 53.122888677290902 ], [ 5.637435646549595, 53.124032928001675 ], [ 5.635444862312553, 53.125452619086751 ], [ 5.62705706589616, 53.126885259697445 ], [ 5.624665992330196, 53.128305570811222 ], [ 5.626285575740375, 53.131982764804235 ], [ 5.62232085715033, 53.138219000469171 ], [ 5.611896756854351, 53.133143059971566 ], [ 5.596267914929753, 53.126093645304792 ], [ 5.594285160501811, 53.129494397494767 ], [ 5.5910838547899, 53.128933673471799 ], [ 5.589893652655114, 53.130917454733215 ], [ 5.587491974748368, 53.13035527876341 ], [ 5.58190951090315, 53.133761787202111 ], [ 5.575114181569861, 53.134338859961488 ], [ 5.573901131607949, 53.131226566237224 ], [ 5.570696362945725, 53.129815977982389 ], [ 5.564697699364587, 53.129541912383026 ], [ 5.562700838217576, 53.130111072974572 ], [ 5.559920047485584, 53.134644848409238 ], [ 5.555521386580528, 53.134651112648733 ], [ 5.55431519644904, 53.13295415382877 ], [ 5.550720707687817, 53.134091549188085 ], [ 5.547533251760004, 53.137210046401378 ], [ 5.543938231997399, 53.138347237011104 ], [ 5.539152196707467, 53.14203380272172 ], [ 5.537961229931738, 53.144583272146498 ], [ 5.531173033959994, 53.147988908175854 ], [ 5.527966573734389, 53.146010973551391 ], [ 5.524764905112243, 53.145448481168067 ], [ 5.521167727738958, 53.146301880481815 ], [ 5.511566425219968, 53.145746025566098 ], [ 5.510363258233165, 53.14461484224482 ], [ 5.512354925740278, 53.141781706844959 ], [ 5.510350368614104, 53.140085142748759 ], [ 5.512745837447813, 53.13866711776366 ], [ 5.505136632069661, 53.13471135123752 ], [ 5.501142307060616, 53.136413866264171 ], [ 5.502745667166913, 53.137827866532376 ], [ 5.497954010833597, 53.140663469183849 ], [ 5.492358365578043, 53.142084051769281 ], [ 5.488350283763745, 53.138407113592699 ], [ 5.48434796650267, 53.13699489297769 ], [ 5.48115244746179, 53.138696088750002 ], [ 5.487156427780501, 53.140956081451144 ], [ 5.477162111303732, 53.142945761258254 ], [ 5.47836675195365, 53.145209703562159 ], [ 5.472369887311998, 53.146629655275355 ], [ 5.468363611862758, 53.143235160338662 ], [ 5.461566748921529, 53.144655112534082 ], [ 5.463171112461811, 53.147202063199998 ], [ 5.452772521964882, 53.148057535268237 ], [ 5.450775420763811, 53.150040357296383 ], [ 5.4427764453631, 53.151176767401331 ], [ 5.435177721999855, 53.152878694934486 ], [ 5.434778298059058, 53.153445066287709 ], [ 5.423976863415062, 53.153448880731837 ], [ 5.421576770022086, 53.153732701921527 ], [ 5.417174186814464, 53.150902830653699 ], [ 5.406774188037419, 53.152603629176411 ], [ 5.401964378844426, 53.125709155200077 ], [ 5.372385408920144, 53.107873318344915 ], [ 5.372390189075144, 53.093717795463327 ], [ 5.348432632623032, 53.079556881716023 ], [ 5.34404122137997, 53.077856710605154 ], [ 5.337253784490606, 53.076438517802011 ], [ 5.335256392163616, 53.077003895874924 ], [ 5.332856414401011, 53.080117071121116 ], [ 5.323671978709352, 53.079263225651246 ], [ 5.324876572047603, 53.074734054964821 ], [ 5.301722805986381, 53.071039325065939 ], [ 5.292545216311448, 53.068201299391028 ], [ 5.164325607923404, 53.000932657625889 ], [ 5.169126396907684, 52.997544060642525 ], [ 5.214891249995786, 52.916079189211011 ], [ 5.238509396972246, 52.873924801462401 ], [ 5.281121866203581, 52.840560778470447 ], [ 5.337969884938691, 52.795862574092908 ], [ 5.44120017077803, 52.849938859345457 ], [ 5.437239146823734, 52.860133306840183 ], [ 5.43803387777188, 52.860132969804376 ], [ 5.43327597572275, 52.870044464627284 ], [ 5.426124559891599, 52.873161447483966 ], [ 5.432485776454701, 52.874574841875081 ], [ 5.438845389922956, 52.874289121065118 ], [ 5.44798538613532, 52.872586025905264 ], [ 5.457523502750737, 52.871731384343008 ], [ 5.465074436378793, 52.871160425881449 ], [ 5.472232680662915, 52.873137438088051 ], [ 5.476993738074363, 52.868886996793272 ], [ 5.48534644789981, 52.871711706751512 ], [ 5.487337699830718, 52.873408828129314 ], [ 5.490115424564607, 52.871424552831833 ], [ 5.495685605193747, 52.873684649526894 ], [ 5.495691238447099, 52.875949681152555 ], [ 5.501664271711696, 52.879907904760486 ], [ 5.494913000761681, 52.882745488763995 ], [ 5.489752570709988, 52.886147587056008 ], [ 5.493737580808744, 52.889824762336005 ], [ 5.488972567109528, 52.892660209224616 ], [ 5.477062579849584, 52.902296127878152 ], [ 5.489015551605856, 52.911063454755151 ], [ 5.507750306111899, 52.924352917884839 ], [ 5.515323839705503, 52.928591906540376 ], [ 5.564751612205439, 52.947497960894708 ], [ 5.569123095229368, 52.945509509086698 ], [ 5.572691903578032, 52.942106522922202 ], [ 5.575063474152956, 52.938139066674097 ], [ 5.58021461038889, 52.932751468693318 ], [ 5.582587527574512, 52.929350100398352 ], [ 5.594063505117163, 52.915457567820553 ], [ 5.639859147572072, 52.922447569906915 ], [ 5.641511977522409, 52.932919735766596 ], [ 5.642326259671954, 52.936032382501196 ], [ 5.678926287603152, 52.932834169567215 ], [ 5.683312240461274, 52.933955876946861 ], [ 5.689276857955502, 52.933091554847167 ], [ 5.68811405552475, 52.937624511474546 ], [ 5.689788889932324, 52.94951155408539 ], [ 5.691090068207588, 52.964796973416121 ], [ 5.69034862723697, 52.972726316560859 ], [ 5.687616571325488, 52.98094378043799 ], [ 5.68764002367723, 52.984341189744825 ], [ 5.69125614127921, 52.988578873821616 ], [ 5.700001471566663, 52.98544195804687 ], [ 5.705173745254655, 52.984295816803964 ], [ 5.707180782157253, 52.986272315641735 ], [ 5.712386813128167, 52.989655728166305 ], [ 5.714004370524663, 52.992765657100975 ], [ 5.716417214800673, 52.995590252066798 ], [ 5.722012811100574, 52.997556558660484 ], [ 5.723219586872125, 52.998968779418021 ], [ 5.731212270508022, 53.001494134839668 ], [ 5.73519423756718, 53.000916365345709 ], [ 5.739982560316121, 53.001468571659068 ], [ 5.742383702143565, 53.002593946466732 ], [ 5.742406821234406, 53.005425090326497 ], [ 5.748809322454094, 53.008237104993547 ], [ 5.733315905291363, 53.015360979177899 ], [ 5.736624431638008, 53.030073574092327 ], [ 5.755514805415809, 53.046720878467255 ], [ 5.767484227067542, 53.046400308041385 ], [ 5.771080772370868, 53.046955056511166 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0879\", \"naam\": \"Zundert\", \"code\": \"0879\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.734069519321484, 51.485505510878092 ], [ 4.735521456188415, 51.491744145675852 ], [ 4.737399620385187, 51.495153076784874 ], [ 4.741498002702267, 51.505087990603336 ], [ 4.742260874700916, 51.505658615550843 ], [ 4.743694533410955, 51.513313056596139 ], [ 4.74400395884771, 51.51869565214573 ], [ 4.743136560931036, 51.52548778633556 ], [ 4.740019321560613, 51.527736198636859 ], [ 4.741489490851142, 51.532842014832596 ], [ 4.739187486029115, 51.531979657723561 ], [ 4.732179982367399, 51.536471861413631 ], [ 4.73025140076604, 51.536461035216881 ], [ 4.72797817868986, 51.533616185537163 ], [ 4.725286584085949, 51.533034560067613 ], [ 4.722553650100206, 51.535284686668831 ], [ 4.72831460943671, 51.537016540388791 ], [ 4.713149728507517, 51.545142997094125 ], [ 4.703818402803364, 51.549903293648256 ], [ 4.694250446713672, 51.544749262608626 ], [ 4.680809658759882, 51.540703914489271 ], [ 4.659062514780553, 51.525560486821263 ], [ 4.654453346876178, 51.524398842870994 ], [ 4.652180898653484, 51.521835705455572 ], [ 4.643372637018247, 51.518098261089236 ], [ 4.637988874389225, 51.517214234495 ], [ 4.63864342428734, 51.524298615914951 ], [ 4.631331026644855, 51.523401912463761 ], [ 4.624813843536872, 51.521093903091234 ], [ 4.626394066145592, 51.518838542637489 ], [ 4.619497029264661, 51.516244549159154 ], [ 4.620358834446626, 51.51086925633431 ], [ 4.618050674266643, 51.510570872067511 ], [ 4.616551903162303, 51.508012118823309 ], [ 4.614995611837148, 51.508851465073704 ], [ 4.610765067027426, 51.508257002502297 ], [ 4.579496999576939, 51.510593845086319 ], [ 4.589762941397494, 51.496787134748168 ], [ 4.583612031160624, 51.495895342374553 ], [ 4.576350719103471, 51.492446632069957 ], [ 4.574109564951876, 51.48846610987723 ], [ 4.57565580873413, 51.488193657073438 ], [ 4.572284486579767, 51.482789186069738 ], [ 4.569197397570195, 51.483050808252024 ], [ 4.556052315525397, 51.485506865978685 ], [ 4.548186078852022, 51.473272536892111 ], [ 4.529755532533798, 51.449632037477009 ], [ 4.535257809180923, 51.423050403949141 ], [ 4.574714981215128, 51.432961082299684 ], [ 4.593616040946793, 51.430542288383528 ], [ 4.630253166149572, 51.425971194558642 ], [ 4.634114943547805, 51.42514656063635 ], [ 4.637615098724116, 51.422903429949841 ], [ 4.641467221295693, 51.422644910494967 ], [ 4.646839889243085, 51.423528760673783 ], [ 4.651786895699018, 51.426958559316596 ], [ 4.656436081111379, 51.425005314022911 ], [ 4.664498263229046, 51.426188373331215 ], [ 4.669495929517208, 51.426502435459959 ], [ 4.666520436411934, 51.444326213771298 ], [ 4.686432432570567, 51.451244472348861 ], [ 4.692968665920683, 51.451849951986937 ], [ 4.699389638656004, 51.460100976294285 ], [ 4.699376809666562, 51.460950521662994 ], [ 4.703929735942402, 51.465508571870735 ], [ 4.703138241305475, 51.466919970157207 ], [ 4.716973603572804, 51.46898267159726 ], [ 4.716174105812683, 51.47096052340784 ], [ 4.721131484033045, 51.474387388029015 ], [ 4.729085392026428, 51.483778291098055 ], [ 4.734069519321484, 51.485505510878092 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0748\", \"naam\": \"Bergen op Zoom\", \"code\": \"0748\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.367114737827912, 51.456820116020744 ], [ 4.361399309961801, 51.471214113000691 ], [ 4.3625419660119, 51.471790584027367 ], [ 4.361669633293383, 51.47631440118338 ], [ 4.371627401466917, 51.47895040927208 ], [ 4.371898911190462, 51.484050674276816 ], [ 4.37297260717234, 51.487741824172325 ], [ 4.363643232762765, 51.491342230046399 ], [ 4.358223364109914, 51.492427460992346 ], [ 4.351890841679539, 51.499735134141666 ], [ 4.349494625283637, 51.503395690212592 ], [ 4.354048742927856, 51.506551456198061 ], [ 4.35059921585173, 51.505671237846478 ], [ 4.352333052224251, 51.514183125608156 ], [ 4.351484662960753, 51.51757420910414 ], [ 4.350308714157032, 51.518413427053375 ], [ 4.342219054685314, 51.518058119132633 ], [ 4.340572646875956, 51.522574854903134 ], [ 4.342801480055622, 51.526276625466714 ], [ 4.337756019186592, 51.527647496106255 ], [ 4.330030669937832, 51.528144278438717 ], [ 4.329618703298605, 51.529273419868986 ], [ 4.32575586855891, 51.529521605336051 ], [ 4.328428855718673, 51.530678730433223 ], [ 4.327551957561747, 51.535202260507624 ], [ 4.315861649063329, 51.540193573374218 ], [ 4.306909462051043, 51.543509767500602 ], [ 4.308378465475366, 51.546638737229493 ], [ 4.316120539388302, 51.545577084085835 ], [ 4.317916042570204, 51.551257878727753 ], [ 4.296242895216232, 51.553889750272255 ], [ 4.298828342711635, 51.558728564715956 ], [ 4.273215244220541, 51.564434849712349 ], [ 4.267026637136753, 51.5649421448772 ], [ 4.267721678974828, 51.568064214607297 ], [ 4.251827159298693, 51.570743112545074 ], [ 4.243142609049221, 51.563011496162254 ], [ 4.242849477446296, 51.559326762167927 ], [ 4.239591326490776, 51.550798197776757 ], [ 4.236126342513478, 51.550480898935042 ], [ 4.235541408927112, 51.543111390786919 ], [ 4.233356468658718, 51.537991854161689 ], [ 4.22080279369623, 51.516059111203973 ], [ 4.219013520440027, 51.510660004287267 ], [ 4.218773570059374, 51.504993154102792 ], [ 4.230360834695537, 51.488964847354218 ], [ 4.265486234882636, 51.439743865414172 ], [ 4.268166335755717, 51.440336046399842 ], [ 4.283196640138788, 51.43962958023905 ], [ 4.28543048581119, 51.442766127863869 ], [ 4.288846680017865, 51.444780883268166 ], [ 4.293836835396947, 51.445394193470129 ], [ 4.294910099767943, 51.448802891434383 ], [ 4.29757080201855, 51.450243869884481 ], [ 4.297901585458229, 51.452512720434669 ], [ 4.297576454568652, 51.466104251447213 ], [ 4.303724335028734, 51.466727924608925 ], [ 4.308378965172865, 51.465354943045632 ], [ 4.311194956650561, 51.4602829867206 ], [ 4.322361039968441, 51.460385402884114 ], [ 4.324239969304615, 51.462385064817212 ], [ 4.328051012917237, 51.464119026082706 ], [ 4.336627101777469, 51.459665041383332 ], [ 4.340405849517511, 51.462814399215631 ], [ 4.344308336878042, 51.460583590095794 ], [ 4.367114737827912, 51.456820116020744 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1940\", \"naam\": \"De Fryske Marren\", \"code\": \"1940\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.795163700961115, 52.806499410454094 ], [ 5.809919003162505, 52.813809560199118 ], [ 5.819875999254926, 52.817171475571087 ], [ 5.818313247224665, 52.819725374656407 ], [ 5.819140776948241, 52.823120023457513 ], [ 5.824724547672255, 52.82564788970069 ], [ 5.827523801704992, 52.827619539474867 ], [ 5.825963965916798, 52.830456657556859 ], [ 5.828760724913844, 52.832145149435007 ], [ 5.829972099106927, 52.834122610784988 ], [ 5.8331779345367, 52.83694202306738 ], [ 5.835601458960362, 52.840896836615265 ], [ 5.839593776597391, 52.842863705855713 ], [ 5.840040838906599, 52.847675314044068 ], [ 5.844093175782525, 52.855304505651532 ], [ 5.8549357414976, 52.86602158977847 ], [ 5.856947140327708, 52.868278758804678 ], [ 5.856577094017875, 52.870828421587028 ], [ 5.865386126591163, 52.876739244184606 ], [ 5.868606744489102, 52.880407027072984 ], [ 5.871805905845408, 52.88209287546379 ], [ 5.877028099762726, 52.886884814259595 ], [ 5.880228060839998, 52.888570432868988 ], [ 5.885012321108102, 52.889683100771812 ], [ 5.886260215144129, 52.894491145340204 ], [ 5.890246662549686, 52.895323805145416 ], [ 5.899396462818054, 52.895568017277846 ], [ 5.901401516073848, 52.89697505840028 ], [ 5.904181976218148, 52.896679913048111 ], [ 5.911353901422451, 52.897781160030569 ], [ 5.933351061628992, 52.907592171774979 ], [ 5.937780263814029, 52.911818809636344 ], [ 5.933439679625197, 52.914670071320309 ], [ 5.913062188731501, 52.940526446377419 ], [ 5.914283831711954, 52.942786095652352 ], [ 5.904863817790408, 52.954152441303165 ], [ 5.90567708231789, 52.955564554570564 ], [ 5.90211650506167, 52.957561850775491 ], [ 5.897400616086527, 52.962961507171833 ], [ 5.894615882186715, 52.963256494279939 ], [ 5.891011594912313, 52.961572985121279 ], [ 5.88669222305657, 52.96697053451647 ], [ 5.871129116210301, 52.964486446688447 ], [ 5.869573522171376, 52.967890255180471 ], [ 5.86730211091394, 52.978658185665751 ], [ 5.88725634738096, 52.981407607409288 ], [ 5.884910907783238, 52.985381153124429 ], [ 5.867520777123779, 52.998476026222058 ], [ 5.865157067739054, 53.001033612855906 ], [ 5.857754388383985, 53.016917850686397 ], [ 5.848660417335736, 53.02431445184218 ], [ 5.835964281152582, 53.03087454588384 ], [ 5.823671819029056, 53.038281155984002 ], [ 5.818903702317034, 53.040280295977084 ], [ 5.808961616594934, 53.043713192931854 ], [ 5.800223231316212, 53.047990461788871 ], [ 5.797844845908264, 53.049697359096797 ], [ 5.795498207688337, 53.054801513636335 ], [ 5.79870470946292, 53.056206116463855 ], [ 5.796333816781052, 53.05876230468882 ], [ 5.793529011338614, 53.057639393101041 ], [ 5.773864149375493, 53.045813619731838 ], [ 5.769873600968168, 53.04582645216135 ], [ 5.771080772370868, 53.046955056511166 ], [ 5.767484227067542, 53.046400308041385 ], [ 5.755514805415809, 53.046720878467255 ], [ 5.736624431638008, 53.030073574092327 ], [ 5.733315905291363, 53.015360979177899 ], [ 5.748809322454094, 53.008237104993547 ], [ 5.742406821234406, 53.005425090326497 ], [ 5.742383702143565, 53.002593946466732 ], [ 5.739982560316121, 53.001468571659068 ], [ 5.73519423756718, 53.000916365345709 ], [ 5.731212270508022, 53.001494134839668 ], [ 5.723219586872125, 52.998968779418021 ], [ 5.722012811100574, 52.997556558660484 ], [ 5.716417214800673, 52.995590252066798 ], [ 5.714004370524663, 52.992765657100975 ], [ 5.712386813128167, 52.989655728166305 ], [ 5.707180782157253, 52.986272315641735 ], [ 5.705173745254655, 52.984295816803964 ], [ 5.700001471566663, 52.98544195804687 ], [ 5.69125614127921, 52.988578873821616 ], [ 5.68764002367723, 52.984341189744825 ], [ 5.687616571325488, 52.98094378043799 ], [ 5.69034862723697, 52.972726316560859 ], [ 5.691090068207588, 52.964796973416121 ], [ 5.689788889932324, 52.94951155408539 ], [ 5.68811405552475, 52.937624511474546 ], [ 5.689276857955502, 52.933091554847167 ], [ 5.683312240461274, 52.933955876946861 ], [ 5.678926287603152, 52.932834169567215 ], [ 5.642326259671954, 52.936032382501196 ], [ 5.641511977522409, 52.932919735766596 ], [ 5.639859147572072, 52.922447569906915 ], [ 5.594063505117163, 52.915457567820553 ], [ 5.582587527574512, 52.929350100398352 ], [ 5.58021461038889, 52.932751468693318 ], [ 5.575063474152956, 52.938139066674097 ], [ 5.572691903578032, 52.942106522922202 ], [ 5.569123095229368, 52.945509509086698 ], [ 5.564751612205439, 52.947497960894708 ], [ 5.515323839705503, 52.928591906540376 ], [ 5.507750306111899, 52.924352917884839 ], [ 5.489015551605856, 52.911063454755151 ], [ 5.477062579849584, 52.902296127878152 ], [ 5.488972567109528, 52.892660209224616 ], [ 5.493737580808744, 52.889824762336005 ], [ 5.489752570709988, 52.886147587056008 ], [ 5.494913000761681, 52.882745488763995 ], [ 5.501664271711696, 52.879907904760486 ], [ 5.495691238447099, 52.875949681152555 ], [ 5.495685605193747, 52.873684649526894 ], [ 5.490115424564607, 52.871424552831833 ], [ 5.487337699830718, 52.873408828129314 ], [ 5.48534644789981, 52.871711706751512 ], [ 5.476993738074363, 52.868886996793272 ], [ 5.472232680662915, 52.873137438088051 ], [ 5.465074436378793, 52.871160425881449 ], [ 5.457523502750737, 52.871731384343008 ], [ 5.44798538613532, 52.872586025905264 ], [ 5.438845389922956, 52.874289121065118 ], [ 5.432485776454701, 52.874574841875081 ], [ 5.426124559891599, 52.873161447483966 ], [ 5.43327597572275, 52.870044464627284 ], [ 5.43803387777188, 52.860132969804376 ], [ 5.437239146823734, 52.860133306840183 ], [ 5.44120017077803, 52.849938859345457 ], [ 5.337969884938691, 52.795862574092908 ], [ 5.377258283528383, 52.764727245034052 ], [ 5.631232005849061, 52.802984055447773 ], [ 5.660378351387634, 52.831234308014245 ], [ 5.709645664451752, 52.834791952564821 ], [ 5.713245175474239, 52.83817977380599 ], [ 5.714827452512663, 52.83732603255519 ], [ 5.722761815667621, 52.836171423199566 ], [ 5.728696830574931, 52.833323220801844 ], [ 5.724808752882509, 52.844093402684109 ], [ 5.749003618847733, 52.839775415478172 ], [ 5.784548463366119, 52.817577635518646 ], [ 5.788027809046047, 52.807373042062416 ], [ 5.789978321344977, 52.803685672897082 ], [ 5.795163700961115, 52.806499410454094 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1859\", \"naam\": \"Berkelland\", \"code\": \"1859\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.462168966580534, 52.021616268333254 ], [ 6.464877485673666, 52.020741888131226 ], [ 6.477217530762631, 52.03110675580141 ], [ 6.479995421969877, 52.03306341882633 ], [ 6.483463366809351, 52.031331951956801 ], [ 6.486645398329471, 52.033851101673534 ], [ 6.487780465823199, 52.032424477574871 ], [ 6.491777670342909, 52.036351882419162 ], [ 6.494152527896572, 52.037745590512628 ], [ 6.499563111409516, 52.035712161203207 ], [ 6.508752269424818, 52.044404285933034 ], [ 6.514893111195285, 52.040380767005381 ], [ 6.517283194517369, 52.042340276306426 ], [ 6.539077427512979, 52.025136717845001 ], [ 6.57435334957106, 52.031866355031319 ], [ 6.586997907235172, 52.037968708233734 ], [ 6.590148172686389, 52.03906938720052 ], [ 6.59060665811915, 52.04161356795889 ], [ 6.59609738888335, 52.042690141322275 ], [ 6.596189151072779, 52.046087689161055 ], [ 6.598613738085849, 52.049178047966336 ], [ 6.602537559375142, 52.049987231941067 ], [ 6.605322079031705, 52.051940909348986 ], [ 6.604649714382894, 52.055912768454277 ], [ 6.606333673608873, 52.060426663293477 ], [ 6.606074627838617, 52.065243866794312 ], [ 6.613176081334765, 52.068002225459828 ], [ 6.621308579696689, 52.065651624396693 ], [ 6.624375501479715, 52.063636989536583 ], [ 6.631032488366527, 52.06441648955586 ], [ 6.6368855541692, 52.064354523124912 ], [ 6.635222058509322, 52.060690453292182 ], [ 6.63210855774434, 52.061006618532062 ], [ 6.631296715604044, 52.059882364664389 ], [ 6.636281913923106, 52.056714293391252 ], [ 6.638725683438446, 52.060370059745679 ], [ 6.643017535207149, 52.060324367040792 ], [ 6.64667250623086, 52.065383094391287 ], [ 6.650916839969299, 52.063638370473122 ], [ 6.659094834766809, 52.062983907935525 ], [ 6.663631697129821, 52.057837039841246 ], [ 6.663924898449876, 52.054435339203323 ], [ 6.66189367841094, 52.051625244596728 ], [ 6.678544917245961, 52.047195626264283 ], [ 6.683939975320378, 52.044870633818292 ], [ 6.687823799388043, 52.044261366381726 ], [ 6.688062419615322, 52.052471867989304 ], [ 6.686892137579348, 52.052484792090169 ], [ 6.687397394678687, 52.056444172787266 ], [ 6.689738164634438, 52.056418302236089 ], [ 6.695431727179641, 52.064285103927602 ], [ 6.696693477592427, 52.067386404882555 ], [ 6.694808573244845, 52.069673037470587 ], [ 6.714031157329425, 52.072856586099221 ], [ 6.735555528986328, 52.074594625606743 ], [ 6.743931774200203, 52.080445913173826 ], [ 6.74748781111003, 52.081820966819869 ], [ 6.751095884868336, 52.08489459161725 ], [ 6.750392839776326, 52.087451647536994 ], [ 6.745395162865422, 52.090058287599327 ], [ 6.744700311233268, 52.092898422287938 ], [ 6.750252788002582, 52.095666441511256 ], [ 6.754912343000941, 52.094762804274133 ], [ 6.757784429096761, 52.099260836453219 ], [ 6.757932055291078, 52.104073737052374 ], [ 6.759207978100584, 52.107457440233304 ], [ 6.760727826055754, 52.118768232945001 ], [ 6.716157934037078, 52.118146364168183 ], [ 6.702992088209118, 52.122259009500851 ], [ 6.697946202449166, 52.123448064530777 ], [ 6.677694497614807, 52.125937186763295 ], [ 6.662568911882248, 52.130066704469399 ], [ 6.669024498530969, 52.13707685964382 ], [ 6.672607230721884, 52.139303507690542 ], [ 6.674268608921804, 52.142683865226815 ], [ 6.673650050725847, 52.148354747808298 ], [ 6.671361479605442, 52.150362137273376 ], [ 6.673756162242444, 52.152035273205861 ], [ 6.673446809816593, 52.154870710028121 ], [ 6.670734308953645, 52.155749881511646 ], [ 6.674334969895145, 52.158542699156897 ], [ 6.672852470254396, 52.161390928224186 ], [ 6.673300655986601, 52.163368482411087 ], [ 6.671410539061152, 52.165654722049823 ], [ 6.665185613642323, 52.166855153504834 ], [ 6.664435850998499, 52.167996095056118 ], [ 6.645048101861362, 52.174151718670466 ], [ 6.640163218935172, 52.167406812152137 ], [ 6.634822388298665, 52.17227788503854 ], [ 6.631325751615023, 52.173164424683669 ], [ 6.628947279350409, 52.172056672556195 ], [ 6.625825968493062, 52.17237269097275 ], [ 6.625747335881623, 52.169541485316948 ], [ 6.621804732884557, 52.16845000397737 ], [ 6.617017654701998, 52.165101576168304 ], [ 6.612270172674367, 52.163168560711071 ], [ 6.609195899314057, 52.165182870775695 ], [ 6.607224967071324, 52.164636868492224 ], [ 6.603046519964501, 52.169211251061135 ], [ 6.606283862960798, 52.173142668998054 ], [ 6.596290273671376, 52.179759156354876 ], [ 6.589700647376676, 52.182092113621458 ], [ 6.574765624557524, 52.179694586049635 ], [ 6.555528983621364, 52.177337857006229 ], [ 6.522355877613018, 52.180776894453153 ], [ 6.514154234368573, 52.181421917359287 ], [ 6.504316410293072, 52.179249899144807 ], [ 6.496044361946169, 52.177062359723529 ], [ 6.492530528020767, 52.177378531213321 ], [ 6.494388143356832, 52.173396352302255 ], [ 6.493535553024287, 52.170572378729688 ], [ 6.487828878509379, 52.161280251145143 ], [ 6.483813792919389, 52.157069688680416 ], [ 6.48107657025191, 52.157095108594234 ], [ 6.471218193249699, 52.153787768826106 ], [ 6.4669102920213, 52.153544091467431 ], [ 6.461402168584007, 52.152178408377253 ], [ 6.466039291728707, 52.149870500443299 ], [ 6.466759585461798, 52.147315133019454 ], [ 6.470648439312294, 52.146429873245083 ], [ 6.471347782150517, 52.14302507368317 ], [ 6.474481955938971, 52.143279412091239 ], [ 6.473336780899692, 52.144422757530535 ], [ 6.481106627073507, 52.142368543864208 ], [ 6.481435059152845, 52.139816712307606 ], [ 6.483717745465619, 52.137246719255579 ], [ 6.485281176707334, 52.137232168261505 ], [ 6.488338196300705, 52.134371668787978 ], [ 6.486712108969142, 52.131838055979905 ], [ 6.488233456367904, 52.130124663199503 ], [ 6.488924226068844, 52.126436620768573 ], [ 6.491261801246117, 52.126131550786099 ], [ 6.491994286749054, 52.124142292134231 ], [ 6.487493817453845, 52.115971603110758 ], [ 6.482722426744849, 52.112617656122794 ], [ 6.481104390815096, 52.110367088987175 ], [ 6.482632170920836, 52.108936899219202 ], [ 6.482165230706724, 52.105826040706638 ], [ 6.479794035676713, 52.104715250474236 ], [ 6.478525501873674, 52.100762207108872 ], [ 6.476956439020822, 52.10049352900807 ], [ 6.472311237013515, 52.102235596540496 ], [ 6.473133626484293, 52.103927218317303 ], [ 6.470015944005848, 52.104239107613871 ], [ 6.469673386968242, 52.10622465071225 ], [ 6.466555519519002, 52.106536448871964 ], [ 6.461416563986113, 52.10403461454338 ], [ 6.460312852034849, 52.106876661053398 ], [ 6.455262187133973, 52.108055340544482 ], [ 6.452500942152873, 52.106947539658094 ], [ 6.445059490464837, 52.106164980291425 ], [ 6.439908433859883, 52.103095927874762 ], [ 6.437578360648427, 52.103683117369087 ], [ 6.424141278187282, 52.097005379323662 ], [ 6.418946961390509, 52.091953416667053 ], [ 6.413395892188245, 52.088320326202755 ], [ 6.411469653592532, 52.089469880734782 ], [ 6.403238060532447, 52.088125172584604 ], [ 6.400408744134856, 52.083901576817205 ], [ 6.403070777683687, 52.080763474408997 ], [ 6.403032182955276, 52.079064619708355 ], [ 6.406103429613699, 52.076772508212315 ], [ 6.410925032869567, 52.06568595503343 ], [ 6.413195039721064, 52.062551011270855 ], [ 6.413409898837596, 52.054902759307176 ], [ 6.416036761587297, 52.050348641929787 ], [ 6.420236425716335, 52.046347069402671 ], [ 6.423383207950693, 52.047452216298581 ], [ 6.42566456265594, 52.044883313249791 ], [ 6.424435340594767, 52.042345346670096 ], [ 6.427185320753534, 52.043170686492701 ], [ 6.428699375409417, 52.041174897645512 ], [ 6.432586395727163, 52.040574042817084 ], [ 6.43098010710673, 52.038605890830844 ], [ 6.433696883603832, 52.038015368258833 ], [ 6.43479399594508, 52.034890398304917 ], [ 6.432460788125221, 52.035194341306124 ], [ 6.435467872874588, 52.030353179320223 ], [ 6.440073797691723, 52.027196850697216 ], [ 6.43692139697103, 52.025809001341116 ], [ 6.438461018691964, 52.024945654175895 ], [ 6.462168966580534, 52.021616268333254 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0163\", \"naam\": \"Hellendoorn\", \"code\": \"0163\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.468367587475066, 52.326561531261021 ], [ 6.48683043788772, 52.342816225159517 ], [ 6.48842218396548, 52.343650981278557 ], [ 6.486493886429097, 52.345084857696556 ], [ 6.489263789538313, 52.345908647921597 ], [ 6.49091908356124, 52.349291470825392 ], [ 6.496045712987507, 52.350093092191166 ], [ 6.501222296317381, 52.352876339550541 ], [ 6.505928200198521, 52.352548743766938 ], [ 6.506785160458267, 52.355372520099571 ], [ 6.518961168675793, 52.355256668336068 ], [ 6.520691437433371, 52.36147025428447 ], [ 6.512449214281649, 52.361832114966347 ], [ 6.512470766526764, 52.362681474299777 ], [ 6.49913546930135, 52.363657106955642 ], [ 6.496098869084656, 52.367933412214931 ], [ 6.495518335287562, 52.376151269134425 ], [ 6.512566528524707, 52.381937315940434 ], [ 6.514131370394561, 52.381639239828161 ], [ 6.508501285435391, 52.392170613659346 ], [ 6.515937747380762, 52.406259247147936 ], [ 6.576026348856506, 52.417565076381464 ], [ 6.572638083936454, 52.423262788897645 ], [ 6.573818194559047, 52.423250971216163 ], [ 6.587877915886803, 52.433870400251678 ], [ 6.598255134539016, 52.439145326163391 ], [ 6.596319626169549, 52.454740375001052 ], [ 6.571685853493427, 52.446493607608573 ], [ 6.570535416202668, 52.44763784610678 ], [ 6.56300456543139, 52.445730522613246 ], [ 6.558364156189422, 52.448891520414243 ], [ 6.554413212498938, 52.448364137722642 ], [ 6.551301699593866, 52.449810672659162 ], [ 6.543072890121188, 52.4513071539522 ], [ 6.537911589717467, 52.449658285796026 ], [ 6.537889494025377, 52.448808947979579 ], [ 6.531132363028501, 52.446325722837152 ], [ 6.529441076304815, 52.441811094955526 ], [ 6.523873316630814, 52.439599173056685 ], [ 6.520746906117323, 52.440478680862917 ], [ 6.517919845225353, 52.437673858395399 ], [ 6.513999215258305, 52.438277582785261 ], [ 6.510822371232243, 52.437175022541879 ], [ 6.475490544309982, 52.440903059578957 ], [ 6.473571517522526, 52.442902945496073 ], [ 6.467336826368064, 52.445508584649374 ], [ 6.465065027192179, 52.449210629381675 ], [ 6.458096513114647, 52.454087887452467 ], [ 6.453515977618546, 52.460075977708193 ], [ 6.448404526058675, 52.460405039593425 ], [ 6.449999797461073, 52.461240282876112 ], [ 6.446062578732813, 52.461275526746981 ], [ 6.441976772115376, 52.455082011407292 ], [ 6.444332008355153, 52.454777843550694 ], [ 6.442642486117433, 52.449978844596714 ], [ 6.438265544787361, 52.448035491847364 ], [ 6.438605313553229, 52.445767036204785 ], [ 6.436977223473689, 52.443516031255648 ], [ 6.428599041639156, 52.438775910227314 ], [ 6.390176606182495, 52.428063454317048 ], [ 6.405233894163779, 52.415475060765921 ], [ 6.401479993067628, 52.40616230504807 ], [ 6.38829485099934, 52.379655469928672 ], [ 6.382418870658952, 52.380554571391066 ], [ 6.356792461571834, 52.377085928294306 ], [ 6.343278325236342, 52.370116352806164 ], [ 6.333449355357478, 52.351505398469165 ], [ 6.338753629036118, 52.342401023647675 ], [ 6.342485349903844, 52.333309095023758 ], [ 6.34629507137567, 52.327897777799805 ], [ 6.355898707360811, 52.318191240189641 ], [ 6.375970932189646, 52.320573754424956 ], [ 6.401939255752279, 52.323185608713267 ], [ 6.422016151501631, 52.325560293487499 ], [ 6.429853254074388, 52.324925078279193 ], [ 6.454878703988246, 52.320737142350261 ], [ 6.460752126585694, 52.320117585679064 ], [ 6.468367587475066, 52.326561531261021 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0717\", \"naam\": \"Veere\", \"code\": \"0717\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 3.587149742932576, 51.479118952081961 ], [ 3.584693397548806, 51.482763391984641 ], [ 3.583152889615974, 51.482739591606034 ], [ 3.57981325703977, 51.489202857236499 ], [ 3.585138521121715, 51.490984733727167 ], [ 3.585003944479404, 51.494381745409427 ], [ 3.581674937620603, 51.500561972300865 ], [ 3.578128622287958, 51.502489879570099 ], [ 3.578038528362079, 51.504754545157603 ], [ 3.575262387288162, 51.506694300893123 ], [ 3.583286922881356, 51.508518095480845 ], [ 3.578890516288479, 51.512415697401316 ], [ 3.583084739780069, 51.513613601797076 ], [ 3.582190328781609, 51.516715609324983 ], [ 3.584117401895902, 51.516745379302485 ], [ 3.583619670665175, 51.519570263785589 ], [ 3.596624291526056, 51.522319682733865 ], [ 3.593669111379425, 51.528789231363845 ], [ 3.590540196328533, 51.529874169279815 ], [ 3.589690755611748, 51.531843894973278 ], [ 3.593149478319976, 51.532180325209147 ], [ 3.602688137010725, 51.534875739230671 ], [ 3.603492621648333, 51.534038260062438 ], [ 3.613098618522308, 51.535034312554934 ], [ 3.616954828181634, 51.525178903151286 ], [ 3.621944242487009, 51.52582092846724 ], [ 3.63389474380773, 51.526000934485054 ], [ 3.634487678971693, 51.520628015011134 ], [ 3.64146940173911, 51.519599571948568 ], [ 3.651833328709901, 51.520887041887022 ], [ 3.656415755146267, 51.522088050791758 ], [ 3.658836239254143, 51.519291374691072 ], [ 3.681004087127752, 51.534912868323289 ], [ 3.696427581155087, 51.535137123040855 ], [ 3.698187146658066, 51.539694566027656 ], [ 3.698393865993586, 51.544512790736256 ], [ 3.694711875735213, 51.550124496363466 ], [ 3.684824926141789, 51.556495609624143 ], [ 3.677763867758677, 51.559508279738644 ], [ 3.671034185686709, 51.563941651007958 ], [ 3.662835002968003, 51.56637021857243 ], [ 3.653102289928067, 51.568492224641659 ], [ 3.637023715210804, 51.584964444409813 ], [ 3.633804405580725, 51.588315231412068 ], [ 3.631644189738034, 51.594231112548485 ], [ 3.631556528838159, 51.596495814566744 ], [ 3.638528182694789, 51.596033784082103 ], [ 3.654369093566297, 51.595986371221954 ], [ 3.668976618127557, 51.597901442901431 ], [ 3.67240887381395, 51.599084826952044 ], [ 3.681257926108887, 51.600064011082537 ], [ 3.683929003441518, 51.600952695799876 ], [ 3.690869075965382, 51.601336827904746 ], [ 3.695952398971067, 51.599710970869168 ], [ 3.698988816259231, 51.601171088069535 ], [ 3.707964667602142, 51.598751103510857 ], [ 3.748984940196396, 51.650316953242914 ], [ 3.611292389269427, 51.650291099744166 ], [ 3.570963514468457, 51.604634476685867 ], [ 3.486099006374961, 51.573543011018529 ], [ 3.484561228678271, 51.564170315593664 ], [ 3.482703486704834, 51.562440476196457 ], [ 3.47962910680725, 51.562107067448039 ], [ 3.478157403615973, 51.560383453662894 ], [ 3.475095119782891, 51.559766857578616 ], [ 3.472490302418889, 51.557458093951475 ], [ 3.470561600857894, 51.557426473751462 ], [ 3.464159897135378, 51.553638853555142 ], [ 3.456602242293351, 51.54983177384684 ], [ 3.454673879084143, 51.549799893113232 ], [ 3.434537692651113, 51.542383416706265 ], [ 3.432350090083973, 51.530449608800268 ], [ 3.432544916949574, 51.525920592310591 ], [ 3.434954994500776, 51.523694765803334 ], [ 3.443616444905522, 51.519590232297134 ], [ 3.443676963371501, 51.51817490600061 ], [ 3.450445912871218, 51.513188572379221 ], [ 3.476042026312831, 51.500580135465889 ], [ 3.486200787964405, 51.49734682409283 ], [ 3.493311813459402, 51.493213447496792 ], [ 3.496043520064342, 51.492407943959947 ], [ 3.496884486138584, 51.490721984452925 ], [ 3.502464651844449, 51.486280005641227 ], [ 3.514624800748557, 51.4717460762866 ], [ 3.525414104363165, 51.462287802201352 ], [ 3.528050916341134, 51.463746154953547 ], [ 3.54145560816932, 51.465658529910662 ], [ 3.546391614603949, 51.467436065409295 ], [ 3.548621529526845, 51.469454043369169 ], [ 3.552799589344142, 51.470936095910766 ], [ 3.555235045557747, 51.467858495954566 ], [ 3.557148647001269, 51.468171781962766 ], [ 3.560115022179973, 51.471050860082705 ], [ 3.564372965079023, 51.470550928736891 ], [ 3.566196143215994, 51.473128724432769 ], [ 3.565992252904521, 51.47822420493987 ], [ 3.57066978638556, 51.476880808286602 ], [ 3.574112910841083, 51.477500865526537 ], [ 3.575777177844039, 51.474410866235864 ], [ 3.582266998361981, 51.47592770700124 ], [ 3.584091405043984, 51.478505228069537 ], [ 3.587149742932576, 51.479118952081961 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1842\", \"naam\": \"Midden-Delfland\", \"code\": \"1842\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.292784081855014, 51.921185265790669 ], [ 4.30771618726918, 51.931235590631232 ], [ 4.313853306091231, 51.934973467460274 ], [ 4.315738016555369, 51.937539514090304 ], [ 4.323010580907558, 51.942703269481051 ], [ 4.323815732810841, 51.941577732382662 ], [ 4.336545351105698, 51.946506658053686 ], [ 4.335364482693708, 51.947062510216632 ], [ 4.350834751859874, 51.951447941695854 ], [ 4.367099492791108, 51.955271804021244 ], [ 4.36346683338549, 51.96090430312541 ], [ 4.379378511252573, 51.963307348877905 ], [ 4.389853267104616, 51.965095850579836 ], [ 4.391806386588736, 51.96482919379941 ], [ 4.393414006773825, 51.962577172291432 ], [ 4.403066973312632, 51.966339959228421 ], [ 4.399073428947196, 51.97083770254585 ], [ 4.397830258031177, 51.974225670249034 ], [ 4.393860560020888, 51.977590633832335 ], [ 4.383772188100569, 51.975805806773302 ], [ 4.386191073604715, 51.972144790808123 ], [ 4.369126947027218, 51.968883113874291 ], [ 4.368283859356933, 51.971707840100756 ], [ 4.359359576322127, 51.970214184440096 ], [ 4.356471115110643, 51.977268983054159 ], [ 4.338232295475291, 51.974275729663461 ], [ 4.332633696856955, 51.980456154663862 ], [ 4.331761441190605, 51.984413182471215 ], [ 4.328618476551413, 51.985517759882732 ], [ 4.324232897734652, 51.989726274204109 ], [ 4.325737585994026, 51.992005485719829 ], [ 4.333113282576937, 51.993204602650167 ], [ 4.331448198438612, 51.997720923679786 ], [ 4.337656020455977, 51.998909264720872 ], [ 4.335654614287989, 52.001157019388017 ], [ 4.341077044549561, 52.002621357831515 ], [ 4.338276350334346, 52.005711655582807 ], [ 4.336347686843721, 52.00484484330736 ], [ 4.332767058893336, 52.007928045572243 ], [ 4.323104386587374, 52.004442645973953 ], [ 4.320288862782647, 52.008098795123452 ], [ 4.320651648124665, 52.009234894943802 ], [ 4.32528833516222, 52.010976036175862 ], [ 4.326027631820616, 52.012681919388029 ], [ 4.319226040732056, 52.019983672093979 ], [ 4.309972062469418, 52.015651308282912 ], [ 4.300713012054966, 52.011601359471655 ], [ 4.279896767232096, 52.00206161191786 ], [ 4.265237873567491, 51.995975452741362 ], [ 4.267646309045081, 51.993166335021293 ], [ 4.273908020608824, 51.992092924276925 ], [ 4.280183413433466, 51.99045290015804 ], [ 4.280232335940227, 51.98847092291205 ], [ 4.284197570176285, 51.985676109376691 ], [ 4.287620097201692, 51.989106607530495 ], [ 4.289999055846209, 51.987429585819058 ], [ 4.29205743227618, 51.982917482335679 ], [ 4.29554926704465, 51.98351634456597 ], [ 4.296369617493566, 51.98182472376282 ], [ 4.301836376155219, 51.981308875423721 ], [ 4.303039091093038, 51.979903941227455 ], [ 4.298420221042546, 51.977595644171771 ], [ 4.296083419982267, 51.977573993215628 ], [ 4.287619266046976, 51.973247097951301 ], [ 4.289211623252092, 51.971845943786818 ], [ 4.284976736067781, 51.969823895924272 ], [ 4.282250950560517, 51.969798321729954 ], [ 4.280262055334441, 51.97147885808063 ], [ 4.278342984070346, 51.970327958112833 ], [ 4.273196413919387, 51.973677804624209 ], [ 4.271340803597481, 51.96997853303936 ], [ 4.276529130056633, 51.964929923428286 ], [ 4.263411634925807, 51.959990797839069 ], [ 4.259539872867361, 51.959104114831291 ], [ 4.253707494351183, 51.958764837741704 ], [ 4.233991556569413, 51.953192191393711 ], [ 4.234482582884171, 51.949232082528873 ], [ 4.240458197885009, 51.943909545598281 ], [ 4.240487118277912, 51.942776992254906 ], [ 4.257966148331547, 51.928785749184847 ], [ 4.264275713878388, 51.925447691644067 ], [ 4.270549161759904, 51.923524998790441 ], [ 4.27873204988585, 51.923036037642348 ], [ 4.292784081855014, 51.921185265790669 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0664\", \"naam\": \"Goes\", \"code\": \"0664\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 3.937908326872927, 51.535833347577508 ], [ 3.933244516969338, 51.536908340128967 ], [ 3.932355385228297, 51.54057933538413 ], [ 3.927609090957833, 51.544202203591993 ], [ 3.922512825783217, 51.546687553921089 ], [ 3.920216785603541, 51.546092277390798 ], [ 3.914403515050792, 51.546868856144592 ], [ 3.912392173989035, 51.54939261572185 ], [ 3.907735597590852, 51.550183460599946 ], [ 3.89846836599081, 51.550348996337263 ], [ 3.88966150391642, 51.548253796097733 ], [ 3.888155959232386, 51.547101539232713 ], [ 3.870583084882131, 51.541776466142956 ], [ 3.862117323247741, 51.541099786931625 ], [ 3.856313271327554, 51.541590358939416 ], [ 3.852399198686722, 51.543238446897085 ], [ 3.841773917238273, 51.549329678507249 ], [ 3.840558875386207, 51.551013045204321 ], [ 3.834319182702825, 51.552912975094181 ], [ 3.816701524474819, 51.548995377203482 ], [ 3.805248122841886, 51.545441960676229 ], [ 3.801460371587684, 51.543407914088412 ], [ 3.793390995085626, 51.542448383540567 ], [ 3.76832514393522, 51.552867052784563 ], [ 3.762904383410916, 51.553358316620042 ], [ 3.756001491407632, 51.55212917699847 ], [ 3.754509408781933, 51.550692110363514 ], [ 3.743811429243256, 51.54770967516032 ], [ 3.737753272569517, 51.544508595189477 ], [ 3.737043628237485, 51.542799093762788 ], [ 3.729089437982002, 51.53872101347779 ], [ 3.718833538845479, 51.534326278058998 ], [ 3.713581326970056, 51.530285669447913 ], [ 3.739022283566804, 51.520167271536828 ], [ 3.741396602427644, 51.518501272111124 ], [ 3.746854285161851, 51.516878574854438 ], [ 3.745080465183968, 51.51260494364552 ], [ 3.710978041527508, 51.506738683711532 ], [ 3.710717935425303, 51.503335959620841 ], [ 3.705698288308791, 51.503547027471384 ], [ 3.70535484346846, 51.502409082808818 ], [ 3.726973908868121, 51.501585497907548 ], [ 3.73898012781452, 51.500056116228961 ], [ 3.757900467707659, 51.499188691863928 ], [ 3.767563106615936, 51.498473395372855 ], [ 3.777265531499381, 51.496624869469322 ], [ 3.783114564970692, 51.494722663344959 ], [ 3.79687587088937, 51.486980090155811 ], [ 3.803512921525587, 51.484521125347129 ], [ 3.810495178215206, 51.48319942730452 ], [ 3.815512137920362, 51.482983842726753 ], [ 3.822820578699694, 51.483365261510897 ], [ 3.832786688043167, 51.484914611315865 ], [ 3.841251163008454, 51.485310259798091 ], [ 3.847818555829561, 51.484830567212732 ], [ 3.850543545886834, 51.484016746798524 ], [ 3.855156180882047, 51.484360617790479 ], [ 3.869474140377666, 51.482564973474268 ], [ 3.872245736717717, 51.480335056367728 ], [ 3.875336360934465, 51.480091888140628 ], [ 3.880700359581647, 51.481010960343255 ], [ 3.891512761552585, 51.480300289393732 ], [ 3.912742263791155, 51.479154196356099 ], [ 3.916896575053306, 51.481755738562349 ], [ 3.914869965779609, 51.484845809117999 ], [ 3.920996626723136, 51.486055871023289 ], [ 3.924866901804355, 51.485537942798388 ], [ 3.925822469628281, 51.491781124024556 ], [ 3.940426267730621, 51.493095957083007 ], [ 3.943758950169366, 51.497385747663969 ], [ 3.956287076621175, 51.503487895591661 ], [ 3.965061843375302, 51.506427440001644 ], [ 3.964140456202355, 51.511231203824877 ], [ 3.963462473977137, 51.520569679383662 ], [ 3.967920589853053, 51.526005385294305 ], [ 3.969866009982596, 51.525462538685325 ], [ 3.971320003951129, 51.528312510966153 ], [ 3.965877729401912, 51.52966258987378 ], [ 3.952328747056479, 51.531196359498814 ], [ 3.94611436139533, 51.532536038780819 ], [ 3.937908326872927, 51.535833347577508 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1652\", \"naam\": \"Gemert-Bakel\", \"code\": \"1652\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.852423719358964, 51.504245723029037 ], [ 5.838392089776445, 51.566321719253821 ], [ 5.820658584746845, 51.568654449433289 ], [ 5.800676795576518, 51.578638835956582 ], [ 5.788459772881754, 51.594257346701404 ], [ 5.78656358929552, 51.598228617333341 ], [ 5.758718404376897, 51.59407246535747 ], [ 5.732813553338104, 51.590470366000112 ], [ 5.709225745439658, 51.586289777869695 ], [ 5.706142477103986, 51.587147826022651 ], [ 5.699556251250391, 51.58405044390566 ], [ 5.660549530576382, 51.583015414095989 ], [ 5.651279134923867, 51.582470339889554 ], [ 5.651650397098992, 51.579920726865467 ], [ 5.654329764571379, 51.575949871701177 ], [ 5.656639448901908, 51.57481177897904 ], [ 5.655078488262637, 51.571983396004889 ], [ 5.65236299933107, 51.569724012813722 ], [ 5.654654052760331, 51.565470829226769 ], [ 5.660360211520453, 51.551580940254382 ], [ 5.666851815603811, 51.540520854720405 ], [ 5.669923848727199, 51.538247871777799 ], [ 5.674902689211934, 51.532571744340942 ], [ 5.682199712810259, 51.527739161330096 ], [ 5.678346756389105, 51.528315230209678 ], [ 5.677568188068448, 51.527184375120505 ], [ 5.680644272442713, 51.525760691220256 ], [ 5.674859642907745, 51.525775087629093 ], [ 5.679079870275146, 51.522366229623202 ], [ 5.682137197933814, 51.518110564816652 ], [ 5.68520881104793, 51.516120372057856 ], [ 5.684033632054966, 51.513291377773704 ], [ 5.685957588153149, 51.512720071492033 ], [ 5.68399664178392, 51.507627492991944 ], [ 5.698619946300089, 51.503907802171824 ], [ 5.708242340052566, 51.501899334916494 ], [ 5.707451513041668, 51.49906951348477 ], [ 5.705127142231928, 51.497376672083142 ], [ 5.707822947977093, 51.497086097374378 ], [ 5.712431516081668, 51.494807748463423 ], [ 5.71240316095582, 51.490843032723099 ], [ 5.718168904851874, 51.488844423716699 ], [ 5.721609783984202, 51.485153015425148 ], [ 5.725841718026029, 51.484291210261773 ], [ 5.728551492168719, 51.485982514192941 ], [ 5.732402374017716, 51.485687985299769 ], [ 5.734705522688015, 51.484548348728232 ], [ 5.738564993234515, 51.485386391049147 ], [ 5.749362343535593, 51.486486179607461 ], [ 5.757852934028141, 51.488158720973061 ], [ 5.764401033238622, 51.487854538246097 ], [ 5.768649028387012, 51.488973531521886 ], [ 5.773270548881949, 51.488675133032928 ], [ 5.778291940680558, 51.490074415419123 ], [ 5.78638896541515, 51.490613400597596 ], [ 5.793335204134637, 51.491722236621293 ], [ 5.799909271518473, 51.494247980798221 ], [ 5.801062806170367, 51.493960695144843 ], [ 5.852423719358964, 51.504245723029037 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0828\", \"naam\": \"Oss\", \"code\": \"0828\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.474327845915769, 51.728864445572057 ], [ 5.489057786931371, 51.733100425375071 ], [ 5.503012680394519, 51.736202555835277 ], [ 5.506890840468053, 51.737614612720485 ], [ 5.515029747424815, 51.738455581885397 ], [ 5.523945606763086, 51.739861464511506 ], [ 5.534021706183653, 51.740415644320557 ], [ 5.540604948132334, 51.73927443557659 ], [ 5.548345170051487, 51.736715309848471 ], [ 5.560339639557667, 51.732450304026507 ], [ 5.57195606190541, 51.731016587281424 ], [ 5.579320178846626, 51.73185431206057 ], [ 5.58086857179641, 51.731568568728726 ], [ 5.577399872933949, 51.735822139411773 ], [ 5.576275525178611, 51.744886107182595 ], [ 5.596438042760642, 51.747400547708686 ], [ 5.597227610941742, 51.750514246227461 ], [ 5.602658882233747, 51.751637148997787 ], [ 5.611974694346253, 51.754451562279932 ], [ 5.615084037073273, 51.756144706178702 ], [ 5.616628715529515, 51.755008923345159 ], [ 5.620121499482509, 51.755851606395765 ], [ 5.635639801759888, 51.758368452264577 ], [ 5.633715585899991, 51.760921244604852 ], [ 5.648075008855172, 51.763722071219838 ], [ 5.652717094679987, 51.762012491435961 ], [ 5.660044938508803, 51.755765427159311 ], [ 5.667388336266952, 51.752349785601098 ], [ 5.66977762764062, 51.7625389724613 ], [ 5.673686627661413, 51.767626939295738 ], [ 5.674851553842768, 51.767907277576434 ], [ 5.677150505460069, 51.763653728767167 ], [ 5.680237170710355, 51.761380511471486 ], [ 5.685263562527068, 51.75938548586182 ], [ 5.690688555956488, 51.759088367205194 ], [ 5.696130926937766, 51.761339684816335 ], [ 5.701221648097714, 51.768689157259104 ], [ 5.708228731752502, 51.772634864988781 ], [ 5.71134903773082, 51.775175007191457 ], [ 5.703223709541762, 51.777745927446865 ], [ 5.699755161630915, 51.780870340665423 ], [ 5.694368120196469, 51.787114801783993 ], [ 5.687410904087669, 51.790814316630673 ], [ 5.682761603982858, 51.79167570546354 ], [ 5.671129548376499, 51.792554030248276 ], [ 5.665705649266286, 51.793699806726899 ], [ 5.657584572783914, 51.797966684921505 ], [ 5.651796640031044, 51.803360516742082 ], [ 5.64642145445586, 51.813284192156857 ], [ 5.642949453389379, 51.816973289464975 ], [ 5.638302919085223, 51.818965662215675 ], [ 5.630931144394427, 51.819547596017806 ], [ 5.625107329294657, 51.81927636628307 ], [ 5.619286502567324, 51.819571221443503 ], [ 5.60766680189665, 51.824691058756429 ], [ 5.597977722829523, 51.828107148510149 ], [ 5.591772491963119, 51.829534084484159 ], [ 5.585948869968294, 51.829544099292981 ], [ 5.571576963849035, 51.827868442745668 ], [ 5.561094819964162, 51.827884457332473 ], [ 5.555267173667751, 51.826760199310471 ], [ 5.552155201859069, 51.825065484110134 ], [ 5.54864207272794, 51.819689778640267 ], [ 5.543974322886828, 51.816864220520401 ], [ 5.539314811969962, 51.816303981211391 ], [ 5.535046330061494, 51.816592632515196 ], [ 5.529229726821169, 51.81829896130548 ], [ 5.51913959775796, 51.818877133091291 ], [ 5.512937095979185, 51.821715843296587 ], [ 5.509064544973751, 51.825118202399089 ], [ 5.505189923991789, 51.827954056307618 ], [ 5.498983886416281, 51.830225650489062 ], [ 5.494714503528541, 51.83079602262557 ], [ 5.487335790758004, 51.8299529943395 ], [ 5.481894376874578, 51.827125631156974 ], [ 5.47916929382808, 51.82344634731264 ], [ 5.476827736870598, 51.817218004447831 ], [ 5.474105854904518, 51.814671353523195 ], [ 5.467114250203736, 51.811561252097455 ], [ 5.459738745397603, 51.810433297034926 ], [ 5.44537873440659, 51.809591748643633 ], [ 5.439557662205473, 51.809594498828936 ], [ 5.432185437425745, 51.810730324251104 ], [ 5.427917569976474, 51.811864645633037 ], [ 5.422098405763241, 51.814698419891194 ], [ 5.414728211883808, 51.821213736290289 ], [ 5.410459059459554, 51.822630610031467 ], [ 5.406188916447396, 51.822348195822535 ], [ 5.401530283649, 51.820932919612567 ], [ 5.394541869371044, 51.812721094650776 ], [ 5.383675722344333, 51.804508798500635 ], [ 5.375917120883373, 51.79657901331165 ], [ 5.37203874907889, 51.792897115360347 ], [ 5.366998076481798, 51.7875157552212 ], [ 5.362347836535323, 51.779585546363329 ], [ 5.36080086407636, 51.772222262066705 ], [ 5.360418959948809, 51.762310505049967 ], [ 5.360032311369576, 51.76061127193104 ], [ 5.356545943815672, 51.756928935678069 ], [ 5.353446046666967, 51.755512133617451 ], [ 5.355774431860828, 51.751548103224017 ], [ 5.361200611128356, 51.751266233758749 ], [ 5.373989857073226, 51.75325069249606 ], [ 5.389106034495068, 51.759198410039453 ], [ 5.392594919220572, 51.760331059867646 ], [ 5.430975657459202, 51.764004438161074 ], [ 5.4387305449637, 51.765134038326025 ], [ 5.44414350519435, 51.753520700054281 ], [ 5.443752358815519, 51.750688978742801 ], [ 5.451487899086796, 51.739640517979595 ], [ 5.450712559243489, 51.739357750271701 ], [ 5.45419387618052, 51.735391124750258 ], [ 5.451867241065899, 51.733976476576544 ], [ 5.454577499797279, 51.732842179009637 ], [ 5.457672368397898, 51.730008436545347 ], [ 5.459997608959553, 51.730573395502518 ], [ 5.462705562475445, 51.728306143291888 ], [ 5.463088646008696, 51.725757167886449 ], [ 5.474327845915769, 51.728864445572057 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0453\", \"naam\": \"Velsen\", \"code\": \"0453\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.68266370423372, 52.413792635740869 ], [ 4.690074608495891, 52.417800859934459 ], [ 4.700577009524832, 52.425507770784982 ], [ 4.707641480980217, 52.426681172967221 ], [ 4.711943490725651, 52.428404780380639 ], [ 4.722101223432554, 52.433276093043879 ], [ 4.711433351455439, 52.436047427847782 ], [ 4.70786551091935, 52.437726041400516 ], [ 4.674909838328454, 52.455655360463041 ], [ 4.667365009896371, 52.459574144805565 ], [ 4.661815560256636, 52.461805666862062 ], [ 4.667615964894546, 52.468353875111553 ], [ 4.653293005620831, 52.47704429015112 ], [ 4.646596863787934, 52.47700266065879 ], [ 4.647754858268607, 52.478425725224461 ], [ 4.637479787250579, 52.480343387078392 ], [ 4.620900864362721, 52.482219597615945 ], [ 4.618123618189915, 52.483334293030943 ], [ 4.612598476216657, 52.483864672047503 ], [ 4.60397174647447, 52.481542665950293 ], [ 4.60275981902163, 52.483233667952412 ], [ 4.596012127075787, 52.486020532152281 ], [ 4.566338568806455, 52.49261493392175 ], [ 4.558654516985121, 52.48208422835458 ], [ 4.554789871661479, 52.478092781287394 ], [ 4.546901261536292, 52.478603486250677 ], [ 4.536698090625694, 52.476548550818883 ], [ 4.52380520896363, 52.471075116880534 ], [ 4.520687876768204, 52.469353344608614 ], [ 4.517632025566945, 52.464517043614265 ], [ 4.517676556158604, 52.462251990159494 ], [ 4.519739696602977, 52.457453168973025 ], [ 4.526548385508285, 52.451556168445059 ], [ 4.530118699654145, 52.450166173639914 ], [ 4.537231463705729, 52.448801527681098 ], [ 4.543130529655231, 52.449126855285698 ], [ 4.544359969552441, 52.446587050656014 ], [ 4.544106606566131, 52.439222753576601 ], [ 4.560268491545988, 52.437920763939246 ], [ 4.587882600551361, 52.434428994897111 ], [ 4.613997586359301, 52.426390289869452 ], [ 4.617961476504362, 52.42471705969389 ], [ 4.621497388966656, 52.425023134266588 ], [ 4.625062590031225, 52.423630262249993 ], [ 4.623513349588597, 52.422204428535203 ], [ 4.625902960860818, 52.420520776646249 ], [ 4.62873909793606, 52.415725045788477 ], [ 4.627612477114665, 52.412602934913266 ], [ 4.631560129562676, 52.411778664995794 ], [ 4.636294239705772, 52.410959251820373 ], [ 4.645174203680627, 52.420926208435809 ], [ 4.650947983512204, 52.428607838921806 ], [ 4.661617818049823, 52.42584194988104 ], [ 4.665954841659459, 52.425302087619038 ], [ 4.67190205762041, 52.422506436099184 ], [ 4.674326309931213, 52.418556661009021 ], [ 4.681393482132149, 52.419448483660638 ], [ 4.68266370423372, 52.413792635740869 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1735\", \"naam\": \"Hof van Twente\", \"code\": \"1735\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.645048101861362, 52.174151718670466 ], [ 6.647475095160617, 52.176957854643767 ], [ 6.642908417619251, 52.181537807654955 ], [ 6.639004083375857, 52.181862501350835 ], [ 6.634420191618215, 52.185875888859357 ], [ 6.629740764564905, 52.186491665750466 ], [ 6.624325795082745, 52.188814183856884 ], [ 6.653034766902191, 52.193607350143481 ], [ 6.671957385968041, 52.198217317274164 ], [ 6.697346360126835, 52.196238951552871 ], [ 6.703283494178244, 52.198438531408058 ], [ 6.712520731997215, 52.206264916715703 ], [ 6.701869617684356, 52.2168626149099 ], [ 6.703119497816738, 52.219397529268868 ], [ 6.71232738182948, 52.226091443554289 ], [ 6.717083298958347, 52.241047803791538 ], [ 6.718557102414501, 52.237915950934813 ], [ 6.720915867204402, 52.238172537841017 ], [ 6.719910268086358, 52.243847975492663 ], [ 6.717942971682173, 52.243586955904462 ], [ 6.719662615167877, 52.24866523682622 ], [ 6.72409159247897, 52.252580041271187 ], [ 6.750719296279891, 52.251709235572392 ], [ 6.753087663987097, 52.252248281118561 ], [ 6.750988332200209, 52.26048548494213 ], [ 6.748836223240326, 52.267024015307918 ], [ 6.749288889483398, 52.269001227364264 ], [ 6.747580147515062, 52.277233830098012 ], [ 6.743056789815525, 52.283233091979703 ], [ 6.737286922438815, 52.286980789574926 ], [ 6.728029192348612, 52.292183827123274 ], [ 6.717677357918187, 52.300230448947516 ], [ 6.711894702427447, 52.303693804049836 ], [ 6.704541841739103, 52.307174375042244 ], [ 6.697521717243934, 52.308668393527967 ], [ 6.690843612378883, 52.308459024949805 ], [ 6.684900614147938, 52.306542018507301 ], [ 6.676538545694815, 52.302385535851116 ], [ 6.668202528321748, 52.299077784030494 ], [ 6.657906592931329, 52.295790538953263 ], [ 6.657490079647882, 52.294945421170695 ], [ 6.647644297162497, 52.293634839651013 ], [ 6.637791121183807, 52.292040322711344 ], [ 6.636574719293934, 52.290637199944619 ], [ 6.633453087371239, 52.291236553297935 ], [ 6.625961921457527, 52.289899323249912 ], [ 6.60542498837648, 52.270572228364721 ], [ 6.595247944899179, 52.271243118998207 ], [ 6.575194179099578, 52.26918089497704 ], [ 6.56816060408378, 52.270100997252136 ], [ 6.564300402747268, 52.272405081829049 ], [ 6.553997730664481, 52.283268664981236 ], [ 6.541420018665718, 52.282259409447057 ], [ 6.525763933859491, 52.283544063781612 ], [ 6.517514601684343, 52.283056870678095 ], [ 6.485142446906171, 52.274583138902322 ], [ 6.475649708795769, 52.271272669780807 ], [ 6.471288987689781, 52.269330422483485 ], [ 6.470855570085583, 52.26763524985563 ], [ 6.461736827976322, 52.263470669909943 ], [ 6.447882832018906, 52.257932051960225 ], [ 6.441578524678874, 52.256572537797886 ], [ 6.439180193916298, 52.254611585264499 ], [ 6.429701756632804, 52.251580524261783 ], [ 6.431647799048161, 52.250996950282875 ], [ 6.428446639130011, 52.248193306802463 ], [ 6.426108833701034, 52.248780275545734 ], [ 6.416547381544047, 52.242067421614067 ], [ 6.416827808112641, 52.23725073323638 ], [ 6.42297708333723, 52.23209951228344 ], [ 6.428660435658339, 52.223836956462556 ], [ 6.432118600294709, 52.220974477199562 ], [ 6.439856842531435, 52.216941033152786 ], [ 6.446419106180161, 52.212917628630763 ], [ 6.453303914446941, 52.206058997449368 ], [ 6.454781570158451, 52.202364117796996 ], [ 6.4606052938761, 52.200328933098746 ], [ 6.467266175455082, 52.200551356890784 ], [ 6.470369959938259, 52.199390131261396 ], [ 6.469463371188805, 52.194300937687323 ], [ 6.472840766133973, 52.188322809573712 ], [ 6.47785154284878, 52.185161445336092 ], [ 6.479347290034006, 52.182315648609901 ], [ 6.488695377636616, 52.18052956529916 ], [ 6.491021767074338, 52.179658232230985 ], [ 6.492530528020767, 52.177378531213321 ], [ 6.496044361946169, 52.177062359723529 ], [ 6.504316410293072, 52.179249899144807 ], [ 6.514154234368573, 52.181421917359287 ], [ 6.522355877613018, 52.180776894453153 ], [ 6.555528983621364, 52.177337857006229 ], [ 6.574765624557524, 52.179694586049635 ], [ 6.589700647376676, 52.182092113621458 ], [ 6.596290273671376, 52.179759156354876 ], [ 6.606283862960798, 52.173142668998054 ], [ 6.603046519964501, 52.169211251061135 ], [ 6.607224967071324, 52.164636868492224 ], [ 6.609195899314057, 52.165182870775695 ], [ 6.612270172674367, 52.163168560711071 ], [ 6.617017654701998, 52.165101576168304 ], [ 6.621804732884557, 52.16845000397737 ], [ 6.625747335881623, 52.169541485316948 ], [ 6.625825968493062, 52.17237269097275 ], [ 6.628947279350409, 52.172056672556195 ], [ 6.631325751615023, 52.173164424683669 ], [ 6.634822388298665, 52.17227788503854 ], [ 6.640163218935172, 52.167406812152137 ], [ 6.645048101861362, 52.174151718670466 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0175\", \"naam\": \"Ommen\", \"code\": \"0175\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.449999797461073, 52.461240282876112 ], [ 6.448099119557435, 52.464089108692313 ], [ 6.448153471203975, 52.466354057429385 ], [ 6.45091665211073, 52.466612469319166 ], [ 6.452837727002687, 52.464612954990805 ], [ 6.452899147042162, 52.467161018766227 ], [ 6.450950713855597, 52.46802806058642 ], [ 6.452559955337835, 52.469429503394217 ], [ 6.458480581800194, 52.469942497065205 ], [ 6.461672254375163, 52.471612684261821 ], [ 6.461713548020172, 52.473311387031899 ], [ 6.466888629079499, 52.475529797968058 ], [ 6.472409431378459, 52.475762562916138 ], [ 6.478366078669934, 52.477690139463803 ], [ 6.486616099142827, 52.476764370049821 ], [ 6.489380149066186, 52.477021882346818 ], [ 6.492988620181944, 52.479536899847012 ], [ 6.495738676004248, 52.479228034670889 ], [ 6.49499350390411, 52.480934083243618 ], [ 6.50368057166459, 52.48170212818966 ], [ 6.505492605245561, 52.491030004637338 ], [ 6.554270865052977, 52.487728076123332 ], [ 6.59504734216167, 52.480240052835534 ], [ 6.60030759739003, 52.485283667663666 ], [ 6.609571351884614, 52.492551322751275 ], [ 6.592421413856519, 52.49952329751126 ], [ 6.572552870611151, 52.508219039185782 ], [ 6.56829320029527, 52.511093354490455 ], [ 6.56124360477903, 52.51286243486981 ], [ 6.560121268105621, 52.515138988201727 ], [ 6.565632362504567, 52.514801180914766 ], [ 6.567262081219992, 52.51676724741202 ], [ 6.566117273892054, 52.518194537168817 ], [ 6.560635864219484, 52.519664793514053 ], [ 6.55499679178694, 52.515189552200134 ], [ 6.556930238385459, 52.513754595765811 ], [ 6.553352720377823, 52.51265710001266 ], [ 6.55025903524947, 52.514952922728625 ], [ 6.545945239937895, 52.515844685046645 ], [ 6.546808003964506, 52.518668056898214 ], [ 6.541296276420145, 52.519004991222495 ], [ 6.542932483619217, 52.52125450050989 ], [ 6.541101878599056, 52.526652735482287 ], [ 6.534048701078496, 52.5284202039891 ], [ 6.531077676753285, 52.535528355396721 ], [ 6.529778794646488, 52.546301638210991 ], [ 6.521859054501696, 52.560536473492775 ], [ 6.504884180833691, 52.575988989074276 ], [ 6.496875294773943, 52.571533319826536 ], [ 6.488522881319849, 52.569062526055312 ], [ 6.471544607622828, 52.568935645742201 ], [ 6.437996486076052, 52.569237333899103 ], [ 6.431721743826368, 52.570991741006509 ], [ 6.423038255730082, 52.571067823094879 ], [ 6.415117733304134, 52.570003980513256 ], [ 6.402581945165494, 52.591349633215472 ], [ 6.392703247205628, 52.591150516003971 ], [ 6.325589457174448, 52.592549292510803 ], [ 6.323220016123495, 52.592567991142822 ], [ 6.331592301509268, 52.577777005663322 ], [ 6.355911758881125, 52.534539214434545 ], [ 6.358541557076437, 52.528571105843675 ], [ 6.360106396660975, 52.527991939257895 ], [ 6.361596179238641, 52.524015300464526 ], [ 6.352108439050413, 52.522960163182425 ], [ 6.351338430272008, 52.523815940168333 ], [ 6.344943779774018, 52.519903332306534 ], [ 6.338672311183609, 52.521652832959504 ], [ 6.33158147840959, 52.521992667262843 ], [ 6.33227909343127, 52.517739537205721 ], [ 6.333813540016876, 52.515745098496602 ], [ 6.332169998598237, 52.512643312038392 ], [ 6.334510845119947, 52.511491950111555 ], [ 6.336790677736035, 52.507509304860719 ], [ 6.334413659421505, 52.506961968496078 ], [ 6.344121399457712, 52.481964756508376 ], [ 6.342788703402051, 52.456772919696739 ], [ 6.378614430870167, 52.456478604941218 ], [ 6.370983219638751, 52.449745952923116 ], [ 6.373281862528557, 52.446895069998881 ], [ 6.37606238836917, 52.448004606810287 ], [ 6.381007584087366, 52.440317423266549 ], [ 6.384136781354886, 52.439441596610912 ], [ 6.380378893789194, 52.429845087696243 ], [ 6.390176606182495, 52.428063454317048 ], [ 6.428599041639156, 52.438775910227314 ], [ 6.436977223473689, 52.443516031255648 ], [ 6.438605313553229, 52.445767036204785 ], [ 6.438265544787361, 52.448035491847364 ], [ 6.442642486117433, 52.449978844596714 ], [ 6.444332008355153, 52.454777843550694 ], [ 6.441976772115376, 52.455082011407292 ], [ 6.446062578732813, 52.461275526746981 ], [ 6.449999797461073, 52.461240282876112 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1955\", \"naam\": \"Montferland\", \"code\": \"1955\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.299166631687503, 51.867798821985261 ], [ 6.299178110465133, 51.868365138132056 ], [ 6.312017305350103, 51.869114311567706 ], [ 6.312394203570043, 51.868544935906996 ], [ 6.320164966952882, 51.868483441601747 ], [ 6.324450673361257, 51.869015713397204 ], [ 6.329160596235457, 51.871243648176119 ], [ 6.327265126418629, 51.873524467842493 ], [ 6.331569228459416, 51.874905945987223 ], [ 6.326606226265272, 51.879193807594156 ], [ 6.329350355791378, 51.88030463514265 ], [ 6.324086358565132, 51.888842839953455 ], [ 6.331154514708937, 51.89218467637982 ], [ 6.33234454748608, 51.893307917383574 ], [ 6.329652967271151, 51.894745560275247 ], [ 6.322295895322805, 51.89622037657152 ], [ 6.31805452270767, 51.897953280591757 ], [ 6.315715918895376, 51.897688588671194 ], [ 6.311096986827264, 51.899990626825499 ], [ 6.307290020552305, 51.903985332865403 ], [ 6.306175589621823, 51.906542870431309 ], [ 6.30702286866268, 51.909934656792636 ], [ 6.30900801127187, 51.911901507061167 ], [ 6.310923476115384, 51.910470454676556 ], [ 6.316026008627117, 51.912695836918068 ], [ 6.316880008521958, 51.916370702518329 ], [ 6.315748264354133, 51.918078860851267 ], [ 6.311905218590251, 51.920374779022374 ], [ 6.302168993404483, 51.919884597318934 ], [ 6.294795457341599, 51.920791386409306 ], [ 6.290939712365715, 51.922520308433661 ], [ 6.289852347547251, 51.926493470351211 ], [ 6.293061762041027, 51.931283176915997 ], [ 6.296208811789725, 51.932958077677796 ], [ 6.295476432850529, 51.935229340961392 ], [ 6.299030230796697, 51.937750623421586 ], [ 6.298669831607604, 51.939169419103067 ], [ 6.305633993183805, 51.937132803590309 ], [ 6.30566874455252, 51.938831733762214 ], [ 6.301445776565007, 51.941696659286123 ], [ 6.301886868520068, 51.944242027217769 ], [ 6.278901791154528, 51.943285847724383 ], [ 6.276149438504657, 51.941890700218281 ], [ 6.273036025741557, 51.941914206027896 ], [ 6.272669187352269, 51.943049766197873 ], [ 6.261377234873394, 51.942851091436211 ], [ 6.230268764405081, 51.944494326133388 ], [ 6.220927882449859, 51.944560952338122 ], [ 6.218177245611959, 51.943164444433599 ], [ 6.208836617146602, 51.943230109426004 ], [ 6.202978127025614, 51.94213812892098 ], [ 6.202921534311747, 51.939023356158252 ], [ 6.205215208045663, 51.936741838334527 ], [ 6.193223079211452, 51.940789447182233 ], [ 6.18820928556969, 51.943372490841789 ], [ 6.188638921959335, 51.945635132435015 ], [ 6.184781977137874, 51.947643739291181 ], [ 6.178574200794179, 51.948818479783988 ], [ 6.172036258518751, 51.953393441769578 ], [ 6.168921981186416, 51.953414192025633 ], [ 6.163116970792263, 51.955435016284511 ], [ 6.16159396230082, 51.957427423603328 ], [ 6.157725067716544, 51.958868818400092 ], [ 6.150842357407678, 51.966276781774106 ], [ 6.148222246725842, 51.97252403991083 ], [ 6.146693204879341, 51.974233089000869 ], [ 6.144851099940158, 51.980475233448345 ], [ 6.129622221410584, 51.978306809993065 ], [ 6.12254614586415, 51.974386564475296 ], [ 6.120965102644393, 51.972980474475094 ], [ 6.122499725348069, 51.971554922122394 ], [ 6.112722349281447, 51.96906691651909 ], [ 6.108796215375635, 51.967108724373055 ], [ 6.100999034605764, 51.966589931251683 ], [ 6.090502864635901, 51.967785952835349 ], [ 6.089657525761885, 51.963543115989417 ], [ 6.09159552587285, 51.962965135641944 ], [ 6.09089085441047, 51.942862637420745 ], [ 6.091602607991896, 51.938610468422517 ], [ 6.09433120107996, 51.938877276904414 ], [ 6.094684670063212, 51.936609598460564 ], [ 6.11244806415597, 51.928005485299231 ], [ 6.130977946970711, 51.919110603091227 ], [ 6.139085127515655, 51.915377455416149 ], [ 6.141433132333572, 51.91621199341769 ], [ 6.14333506535303, 51.913651003428626 ], [ 6.152587668822801, 51.908776748180166 ], [ 6.15535836670518, 51.911590629766621 ], [ 6.157609376807071, 51.906761545458338 ], [ 6.162985283916488, 51.902761407292196 ], [ 6.168010771771713, 51.901028925573641 ], [ 6.169959858730366, 51.901299150457881 ], [ 6.182666059364661, 51.894133842815585 ], [ 6.187296027628765, 51.892120006123427 ], [ 6.191173426236198, 51.891527130675314 ], [ 6.189567904624595, 51.88870612676908 ], [ 6.191486195319753, 51.887277012467784 ], [ 6.182127090785926, 51.885641547419297 ], [ 6.183626715352806, 51.882516204155579 ], [ 6.191692537477119, 51.877080445332595 ], [ 6.195926653323962, 51.874785766281519 ], [ 6.206724960311848, 51.870179700512445 ], [ 6.215226402275712, 51.867571251014439 ], [ 6.226520408313005, 51.868907052827211 ], [ 6.233540917560698, 51.870272655438868 ], [ 6.242067711253889, 51.869078076156804 ], [ 6.24674652901775, 51.869893517146203 ], [ 6.259147366611954, 51.868102865787272 ], [ 6.262261188389171, 51.868362899582081 ], [ 6.265402680820362, 51.870038651437582 ], [ 6.269365966724539, 51.873973760286759 ], [ 6.272879993660632, 51.874796910277325 ], [ 6.279863477832265, 51.874177621422447 ], [ 6.283321303457549, 51.872168868043524 ], [ 6.287195697242344, 51.871572828945183 ], [ 6.295675545058621, 51.868109090960417 ], [ 6.299166631687503, 51.867798821985261 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1702\", \"naam\": \"Sint Anthonis\", \"code\": \"1702\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.838392089776445, 51.566321719253821 ], [ 5.870775138883719, 51.562510577609274 ], [ 5.870892839389578, 51.573554904896511 ], [ 5.879027315166564, 51.576069754996134 ], [ 5.877118411037138, 51.578060175163515 ], [ 5.893396886529979, 51.583654809514314 ], [ 5.891095861005795, 51.585080754480664 ], [ 5.894203954957816, 51.586766515638409 ], [ 5.899632476383093, 51.588725245198162 ], [ 5.903088665077627, 51.587010839069791 ], [ 5.931782951990907, 51.596792703356748 ], [ 5.931044444791008, 51.599628149291242 ], [ 5.93453787333094, 51.601027850038747 ], [ 5.933782399767559, 51.602447388328351 ], [ 5.945033389596558, 51.606359060254718 ], [ 5.949686751645129, 51.607752771033283 ], [ 5.943919651170256, 51.610045979244013 ], [ 5.939697437011954, 51.612331611328756 ], [ 5.93472939177328, 51.616886187282795 ], [ 5.929411178165642, 51.624557372845402 ], [ 5.925637319425689, 51.632221206524903 ], [ 5.896397234929144, 51.644529717392075 ], [ 5.892514989447021, 51.643130556495301 ], [ 5.889443914095018, 51.645126173670363 ], [ 5.882886364228384, 51.646570135941303 ], [ 5.882873963942915, 51.645437393838712 ], [ 5.87861463560644, 51.644888965919392 ], [ 5.877822929080832, 51.643193097198626 ], [ 5.871645873321051, 51.644068436220145 ], [ 5.870899815430694, 51.646620309526021 ], [ 5.872491996936252, 51.650861691646689 ], [ 5.871724659402078, 51.651431268647912 ], [ 5.875606977208715, 51.652831118043927 ], [ 5.86676049594023, 51.657398882770721 ], [ 5.855981186971944, 51.6622569287888 ], [ 5.860274440568137, 51.665921221619087 ], [ 5.857977036645358, 51.668196067785644 ], [ 5.859929028379662, 51.669887384734608 ], [ 5.846454929737081, 51.676454574264895 ], [ 5.842619945747411, 51.679867924590873 ], [ 5.830563458011827, 51.673683882904299 ], [ 5.829792435669453, 51.673969998252417 ], [ 5.823945209811914, 51.669460813721031 ], [ 5.825871275524218, 51.668604018520199 ], [ 5.822760093924942, 51.666916457383664 ], [ 5.821610451997558, 51.668053518914711 ], [ 5.814230925729596, 51.664965514220434 ], [ 5.812694286453984, 51.66610389959849 ], [ 5.809978522285775, 51.665264152304076 ], [ 5.806844527816134, 51.66102747970897 ], [ 5.798719374592185, 51.660773141261046 ], [ 5.790500942318141, 51.650040276109337 ], [ 5.778082646181037, 51.644984883830695 ], [ 5.747824371807059, 51.632621426114319 ], [ 5.750450722477336, 51.622701401887021 ], [ 5.758718404376897, 51.59407246535747 ], [ 5.78656358929552, 51.598228617333341 ], [ 5.788459772881754, 51.594257346701404 ], [ 5.800676795576518, 51.578638835956582 ], [ 5.820658584746845, 51.568654449433289 ], [ 5.838392089776445, 51.566321719253821 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1876\", \"naam\": \"Bronckhorst\", \"code\": \"1876\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.462168966580534, 52.021616268333254 ], [ 6.438461018691964, 52.024945654175895 ], [ 6.43692139697103, 52.025809001341116 ], [ 6.440073797691723, 52.027196850697216 ], [ 6.435467872874588, 52.030353179320223 ], [ 6.432460788125221, 52.035194341306124 ], [ 6.43479399594508, 52.034890398304917 ], [ 6.433696883603832, 52.038015368258833 ], [ 6.43098010710673, 52.038605890830844 ], [ 6.432586395727163, 52.040574042817084 ], [ 6.428699375409417, 52.041174897645512 ], [ 6.427185320753534, 52.043170686492701 ], [ 6.424435340594767, 52.042345346670096 ], [ 6.42566456265594, 52.044883313249791 ], [ 6.423383207950693, 52.047452216298581 ], [ 6.420236425716335, 52.046347069402671 ], [ 6.416036761587297, 52.050348641929787 ], [ 6.413409898837596, 52.054902759307176 ], [ 6.413195039721064, 52.062551011270855 ], [ 6.410925032869567, 52.06568595503343 ], [ 6.406103429613699, 52.076772508212315 ], [ 6.403032182955276, 52.079064619708355 ], [ 6.403070777683687, 52.080763474408997 ], [ 6.400408744134856, 52.083901576817205 ], [ 6.403238060532447, 52.088125172584604 ], [ 6.411469653592532, 52.089469880734782 ], [ 6.413395892188245, 52.088320326202755 ], [ 6.418946961390509, 52.091953416667053 ], [ 6.424141278187282, 52.097005379323662 ], [ 6.418361979741211, 52.10045447152455 ], [ 6.391694401500449, 52.113145462706775 ], [ 6.396471833306587, 52.117069392195027 ], [ 6.398438104411203, 52.117618930381397 ], [ 6.391930033902398, 52.123621697295619 ], [ 6.396003810716002, 52.130949986096979 ], [ 6.392499252294885, 52.13154631402935 ], [ 6.383050148780477, 52.128511368979034 ], [ 6.383415672159252, 52.127375500556688 ], [ 6.379085622137266, 52.125996039912032 ], [ 6.377150601782895, 52.126861890721329 ], [ 6.368875782580019, 52.123815951387094 ], [ 6.361904035971016, 52.126705750236162 ], [ 6.357685473622541, 52.130422078747763 ], [ 6.357796265997862, 52.135518655365765 ], [ 6.328132844309088, 52.13774147962571 ], [ 6.308442803719534, 52.130817176794267 ], [ 6.293919215856512, 52.12781466927035 ], [ 6.291154997452434, 52.126419939901069 ], [ 6.277381640360485, 52.121710502105088 ], [ 6.272535572618354, 52.113817637500006 ], [ 6.270146759520666, 52.111570024491712 ], [ 6.266636447143992, 52.111879463316882 ], [ 6.258790153814607, 52.1102386045374 ], [ 6.250993704268271, 52.111145581588801 ], [ 6.244379782055454, 52.112609827944688 ], [ 6.235806652855235, 52.113804633480719 ], [ 6.233842538082135, 52.113252378610312 ], [ 6.232231645504561, 52.110715225332143 ], [ 6.226735942205024, 52.109338551733828 ], [ 6.225906826467155, 52.106795740939269 ], [ 6.221995375993452, 52.106540324293569 ], [ 6.224644758183147, 52.101990475962992 ], [ 6.224607614924753, 52.100008404473215 ], [ 6.220316768570404, 52.100322011945849 ], [ 6.219393283880651, 52.092682385667274 ], [ 6.221662235859409, 52.088701660817406 ], [ 6.218163901757, 52.089575961749816 ], [ 6.218997521666973, 52.092401989494604 ], [ 6.216691359963661, 52.09440058504839 ], [ 6.219071298049967, 52.096366141301019 ], [ 6.217926037623767, 52.097790175472532 ], [ 6.216321862108319, 52.095535949068982 ], [ 6.211979132772423, 52.093017713257844 ], [ 6.206892288818138, 52.092486833065848 ], [ 6.201060677443109, 52.093943213968693 ], [ 6.197931496377673, 52.09368159791746 ], [ 6.19203824928106, 52.091739672541394 ], [ 6.187342265690269, 52.091205279308092 ], [ 6.180709080859443, 52.091533332896844 ], [ 6.174816860980619, 52.089590543529454 ], [ 6.172799823071789, 52.085922543796364 ], [ 6.171539092964883, 52.080833525263429 ], [ 6.168336799514579, 52.076323763301787 ], [ 6.159290199213548, 52.072418752181513 ], [ 6.154948061299196, 52.069615236847277 ], [ 6.151016080383449, 52.067941663515903 ], [ 6.149021265383642, 52.065405873989768 ], [ 6.139588328815248, 52.061501859520483 ], [ 6.137599198400507, 52.059249031939252 ], [ 6.12932498747592, 52.054487241539867 ], [ 6.118725667429693, 52.050588913564589 ], [ 6.114782900044681, 52.048064636372914 ], [ 6.111607008525482, 52.044685941896802 ], [ 6.110785646406586, 52.042142283138276 ], [ 6.113442564531007, 52.037594878214882 ], [ 6.121586535441227, 52.03471244463244 ], [ 6.130547000384814, 52.034089816107809 ], [ 6.137585771696684, 52.035177918079654 ], [ 6.142684405263003, 52.036844451119649 ], [ 6.146656571340525, 52.041066758100101 ], [ 6.152911868356402, 52.041875809932122 ], [ 6.15640289810749, 52.040720285256967 ], [ 6.159074621467901, 52.037304498582692 ], [ 6.167259983904303, 52.036967348092311 ], [ 6.17549507639521, 52.039461215600902 ], [ 6.174970515115359, 52.031818538979131 ], [ 6.176915348952081, 52.031522313909598 ], [ 6.173341055046625, 52.027864740570976 ], [ 6.175280745358209, 52.027285383421138 ], [ 6.174471026469551, 52.025591647339631 ], [ 6.176805502281136, 52.025292815460368 ], [ 6.174421254909973, 52.022760053989238 ], [ 6.177130486092815, 52.021609129032228 ], [ 6.176700681464334, 52.019346470435586 ], [ 6.169633787211088, 52.016561742072746 ], [ 6.164570863672992, 52.016878490085674 ], [ 6.164916457551655, 52.014327472144146 ], [ 6.161008531224693, 52.013786850683537 ], [ 6.161339627648966, 52.010386359817794 ], [ 6.159721921520192, 52.006998677944779 ], [ 6.156594189226548, 52.006452787192138 ], [ 6.153812677425024, 52.00335582257383 ], [ 6.157724476711733, 52.004179846887631 ], [ 6.159205335741348, 51.999639049191231 ], [ 6.164256533631711, 51.998756213124899 ], [ 6.159950535363615, 51.997651803697863 ], [ 6.159531591192058, 51.995955394915995 ], [ 6.161820586657683, 51.993108409387425 ], [ 6.161279386264733, 51.984332966822606 ], [ 6.16044168356654, 51.980940149901862 ], [ 6.160417271979639, 51.979524340212215 ], [ 6.168212434562591, 51.979756025493863 ], [ 6.172906436977613, 51.980857536886624 ], [ 6.179503301688268, 51.979397307065874 ], [ 6.185350978291443, 51.979640960923938 ], [ 6.190793982146203, 51.979037505264607 ], [ 6.205231475340145, 51.980353944768318 ], [ 6.211427292411995, 51.97832831677637 ], [ 6.214953675005917, 51.979436332152183 ], [ 6.22505968063757, 51.978231984095196 ], [ 6.22931754736803, 51.976785591074808 ], [ 6.231734423462152, 51.981016203208412 ], [ 6.229402623440969, 51.981316120487186 ], [ 6.222443953632238, 51.984197703594951 ], [ 6.227966639254999, 51.987839900426266 ], [ 6.232614888119382, 51.986390602928395 ], [ 6.232262679272459, 51.988375505414211 ], [ 6.235704622874084, 51.984952373665465 ], [ 6.234114320168052, 51.983264658959442 ], [ 6.237187690613534, 51.980976917666297 ], [ 6.244577708312855, 51.980356883022488 ], [ 6.243355112486284, 51.977533823416998 ], [ 6.246860504761044, 51.977508251743778 ], [ 6.249949170423728, 51.976069648921133 ], [ 6.252751997283077, 51.980013810507543 ], [ 6.257058562290542, 51.981114824756162 ], [ 6.257475555897492, 51.98252772462903 ], [ 6.24776444611989, 51.984015164244198 ], [ 6.250556676904725, 51.987393059761615 ], [ 6.254463361229673, 51.987930712475745 ], [ 6.258348131627123, 51.987335611263823 ], [ 6.267241584407842, 51.983871041209859 ], [ 6.270352336309241, 51.983564526874829 ], [ 6.274670879221388, 51.985231204618344 ], [ 6.278950321870617, 51.984915639111165 ], [ 6.291976828081099, 51.993312087086771 ], [ 6.293896298564706, 51.99188131909041 ], [ 6.295775478272438, 51.988468444646799 ], [ 6.304415708945866, 51.991799764576228 ], [ 6.312254577767249, 51.994003966651512 ], [ 6.318884086087982, 51.994234844912391 ], [ 6.32662914026004, 51.991907657097236 ], [ 6.327750433948387, 51.989633105041271 ], [ 6.335847851165403, 51.985603287082142 ], [ 6.332683682292288, 51.983363169857633 ], [ 6.331059998508822, 51.980261017301167 ], [ 6.327878629719605, 51.977171312093702 ], [ 6.327459471296073, 51.975758666431318 ], [ 6.337561557302656, 51.97454466271121 ], [ 6.353535224162868, 51.974697688184328 ], [ 6.36992945780081, 51.976261036575231 ], [ 6.369873625176288, 51.973712693087165 ], [ 6.366325361793472, 51.971759882376531 ], [ 6.365497105449418, 51.969501166806666 ], [ 6.368204382567258, 51.968629008218855 ], [ 6.373291471962157, 51.969719263656913 ], [ 6.381431392758692, 51.967951510712709 ], [ 6.38690181459055, 51.968754735196313 ], [ 6.390400073398435, 51.968441739677075 ], [ 6.390840146483704, 51.970703601218332 ], [ 6.388931004544353, 51.972419091969321 ], [ 6.38823428882519, 51.976106648607434 ], [ 6.380872119691031, 51.977868294358835 ], [ 6.390276590339496, 51.980337272713541 ], [ 6.39766430870506, 51.979707627566519 ], [ 6.402395910027929, 51.982215698158292 ], [ 6.416203991690117, 51.972750009233344 ], [ 6.430593135874201, 51.971773607408764 ], [ 6.434883377566738, 51.972018665957826 ], [ 6.4348569256902, 51.970886086746376 ], [ 6.441107481933958, 51.971679844549456 ], [ 6.441476937130269, 51.970826920829985 ], [ 6.446901941160844, 51.969645340355868 ], [ 6.451628495858709, 51.971868285438205 ], [ 6.459840150270201, 51.973209692007778 ], [ 6.462640837931755, 51.976299364015816 ], [ 6.46775152539967, 51.978234950379253 ], [ 6.468598744343516, 51.981059210443306 ], [ 6.472165874930822, 51.983575200358956 ], [ 6.475781524726385, 51.988073067804926 ], [ 6.459972180517967, 51.995015211485693 ], [ 6.459260656244381, 51.997853734803911 ], [ 6.467518247235588, 52.000893436609736 ], [ 6.460236520055664, 52.006057738995366 ], [ 6.465733424090769, 52.007706699378851 ], [ 6.461937988890758, 52.011989477786678 ], [ 6.462751508219635, 52.013398060277844 ], [ 6.460439960287171, 52.014551978081684 ], [ 6.462053463444277, 52.016802874873711 ], [ 6.459379010161785, 52.01909289526899 ], [ 6.462168966580534, 52.021616268333254 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1674\", \"naam\": \"Roosendaal\", \"code\": \"1674\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.486855505952, 51.477347026705608 ], [ 4.485230555969528, 51.481582676648117 ], [ 4.492901843068227, 51.483340966536026 ], [ 4.490132549437729, 51.487001485470145 ], [ 4.497935683473473, 51.501788210773491 ], [ 4.496651964056679, 51.5082923051772 ], [ 4.498551601298408, 51.509722833450567 ], [ 4.50226857847237, 51.516831346075094 ], [ 4.514203817576622, 51.517770787562299 ], [ 4.51336198664148, 51.521446238511423 ], [ 4.516060999192916, 51.521466396430853 ], [ 4.51753287630387, 51.525159105621242 ], [ 4.519423063083121, 51.527155636896161 ], [ 4.522030795293421, 51.531989558834368 ], [ 4.521237888223817, 51.533116527470362 ], [ 4.523374312196269, 51.54247828750696 ], [ 4.515648413427516, 51.542987342802618 ], [ 4.513735964935004, 51.542123431775686 ], [ 4.511774488405911, 51.543808018417828 ], [ 4.507536584932075, 51.543492983625939 ], [ 4.499022209475001, 51.544844636717542 ], [ 4.497451400985565, 51.546248743329691 ], [ 4.500299949981269, 51.558448464856944 ], [ 4.499131217729267, 51.559006012570286 ], [ 4.480954864399065, 51.560848980302886 ], [ 4.473622683541145, 51.560791903779936 ], [ 4.472822368210498, 51.562201704012324 ], [ 4.470103804062663, 51.56303004160408 ], [ 4.465512971876883, 51.561011450633906 ], [ 4.457397387556533, 51.561513600579154 ], [ 4.456596556277472, 51.562923288327468 ], [ 4.45311162615265, 51.563461916593404 ], [ 4.453433497704004, 51.566579822310338 ], [ 4.449205588538014, 51.565696337076069 ], [ 4.44411775393484, 51.569053950461125 ], [ 4.441837304189143, 51.567336256155365 ], [ 4.441248273257585, 51.558551898750984 ], [ 4.438588504703529, 51.556547852612539 ], [ 4.428959833881049, 51.555619668825486 ], [ 4.42671057038072, 51.552485859248264 ], [ 4.411295714238769, 51.551508516923946 ], [ 4.375193011648029, 51.543837868766602 ], [ 4.354285320376157, 51.547053524181301 ], [ 4.317916042570204, 51.551257878727753 ], [ 4.316120539388302, 51.545577084085835 ], [ 4.308378465475366, 51.546638737229493 ], [ 4.306909462051043, 51.543509767500602 ], [ 4.315861649063329, 51.540193573374218 ], [ 4.327551957561747, 51.535202260507624 ], [ 4.328428855718673, 51.530678730433223 ], [ 4.32575586855891, 51.529521605336051 ], [ 4.329618703298605, 51.529273419868986 ], [ 4.330030669937832, 51.528144278438717 ], [ 4.337756019186592, 51.527647496106255 ], [ 4.342801480055622, 51.526276625466714 ], [ 4.340572646875956, 51.522574854903134 ], [ 4.342219054685314, 51.518058119132633 ], [ 4.350308714157032, 51.518413427053375 ], [ 4.351484662960753, 51.51757420910414 ], [ 4.352333052224251, 51.514183125608156 ], [ 4.35059921585173, 51.505671237846478 ], [ 4.354048742927856, 51.506551456198061 ], [ 4.349494625283637, 51.503395690212592 ], [ 4.351890841679539, 51.499735134141666 ], [ 4.358223364109914, 51.492427460992346 ], [ 4.363643232762765, 51.491342230046399 ], [ 4.37297260717234, 51.487741824172325 ], [ 4.371898911190462, 51.484050674276816 ], [ 4.371627401466917, 51.47895040927208 ], [ 4.361669633293383, 51.47631440118338 ], [ 4.3625419660119, 51.471790584027367 ], [ 4.361399309961801, 51.471214113000691 ], [ 4.367114737827912, 51.456820116020744 ], [ 4.383329012938249, 51.454978201322064 ], [ 4.391109496759702, 51.451363055705471 ], [ 4.403721802722705, 51.455718277000535 ], [ 4.442728592894107, 51.468785142583933 ], [ 4.456960751021829, 51.469749076115541 ], [ 4.464634680726259, 51.471226049233223 ], [ 4.471464754590536, 51.476377672916456 ], [ 4.47643254168962, 51.478399028703855 ], [ 4.486855505952, 51.477347026705608 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0213\", \"naam\": \"Brummen\", \"code\": \"0213\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.137599198400507, 52.059249031939252 ], [ 6.139588328815248, 52.061501859520483 ], [ 6.149021265383642, 52.065405873989768 ], [ 6.151016080383449, 52.067941663515903 ], [ 6.154948061299196, 52.069615236847277 ], [ 6.159290199213548, 52.072418752181513 ], [ 6.168336799514579, 52.076323763301787 ], [ 6.171539092964883, 52.080833525263429 ], [ 6.172799823071789, 52.085922543796364 ], [ 6.174816860980619, 52.089590543529454 ], [ 6.180709080859443, 52.091533332896844 ], [ 6.187342265690269, 52.091205279308092 ], [ 6.19203824928106, 52.091739672541394 ], [ 6.197931496377673, 52.09368159791746 ], [ 6.201060677443109, 52.093943213968693 ], [ 6.206892288818138, 52.092486833065848 ], [ 6.211979132772423, 52.093017713257844 ], [ 6.216321862108319, 52.095535949068982 ], [ 6.217926037623767, 52.097790175472532 ], [ 6.218031317870049, 52.103453244987122 ], [ 6.215396922065088, 52.108852404974797 ], [ 6.21155326933723, 52.112277634052646 ], [ 6.202989655606975, 52.114036361320878 ], [ 6.191664987317855, 52.114397395614894 ], [ 6.188174207447016, 52.115837116596019 ], [ 6.185865460017599, 52.11783510651815 ], [ 6.185530416231409, 52.120952452510494 ], [ 6.186377771210159, 52.124628162094758 ], [ 6.182500277655561, 52.126353517588029 ], [ 6.184108917601761, 52.128891348182783 ], [ 6.182220397944275, 52.132585545286695 ], [ 6.183814090440028, 52.134273915152541 ], [ 6.177605452446567, 52.136864394032067 ], [ 6.179199124363906, 52.138552825106359 ], [ 6.174132431663808, 52.139436314434356 ], [ 6.174949222078427, 52.141413172020862 ], [ 6.172623616309812, 52.142561436114363 ], [ 6.173450374558723, 52.145104610979693 ], [ 6.168387780279189, 52.146271008187895 ], [ 6.164087155415081, 52.146299421625208 ], [ 6.152710258358424, 52.144108337902765 ], [ 6.149582673980109, 52.144128601741912 ], [ 6.142960520910941, 52.145587164871323 ], [ 6.140266791476671, 52.148153074746958 ], [ 6.140724714185208, 52.152114753211443 ], [ 6.142742138541672, 52.155783261063199 ], [ 6.145899434808638, 52.157462106150085 ], [ 6.154903668936941, 52.157970208281967 ], [ 6.159591592283547, 52.157656412883334 ], [ 6.16813555469767, 52.154201908548742 ], [ 6.175921208698623, 52.15216778626985 ], [ 6.18179653789787, 52.152694718032983 ], [ 6.184253941625721, 52.158908247919442 ], [ 6.184685510719821, 52.161170824828083 ], [ 6.182333893172688, 52.160903515549812 ], [ 6.172561542964662, 52.161252179854735 ], [ 6.167101037555956, 52.162137972813632 ], [ 6.167863425245971, 52.161000184188154 ], [ 6.160447341239029, 52.161898596607308 ], [ 6.155338616647851, 52.160516049908459 ], [ 6.145150978802941, 52.159449218762873 ], [ 6.134563262530775, 52.157817674886608 ], [ 6.125535852676726, 52.155892240087944 ], [ 6.108274554274705, 52.152600826553638 ], [ 6.09845828032166, 52.150111778701138 ], [ 6.076074789482976, 52.144014608777184 ], [ 6.078341574468796, 52.138904018567366 ], [ 6.071240142938473, 52.134697663376876 ], [ 6.069624716060599, 52.131308806958621 ], [ 6.062946116264184, 52.129081801095587 ], [ 6.05114983850974, 52.124334693054934 ], [ 6.047557429760017, 52.119257546562189 ], [ 6.043226039533483, 52.117016255787874 ], [ 6.040453737987561, 52.114482990033828 ], [ 6.041206109493454, 52.112496521663246 ], [ 6.035691383563563, 52.109411961271476 ], [ 6.034054976104507, 52.104323621321072 ], [ 6.034815671042724, 52.102903516056266 ], [ 6.032451652615628, 52.101500558475813 ], [ 6.034359458790302, 52.098375054524219 ], [ 6.033932022418389, 52.095828730628838 ], [ 6.031584736896602, 52.095558406520411 ], [ 6.017345922756403, 52.082892071287908 ], [ 6.011000401508296, 52.075846198844246 ], [ 6.009021035739304, 52.073874363184231 ], [ 6.008989539540185, 52.071609040197643 ], [ 6.006182811954746, 52.066243286267486 ], [ 6.009691363752518, 52.065941605694242 ], [ 6.023761358930392, 52.067282324233098 ], [ 6.028078835442115, 52.068958028267943 ], [ 6.030843529359568, 52.071208444937135 ], [ 6.038317295260814, 52.075131977966429 ], [ 6.045019930217134, 52.079625722119822 ], [ 6.050510610431889, 52.08129405064647 ], [ 6.058378224765021, 52.085214099685579 ], [ 6.068186641735651, 52.088272862744304 ], [ 6.075982853579871, 52.087377976085207 ], [ 6.077101786460814, 52.083973181416063 ], [ 6.080615630792223, 52.083952549371453 ], [ 6.081370105700191, 52.082248980815265 ], [ 6.103560000952204, 52.078151488449663 ], [ 6.102770188913363, 52.077589912771813 ], [ 6.109365314393369, 52.07500096461817 ], [ 6.114379964036734, 52.071288656375273 ], [ 6.115890473487127, 52.068164241279391 ], [ 6.120192905059678, 52.068703919727248 ], [ 6.120536772298868, 52.06586988669271 ], [ 6.122836460769297, 52.063306838954375 ], [ 6.127928381055485, 52.064407678238545 ], [ 6.12907096522402, 52.062701347964619 ], [ 6.135695531697209, 52.062093047483572 ], [ 6.137599198400507, 52.059249031939252 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0866\", \"naam\": \"Waalre\", \"code\": \"0866\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.516324819930254, 51.378228398379832 ], [ 5.511346154304886, 51.385030612844346 ], [ 5.504849159496127, 51.400046945759328 ], [ 5.501395730228991, 51.403165579442849 ], [ 5.49793700866429, 51.404301718573954 ], [ 5.487553568421307, 51.404877531217089 ], [ 5.481014393761286, 51.404599785670371 ], [ 5.472938425012479, 51.405172413984879 ], [ 5.453322514227706, 51.405185215473843 ], [ 5.436014044252405, 51.40491057117773 ], [ 5.435627912180752, 51.403494736110559 ], [ 5.431780684219412, 51.402363478595213 ], [ 5.427165707463425, 51.402648357616712 ], [ 5.423701762380719, 51.399534305437641 ], [ 5.422161268619463, 51.396702785696228 ], [ 5.422929040754809, 51.39500335522591 ], [ 5.421773695453932, 51.392738109451621 ], [ 5.417926759428909, 51.390190396738397 ], [ 5.417925225841806, 51.387924800832856 ], [ 5.42099980513994, 51.386224748151399 ], [ 5.421766582322775, 51.383392526127075 ], [ 5.425607654615315, 51.379426523053127 ], [ 5.423297601749123, 51.374896068971502 ], [ 5.424833208957662, 51.372629982840273 ], [ 5.435205922087295, 51.368094959652559 ], [ 5.436356721131691, 51.366112079007777 ], [ 5.441738571579879, 51.367525676500883 ], [ 5.466338741589566, 51.37006033186514 ], [ 5.492482965635404, 51.374287608186137 ], [ 5.496323905043092, 51.373151269822934 ], [ 5.501707727384257, 51.374278896802743 ], [ 5.508622524702512, 51.372855887885883 ], [ 5.516324819930254, 51.378228398379832 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0756\", \"naam\": \"Boxmeer\", \"code\": \"0756\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.048261620755668, 51.55852595928873 ], [ 6.043671727665472, 51.56138388015026 ], [ 6.040251337055818, 51.565084699531852 ], [ 6.037626723141068, 51.57048021191077 ], [ 6.038073651587789, 51.574725780001835 ], [ 6.039691116285743, 51.579814427155 ], [ 6.039349807570488, 51.58293157160108 ], [ 6.037081819566719, 51.586342645458849 ], [ 6.02867882612534, 51.592902735098811 ], [ 6.026397564811233, 51.595464057895036 ], [ 6.024155824683413, 51.600857147315736 ], [ 6.023984331838992, 51.616151020354934 ], [ 6.020578009556442, 51.62126715958297 ], [ 6.007172725560319, 51.630118245783216 ], [ 5.996055106496869, 51.636973477141339 ], [ 5.981826178701049, 51.642710688150821 ], [ 5.976428173406712, 51.643870803185777 ], [ 5.9721971414034, 51.645591239593919 ], [ 5.967604532763563, 51.649295717959653 ], [ 5.964185749129937, 51.654127029945016 ], [ 5.963119249849268, 51.661495482563261 ], [ 5.964821800054161, 51.673664678498007 ], [ 5.963751347067033, 51.680749941991621 ], [ 5.962250345019394, 51.684438915633692 ], [ 5.956627441141625, 51.698909544537919 ], [ 5.956343717372401, 51.707123681562038 ], [ 5.953292411022696, 51.710820049759683 ], [ 5.949057761863185, 51.712822829993669 ], [ 5.942883039993558, 51.714551478788607 ], [ 5.93360637303463, 51.716011115615899 ], [ 5.927719658653159, 51.70952488570876 ], [ 5.922282114428147, 51.708133869110029 ], [ 5.917609285257035, 51.705889546676033 ], [ 5.916024170925309, 51.702781541459998 ], [ 5.909413322400337, 51.700262432820303 ], [ 5.907845274444442, 51.698570229908448 ], [ 5.902774146366069, 51.695194298590287 ], [ 5.898461863509698, 51.690398848771181 ], [ 5.894953099657862, 51.688148538019817 ], [ 5.899562011956546, 51.685013280185508 ], [ 5.895263765770597, 51.681350442056448 ], [ 5.882441395121934, 51.676591033343591 ], [ 5.875092985025988, 51.676905093612817 ], [ 5.861101479907164, 51.671015433295388 ], [ 5.859929028379662, 51.669887384734608 ], [ 5.857977036645358, 51.668196067785644 ], [ 5.860274440568137, 51.665921221619087 ], [ 5.855981186971944, 51.6622569287888 ], [ 5.86676049594023, 51.657398882770721 ], [ 5.875606977208715, 51.652831118043927 ], [ 5.871724659402078, 51.651431268647912 ], [ 5.872491996936252, 51.650861691646689 ], [ 5.870899815430694, 51.646620309526021 ], [ 5.871645873321051, 51.644068436220145 ], [ 5.877822929080832, 51.643193097198626 ], [ 5.87861463560644, 51.644888965919392 ], [ 5.882873963942915, 51.645437393838712 ], [ 5.882886364228384, 51.646570135941303 ], [ 5.889443914095018, 51.645126173670363 ], [ 5.892514989447021, 51.643130556495301 ], [ 5.896397234929144, 51.644529717392075 ], [ 5.925637319425689, 51.632221206524903 ], [ 5.929411178165642, 51.624557372845402 ], [ 5.93472939177328, 51.616886187282795 ], [ 5.939697437011954, 51.612331611328756 ], [ 5.943919651170256, 51.610045979244013 ], [ 5.949686751645129, 51.607752771033283 ], [ 5.945033389596558, 51.606359060254718 ], [ 5.933782399767559, 51.602447388328351 ], [ 5.93453787333094, 51.601027850038747 ], [ 5.931044444791008, 51.599628149291242 ], [ 5.931782951990907, 51.596792703356748 ], [ 5.903088665077627, 51.587010839069791 ], [ 5.899632476383093, 51.588725245198162 ], [ 5.894203954957816, 51.586766515638409 ], [ 5.891095861005795, 51.585080754480664 ], [ 5.893396886529979, 51.583654809514314 ], [ 5.877118411037138, 51.578060175163515 ], [ 5.879027315166564, 51.576069754996134 ], [ 5.870892839389578, 51.573554904896511 ], [ 5.870775138883719, 51.562510577609274 ], [ 5.891591049087617, 51.560156962056872 ], [ 5.90655141598485, 51.552161781959917 ], [ 5.935511131364514, 51.553728658828966 ], [ 5.9765196465118, 51.561741871134252 ], [ 5.993568839852317, 51.566752288563336 ], [ 6.004426233862629, 51.570377082769866 ], [ 6.018224012996993, 51.563223305123159 ], [ 6.031579308694861, 51.552388667137286 ], [ 6.033552912574516, 51.555493009666293 ], [ 6.032801289776004, 51.556913185505984 ], [ 6.03744819797008, 51.558020231946912 ], [ 6.040129131007597, 51.556589259907348 ], [ 6.048261620755668, 51.55852595928873 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1979\", \"naam\": \"Eemsdelta\", \"code\": \"1979\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 7.101318005669032, 53.330343200317685 ], [ 7.061701756547797, 53.32410614045002 ], [ 7.01913177827202, 53.324408525843921 ], [ 7.005956443197717, 53.32656867139363 ], [ 6.995305276409602, 53.331808148409145 ], [ 6.993466225700296, 53.336362956093161 ], [ 6.994522938723439, 53.343144151282679 ], [ 6.993529021048451, 53.348820186272327 ], [ 6.969238507615654, 53.376889396688853 ], [ 6.959519390108851, 53.386077039120565 ], [ 6.952167997279595, 53.394100539577622 ], [ 6.942871558901599, 53.415172601515188 ], [ 6.932037290285926, 53.43852843974144 ], [ 6.924370544797179, 53.449385240318072 ], [ 6.915793547828956, 53.457421812294292 ], [ 6.91183626420023, 53.459453810241968 ], [ 6.891090500340891, 53.407903121873538 ], [ 6.872976853097907, 53.407844948963699 ], [ 6.862240772802955, 53.411657597024906 ], [ 6.856302334715033, 53.414561445600889 ], [ 6.843685350450241, 53.422359038486412 ], [ 6.792346644057074, 53.403717044300045 ], [ 6.788059902197596, 53.408013808494154 ], [ 6.784411401008134, 53.407206856585958 ], [ 6.783680336801852, 53.409480293949329 ], [ 6.77848660818982, 53.410672910955789 ], [ 6.773091796192284, 53.405639007629624 ], [ 6.766939158264099, 53.402029148894478 ], [ 6.753922539879166, 53.397647768090017 ], [ 6.748201723908243, 53.394881414730136 ], [ 6.733367871040429, 53.383723525091497 ], [ 6.723925988767322, 53.377600178786849 ], [ 6.713717717262254, 53.37261702953564 ], [ 6.706334171153494, 53.367885199134854 ], [ 6.700646282787496, 53.365965607584307 ], [ 6.696934062271223, 53.362891776701154 ], [ 6.691786408419907, 53.36549578882606 ], [ 6.684594185446244, 53.366989170504532 ], [ 6.681746460798691, 53.365887379617483 ], [ 6.678564892299954, 53.367054050010644 ], [ 6.670458282075995, 53.364875866371015 ], [ 6.665291968292405, 53.366912693707135 ], [ 6.659220817950477, 53.365561463697894 ], [ 6.656834214145435, 53.366436029024648 ], [ 6.651952573075339, 53.364505639539189 ], [ 6.646735717633503, 53.364843497189774 ], [ 6.645177609185196, 53.366558500397581 ], [ 6.641928971238315, 53.365459966823096 ], [ 6.642281388241857, 53.363757592593593 ], [ 6.638237427391002, 53.362950372961265 ], [ 6.630994666396943, 53.362742371395413 ], [ 6.625720838278593, 53.361098097472592 ], [ 6.625663829898032, 53.359116873223563 ], [ 6.627879353364798, 53.352299244669354 ], [ 6.625419576282729, 53.350625896116405 ], [ 6.618974458498171, 53.350125853270356 ], [ 6.617326812405383, 53.348727136274761 ], [ 6.605674858599776, 53.348845767018886 ], [ 6.602082678651329, 53.3497314594306 ], [ 6.595984130696874, 53.347244875920481 ], [ 6.601417479636674, 53.340395342653856 ], [ 6.604647194646353, 53.340928916769265 ], [ 6.605354564640787, 53.337524348460491 ], [ 6.592460927899649, 53.33623871216227 ], [ 6.598068481235383, 53.335616131942899 ], [ 6.601523927472943, 53.329918931443707 ], [ 6.61036751206228, 53.330112391389179 ], [ 6.614246638670961, 53.325259843864828 ], [ 6.612985558338898, 53.323290878869827 ], [ 6.619962496498677, 53.314442816747253 ], [ 6.637635318643807, 53.31454335911107 ], [ 6.643066200715669, 53.307974935877645 ], [ 6.650332982744408, 53.309314382376051 ], [ 6.653929114593813, 53.308710284648889 ], [ 6.660694589915477, 53.306656919150264 ], [ 6.673087070317467, 53.304826205358594 ], [ 6.68183229029777, 53.301901059897695 ], [ 6.689730938309244, 53.297568821258672 ], [ 6.705291890484147, 53.307591630930141 ], [ 6.706880144331318, 53.307007948978793 ], [ 6.708973871508641, 53.309816187835459 ], [ 6.71974207489071, 53.307432260034076 ], [ 6.726486596276709, 53.304809143944375 ], [ 6.729313784202221, 53.305343852405819 ], [ 6.732719086634313, 53.311534548314455 ], [ 6.737981999128182, 53.312891138579545 ], [ 6.74274587510505, 53.311138739649216 ], [ 6.747170459728709, 53.311371876105895 ], [ 6.749534284492307, 53.309929467351111 ], [ 6.744646038391317, 53.30771976899527 ], [ 6.748106671064015, 53.302867460574063 ], [ 6.753198626674427, 53.298845887184704 ], [ 6.755633417651643, 53.299667565961393 ], [ 6.760715279255716, 53.295362646919571 ], [ 6.764818430660351, 53.298146958843972 ], [ 6.772243121456981, 53.291832743942081 ], [ 6.769799388280798, 53.290728373561954 ], [ 6.772115890992227, 53.287870388367153 ], [ 6.769262125182714, 53.286487603706341 ], [ 6.772362591280974, 53.283054323733154 ], [ 6.786568324301441, 53.287986030003964 ], [ 6.814177555542119, 53.297570858774641 ], [ 6.8165102326972, 53.295278074938487 ], [ 6.825021718273828, 53.297724704165766 ], [ 6.828014522634559, 53.291176796658014 ], [ 6.845639659952315, 53.290114711976194 ], [ 6.851095574381304, 53.297126704591442 ], [ 6.860305606164594, 53.296447862594832 ], [ 6.860658525824602, 53.29502786223113 ], [ 6.87315595714781, 53.296572747455819 ], [ 6.874731747381324, 53.295703841397042 ], [ 6.879586052509753, 53.296776181387884 ], [ 6.879625231522069, 53.297908236514587 ], [ 6.883628216109613, 53.297575309504964 ], [ 6.886867959548502, 53.298384321306735 ], [ 6.890604524404487, 53.290409804593281 ], [ 6.889381181059052, 53.289858834935252 ], [ 6.891288512774251, 53.28700359917498 ], [ 6.892922861036949, 53.287832535430624 ], [ 6.895661875936348, 53.285816209683951 ], [ 6.88707991633264, 53.281393479748445 ], [ 6.88740231364466, 53.279124353167887 ], [ 6.893027654843841, 53.279337095573148 ], [ 6.907878494291546, 53.279433125183381 ], [ 6.909061843781026, 53.278851859114596 ], [ 6.907900561297905, 53.26867355173075 ], [ 6.910296602523994, 53.26836004555873 ], [ 6.909324922918904, 53.263558983146694 ], [ 6.912131622083084, 53.263523371336703 ], [ 6.91132097971595, 53.25192488029456 ], [ 6.909418287028721, 53.243454764436322 ], [ 6.911412152413225, 53.24314632024641 ], [ 6.91624139410185, 53.243651185838957 ], [ 6.921691313066359, 53.23905134796113 ], [ 6.923304288494529, 53.239313859187561 ], [ 6.928432993224646, 53.236982960628822 ], [ 6.93751261034575, 53.244227772310126 ], [ 6.942651314124588, 53.242179283599029 ], [ 6.945528061791524, 53.244123981419015 ], [ 6.946092270760536, 53.248646962511422 ], [ 6.952391670957987, 53.256493025322754 ], [ 6.968561743489658, 53.259962008544839 ], [ 6.995295971690745, 53.266968708093678 ], [ 7.013339759187041, 53.266725711748094 ], [ 7.012704312966743, 53.260505088226658 ], [ 7.013115884650839, 53.260782662520768 ], [ 7.021657411941222, 53.253304846846788 ], [ 7.022892107109444, 53.254137475438348 ], [ 7.031786278814016, 53.255998006575538 ], [ 7.037138146117041, 53.259605509745363 ], [ 7.038709268103318, 53.258734462651887 ], [ 7.041537199291237, 53.259261827923289 ], [ 7.057524948372079, 53.247431298609477 ], [ 7.059561744543257, 53.248252393196459 ], [ 7.067357346636648, 53.242480496808973 ], [ 7.07961225566348, 53.248254534644992 ], [ 7.07646129770793, 53.249714678312813 ], [ 7.084276709078296, 53.254701187455048 ], [ 7.113476828860143, 53.262779471978661 ], [ 7.135023356977135, 53.279740147800538 ], [ 7.134152454513856, 53.28796424758459 ], [ 7.100507694268903, 53.30996816850103 ], [ 7.101318005669032, 53.330343200317685 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1667\", \"naam\": \"Reusel-De Mierden\", \"code\": \"1667\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.200191851022213, 51.32264299613923 ], [ 5.204787720049386, 51.325482289895739 ], [ 5.193953287632156, 51.345288899041911 ], [ 5.196239085223376, 51.34982387801977 ], [ 5.192393884850815, 51.350667119470906 ], [ 5.191962554547976, 51.361711225577935 ], [ 5.196189393590415, 51.361718225278544 ], [ 5.197338639031985, 51.362569703682318 ], [ 5.191949246782047, 51.364826409956102 ], [ 5.190380398959812, 51.372186986898008 ], [ 5.184603906424892, 51.374725900711773 ], [ 5.185752014031617, 51.375860691169748 ], [ 5.188064448159195, 51.374448659696206 ], [ 5.188435260901283, 51.377564497060987 ], [ 5.196883616742305, 51.379560989385006 ], [ 5.196111246263193, 51.380409327706609 ], [ 5.199178411569515, 51.382396713618881 ], [ 5.197249184483052, 51.38409278990671 ], [ 5.201069416729305, 51.390046151412925 ], [ 5.194875727238516, 51.399948109677915 ], [ 5.190950796400498, 51.418349568342144 ], [ 5.190899626804407, 51.430243867666022 ], [ 5.185133366058094, 51.428818030996858 ], [ 5.178200057388766, 51.430221821663544 ], [ 5.173591319302501, 51.428231081231026 ], [ 5.170890876692583, 51.429642106859589 ], [ 5.158563541914564, 51.432167409982156 ], [ 5.157810931628346, 51.428767535769488 ], [ 5.152421960137846, 51.429040020490994 ], [ 5.119330421119145, 51.428402364215472 ], [ 5.102010063418416, 51.428927725717621 ], [ 5.09283464857751, 51.419559325654866 ], [ 5.071084856584187, 51.393447931116988 ], [ 5.116651606048358, 51.360994403060943 ], [ 5.11937289461712, 51.355619861516267 ], [ 5.124391989701983, 51.351383264315373 ], [ 5.131714958962817, 51.347151523603998 ], [ 5.134195280402861, 51.315438363391984 ], [ 5.162626564197203, 51.310399001965244 ], [ 5.172964692281552, 51.315799295746523 ], [ 5.190604561129978, 51.320078408296986 ], [ 5.196745913177033, 51.320371807142088 ], [ 5.200191851022213, 51.32264299613923 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0599\", \"naam\": \"Rotterdam\", \"code\": \"0599\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.48032900343612, 51.86245994480754 ], [ 4.480277661159541, 51.865008371902029 ], [ 4.494185407834832, 51.869079779061792 ], [ 4.521777781126054, 51.869003135584784 ], [ 4.526040975760467, 51.869600873615113 ], [ 4.531885426512601, 51.868793978509657 ], [ 4.542727572566737, 51.870854838342588 ], [ 4.549275204339923, 51.874016933527841 ], [ 4.554689326158129, 51.875471431118164 ], [ 4.562020933806997, 51.878355160458916 ], [ 4.569021465901632, 51.878120929796495 ], [ 4.570478334871863, 51.883511851386785 ], [ 4.576022576772544, 51.899409384714147 ], [ 4.576345015804074, 51.903093186664933 ], [ 4.569320027930313, 51.904460494663091 ], [ 4.554906105886715, 51.90577528578612 ], [ 4.549088921612443, 51.904884345764508 ], [ 4.549835000528411, 51.906588857442046 ], [ 4.551332592003893, 51.909714704604262 ], [ 4.556766766433579, 51.910319625510041 ], [ 4.556683064976049, 51.91485020797942 ], [ 4.553960437083573, 51.914830937723806 ], [ 4.553928941113043, 51.916529904471957 ], [ 4.55007097334389, 51.91480329937265 ], [ 4.547880053891586, 51.907141309062034 ], [ 4.542062834282865, 51.906250021265627 ], [ 4.539239263893181, 51.911610463295325 ], [ 4.53725719954495, 51.913578538728835 ], [ 4.5383919210273, 51.915285932455724 ], [ 4.54033666837051, 51.915299961034634 ], [ 4.537528377996252, 51.919810873444476 ], [ 4.541039938610348, 51.919269807757793 ], [ 4.550764556646754, 51.919339411551462 ], [ 4.556977868751953, 51.91994985801216 ], [ 4.564690333188481, 51.923685650317296 ], [ 4.566205043623843, 51.925961820083536 ], [ 4.565354448993471, 51.929920641794112 ], [ 4.560482305728932, 51.940931178757651 ], [ 4.570575085471907, 51.942417692251063 ], [ 4.572889671817173, 51.94356653113848 ], [ 4.56419243434688, 51.950869096531143 ], [ 4.561363458144806, 51.956513197214811 ], [ 4.562100441726019, 51.95878394163708 ], [ 4.564415651847075, 51.959932946081068 ], [ 4.566787907546339, 51.957967143322541 ], [ 4.572591767185118, 51.959989857746557 ], [ 4.584175729073519, 51.965450233396155 ], [ 4.589961223006441, 51.96860473556692 ], [ 4.590745079266544, 51.968326850221729 ], [ 4.601584228939501, 51.972081271267214 ], [ 4.593725211234448, 51.975993253311927 ], [ 4.598569462167855, 51.988486378838722 ], [ 4.594178852181316, 51.994403947933293 ], [ 4.579064580356525, 51.989770012800172 ], [ 4.579500071967523, 51.987224250490399 ], [ 4.57717795554825, 51.986358703396526 ], [ 4.578771953934142, 51.984387301885207 ], [ 4.57882808335075, 51.981272543030286 ], [ 4.570299803688507, 51.978948076615602 ], [ 4.573498003204961, 51.974439113656828 ], [ 4.577361991153007, 51.976164947957656 ], [ 4.578925013007696, 51.97589250162595 ], [ 4.571986443715119, 51.971879889006154 ], [ 4.566934047419358, 51.971278376779033 ], [ 4.562250397757761, 51.971812017005092 ], [ 4.560344932370934, 51.969533071230437 ], [ 4.556471689154244, 51.9683729974032 ], [ 4.554124712551085, 51.968922791907197 ], [ 4.547819926298367, 51.972842721710904 ], [ 4.540473836452251, 51.969958110475581 ], [ 4.536568871561625, 51.970496331299934 ], [ 4.535438209936824, 51.968505772064972 ], [ 4.528071948138434, 51.966753019588978 ], [ 4.527704244395563, 51.965617544523909 ], [ 4.521122962435211, 51.963586888053037 ], [ 4.518463164052535, 51.960168900975468 ], [ 4.513741541343115, 51.962682711608487 ], [ 4.512189629845453, 51.962387978783127 ], [ 4.505893236599592, 51.96573934500146 ], [ 4.506660893721476, 51.966311489997913 ], [ 4.495645528433038, 51.971892476556874 ], [ 4.495346134158564, 51.967359036950832 ], [ 4.46898437353985, 51.980466552100324 ], [ 4.465897382643293, 51.979026425179562 ], [ 4.461311093134861, 51.974742435364568 ], [ 4.462130873847726, 51.972766490985549 ], [ 4.460207067934999, 51.971618549861645 ], [ 4.460637425510718, 51.969639545543238 ], [ 4.458725507979449, 51.967925273513991 ], [ 4.450589515085571, 51.965878373069899 ], [ 4.446760981589371, 51.962732624697232 ], [ 4.427775544666521, 51.976456111329199 ], [ 4.408091851978537, 51.968081102268179 ], [ 4.403066973312632, 51.966339959228421 ], [ 4.393414006773825, 51.962577172291432 ], [ 4.391806386588736, 51.96482919379941 ], [ 4.389853267104616, 51.965095850579836 ], [ 4.379378511252573, 51.963307348877905 ], [ 4.388730418399917, 51.945545354530559 ], [ 4.395315524677131, 51.947017101010744 ], [ 4.393432130659749, 51.944169172133158 ], [ 4.404095154651528, 51.937178748639475 ], [ 4.408344703576741, 51.938630218531756 ], [ 4.413397390736543, 51.938955378976921 ], [ 4.415306346299977, 51.94067038711205 ], [ 4.417690195217932, 51.938424452131095 ], [ 4.408801689890632, 51.935518795670667 ], [ 4.408122208285742, 51.930981897403996 ], [ 4.410493587113352, 51.929302407805913 ], [ 4.415297058921893, 51.923111762334194 ], [ 4.416853084622615, 51.923124618020452 ], [ 4.416920337525345, 51.920009943260084 ], [ 4.415091811901329, 51.91461397840083 ], [ 4.408924361450048, 51.912013973544113 ], [ 4.411294704896696, 51.910334460877912 ], [ 4.415688825096448, 51.904990005960848 ], [ 4.412244443282775, 51.902412647019048 ], [ 4.41383652947317, 51.900726624533611 ], [ 4.399130143425237, 51.897488632550612 ], [ 4.390984531085861, 51.896570236313799 ], [ 4.384751525938421, 51.897083631499946 ], [ 4.370704350261802, 51.899228584707437 ], [ 4.358256452942945, 51.899403441426188 ], [ 4.351673018533835, 51.898212780699289 ], [ 4.343561125578971, 51.895875356346579 ], [ 4.333875214134626, 51.894372885153999 ], [ 4.322212752904902, 51.894267747048005 ], [ 4.306622083084788, 51.895824634211387 ], [ 4.292189768597149, 51.897673468646111 ], [ 4.284761425929966, 51.899303254572715 ], [ 4.274964725527706, 51.90232622368169 ], [ 4.267499738566242, 51.905370625233623 ], [ 4.252962771117151, 51.911178606234692 ], [ 4.242376323607277, 51.91447446975203 ], [ 4.234885341840106, 51.918366199536315 ], [ 4.225720045826025, 51.926772288220043 ], [ 4.220970983337351, 51.929840578166441 ], [ 4.21269743046919, 51.933723149727598 ], [ 4.219502101506334, 51.941437607980873 ], [ 4.217938150823804, 51.941705274363756 ], [ 4.192289669256703, 51.954758301478279 ], [ 4.186628051337203, 51.962630532454682 ], [ 4.188506618250009, 51.965198587338953 ], [ 4.187682516950319, 51.966889446962789 ], [ 4.169572206163519, 51.974066835286216 ], [ 4.155054783723126, 51.977880620764054 ], [ 4.155397591250219, 51.979583478398602 ], [ 4.1471639873982, 51.981479455573535 ], [ 4.149796649503803, 51.984905712476603 ], [ 4.150887147228785, 51.98774928862661 ], [ 4.136340023320296, 51.992410123532046 ], [ 4.131140698933877, 51.997169333426967 ], [ 4.132659560926085, 51.998601594329102 ], [ 4.118464646733226, 52.004396853868329 ], [ 4.110281396712539, 52.004308345244112 ], [ 4.032737248341532, 52.00344137971679 ], [ 3.953284434149875, 51.989188672240566 ], [ 3.940655551283926, 51.921627025285339 ], [ 3.97250749580791, 51.910969072208076 ], [ 4.027356838652063, 51.923795064686153 ], [ 4.066004385345567, 51.932732385675479 ], [ 4.074538709250391, 51.933677648393441 ], [ 4.084662518182667, 51.933507046203019 ], [ 4.092865434109028, 51.932464789654723 ], [ 4.10207285327138, 51.923502909283428 ], [ 4.101586663475707, 51.926896182253046 ], [ 4.107552688968522, 51.936024175832451 ], [ 4.112650969908444, 51.934663487560613 ], [ 4.113007916577356, 51.935800216794988 ], [ 4.142307125738231, 51.931865935174635 ], [ 4.145046157079414, 51.931328483503798 ], [ 4.151730078087917, 51.928850003690435 ], [ 4.159541603030461, 51.927798996370711 ], [ 4.163867083600672, 51.92614481649224 ], [ 4.167483436300857, 51.921934207111839 ], [ 4.168338176976481, 51.919110945278739 ], [ 4.175362117584414, 51.91833394198796 ], [ 4.18798955936798, 51.91166637473949 ], [ 4.198601750003826, 51.907526011716875 ], [ 4.208860279791349, 51.901965096752448 ], [ 4.216336011810815, 51.8986412924435 ], [ 4.220700673257233, 51.89528617028995 ], [ 4.227499198983401, 51.887989980573813 ], [ 4.230797927134796, 51.880659001711159 ], [ 4.234023011000079, 51.876159324351939 ], [ 4.239542603404224, 51.873098062373572 ], [ 4.258370942224057, 51.866200269882775 ], [ 4.265010724829693, 51.864847853701434 ], [ 4.269291124449586, 51.864605469300749 ], [ 4.335743110539212, 51.864369640029096 ], [ 4.342544601424628, 51.855934109182698 ], [ 4.352404766333653, 51.849507644939443 ], [ 4.35984829617195, 51.846740939807219 ], [ 4.367672821846901, 51.844260283985051 ], [ 4.374306118991688, 51.842901667438191 ], [ 4.383644490657345, 51.842132247890454 ], [ 4.383417314196405, 51.852325744625112 ], [ 4.38494567087621, 51.853471626462046 ], [ 4.383685805679769, 51.857708960522949 ], [ 4.386216003277479, 51.866226737465915 ], [ 4.39039557415199, 51.870510372329733 ], [ 4.393472708536585, 51.871952475870245 ], [ 4.403168202246351, 51.872883723796029 ], [ 4.409798515779605, 51.871806267957894 ], [ 4.418334707508604, 51.872443404227177 ], [ 4.431606198104434, 51.869720092192438 ], [ 4.437464274229073, 51.868351590517911 ], [ 4.441014664534554, 51.865831413234645 ], [ 4.444499427819579, 51.866425845156471 ], [ 4.462064320092302, 51.862600680628177 ], [ 4.47179955835307, 51.861544158541861 ], [ 4.48032900343612, 51.86245994480754 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0262\", \"naam\": \"Lochem\", \"code\": \"0262\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.424141278187282, 52.097005379323662 ], [ 6.437578360648427, 52.103683117369087 ], [ 6.439908433859883, 52.103095927874762 ], [ 6.445059490464837, 52.106164980291425 ], [ 6.452500942152873, 52.106947539658094 ], [ 6.455262187133973, 52.108055340544482 ], [ 6.460312852034849, 52.106876661053398 ], [ 6.461416563986113, 52.10403461454338 ], [ 6.466555519519002, 52.106536448871964 ], [ 6.469673386968242, 52.10622465071225 ], [ 6.470015944005848, 52.104239107613871 ], [ 6.473133626484293, 52.103927218317303 ], [ 6.472311237013515, 52.102235596540496 ], [ 6.476956439020822, 52.10049352900807 ], [ 6.478525501873674, 52.100762207108872 ], [ 6.479794035676713, 52.104715250474236 ], [ 6.482165230706724, 52.105826040706638 ], [ 6.482632170920836, 52.108936899219202 ], [ 6.481104390815096, 52.110367088987175 ], [ 6.482722426744849, 52.112617656122794 ], [ 6.487493817453845, 52.115971603110758 ], [ 6.491994286749054, 52.124142292134231 ], [ 6.491261801246117, 52.126131550786099 ], [ 6.488924226068844, 52.126436620768573 ], [ 6.488233456367904, 52.130124663199503 ], [ 6.486712108969142, 52.131838055979905 ], [ 6.488338196300705, 52.134371668787978 ], [ 6.485281176707334, 52.137232168261505 ], [ 6.483717745465619, 52.137246719255579 ], [ 6.481435059152845, 52.139816712307606 ], [ 6.481106627073507, 52.142368543864208 ], [ 6.473336780899692, 52.144422757530535 ], [ 6.474481955938971, 52.143279412091239 ], [ 6.471347782150517, 52.14302507368317 ], [ 6.470648439312294, 52.146429873245083 ], [ 6.466759585461798, 52.147315133019454 ], [ 6.466039291728707, 52.149870500443299 ], [ 6.461402168584007, 52.152178408377253 ], [ 6.4669102920213, 52.153544091467431 ], [ 6.471218193249699, 52.153787768826106 ], [ 6.48107657025191, 52.157095108594234 ], [ 6.483813792919389, 52.157069688680416 ], [ 6.487828878509379, 52.161280251145143 ], [ 6.493535553024287, 52.170572378729688 ], [ 6.494388143356832, 52.173396352302255 ], [ 6.492530528020767, 52.177378531213321 ], [ 6.491021767074338, 52.179658232230985 ], [ 6.488695377636616, 52.18052956529916 ], [ 6.479347290034006, 52.182315648609901 ], [ 6.47785154284878, 52.185161445336092 ], [ 6.472840766133973, 52.188322809573712 ], [ 6.469463371188805, 52.194300937687323 ], [ 6.470369959938259, 52.199390131261396 ], [ 6.467266175455082, 52.200551356890784 ], [ 6.4606052938761, 52.200328933098746 ], [ 6.454781570158451, 52.202364117796996 ], [ 6.453303914446941, 52.206058997449368 ], [ 6.446419106180161, 52.212917628630763 ], [ 6.439856842531435, 52.216941033152786 ], [ 6.432118600294709, 52.220974477199562 ], [ 6.428660435658339, 52.223836956462556 ], [ 6.42297708333723, 52.23209951228344 ], [ 6.416827808112641, 52.23725073323638 ], [ 6.416547381544047, 52.242067421614067 ], [ 6.411081928282545, 52.242964504705697 ], [ 6.398942738565429, 52.243352315585312 ], [ 6.390695812574984, 52.24257311013772 ], [ 6.383283441039306, 52.244051809193351 ], [ 6.381760513681949, 52.24604696860748 ], [ 6.366771452392309, 52.241641223334788 ], [ 6.350708171039583, 52.241773372814734 ], [ 6.349471584012446, 52.238951572892837 ], [ 6.347127105767354, 52.239253842254925 ], [ 6.341599862585561, 52.237316326189692 ], [ 6.341177769480012, 52.235903796174007 ], [ 6.338049912526741, 52.236212212264597 ], [ 6.338639728384384, 52.227145435668312 ], [ 6.325317247934895, 52.226968854691101 ], [ 6.320587634993529, 52.225590400144299 ], [ 6.297866092378306, 52.225484657780129 ], [ 6.296760551556767, 52.228891424824226 ], [ 6.292855265781554, 52.229487818519658 ], [ 6.291708971434934, 52.230912539218366 ], [ 6.286213751058271, 52.230388134613854 ], [ 6.275581479900415, 52.227636748100082 ], [ 6.270887042914719, 52.227955163511496 ], [ 6.271250605663012, 52.226536510828161 ], [ 6.264603507025927, 52.227152467856826 ], [ 6.259942342318287, 52.229169315448765 ], [ 6.25716180942961, 52.227207535790512 ], [ 6.246581263879229, 52.227001837980517 ], [ 6.244644735642697, 52.228148658991074 ], [ 6.237975376770837, 52.227630535220868 ], [ 6.234471860729606, 52.228788468907396 ], [ 6.227045866493462, 52.229691078727498 ], [ 6.222329609526572, 52.228874978019761 ], [ 6.216893486671164, 52.231461962458141 ], [ 6.214537965848478, 52.231195306776307 ], [ 6.21719017331464, 52.226362558529608 ], [ 6.210954963271786, 52.228105332824576 ], [ 6.201967023682212, 52.229300434969453 ], [ 6.189036065917109, 52.229105776331593 ], [ 6.182463297023122, 52.233964344655114 ], [ 6.178535883754436, 52.233424364772318 ], [ 6.16634762751197, 52.2309567756256 ], [ 6.16984811719339, 52.229517709990034 ], [ 6.173318382443965, 52.226379641647149 ], [ 6.179153109191046, 52.224075180209169 ], [ 6.189600012980375, 52.216925040441041 ], [ 6.19109479472383, 52.21295029049886 ], [ 6.189436802113886, 52.207864250182801 ], [ 6.185074466387086, 52.204778790132806 ], [ 6.170916488176182, 52.201192257418143 ], [ 6.162304638967527, 52.201249132129533 ], [ 6.158761989439109, 52.200139610058216 ], [ 6.156359589945384, 52.19704026733146 ], [ 6.156296059637349, 52.19335928626036 ], [ 6.158981776028321, 52.190226721738654 ], [ 6.169528373599052, 52.189024528215285 ], [ 6.181132388039359, 52.181301012609723 ], [ 6.188149835360764, 52.179837651224432 ], [ 6.191259474234685, 52.178683754584782 ], [ 6.194322821445845, 52.174981415031468 ], [ 6.192665896049375, 52.169895384053682 ], [ 6.196088854084409, 52.164491412086946 ], [ 6.198795802350623, 52.162773694556236 ], [ 6.200792657289691, 52.165025433831971 ], [ 6.207081918075644, 52.166681007297861 ], [ 6.212484544060647, 52.162678706459062 ], [ 6.217162006372277, 52.161796321671595 ], [ 6.21593084860256, 52.158689913698957 ], [ 6.218663064931511, 52.158387495328569 ], [ 6.21901189750441, 52.156119531718623 ], [ 6.223313421431117, 52.156089113600942 ], [ 6.223662000290323, 52.153821135902191 ], [ 6.231525402831338, 52.156030607107922 ], [ 6.235805364539731, 52.154867133349207 ], [ 6.237984204648639, 52.14607257889314 ], [ 6.248963822134842, 52.147691983664217 ], [ 6.251293203362532, 52.146825368717799 ], [ 6.264200543636384, 52.14701326701303 ], [ 6.269730034337766, 52.149803912387547 ], [ 6.27518696275135, 52.148913375933752 ], [ 6.279890048362028, 52.149444246766038 ], [ 6.283777133592683, 52.1482819947637 ], [ 6.290446604633305, 52.149363858962062 ], [ 6.295517848604693, 52.148758523829009 ], [ 6.2982778093458, 52.149869995886426 ], [ 6.300997318759921, 52.148999380290796 ], [ 6.304942040754009, 52.150667892629137 ], [ 6.321002324048242, 52.151957768221244 ], [ 6.324148180474856, 52.152782390868879 ], [ 6.326381004527555, 52.147383983894088 ], [ 6.328132844309088, 52.13774147962571 ], [ 6.357796265997862, 52.135518655365765 ], [ 6.357685473622541, 52.130422078747763 ], [ 6.361904035971016, 52.126705750236162 ], [ 6.368875782580019, 52.123815951387094 ], [ 6.377150601782895, 52.126861890721329 ], [ 6.379085622137266, 52.125996039912032 ], [ 6.383415672159252, 52.127375500556688 ], [ 6.383050148780477, 52.128511368979034 ], [ 6.392499252294885, 52.13154631402935 ], [ 6.396003810716002, 52.130949986096979 ], [ 6.391930033902398, 52.123621697295619 ], [ 6.398438104411203, 52.117618930381397 ], [ 6.396471833306587, 52.117069392195027 ], [ 6.391694401500449, 52.113145462706775 ], [ 6.418361979741211, 52.10045447152455 ], [ 6.424141278187282, 52.097005379323662 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0171\", \"naam\": \"Noordoostpolder\", \"code\": \"0171\", \"ligtInProvincieCode\": \"24\", \"ligtInProvincieNaam\": \"Flevoland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.980869947118677, 52.628185147026628 ], [ 5.988790470732231, 52.629277927093597 ], [ 6.010654183575001, 52.637943013748085 ], [ 6.017452013050859, 52.643287087629808 ], [ 6.015112039730652, 52.645564704364226 ], [ 6.006888299060093, 52.651270934302225 ], [ 5.999421898375553, 52.654707459745524 ], [ 5.985215060767264, 52.657044998402483 ], [ 5.979723695488037, 52.660470321206184 ], [ 5.970690105350147, 52.665328579346628 ], [ 5.966749171067728, 52.666480460236336 ], [ 5.965163057496918, 52.666205029887728 ], [ 5.958064409689053, 52.667938231909382 ], [ 5.954104645224809, 52.667674027234668 ], [ 5.941480857094412, 52.670565053539839 ], [ 5.939876946732237, 52.66887361687084 ], [ 5.935133029785065, 52.669178723961856 ], [ 5.933179538810339, 52.671169762468459 ], [ 5.934023677759996, 52.675413134696171 ], [ 5.945192595677423, 52.68243999692428 ], [ 5.944800447713322, 52.682724985898972 ], [ 5.949589260724943, 52.685817082454946 ], [ 5.952748147224683, 52.685235803843781 ], [ 5.959538905017144, 52.690016861628806 ], [ 5.961917468078194, 52.69028854169153 ], [ 5.965128677611076, 52.693670775157102 ], [ 5.964792426148988, 52.698202794871634 ], [ 5.958927916437254, 52.703894098763627 ], [ 5.954964903925863, 52.703629929773065 ], [ 5.955408481671363, 52.707308739463251 ], [ 5.951111058427773, 52.711859552202156 ], [ 5.942438297129646, 52.715014962152992 ], [ 5.935500692260445, 52.730337050122408 ], [ 5.930069889246303, 52.739705750332988 ], [ 5.92267580017104, 52.750781885631781 ], [ 5.906152672063451, 52.761331367502819 ], [ 5.900202507820083, 52.761074007768734 ], [ 5.896257697500368, 52.762789795384109 ], [ 5.894301560259255, 52.765063283944635 ], [ 5.885230539372596, 52.76934870207085 ], [ 5.879723681021563, 52.773335591484617 ], [ 5.875773806322309, 52.774767568972919 ], [ 5.868672717968129, 52.778194183857124 ], [ 5.860383650981011, 52.781908235359097 ], [ 5.849704132279124, 52.784781587028064 ], [ 5.843354437500494, 52.78452293201962 ], [ 5.836225999191182, 52.785682577679651 ], [ 5.828289539020716, 52.785429090764616 ], [ 5.818760883141187, 52.784614575047648 ], [ 5.818791581349757, 52.787729001095336 ], [ 5.805768157135786, 52.794853954369529 ], [ 5.799084433722911, 52.801389436302564 ], [ 5.795163700961115, 52.806499410454094 ], [ 5.789978321344977, 52.803685672897082 ], [ 5.788027809046047, 52.807373042062416 ], [ 5.784548463366119, 52.817577635518646 ], [ 5.749003618847733, 52.839775415478172 ], [ 5.724808752882509, 52.844093402684109 ], [ 5.728696830574931, 52.833323220801844 ], [ 5.722761815667621, 52.836171423199566 ], [ 5.714827452512663, 52.83732603255519 ], [ 5.713245175474239, 52.83817977380599 ], [ 5.709645664451752, 52.834791952564821 ], [ 5.660378351387634, 52.831234308014245 ], [ 5.631232005849061, 52.802984055447773 ], [ 5.377258283528383, 52.764727245034052 ], [ 5.590561276504733, 52.676213539066779 ], [ 5.594122570940805, 52.676207392375659 ], [ 5.594551696496754, 52.683285263496067 ], [ 5.604445768280612, 52.68326759334343 ], [ 5.609576340868989, 52.680426659146512 ], [ 5.612746599582074, 52.681270120689028 ], [ 5.626209610075462, 52.682659539064865 ], [ 5.643225482623791, 52.68234096690496 ], [ 5.641616220268131, 52.677814099225785 ], [ 5.655393534709217, 52.665891689198894 ], [ 5.642702876680178, 52.660539867122694 ], [ 5.650181178569093, 52.654294324250408 ], [ 5.648966005615809, 52.649483504952109 ], [ 5.636311353527579, 52.649510709297957 ], [ 5.636692346407767, 52.646961583981643 ], [ 5.641015973622979, 52.642422064691729 ], [ 5.630318398533101, 52.638480367871892 ], [ 5.627541597038531, 52.636787130314289 ], [ 5.650342747025631, 52.615219489337136 ], [ 5.655464154964045, 52.612659682332385 ], [ 5.664544924172523, 52.61150622183365 ], [ 5.723812101406519, 52.611353026039716 ], [ 5.723783950009262, 52.607672143546807 ], [ 5.777909662371546, 52.607506413652914 ], [ 5.837170812059541, 52.607296681328954 ], [ 5.840363451700747, 52.610399223209008 ], [ 5.905661200451616, 52.619193069793994 ], [ 5.910781636704456, 52.617754846152785 ], [ 5.91547260188374, 52.613486773610198 ], [ 5.932875570075576, 52.614823876708712 ], [ 5.940425836812539, 52.618186804449437 ], [ 5.955504229324498, 52.622929252271682 ], [ 5.955134604349626, 52.624913097364548 ], [ 5.980869947118677, 52.628185147026628 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0432\", \"naam\": \"Opmeer\", \"code\": \"0432\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.979168867170596, 52.679652423581025 ], [ 4.980652252672603, 52.690417075468169 ], [ 4.981417749742033, 52.693251149885647 ], [ 4.985712563161411, 52.699778067739324 ], [ 4.977744310375319, 52.705130691382777 ], [ 4.977728473517772, 52.70682950849887 ], [ 4.971738052388283, 52.712188511377136 ], [ 4.984366465416855, 52.717045364376602 ], [ 4.988360515547707, 52.713377931717211 ], [ 5.01125023068423, 52.722796152308987 ], [ 5.011221133344896, 52.726193781615599 ], [ 5.007668067443594, 52.724766794686744 ], [ 5.0028549892571, 52.731546797612943 ], [ 4.998862996823124, 52.73493156445543 ], [ 4.996452883113554, 52.738604538189939 ], [ 4.998419115693486, 52.74030982705235 ], [ 4.995218587200466, 52.743697047042247 ], [ 4.998381481837441, 52.744556838910199 ], [ 4.99637470764033, 52.747381693068768 ], [ 4.996728201476897, 52.75219626276111 ], [ 4.955890121566002, 52.753187990699736 ], [ 4.954285012104558, 52.7551641641274 ], [ 4.944389198755925, 52.753712084909424 ], [ 4.944400632606731, 52.752579557872608 ], [ 4.94045989607202, 52.750299705642973 ], [ 4.932943721141513, 52.748855569327773 ], [ 4.931431877878534, 52.741771215406565 ], [ 4.912246993903262, 52.720177276630288 ], [ 4.905195150519385, 52.713070296242854 ], [ 4.898532094979835, 52.706813915071457 ], [ 4.899823673700346, 52.697475363172366 ], [ 4.910883806485008, 52.699785311829871 ], [ 4.916036618177417, 52.699239525955377 ], [ 4.918043322830024, 52.696699130616672 ], [ 4.917290941567239, 52.693015250763061 ], [ 4.905081990227489, 52.687303469203911 ], [ 4.905487091179378, 52.686455666083098 ], [ 4.920176193380716, 52.682267001028393 ], [ 4.924142596833112, 52.681433057724483 ], [ 4.945973602314866, 52.675003606793581 ], [ 4.949540370256355, 52.67445048352721 ], [ 4.952733761618628, 52.671630706554154 ], [ 4.955492198601008, 52.672773339067895 ], [ 4.961814565722852, 52.673645553646857 ], [ 4.966134390922611, 52.677058690168906 ], [ 4.966516543691339, 52.678475779029313 ], [ 4.970462939941955, 52.67962225413703 ], [ 4.976815668718155, 52.677379153840079 ], [ 4.979168867170596, 52.679652423581025 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1892\", \"naam\": \"Zuidplas\", \"code\": \"1892\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.619383600858565, 51.933401081395481 ], [ 4.621300199081764, 51.935112756279345 ], [ 4.625561400666872, 51.936273219294556 ], [ 4.631009334896492, 51.936308384007738 ], [ 4.634867526109231, 51.93831550054788 ], [ 4.637487644969704, 51.944562523734831 ], [ 4.638954850041128, 51.949952566697583 ], [ 4.64086348609245, 51.952230250371763 ], [ 4.6455114293734, 51.953675625880138 ], [ 4.645469328570097, 51.956224107636089 ], [ 4.639919984098729, 51.962136056273401 ], [ 4.631662345842575, 51.96689760491472 ], [ 4.630854907147781, 51.968591580308569 ], [ 4.633547551532073, 51.970591219299308 ], [ 4.648698314031951, 51.972952853475483 ], [ 4.655653163284731, 51.976394623261591 ], [ 4.668850447015044, 51.979307868794379 ], [ 4.670779932115786, 51.980452403207082 ], [ 4.673026926339032, 51.986129908764426 ], [ 4.678431746582848, 51.98927769942501 ], [ 4.68227880966125, 51.992415916408731 ], [ 4.688845187954923, 51.996136554341028 ], [ 4.684138174890927, 51.998090868966976 ], [ 4.680263713957743, 51.996651702695239 ], [ 4.670821280199265, 52.002258438049076 ], [ 4.66261899874812, 52.00334099569762 ], [ 4.659469046756868, 52.005303904339456 ], [ 4.666416074294397, 52.009594522343662 ], [ 4.670680995176242, 52.011036516316338 ], [ 4.666751239065298, 52.012994869443247 ], [ 4.664779386251154, 52.014398741141399 ], [ 4.664738306850696, 52.016947209336458 ], [ 4.667807037790078, 52.020081101902377 ], [ 4.667376233173344, 52.022627186211857 ], [ 4.665046017276893, 52.022046534837244 ], [ 4.66267465673828, 52.024014301947332 ], [ 4.655312771960593, 52.021136858039455 ], [ 4.648694206554551, 52.020529144955496 ], [ 4.648327679753407, 52.019110888154664 ], [ 4.636755225186414, 52.011674699917002 ], [ 4.62461866869649, 52.014711818169935 ], [ 4.591117082390769, 52.035163106058768 ], [ 4.607324324045348, 52.045183268238127 ], [ 4.609645153542235, 52.0463313788688 ], [ 4.610776153038497, 52.048604370563744 ], [ 4.605670093930479, 52.050552939957583 ], [ 4.607512254228669, 52.056795353405981 ], [ 4.608574447192487, 52.06303257724413 ], [ 4.607359326979473, 52.065573255920576 ], [ 4.565325910614286, 52.059057298450881 ], [ 4.564946113581529, 52.058488263675713 ], [ 4.560957105794362, 52.042035177134188 ], [ 4.563354716824081, 52.038936850857496 ], [ 4.563412007676035, 52.035822126984669 ], [ 4.559949097337881, 52.033249110118618 ], [ 4.558077839144804, 52.028988045145951 ], [ 4.556722795101783, 52.017933931403448 ], [ 4.557180814395877, 52.014255636428686 ], [ 4.555679363773456, 52.011129901306653 ], [ 4.554989172299409, 52.006310715120641 ], [ 4.5523400902189, 52.00204403149931 ], [ 4.549728529652496, 51.995795183161867 ], [ 4.547032822978092, 51.994076795887601 ], [ 4.546685646533922, 51.99180875245235 ], [ 4.548371205959621, 51.985024083941425 ], [ 4.551993187948026, 51.978819541928701 ], [ 4.553966988527465, 51.977417557937649 ], [ 4.552445909586615, 51.975424403029145 ], [ 4.547819926298367, 51.972842721710904 ], [ 4.554124712551085, 51.968922791907197 ], [ 4.556471689154244, 51.9683729974032 ], [ 4.560344932370934, 51.969533071230437 ], [ 4.562250397757761, 51.971812017005092 ], [ 4.566934047419358, 51.971278376779033 ], [ 4.571986443715119, 51.971879889006154 ], [ 4.578925013007696, 51.97589250162595 ], [ 4.577361991153007, 51.976164947957656 ], [ 4.573498003204961, 51.974439113656828 ], [ 4.570299803688507, 51.978948076615602 ], [ 4.57882808335075, 51.981272543030286 ], [ 4.578771953934142, 51.984387301885207 ], [ 4.57717795554825, 51.986358703396526 ], [ 4.579500071967523, 51.987224250490399 ], [ 4.579064580356525, 51.989770012800172 ], [ 4.594178852181316, 51.994403947933293 ], [ 4.598569462167855, 51.988486378838722 ], [ 4.593725211234448, 51.975993253311927 ], [ 4.601584228939501, 51.972081271267214 ], [ 4.590745079266544, 51.968326850221729 ], [ 4.589961223006441, 51.96860473556692 ], [ 4.584175729073519, 51.965450233396155 ], [ 4.596830621466431, 51.954491327574637 ], [ 4.601980581492747, 51.949428305565746 ], [ 4.599674878255976, 51.947713713333471 ], [ 4.619383600858565, 51.933401081395481 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0861\", \"naam\": \"Veldhoven\", \"code\": \"0861\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.421766582322775, 51.383392526127075 ], [ 5.42099980513994, 51.386224748151399 ], [ 5.417925225841806, 51.387924800832856 ], [ 5.417926759428909, 51.390190396738397 ], [ 5.421773695453932, 51.392738109451621 ], [ 5.422929040754809, 51.39500335522591 ], [ 5.422161268619463, 51.396702785696228 ], [ 5.423701762380719, 51.399534305437641 ], [ 5.427165707463425, 51.402648357616712 ], [ 5.425244345100305, 51.404631398280905 ], [ 5.429861129839483, 51.406045790520174 ], [ 5.429480713289438, 51.410577117567165 ], [ 5.427563144539111, 51.417091380278329 ], [ 5.427950666235847, 51.420206434772417 ], [ 5.426804560152481, 51.429552397068086 ], [ 5.42526642153685, 51.430968905684793 ], [ 5.419880040414985, 51.432952938492768 ], [ 5.414490290129665, 51.430122343123742 ], [ 5.41218189655335, 51.431255658974997 ], [ 5.410644419520678, 51.434937564731648 ], [ 5.409104636905306, 51.434371468626054 ], [ 5.404872149741574, 51.437204180052582 ], [ 5.400637023293904, 51.432956769209127 ], [ 5.394864312135764, 51.434090094544715 ], [ 5.389091428760494, 51.437771922729212 ], [ 5.387551824559377, 51.437771939678157 ], [ 5.379854205353709, 51.435222931034005 ], [ 5.379084199196417, 51.436638874807677 ], [ 5.373310571191809, 51.437487934483286 ], [ 5.371385591627949, 51.438903685637214 ], [ 5.367921633894467, 51.438336772048849 ], [ 5.366767924262918, 51.436070987453959 ], [ 5.363689121189414, 51.435504014342932 ], [ 5.356759366198078, 51.438334408945515 ], [ 5.355992448764288, 51.434086226009711 ], [ 5.345605339764751, 51.429268618684141 ], [ 5.345603795124284, 51.430967811401572 ], [ 5.342525047159778, 51.430966677158992 ], [ 5.343297995437607, 51.427568582809158 ], [ 5.339836715160705, 51.425584840834034 ], [ 5.319444943677602, 51.423875611803766 ], [ 5.319835571803162, 51.419911050554404 ], [ 5.315988954278192, 51.41934237237372 ], [ 5.317150135518272, 51.41481188747165 ], [ 5.323701955446419, 51.406319652397706 ], [ 5.331779299811426, 51.406323760093237 ], [ 5.33523973282932, 51.407458145817124 ], [ 5.354470978859919, 51.408881099057027 ], [ 5.371015117870305, 51.397839773319689 ], [ 5.370246093934445, 51.397556465707062 ], [ 5.374094281929405, 51.388494573646064 ], [ 5.389088675637642, 51.376600890040962 ], [ 5.392932636949855, 51.377450358111219 ], [ 5.396392864252346, 51.380848527821499 ], [ 5.408693796000343, 51.379714092702329 ], [ 5.413309177221572, 51.383961138430756 ], [ 5.417921201011764, 51.381977610247219 ], [ 5.421766582322775, 51.383392526127075 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0824\", \"naam\": \"Oisterwijk\", \"code\": \"0824\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.273334210471606, 51.552694852608276 ], [ 5.26908665514453, 51.553823429209537 ], [ 5.26289703752945, 51.559480949994033 ], [ 5.246239639701606, 51.579569012872668 ], [ 5.247753626587927, 51.589482687179505 ], [ 5.255465860963671, 51.593456361150452 ], [ 5.257388869650448, 51.59629046631941 ], [ 5.262786986185414, 51.599694674036861 ], [ 5.268191850047513, 51.600833073827324 ], [ 5.275908499255001, 51.604522202045999 ], [ 5.278612026862587, 51.604807935078739 ], [ 5.276673547924328, 51.607638075493824 ], [ 5.269327915088711, 51.609613280710228 ], [ 5.268934180467494, 51.612444836528908 ], [ 5.264282257451111, 51.618103950673635 ], [ 5.25537461623253, 51.624890945646598 ], [ 5.25074357018971, 51.622620081816486 ], [ 5.250740163837384, 51.623752858052541 ], [ 5.246105944340582, 51.622614586841955 ], [ 5.246497681630437, 51.620915887453307 ], [ 5.244186095933972, 51.618647526166832 ], [ 5.236845710756691, 51.618071941474703 ], [ 5.228352185762131, 51.615795165326269 ], [ 5.224099636572165, 51.616355709811209 ], [ 5.222154171052392, 51.620034523108075 ], [ 5.222534451023029, 51.621734230087867 ], [ 5.210578422027067, 51.615486507772381 ], [ 5.203250458925362, 51.612076876824858 ], [ 5.153562333484723, 51.581969434217235 ], [ 5.150869804262182, 51.579981648782642 ], [ 5.145111459315189, 51.573739542211605 ], [ 5.13745117715329, 51.562678747239033 ], [ 5.137852675595749, 51.559847630400093 ], [ 5.137119776170893, 51.552766128688255 ], [ 5.139059961151847, 51.550787878965124 ], [ 5.147954020116364, 51.547124846211844 ], [ 5.138700427904243, 51.54597275565083 ], [ 5.141808347888293, 51.542014551690819 ], [ 5.133746420914659, 51.534917405473003 ], [ 5.135297147795222, 51.533504767349626 ], [ 5.130300536476004, 51.530378714818696 ], [ 5.145003216329789, 51.521630961650878 ], [ 5.14884891099278, 51.523621253836644 ], [ 5.159296264338458, 51.516562138472459 ], [ 5.160834299179502, 51.517414721736898 ], [ 5.164318327176509, 51.514589436191933 ], [ 5.165472213608367, 51.515158027169853 ], [ 5.17089150660329, 51.51063701219578 ], [ 5.176671619439269, 51.511213963204717 ], [ 5.179766110334397, 51.508953911347355 ], [ 5.190182006971956, 51.507272745024295 ], [ 5.195953608397037, 51.509831113851945 ], [ 5.20289277396709, 51.509842261657361 ], [ 5.210980796948574, 51.511837119896541 ], [ 5.21483606109197, 51.511842868047694 ], [ 5.224454987017337, 51.517237411508134 ], [ 5.230997082863064, 51.520927903517723 ], [ 5.234818981988302, 51.531128053682984 ], [ 5.244092477830973, 51.525759019963303 ], [ 5.249858349076308, 51.531996273461061 ], [ 5.253305462372202, 51.540212986255213 ], [ 5.261020033375308, 51.540504758556111 ], [ 5.263324630604449, 51.544188781374856 ], [ 5.26795647765381, 51.543344003052695 ], [ 5.269878146807391, 51.546177914045089 ], [ 5.276826318059019, 51.544768690144998 ], [ 5.277588379096451, 51.548734161044266 ], [ 5.271797900153314, 51.549861380910983 ], [ 5.273334210471606, 51.552694852608276 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0267\", \"naam\": \"Nijkerk\", \"code\": \"0267\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.479875474258106, 52.165813109928244 ], [ 5.480662560295767, 52.168077885413766 ], [ 5.484973685723608, 52.171755654838051 ], [ 5.485386756808763, 52.181666409003235 ], [ 5.494396995977481, 52.185906164608127 ], [ 5.500664963473457, 52.188448860208645 ], [ 5.512798053354447, 52.188719729141653 ], [ 5.521026111202001, 52.191825585692619 ], [ 5.529242668096589, 52.190966451086609 ], [ 5.530810038876769, 52.191530899663597 ], [ 5.534703313747206, 52.18529626783171 ], [ 5.542113094929984, 52.177924233427618 ], [ 5.548755466734798, 52.175366746522933 ], [ 5.554234011977742, 52.175642285583088 ], [ 5.565199222816146, 52.178174810806937 ], [ 5.568719528231465, 52.177886268758009 ], [ 5.567165882715863, 52.180720395795504 ], [ 5.565209404674048, 52.180723365947003 ], [ 5.564444838241704, 52.18525530697675 ], [ 5.566406071787043, 52.186385039266057 ], [ 5.577753869194977, 52.186084072767898 ], [ 5.576995313145411, 52.191748778444641 ], [ 5.575041934637705, 52.192601427894353 ], [ 5.577791426118212, 52.194862407410234 ], [ 5.58327379142332, 52.19541976784641 ], [ 5.587968329341111, 52.19484552198378 ], [ 5.589930580717621, 52.19597486087887 ], [ 5.595411909999777, 52.196248485671013 ], [ 5.600115853587623, 52.197655957398389 ], [ 5.601676173449635, 52.196520434911442 ], [ 5.607932092819828, 52.195093023380586 ], [ 5.607927883101031, 52.194243509055894 ], [ 5.617321802505979, 52.194225555259905 ], [ 5.616528771374275, 52.192244880324282 ], [ 5.618479869349074, 52.191108373352726 ], [ 5.619664369948823, 52.193088264771085 ], [ 5.625533899492569, 52.19279337631604 ], [ 5.634988932693939, 52.203817683339231 ], [ 5.63344643134822, 52.208068518985698 ], [ 5.606022288133362, 52.204724490846033 ], [ 5.55002753072978, 52.202266520580991 ], [ 5.549640178418955, 52.203399747717647 ], [ 5.534424314091106, 52.219277397662495 ], [ 5.533248480283969, 52.21899568714641 ], [ 5.526605813281371, 52.223817652310011 ], [ 5.519575890269408, 52.230621875641795 ], [ 5.514876698764598, 52.231193398984217 ], [ 5.515277409432483, 52.234307851381068 ], [ 5.510187567804242, 52.235445953700946 ], [ 5.510180518997489, 52.232897418165123 ], [ 5.506259178857735, 52.231485584041003 ], [ 5.499213519716794, 52.233757857908813 ], [ 5.497261015871541, 52.236308238175276 ], [ 5.49020757180879, 52.235748267348086 ], [ 5.483554674371236, 52.239151945047844 ], [ 5.478088443881767, 52.248500921596069 ], [ 5.474185598614834, 52.256715804749831 ], [ 5.478498958696802, 52.257562054835361 ], [ 5.476940796231787, 52.262377139931232 ], [ 5.476159603029471, 52.26379358064878 ], [ 5.464395335331862, 52.2618196794702 ], [ 5.463216396120016, 52.260121426264774 ], [ 5.456158285287802, 52.258709916335235 ], [ 5.406764427928858, 52.249667043429916 ], [ 5.404804911932391, 52.249667354363808 ], [ 5.395003024513136, 52.225598889558263 ], [ 5.39304388023896, 52.220501914515282 ], [ 5.395393494116492, 52.219085912225324 ], [ 5.407139961795019, 52.213421055417371 ], [ 5.409492036557495, 52.218517729122944 ], [ 5.420845196740013, 52.213134754433142 ], [ 5.429455411626672, 52.208318044707845 ], [ 5.436499662623024, 52.20520040518975 ], [ 5.441196773566287, 52.204348825701359 ], [ 5.439234939440768, 52.200668462898612 ], [ 5.440007787439536, 52.192172925167853 ], [ 5.439612048539241, 52.188491847664309 ], [ 5.43804205242517, 52.184528106108971 ], [ 5.439215712358018, 52.184244419332316 ], [ 5.439985255047104, 52.173200290854595 ], [ 5.439982902188851, 52.171218071718897 ], [ 5.446629372519382, 52.168099983165192 ], [ 5.475572648157244, 52.165816417293307 ], [ 5.479875474258106, 52.165813109928244 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0523\", \"naam\": \"Hardinxveld-Giessendam\", \"code\": \"0523\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.88453591861069, 51.816459546787449 ], [ 4.889553332010586, 51.819029669059049 ], [ 4.904251141815476, 51.823905346272511 ], [ 4.911217521650336, 51.825916150396452 ], [ 4.91857863191112, 51.827361729744069 ], [ 4.927110678195933, 51.828245055599005 ], [ 4.925050512320786, 51.839847849468306 ], [ 4.9137951370153, 51.839236624880002 ], [ 4.903325815280508, 51.83777798438696 ], [ 4.884346401868897, 51.833450337734334 ], [ 4.876593943232244, 51.832284103830702 ], [ 4.868055612982257, 51.831963464274537 ], [ 4.866469885218205, 51.834788375714879 ], [ 4.862998465648163, 51.832790572972698 ], [ 4.854851740303713, 51.832187527039537 ], [ 4.851347365904111, 51.833021165256078 ], [ 4.847853030372987, 51.833005163892928 ], [ 4.843462583030072, 51.842896692047717 ], [ 4.838196681360674, 51.860713369732217 ], [ 4.811920015781753, 51.849543044244356 ], [ 4.803415598875627, 51.846385936269861 ], [ 4.804895517207351, 51.822038543669024 ], [ 4.811505135981331, 51.821221562951685 ], [ 4.811537683069814, 51.818672967517067 ], [ 4.821625625185824, 51.819005206448566 ], [ 4.843361373817844, 51.819107929949304 ], [ 4.871326943152627, 51.817535009415884 ], [ 4.878310042771163, 51.81784868714881 ], [ 4.883346244937633, 51.818719994981628 ], [ 4.88453591861069, 51.816459546787449 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0547\", \"naam\": \"Leiderdorp\", \"code\": \"0547\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.571416018260931, 52.15311865962758 ], [ 4.562291682588907, 52.160134906870553 ], [ 4.56065392775275, 52.164088070976447 ], [ 4.562572890500085, 52.166083809165237 ], [ 4.560601475342688, 52.16691957754518 ], [ 4.553624387775866, 52.163472244360129 ], [ 4.55089191008914, 52.163169720942754 ], [ 4.542914368117191, 52.171325355961905 ], [ 4.538889499909341, 52.177243432033002 ], [ 4.538053132298395, 52.180069291983152 ], [ 4.52827718964256, 52.179715363724526 ], [ 4.518446254726149, 52.182192099951777 ], [ 4.517785141506979, 52.175957093552633 ], [ 4.518606174222335, 52.173980821310266 ], [ 4.51514071538266, 52.171123378554931 ], [ 4.516028120734368, 52.165749348240254 ], [ 4.514954364578776, 52.160644014300644 ], [ 4.52090308271934, 52.156440007006609 ], [ 4.52420666080517, 52.14740216384866 ], [ 4.526612515989279, 52.14430465668552 ], [ 4.529387192868199, 52.142342541510843 ], [ 4.534887175214717, 52.140966465303748 ], [ 4.541532713864919, 52.141014299011218 ], [ 4.546630598148507, 52.140201171952974 ], [ 4.550576814665842, 52.138246906030147 ], [ 4.560078837575317, 52.131800579840629 ], [ 4.565884099272663, 52.134956228082942 ], [ 4.570429464955324, 52.14291706786323 ], [ 4.571416018260931, 52.15311865962758 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0317\", \"naam\": \"Eemnes\", \"code\": \"0317\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.312343820229364, 52.232937994367553 ], [ 5.313125451331993, 52.234071171248701 ], [ 5.311154557260658, 52.24114919830398 ], [ 5.310363584999059, 52.245396249290302 ], [ 5.313097233792324, 52.251061402402684 ], [ 5.316230302951608, 52.252479173420717 ], [ 5.324459990008942, 52.25305015974638 ], [ 5.328767543146707, 52.255884064406906 ], [ 5.328373718604901, 52.257299719732707 ], [ 5.322488824287603, 52.260977860180688 ], [ 5.322485126317045, 52.263526385992186 ], [ 5.327185236873556, 52.266643725816017 ], [ 5.33970862397587, 52.287603906416102 ], [ 5.335391050595313, 52.290150613620533 ], [ 5.305994796806817, 52.277391525605445 ], [ 5.265983479555971, 52.2818880211044 ], [ 5.244108431159135, 52.254679297368973 ], [ 5.245285172392724, 52.254397544635893 ], [ 5.223051863208055, 52.225202126655581 ], [ 5.224618609722036, 52.225204291922545 ], [ 5.263007104232229, 52.224118163430639 ], [ 5.283767342970071, 52.223571799785233 ], [ 5.287293669104752, 52.223008487224369 ], [ 5.293950844680715, 52.223580266453176 ], [ 5.301000963753258, 52.223585613550874 ], [ 5.302179760499468, 52.221604263399257 ], [ 5.306883708706017, 52.219342174352818 ], [ 5.311971637500217, 52.221327722245434 ], [ 5.314708154197773, 52.224444320225302 ], [ 5.31118302546674, 52.224442108450553 ], [ 5.31157134755237, 52.226424559166567 ], [ 5.306864849756209, 52.229819516636034 ], [ 5.308036517676754, 52.231802506282236 ], [ 5.312343820229364, 52.232937994367553 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0301\", \"naam\": \"Zutphen\", \"code\": \"0301\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.328132844309088, 52.13774147962571 ], [ 6.326381004527555, 52.147383983894088 ], [ 6.324148180474856, 52.152782390868879 ], [ 6.321002324048242, 52.151957768221244 ], [ 6.304942040754009, 52.150667892629137 ], [ 6.300997318759921, 52.148999380290796 ], [ 6.2982778093458, 52.149869995886426 ], [ 6.295517848604693, 52.148758523829009 ], [ 6.290446604633305, 52.149363858962062 ], [ 6.283777133592683, 52.1482819947637 ], [ 6.279890048362028, 52.149444246766038 ], [ 6.27518696275135, 52.148913375933752 ], [ 6.269730034337766, 52.149803912387547 ], [ 6.264200543636384, 52.14701326701303 ], [ 6.251293203362532, 52.146825368717799 ], [ 6.248963822134842, 52.147691983664217 ], [ 6.237984204648639, 52.14607257889314 ], [ 6.235805364539731, 52.154867133349207 ], [ 6.231525402831338, 52.156030607107922 ], [ 6.223662000290323, 52.153821135902191 ], [ 6.223313421431117, 52.156089113600942 ], [ 6.21901189750441, 52.156119531718623 ], [ 6.218663064931511, 52.158387495328569 ], [ 6.21593084860256, 52.158689913698957 ], [ 6.217162006372277, 52.161796321671595 ], [ 6.212484544060647, 52.162678706459062 ], [ 6.207081918075644, 52.166681007297861 ], [ 6.200792657289691, 52.165025433831971 ], [ 6.198795802350623, 52.162773694556236 ], [ 6.196088854084409, 52.164491412086946 ], [ 6.192665896049375, 52.169895384053682 ], [ 6.190659029423519, 52.167077204970639 ], [ 6.186701883391216, 52.164555414182765 ], [ 6.184685510719821, 52.161170824828083 ], [ 6.184253941625721, 52.158908247919442 ], [ 6.18179653789787, 52.152694718032983 ], [ 6.175921208698623, 52.15216778626985 ], [ 6.16813555469767, 52.154201908548742 ], [ 6.159591592283547, 52.157656412883334 ], [ 6.154903668936941, 52.157970208281967 ], [ 6.145899434808638, 52.157462106150085 ], [ 6.142742138541672, 52.155783261063199 ], [ 6.140724714185208, 52.152114753211443 ], [ 6.140266791476671, 52.148153074746958 ], [ 6.142960520910941, 52.145587164871323 ], [ 6.149582673980109, 52.144128601741912 ], [ 6.152710258358424, 52.144108337902765 ], [ 6.164087155415081, 52.146299421625208 ], [ 6.168387780279189, 52.146271008187895 ], [ 6.173450374558723, 52.145104610979693 ], [ 6.172623616309812, 52.142561436114363 ], [ 6.174949222078427, 52.141413172020862 ], [ 6.174132431663808, 52.139436314434356 ], [ 6.179199124363906, 52.138552825106359 ], [ 6.177605452446567, 52.136864394032067 ], [ 6.183814090440028, 52.134273915152541 ], [ 6.182220397944275, 52.132585545286695 ], [ 6.184108917601761, 52.128891348182783 ], [ 6.182500277655561, 52.126353517588029 ], [ 6.186377771210159, 52.124628162094758 ], [ 6.185530416231409, 52.120952452510494 ], [ 6.185865460017599, 52.11783510651815 ], [ 6.188174207447016, 52.115837116596019 ], [ 6.191664987317855, 52.114397395614894 ], [ 6.202989655606975, 52.114036361320878 ], [ 6.21155326933723, 52.112277634052646 ], [ 6.215396922065088, 52.108852404974797 ], [ 6.218031317870049, 52.103453244987122 ], [ 6.217926037623767, 52.097790175472532 ], [ 6.219071298049967, 52.096366141301019 ], [ 6.216691359963661, 52.09440058504839 ], [ 6.218997521666973, 52.092401989494604 ], [ 6.218163901757, 52.089575961749816 ], [ 6.221662235859409, 52.088701660817406 ], [ 6.219393283880651, 52.092682385667274 ], [ 6.220316768570404, 52.100322011945849 ], [ 6.224607614924753, 52.100008404473215 ], [ 6.224644758183147, 52.101990475962992 ], [ 6.221995375993452, 52.106540324293569 ], [ 6.225906826467155, 52.106795740939269 ], [ 6.226735942205024, 52.109338551733828 ], [ 6.232231645504561, 52.110715225332143 ], [ 6.233842538082135, 52.113252378610312 ], [ 6.235806652855235, 52.113804633480719 ], [ 6.244379782055454, 52.112609827944688 ], [ 6.250993704268271, 52.111145581588801 ], [ 6.258790153814607, 52.1102386045374 ], [ 6.266636447143992, 52.111879463316882 ], [ 6.270146759520666, 52.111570024491712 ], [ 6.272535572618354, 52.113817637500006 ], [ 6.277381640360485, 52.121710502105088 ], [ 6.291154997452434, 52.126419939901069 ], [ 6.293919215856512, 52.12781466927035 ], [ 6.308442803719534, 52.130817176794267 ], [ 6.328132844309088, 52.13774147962571 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0034\", \"naam\": \"Almere\", \"code\": \"0034\", \"ligtInProvincieCode\": \"24\", \"ligtInProvincieNaam\": \"Flevoland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.350598856061442, 52.400307526432456 ], [ 5.349418189595062, 52.401439805167129 ], [ 5.343519793686644, 52.401154622496819 ], [ 5.334076222456651, 52.405964527008145 ], [ 5.319911097547035, 52.41048793097498 ], [ 5.279370415632375, 52.422067627540564 ], [ 5.273463191077818, 52.424327398301287 ], [ 5.26558103378555, 52.429133311286499 ], [ 5.254140065367079, 52.439031641028087 ], [ 5.074432371670285, 52.583670217796694 ], [ 5.060252926295052, 52.578818454549904 ], [ 5.100589978940344, 52.508133922207719 ], [ 5.112873175425388, 52.497969289111246 ], [ 5.150876396934835, 52.466337340578299 ], [ 5.185369849490601, 52.415715339964088 ], [ 5.13737884404931, 52.415623909905563 ], [ 5.079347469074563, 52.388586830450123 ], [ 5.079473219310662, 52.370464598245484 ], [ 5.095270109329895, 52.358611634059756 ], [ 5.134727021783588, 52.328686693846755 ], [ 5.14616151091356, 52.319649174293644 ], [ 5.151270256391081, 52.318526798323276 ], [ 5.205020777752351, 52.324285079834112 ], [ 5.220324247103171, 52.326006641292672 ], [ 5.224643613350474, 52.325729483779547 ], [ 5.229356502062193, 52.325169527104421 ], [ 5.281195834214826, 52.316732274538168 ], [ 5.287479551970095, 52.315038729547595 ], [ 5.301226728095488, 52.309669328536046 ], [ 5.305547117173344, 52.307690213687245 ], [ 5.315366163719469, 52.302316390845718 ], [ 5.320069876338437, 52.305433991444275 ], [ 5.333400704232298, 52.314218972642742 ], [ 5.344786447811535, 52.309976083284809 ], [ 5.35381287818093, 52.30941262974055 ], [ 5.379320051227109, 52.313947718122364 ], [ 5.378534948153954, 52.314797164893008 ], [ 5.316831362917052, 52.368294900629628 ], [ 5.30108698925497, 52.381876366937931 ], [ 5.312872018816818, 52.386131782299721 ], [ 5.313658705484138, 52.385849109572646 ], [ 5.332912627608723, 52.392655382099676 ], [ 5.332518763956221, 52.393221526353322 ], [ 5.339986025117302, 52.396056352789401 ], [ 5.346277179773157, 52.396058685542918 ], [ 5.350598856061442, 52.400307526432456 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0037\", \"naam\": \"Stadskanaal\", \"code\": \"0037\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 7.015621856209711, 53.07188381641302 ], [ 7.013131441650343, 53.069369197044807 ], [ 7.010096941820789, 53.073657839418331 ], [ 6.993858242278445, 53.055754460091819 ], [ 6.990634693132201, 53.054948207636379 ], [ 6.988021547408104, 53.049036750344001 ], [ 6.955614707474583, 53.013787313177765 ], [ 6.941783419680422, 53.017365902950068 ], [ 6.934707857475358, 53.020289312513903 ], [ 6.911679997052667, 53.034743157167767 ], [ 6.907830170117463, 53.038756407314537 ], [ 6.901728556965984, 53.035435890500359 ], [ 6.903284478028721, 53.034283538728872 ], [ 6.898828303165935, 53.032357813100674 ], [ 6.881367539286741, 53.046735138886227 ], [ 6.86880670715907, 53.041228193066544 ], [ 6.865274264395356, 53.042970835143826 ], [ 6.861208175664277, 53.040755742480911 ], [ 6.935743942698408, 52.993375253395428 ], [ 6.936520714743451, 52.992798856261878 ], [ 7.016090520210613, 52.924628886429417 ], [ 7.027027272563299, 52.919098813940316 ], [ 7.02960573697818, 52.924160563016009 ], [ 7.033669373926519, 52.926370014130541 ], [ 7.036163411283995, 52.929167370102952 ], [ 7.063702534072883, 52.93104931928201 ], [ 7.064475644336063, 52.951144104508096 ], [ 7.070124934882175, 52.953046888029576 ], [ 7.071613185173161, 52.991537847036732 ], [ 7.072084363029372, 53.003707686203931 ], [ 7.100095624656433, 53.016335674352391 ], [ 7.097505452896024, 53.021469878577726 ], [ 7.091979210855896, 53.022964651334121 ], [ 7.088523724803023, 53.026411932934678 ], [ 7.082897189491467, 53.025359150872177 ], [ 7.080282411045786, 53.029926947879446 ], [ 7.083261551598659, 53.03469865964874 ], [ 7.083039417599259, 53.039232551352654 ], [ 7.086673415427558, 53.040313664309629 ], [ 7.086340942688776, 53.042017414653834 ], [ 7.080456922441902, 53.044649379335397 ], [ 7.070041397781241, 53.043663663406299 ], [ 7.067669875044984, 53.044263339145161 ], [ 7.069872655581497, 53.049612600925862 ], [ 7.06832063503693, 53.050767095675134 ], [ 7.075081071989389, 53.050105576004135 ], [ 7.076720937859734, 53.051215109778894 ], [ 7.077673062265578, 53.055166036493745 ], [ 7.080232564620728, 53.059377391026871 ], [ 7.079910732570907, 53.061364128372318 ], [ 7.076019150096428, 53.063967630788781 ], [ 7.06576317665383, 53.067226769478296 ], [ 7.060120979593491, 53.065889934198232 ], [ 7.060153690781014, 53.066738979171312 ], [ 7.054533460854956, 53.065967909749276 ], [ 7.034114330133095, 53.064551649939055 ], [ 7.033002842383814, 53.066832266452344 ], [ 7.029799166179468, 53.06659311439072 ], [ 7.019203743065763, 53.071551865515232 ], [ 7.015621856209711, 53.07188381641302 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1949\", \"naam\": \"Waadhoeke\", \"code\": \"1949\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.637435646549595, 53.124032928001675 ], [ 5.637458537329734, 53.127996412212966 ], [ 5.636273739058173, 53.130546864360788 ], [ 5.63188990225407, 53.133103880972534 ], [ 5.638307392286135, 53.136487901832837 ], [ 5.639505423841921, 53.136202275688888 ], [ 5.648316671379508, 53.138448259357439 ], [ 5.654334545858339, 53.141549181670385 ], [ 5.649166149568169, 53.146656538360808 ], [ 5.652779922851271, 53.148913442678392 ], [ 5.655572958960015, 53.147774788231153 ], [ 5.658383576883382, 53.149467104867114 ], [ 5.663185533647334, 53.149739247108521 ], [ 5.661992674387699, 53.150874418938777 ], [ 5.662017830236072, 53.154837862932908 ], [ 5.656815255569946, 53.154566575606438 ], [ 5.658447422103738, 53.159658814900702 ], [ 5.660869541045485, 53.16305058541144 ], [ 5.660476552461847, 53.164183907316151 ], [ 5.652885889007667, 53.166182719006173 ], [ 5.658502427523265, 53.168434982878694 ], [ 5.662518715159344, 53.17069066970874 ], [ 5.661727277572246, 53.172108013024555 ], [ 5.666151617183159, 53.175495062221309 ], [ 5.668938641108851, 53.173223700630643 ], [ 5.672954046828426, 53.175195932854152 ], [ 5.674571969229395, 53.177740012043806 ], [ 5.67736439077599, 53.176317758855831 ], [ 5.678980705052541, 53.178578676962275 ], [ 5.685808929714499, 53.1819591222037 ], [ 5.686996133533635, 53.179974424267186 ], [ 5.692600245842125, 53.179960278052199 ], [ 5.697387529832272, 53.177683143957559 ], [ 5.698960061717602, 53.173715586090644 ], [ 5.706162213177491, 53.173413531745858 ], [ 5.707769435120385, 53.174258561822107 ], [ 5.713379200205401, 53.175092745766719 ], [ 5.718545569974727, 53.17026577226261 ], [ 5.723746007328612, 53.169968177037759 ], [ 5.724915681197998, 53.166001394300061 ], [ 5.727730188588813, 53.167692071441344 ], [ 5.728145978045267, 53.169672635698824 ], [ 5.733346277170315, 53.169374624206654 ], [ 5.737377997031611, 53.173043297956504 ], [ 5.743465320152659, 53.183217174913196 ], [ 5.745483341427426, 53.18519289924388 ], [ 5.740281226862828, 53.185491437060136 ], [ 5.742331747839632, 53.191430585727097 ], [ 5.73992705037639, 53.19115457891639 ], [ 5.744387510232396, 53.197935881759456 ], [ 5.736044113202866, 53.206170448265631 ], [ 5.73488349035147, 53.211269672624219 ], [ 5.744096869341799, 53.211242612595669 ], [ 5.746933922069688, 53.21519757624467 ], [ 5.745736764882866, 53.215767365454262 ], [ 5.734118679621711, 53.215801527966718 ], [ 5.733401337837008, 53.226278368634119 ], [ 5.732631582536075, 53.230244003552428 ], [ 5.738251392400707, 53.231360096737795 ], [ 5.729866696013887, 53.235347744225031 ], [ 5.735099964484875, 53.238163689499601 ], [ 5.735894770467625, 53.237312081678738 ], [ 5.743941628757422, 53.240968733135155 ], [ 5.733580644989989, 53.248642775163567 ], [ 5.735986215849198, 53.24863580862953 ], [ 5.736013660171754, 53.252032918337989 ], [ 5.729670161330948, 53.261110335722734 ], [ 5.735314463925613, 53.264774373812578 ], [ 5.727321898363576, 53.268477550351207 ], [ 5.721732651501498, 53.271890418701965 ], [ 5.720147732940291, 53.274442694828529 ], [ 5.721364394917561, 53.276137894275131 ], [ 5.720985113887925, 53.278969912487746 ], [ 5.726269832733139, 53.287731077557417 ], [ 5.727906311570068, 53.291689779737801 ], [ 5.730738165619352, 53.29451266292314 ], [ 5.735556709804277, 53.294781879629731 ], [ 5.737201204352688, 53.29958970812622 ], [ 5.740052723833318, 53.304677061818417 ], [ 5.747323742133701, 53.310034268362138 ], [ 5.749359782003229, 53.31342526931671 ], [ 5.729716268715149, 53.317446170935106 ], [ 5.721272351629495, 53.316054481111507 ], [ 5.722525486767728, 53.322279021520089 ], [ 5.718220849559107, 53.337011700800041 ], [ 5.702778698749424, 53.367909914955035 ], [ 5.627345585954438, 53.323073122436632 ], [ 5.612463283215971, 53.318855583123522 ], [ 5.567027358860162, 53.305343804041918 ], [ 5.537194116743892, 53.269431882431469 ], [ 5.476969023334685, 53.242597912189964 ], [ 5.432042639224083, 53.21572877062237 ], [ 5.437245231018969, 53.210914002006902 ], [ 5.436843668369317, 53.210064867668173 ], [ 5.456060051812361, 53.202977829536316 ], [ 5.458057958873648, 53.200145649299465 ], [ 5.466867054872141, 53.199290806839052 ], [ 5.485290265609182, 53.199843338096372 ], [ 5.489697579463503, 53.200688953046473 ], [ 5.490082559811626, 53.194177278759923 ], [ 5.487678667393179, 53.193613114915834 ], [ 5.482455674974353, 53.185690509476601 ], [ 5.483652303573504, 53.183707830123623 ], [ 5.479233571254444, 53.176633720922545 ], [ 5.480433150899053, 53.176066585142514 ], [ 5.496449340916744, 53.178317874240399 ], [ 5.493634118871734, 53.172941434309344 ], [ 5.489629778352265, 53.172095613982265 ], [ 5.488423800131876, 53.169831804746025 ], [ 5.486021928344933, 53.169550706838336 ], [ 5.48481301367575, 53.165871338307824 ], [ 5.486811894455627, 53.165020377265783 ], [ 5.481994460311298, 53.157946659008097 ], [ 5.480392862656128, 53.15738170565735 ], [ 5.476779157316598, 53.151156136621772 ], [ 5.472774358497263, 53.148894217932209 ], [ 5.472369887311998, 53.146629655275355 ], [ 5.47836675195365, 53.145209703562159 ], [ 5.477162111303732, 53.142945761258254 ], [ 5.487156427780501, 53.140956081451144 ], [ 5.48115244746179, 53.138696088750002 ], [ 5.48434796650267, 53.13699489297769 ], [ 5.488350283763745, 53.138407113592699 ], [ 5.492358365578043, 53.142084051769281 ], [ 5.497954010833597, 53.140663469183849 ], [ 5.502745667166913, 53.137827866532376 ], [ 5.501142307060616, 53.136413866264171 ], [ 5.505136632069661, 53.13471135123752 ], [ 5.512745837447813, 53.13866711776366 ], [ 5.510350368614104, 53.140085142748759 ], [ 5.512354925740278, 53.141781706844959 ], [ 5.510363258233165, 53.14461484224482 ], [ 5.511566425219968, 53.145746025566098 ], [ 5.521167727738958, 53.146301880481815 ], [ 5.524764905112243, 53.145448481168067 ], [ 5.527966573734389, 53.146010973551391 ], [ 5.531173033959994, 53.147988908175854 ], [ 5.537961229931738, 53.144583272146498 ], [ 5.539152196707467, 53.14203380272172 ], [ 5.543938231997399, 53.138347237011104 ], [ 5.547533251760004, 53.137210046401378 ], [ 5.550720707687817, 53.134091549188085 ], [ 5.55431519644904, 53.13295415382877 ], [ 5.555521386580528, 53.134651112648733 ], [ 5.559920047485584, 53.134644848409238 ], [ 5.562700838217576, 53.130111072974572 ], [ 5.564697699364587, 53.129541912383026 ], [ 5.570696362945725, 53.129815977982389 ], [ 5.573901131607949, 53.131226566237224 ], [ 5.575114181569861, 53.134338859961488 ], [ 5.58190951090315, 53.133761787202111 ], [ 5.587491974748368, 53.13035527876341 ], [ 5.589893652655114, 53.130917454733215 ], [ 5.5910838547899, 53.128933673471799 ], [ 5.594285160501811, 53.129494397494767 ], [ 5.596267914929753, 53.126093645304792 ], [ 5.611896756854351, 53.133143059971566 ], [ 5.62232085715033, 53.138219000469171 ], [ 5.626285575740375, 53.131982764804235 ], [ 5.624665992330196, 53.128305570811222 ], [ 5.62705706589616, 53.126885259697445 ], [ 5.635444862312553, 53.125452619086751 ], [ 5.637435646549595, 53.124032928001675 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0716\", \"naam\": \"Tholen\", \"code\": \"0716\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.242952265679786, 51.647125768820239 ], [ 4.202760961399342, 51.660886908872605 ], [ 4.195979229057334, 51.639293355486188 ], [ 4.191749659843242, 51.638400561439369 ], [ 4.188642391771497, 51.638935218219899 ], [ 4.177326893827759, 51.642783870990179 ], [ 4.172983535176077, 51.646137543146288 ], [ 4.169898346351134, 51.645822271756174 ], [ 4.157411972252932, 51.649940057902839 ], [ 4.151573897113651, 51.651294679037399 ], [ 4.143028909560293, 51.652620267853983 ], [ 4.136014430526857, 51.654528052796628 ], [ 4.127018672305031, 51.658113446025261 ], [ 4.123932999098907, 51.657796961567847 ], [ 4.116262716229081, 51.655448139393791 ], [ 4.114385061529838, 51.65344516917375 ], [ 4.111315751468956, 51.652562078770075 ], [ 4.102986158544285, 51.646240040871277 ], [ 4.095013122133976, 51.641054227053594 ], [ 4.085947456935321, 51.63358990220302 ], [ 4.083356141024223, 51.629595892376614 ], [ 4.085682963500891, 51.629338573682098 ], [ 4.089901456139861, 51.630518327518089 ], [ 4.082729946487616, 51.624490843727301 ], [ 4.076621167895232, 51.621873531573769 ], [ 4.069428098668764, 51.616694642750296 ], [ 4.059449719298294, 51.614315986902206 ], [ 4.055636468786537, 51.612573273826811 ], [ 4.053068722008851, 51.621040846170729 ], [ 4.043560531618576, 51.615833916039961 ], [ 4.031392898665444, 51.60917925099757 ], [ 4.02831124589054, 51.608860258662943 ], [ 4.023349427413115, 51.606819898815758 ], [ 4.014852026753572, 51.606720499760634 ], [ 4.009796454794951, 51.607793989187904 ], [ 3.99816554003642, 51.609072586872585 ], [ 3.986498993721522, 51.611482531239197 ], [ 3.986859041158823, 51.612336536040985 ], [ 3.979861917551658, 51.613668712276244 ], [ 3.977956825577272, 51.612796079915881 ], [ 3.968299570008182, 51.612679326473135 ], [ 3.965955210825691, 51.613500560250905 ], [ 3.957825167579462, 51.613967955329947 ], [ 3.955831102215809, 51.61592619930466 ], [ 3.948769642315674, 51.619238371171335 ], [ 3.948895412074617, 51.61527465491082 ], [ 3.924786482828157, 51.607894851006755 ], [ 3.936862943804252, 51.556496551616739 ], [ 3.9609520971995, 51.551411584166999 ], [ 3.986193078248267, 51.54633550993541 ], [ 3.987831930365783, 51.543239589289541 ], [ 3.992408193144104, 51.544993702694484 ], [ 3.99474853065517, 51.544171919366249 ], [ 3.998605634912603, 51.544217821919638 ], [ 4.003688865748437, 51.542012266705399 ], [ 4.005686208813271, 51.539770045849771 ], [ 4.013065411236584, 51.538157678709361 ], [ 4.016176335106332, 51.53734453248282 ], [ 4.029356339651081, 51.535232610924631 ], [ 4.045284655329611, 51.531451432617501 ], [ 4.047589962270591, 51.53176112048984 ], [ 4.053448931320432, 51.529279091745167 ], [ 4.055737595423576, 51.530154888377623 ], [ 4.059651483211596, 51.528216825943282 ], [ 4.067412490674195, 51.52660539285872 ], [ 4.060582482332032, 51.509534252949003 ], [ 4.112341275791578, 51.506145556279215 ], [ 4.133894320552971, 51.479472333826607 ], [ 4.230360834695537, 51.488964847354218 ], [ 4.218773570059374, 51.504993154102792 ], [ 4.219013520440027, 51.510660004287267 ], [ 4.22080279369623, 51.516059111203973 ], [ 4.233356468658718, 51.537991854161689 ], [ 4.235541408927112, 51.543111390786919 ], [ 4.236126342513478, 51.550480898935042 ], [ 4.235268586605129, 51.553871097394392 ], [ 4.231237412782981, 51.560628596078658 ], [ 4.226491073262423, 51.565113093692702 ], [ 4.200888784492108, 51.584681584264075 ], [ 4.195758238810449, 51.588877743198069 ], [ 4.192148966285748, 51.593938904328525 ], [ 4.190031372295834, 51.600997789277137 ], [ 4.191003329626973, 51.608088274223299 ], [ 4.195073735650412, 51.614927141293812 ], [ 4.199204729068525, 51.619500702645659 ], [ 4.207185967905379, 51.62467944887262 ], [ 4.217137913905015, 51.628461260362478 ], [ 4.22789347583708, 51.631117300125119 ], [ 4.238249444215466, 51.634334856424147 ], [ 4.242952265679786, 51.647125768820239 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0402\", \"naam\": \"Hilversum\", \"code\": \"0402\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.215690435794602, 52.204236895579569 ], [ 5.218792518009478, 52.2121702014501 ], [ 5.199093272526021, 52.240740879131749 ], [ 5.188875627144155, 52.247520292340219 ], [ 5.203686669280021, 52.267082978292706 ], [ 5.200937545487834, 52.268211360951902 ], [ 5.183314091712526, 52.263934738797907 ], [ 5.180176560258949, 52.264212458139937 ], [ 5.174306955897643, 52.261936672903992 ], [ 5.162186166889084, 52.255684471361342 ], [ 5.141392316627146, 52.25932429164515 ], [ 5.137470875551421, 52.259599244796448 ], [ 5.137067750888737, 52.261580589230228 ], [ 5.140186508717529, 52.264702024532269 ], [ 5.143686919629254, 52.269806354758167 ], [ 5.144054245296933, 52.274337834941001 ], [ 5.141696852540846, 52.275182475067588 ], [ 5.14325759166228, 52.276601555111604 ], [ 5.141292208804553, 52.277446994928724 ], [ 5.146757759485142, 52.281988950336824 ], [ 5.146753168432395, 52.28283845008675 ], [ 5.142820353422381, 52.284812577248751 ], [ 5.141657789434288, 52.282261642429866 ], [ 5.136972244075062, 52.278570613673018 ], [ 5.134231989991846, 52.277715273994453 ], [ 5.125598094357422, 52.278829171180277 ], [ 5.122837853874567, 52.281371563665886 ], [ 5.11184457345806, 52.283328669638728 ], [ 5.107516173551682, 52.285583872688406 ], [ 5.104772459904555, 52.285294182700916 ], [ 5.104394648786044, 52.283027919753735 ], [ 5.102050564397283, 52.281606440495523 ], [ 5.102061454090977, 52.279907445402294 ], [ 5.1032542168349, 52.277361782342794 ], [ 5.108362729730633, 52.275674915788599 ], [ 5.118963865416535, 52.273434074341509 ], [ 5.122129413443406, 52.268627313382169 ], [ 5.125707926309579, 52.260140155681086 ], [ 5.127279201681926, 52.259577278337396 ], [ 5.136293316674988, 52.259879922678536 ], [ 5.136718763807447, 52.253934230836187 ], [ 5.139462328502996, 52.253940011937161 ], [ 5.140291739070736, 52.24572977425354 ], [ 5.142265082612538, 52.243185334020474 ], [ 5.14150794935756, 52.238369839755599 ], [ 5.141969894054061, 52.225628041750646 ], [ 5.140409411828613, 52.224492102030084 ], [ 5.127875701519734, 52.224465260250156 ], [ 5.129852079971299, 52.221354678514899 ], [ 5.123194017717442, 52.221339989495711 ], [ 5.122425857137002, 52.218789711965393 ], [ 5.133808836774517, 52.214283900379606 ], [ 5.137743740462893, 52.210894193162559 ], [ 5.1456316928499, 52.200433158654313 ], [ 5.145260195645719, 52.19675113567267 ], [ 5.140973170067863, 52.193344185409892 ], [ 5.132389762833902, 52.188512011621469 ], [ 5.121839828504303, 52.18565702866519 ], [ 5.124216226665172, 52.180848369599012 ], [ 5.141829187005472, 52.180036757179835 ], [ 5.143392792954352, 52.180323170876164 ], [ 5.189186483241762, 52.177577087957239 ], [ 5.192706658925037, 52.177866112381629 ], [ 5.215690435794602, 52.204236895579569 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0785\", \"naam\": \"Goirle\", \"code\": \"0785\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.049746906870195, 51.470985190393179 ], [ 5.048970244996749, 51.471832543934148 ], [ 5.051553826815385, 51.487132799090809 ], [ 5.068521502584321, 51.485197928159948 ], [ 5.069280232255167, 51.486899193836756 ], [ 5.062687544135909, 51.492828256384868 ], [ 5.076891886117556, 51.5007964353197 ], [ 5.073023904810263, 51.502768492694408 ], [ 5.088000465181683, 51.511303777295417 ], [ 5.096105429121575, 51.50990825484913 ], [ 5.098384318338242, 51.515294687092414 ], [ 5.094901603030843, 51.517268419052314 ], [ 5.101051126937104, 51.520398823641251 ], [ 5.098726771604259, 51.522092301148 ], [ 5.100649473580834, 51.522946626841417 ], [ 5.098323174042355, 51.524923290023708 ], [ 5.105245291799177, 51.528055376782568 ], [ 5.100210245608565, 51.531441503466688 ], [ 5.104438750754071, 51.533717395499799 ], [ 5.10559763370093, 51.533436994764216 ], [ 5.109433947322097, 51.536844552198545 ], [ 5.109804132737313, 51.539394214488581 ], [ 5.105190848833226, 51.536834393148403 ], [ 5.096331605529253, 51.53483029676709 ], [ 5.090929697772519, 51.535099928622898 ], [ 5.060437445251305, 51.537850652539532 ], [ 5.051586258799026, 51.534993585992616 ], [ 5.052770497115634, 51.531315394710653 ], [ 5.052395235987803, 51.529898325595887 ], [ 5.043901823013396, 51.531006482707674 ], [ 5.03619031703046, 51.530700378225255 ], [ 5.030413978853674, 51.529550090366904 ], [ 5.027292736545211, 51.534071708096718 ], [ 5.022630149314508, 51.538305245735074 ], [ 5.020696852593068, 51.538865598131807 ], [ 5.005657345221497, 51.53825107439198 ], [ 5.001421361916075, 51.53738757168329 ], [ 4.994856494642011, 51.538215317962738 ], [ 4.987512416425961, 51.539889632813839 ], [ 4.975551358424237, 51.540131319285315 ], [ 4.974010893705239, 51.539842683967116 ], [ 4.962567820652939, 51.525924863571753 ], [ 4.969167942987813, 51.521134256253269 ], [ 4.977646012892627, 51.521730679662518 ], [ 4.980758684898446, 51.518626346241085 ], [ 4.984621981950534, 51.517790120237954 ], [ 4.982341329835968, 51.514100637346267 ], [ 4.990059537382784, 51.513277526539028 ], [ 4.992382565189732, 51.512152599087138 ], [ 4.988601777841621, 51.503643752876741 ], [ 4.986311529350221, 51.501087111963542 ], [ 4.986746802357523, 51.495424594647879 ], [ 4.994820278747654, 51.49771759802276 ], [ 4.996754572395823, 51.496874478379127 ], [ 4.992539800891644, 51.49402830912193 ], [ 4.997181224252893, 51.492061496271909 ], [ 5.000266456702479, 51.491788557258815 ], [ 4.997210341521526, 51.488663187257643 ], [ 4.994517958380203, 51.48808776482327 ], [ 4.988012235452636, 51.482968096446612 ], [ 4.999192481390978, 51.482156175486885 ], [ 4.99921661406846, 51.479324248866597 ], [ 5.006571787832675, 51.475100444356372 ], [ 5.008511966759299, 51.473407548405305 ], [ 5.015422371122127, 51.476261760396483 ], [ 5.016584945436571, 51.475415854321732 ], [ 5.022313218182917, 51.481664303010213 ], [ 5.031913935058295, 51.485658707390634 ], [ 5.033058820575642, 51.487078185054109 ], [ 5.040384069251827, 51.486533766268124 ], [ 5.038888338350325, 51.480582113414201 ], [ 5.037741260427612, 51.479445885951861 ], [ 5.04549721972812, 51.472672033318347 ], [ 5.045895143719536, 51.470973995698721 ], [ 5.049746906870195, 51.470985190393179 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0579\", \"naam\": \"Oegstgeest\", \"code\": \"0579\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.497669307068864, 52.184019657954096 ], [ 4.495321581363492, 52.184001940830989 ], [ 4.494193078408114, 52.181727898353692 ], [ 4.489497874074934, 52.181692279644061 ], [ 4.491380270895545, 52.185388036192215 ], [ 4.48775006766118, 52.190741012802228 ], [ 4.493535133616827, 52.195032775509524 ], [ 4.491401834510328, 52.203795433876984 ], [ 4.487895828642977, 52.20291921699247 ], [ 4.486692866567545, 52.204325987406506 ], [ 4.480084071241199, 52.202009890831327 ], [ 4.478460565700001, 52.204829287787746 ], [ 4.476146481881872, 52.203112324413972 ], [ 4.467557887928011, 52.201912982341959 ], [ 4.463287242211048, 52.200180505533524 ], [ 4.461786198774153, 52.197053669573783 ], [ 4.466085741485406, 52.19737048452582 ], [ 4.458546725911273, 52.183435131994685 ], [ 4.455019296839184, 52.183690514768891 ], [ 4.440204772172367, 52.181023863309214 ], [ 4.437839153128889, 52.181854430128531 ], [ 4.435913034516744, 52.180422966891705 ], [ 4.44651863154195, 52.178525642054105 ], [ 4.448925606705799, 52.175712897551847 ], [ 4.448202790232224, 52.172875241444231 ], [ 4.445536214759159, 52.169455701509229 ], [ 4.445601949390234, 52.166341123964671 ], [ 4.44842920834086, 52.162115784127167 ], [ 4.450680677124318, 52.166664734169878 ], [ 4.452991895251251, 52.168382200732935 ], [ 4.454106117252302, 52.171222924031433 ], [ 4.467044017811491, 52.169908567986312 ], [ 4.46738847694068, 52.172176775021001 ], [ 4.469688977046756, 52.174460204152581 ], [ 4.471644985237496, 52.174475395636719 ], [ 4.47858281133094, 52.179626428422694 ], [ 4.480930297955491, 52.1796444780123 ], [ 4.487247405569462, 52.176860926060463 ], [ 4.487610076838475, 52.178279637040085 ], [ 4.491970513129499, 52.175480903220958 ], [ 4.495820399243801, 52.178625123372925 ], [ 4.497669307068864, 52.184019657954096 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0180\", \"naam\": \"Staphorst\", \"code\": \"0180\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.147319185064615, 52.584479782727328 ], [ 6.147728697678978, 52.585326644856359 ], [ 6.1793679784563, 52.587951410112197 ], [ 6.182916762325893, 52.587644521206222 ], [ 6.18997806267672, 52.585048531436676 ], [ 6.195095544235575, 52.584164335529664 ], [ 6.202218416808129, 52.584965148910072 ], [ 6.246946530408254, 52.590313013488846 ], [ 6.246957583057095, 52.590879261689018 ], [ 6.258432018325045, 52.591928293805474 ], [ 6.259255466107896, 52.593621236211526 ], [ 6.274685909186545, 52.594922753425266 ], [ 6.275058011069064, 52.593787313077861 ], [ 6.303173883715376, 52.597254946262616 ], [ 6.304865781847975, 52.602622029343983 ], [ 6.326182147097213, 52.657389279932588 ], [ 6.327794390575736, 52.658792346635991 ], [ 6.325901525812076, 52.662771575908799 ], [ 6.329126494946388, 52.665577689736665 ], [ 6.326831810700554, 52.669276947072099 ], [ 6.322899964052414, 52.670440597480066 ], [ 6.316558276068363, 52.669924008776221 ], [ 6.314142856115081, 52.667960734988988 ], [ 6.305800049309441, 52.666326514438822 ], [ 6.297888615611103, 52.666387372473203 ], [ 6.295427418476693, 52.662158786616295 ], [ 6.29187343286566, 52.662469043037895 ], [ 6.285207129438451, 52.665351184416977 ], [ 6.285631631775476, 52.666763778934452 ], [ 6.279348374866043, 52.66907636877 ], [ 6.276567726553046, 52.668530879623667 ], [ 6.273328761547188, 52.664873984046238 ], [ 6.269373149897135, 52.664903398567645 ], [ 6.265479768310847, 52.668046977029547 ], [ 6.26550240214187, 52.669179447513677 ], [ 6.26038209605609, 52.670349794806768 ], [ 6.259579632100216, 52.669789366557588 ], [ 6.252063101949492, 52.669844274530831 ], [ 6.24737122876618, 52.672709893923283 ], [ 6.248217975122163, 52.675535350517507 ], [ 6.243530763443623, 52.678683934265123 ], [ 6.238359391589669, 52.677305269327277 ], [ 6.232858073538078, 52.679326620055527 ], [ 6.232505961251211, 52.68159438336324 ], [ 6.226575641909404, 52.68191954270776 ], [ 6.218704139155268, 52.684240091498602 ], [ 6.219918195457467, 52.685647381532874 ], [ 6.213992562095777, 52.686255033795895 ], [ 6.211992503153525, 52.685136294175443 ], [ 6.201692524662882, 52.684640962737717 ], [ 6.194871147431517, 52.67959066921096 ], [ 6.194423424049039, 52.676762144348082 ], [ 6.192044189878673, 52.676495114036882 ], [ 6.19130466417019, 52.6793316806788 ], [ 6.187748541033309, 52.67963882801471 ], [ 6.185821506427601, 52.68248334415788 ], [ 6.180661713242477, 52.681668412642615 ], [ 6.184141006094343, 52.677114652029033 ], [ 6.181761814226101, 52.676847415985058 ], [ 6.183313736302966, 52.675138099123139 ], [ 6.16400138526951, 52.679513154675604 ], [ 6.162824277951075, 52.680087148294305 ], [ 6.169657189049841, 52.685988651657617 ], [ 6.168114421841144, 52.688264031337887 ], [ 6.164958207286163, 52.688851021154463 ], [ 6.163014288633783, 52.690845799171903 ], [ 6.159081130613507, 52.692287159727584 ], [ 6.154291757577258, 52.690052907249552 ], [ 6.154652921258386, 52.688068495978285 ], [ 6.152614813550858, 52.684683773394369 ], [ 6.145813725046349, 52.680480027036218 ], [ 6.135457689244824, 52.676581469543279 ], [ 6.13581959610236, 52.674597107451049 ], [ 6.130227691096035, 52.671517474916058 ], [ 6.127863442455157, 52.672098534722849 ], [ 6.122262939903296, 52.668452273194575 ], [ 6.119484267101312, 52.667903108565625 ], [ 6.120228240948296, 52.665066973258782 ], [ 6.109854826817722, 52.659750528385345 ], [ 6.106639629485955, 52.656655320202148 ], [ 6.104275865149942, 52.657235912364591 ], [ 6.103452561867867, 52.65525878807135 ], [ 6.104602062324258, 52.652986612363769 ], [ 6.104528150472261, 52.648456566132765 ], [ 6.102918792809355, 52.646767331822055 ], [ 6.102026714543729, 52.640543264018838 ], [ 6.096809430555152, 52.635760870055741 ], [ 6.09594125256764, 52.630952386554796 ], [ 6.098225927742544, 52.625558752531909 ], [ 6.103759019450677, 52.625525513457895 ], [ 6.106051707237333, 52.620697984171521 ], [ 6.10713996868702, 52.614745074847534 ], [ 6.103551599067793, 52.612784658756645 ], [ 6.106224842627627, 52.607105336884196 ], [ 6.103041382436508, 52.605708770510994 ], [ 6.105774332290977, 52.603710156422373 ], [ 6.120676749224003, 52.597106394877898 ], [ 6.125340386548407, 52.592546939431898 ], [ 6.124136667748018, 52.591421773920359 ], [ 6.126077984980039, 52.589427588060303 ], [ 6.131467777867886, 52.581182262912328 ], [ 6.147319185064615, 52.584479782727328 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1723\", \"naam\": \"Alphen-Chaam\", \"code\": \"1723\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.010564410857635, 51.458121343070225 ], [ 5.010940122239562, 51.459255358327056 ], [ 5.007429587410403, 51.464624808722569 ], [ 5.010832501957811, 51.472282248311437 ], [ 5.016584945436571, 51.475415854321732 ], [ 5.015422371122127, 51.476261760396483 ], [ 5.008511966759299, 51.473407548405305 ], [ 5.006571787832675, 51.475100444356372 ], [ 4.99921661406846, 51.479324248866597 ], [ 4.999192481390978, 51.482156175486885 ], [ 4.988012235452636, 51.482968096446612 ], [ 4.994517958380203, 51.48808776482327 ], [ 4.997210341521526, 51.488663187257643 ], [ 5.000266456702479, 51.491788557258815 ], [ 4.997181224252893, 51.492061496271909 ], [ 4.992539800891644, 51.49402830912193 ], [ 4.996754572395823, 51.496874478379127 ], [ 4.994820278747654, 51.49771759802276 ], [ 4.986746802357523, 51.495424594647879 ], [ 4.986311529350221, 51.501087111963542 ], [ 4.988601777841621, 51.503643752876741 ], [ 4.992382565189732, 51.512152599087138 ], [ 4.990059537382784, 51.513277526539028 ], [ 4.982341329835968, 51.514100637346267 ], [ 4.984621981950534, 51.517790120237954 ], [ 4.980758684898446, 51.518626346241085 ], [ 4.977646012892627, 51.521730679662518 ], [ 4.969167942987813, 51.521134256253269 ], [ 4.962567820652939, 51.525924863571753 ], [ 4.956467352145383, 51.518539323845381 ], [ 4.911055584233919, 51.51015024663122 ], [ 4.888933073509717, 51.523651668677886 ], [ 4.866401955304506, 51.537996710928809 ], [ 4.854490596381339, 51.533978195588801 ], [ 4.844854810684677, 51.533367468985489 ], [ 4.844912243136354, 51.528553296507873 ], [ 4.843386558132726, 51.527130194070338 ], [ 4.83644498109651, 51.527097681442868 ], [ 4.834892089190265, 51.527939959325771 ], [ 4.829492993897665, 51.52791431463487 ], [ 4.834854242467742, 51.531055008245325 ], [ 4.83674490410877, 51.534179156380247 ], [ 4.834806065245839, 51.535019614863224 ], [ 4.834761320561011, 51.538701034185443 ], [ 4.848597687630224, 51.543013650011453 ], [ 4.851663893497507, 51.544726951072263 ], [ 4.863927768941232, 51.551862538358932 ], [ 4.864679936000787, 51.553565111587815 ], [ 4.86309398826367, 51.557239629941918 ], [ 4.858087184906842, 51.556367471492415 ], [ 4.856170964694035, 51.555225976553075 ], [ 4.853845694535388, 51.556064995280238 ], [ 4.839601936417735, 51.553167121507194 ], [ 4.837331309584995, 51.549474836504579 ], [ 4.830761751304691, 51.550293353336805 ], [ 4.814635038353147, 51.543985013850225 ], [ 4.800059390563246, 51.537399030289016 ], [ 4.799317237726468, 51.535129674189427 ], [ 4.794306717895045, 51.53482115701528 ], [ 4.781627485331614, 51.531074492619084 ], [ 4.777793529993195, 51.529355337998929 ], [ 4.770107271306393, 51.527332570465326 ], [ 4.769362928798298, 51.525346208892259 ], [ 4.763987483872038, 51.523618435312478 ], [ 4.76018997153143, 51.519350052576279 ], [ 4.749012350262299, 51.519006323478095 ], [ 4.747136322873294, 51.515314399005362 ], [ 4.753439107216458, 51.505719802214507 ], [ 4.760038730424959, 51.502356968176279 ], [ 4.773879833435183, 51.504979308598848 ], [ 4.780829296742479, 51.504165979909345 ], [ 4.783202125746113, 51.499647006925947 ], [ 4.78512916213309, 51.49965695659953 ], [ 4.790928833206825, 51.4982706890979 ], [ 4.793608133742184, 51.49970035736002 ], [ 4.798618443885882, 51.499725713868315 ], [ 4.802112615053655, 51.497760843181148 ], [ 4.805584766785503, 51.497494981954404 ], [ 4.809845620682336, 51.495816900521447 ], [ 4.816803697208927, 51.494151869056594 ], [ 4.81838408433335, 51.49104433717222 ], [ 4.81725290082711, 51.489056396043885 ], [ 4.820377778343651, 51.485673161229997 ], [ 4.821180053288467, 51.483128219205383 ], [ 4.829673330453808, 51.481753062555597 ], [ 4.837760342636464, 51.482074599223019 ], [ 4.842015176900372, 51.480678525701819 ], [ 4.852818804150853, 51.479312452871248 ], [ 4.853984470701374, 51.478468172342474 ], [ 4.862084141757186, 51.477655270928544 ], [ 4.871695543403937, 51.479397318132612 ], [ 4.882109613231807, 51.478310020013744 ], [ 4.882892623759716, 51.477180593910767 ], [ 4.891355183433822, 51.478349647821545 ], [ 4.89754327199439, 51.476110142611105 ], [ 4.914181041195936, 51.469098675394122 ], [ 4.932382351791229, 51.459258928487557 ], [ 4.944729451728588, 51.456757564206228 ], [ 4.947023348965208, 51.458465448151664 ], [ 4.957406802966463, 51.459920148125342 ], [ 4.959337520129441, 51.45936083708569 ], [ 4.966266254693808, 51.4596692279232 ], [ 4.970124810997988, 51.458833472658227 ], [ 4.976265511794313, 51.461120861563579 ], [ 4.982434509743833, 51.460292809495733 ], [ 5.010564410857635, 51.458121343070225 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1952\", \"naam\": \"Midden-Groningen\", \"code\": \"1952\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.911412152413225, 53.24314632024641 ], [ 6.909418287028721, 53.243454764436322 ], [ 6.91132097971595, 53.25192488029456 ], [ 6.912131622083084, 53.263523371336703 ], [ 6.909324922918904, 53.263558983146694 ], [ 6.910296602523994, 53.26836004555873 ], [ 6.907900561297905, 53.26867355173075 ], [ 6.909061843781026, 53.278851859114596 ], [ 6.907878494291546, 53.279433125183381 ], [ 6.893027654843841, 53.279337095573148 ], [ 6.88740231364466, 53.279124353167887 ], [ 6.88707991633264, 53.281393479748445 ], [ 6.895661875936348, 53.285816209683951 ], [ 6.892922861036949, 53.287832535430624 ], [ 6.891288512774251, 53.28700359917498 ], [ 6.889381181059052, 53.289858834935252 ], [ 6.890604524404487, 53.290409804593281 ], [ 6.886867959548502, 53.298384321306735 ], [ 6.883628216109613, 53.297575309504964 ], [ 6.879625231522069, 53.297908236514587 ], [ 6.879586052509753, 53.296776181387884 ], [ 6.874731747381324, 53.295703841397042 ], [ 6.87315595714781, 53.296572747455819 ], [ 6.860658525824602, 53.29502786223113 ], [ 6.860305606164594, 53.296447862594832 ], [ 6.851095574381304, 53.297126704591442 ], [ 6.845639659952315, 53.290114711976194 ], [ 6.828014522634559, 53.291176796658014 ], [ 6.825021718273828, 53.297724704165766 ], [ 6.8165102326972, 53.295278074938487 ], [ 6.814177555542119, 53.297570858774641 ], [ 6.786568324301441, 53.287986030003964 ], [ 6.772362591280974, 53.283054323733154 ], [ 6.743951937913399, 53.272902786863391 ], [ 6.731796398022561, 53.269075677294083 ], [ 6.716356564661311, 53.262735580552267 ], [ 6.698507136414262, 53.256136732583997 ], [ 6.70364140091697, 53.253532378224968 ], [ 6.703589629731995, 53.2518341652762 ], [ 6.714622763687618, 53.24548379751436 ], [ 6.71259261951685, 53.24465683587956 ], [ 6.717715953102556, 53.241768841314894 ], [ 6.710345799621944, 53.236753938641769 ], [ 6.709483685985447, 53.234781515578256 ], [ 6.706678652530122, 53.234812386325082 ], [ 6.709823753059275, 53.232795843200847 ], [ 6.708203644301784, 53.232247422019434 ], [ 6.705678556825644, 53.228311336794185 ], [ 6.708805922501822, 53.225728741840754 ], [ 6.707194737102817, 53.225463342502209 ], [ 6.703459733602414, 53.221257376244985 ], [ 6.697322123526495, 53.217077551885318 ], [ 6.698054572727333, 53.214804486032783 ], [ 6.693231043168312, 53.214290822665454 ], [ 6.693188291401649, 53.212875621953081 ], [ 6.682715425204542, 53.211007235888701 ], [ 6.680329342813803, 53.211599243597114 ], [ 6.679827289024033, 53.208207059289627 ], [ 6.68263910120934, 53.208459862684023 ], [ 6.684062744595641, 53.202498677829915 ], [ 6.682810598598907, 53.200813405717732 ], [ 6.673592782098323, 53.200629480013298 ], [ 6.666827721991848, 53.20211750425154 ], [ 6.656267227252468, 53.197133306013114 ], [ 6.650145863163402, 53.193234057410578 ], [ 6.642890404484258, 53.191611442079619 ], [ 6.63964681001138, 53.190229694793793 ], [ 6.646786541838818, 53.187889856597543 ], [ 6.639523912819063, 53.185983984653888 ], [ 6.657386676081011, 53.180699702175332 ], [ 6.660071694608723, 53.176707344069435 ], [ 6.661922578397582, 53.171591246545255 ], [ 6.664673437618921, 53.169863153383581 ], [ 6.669058029636434, 53.169250081862216 ], [ 6.673766901689634, 53.166085141222709 ], [ 6.676942303741408, 53.165201610854091 ], [ 6.680058413128727, 53.162336674619645 ], [ 6.683608031837743, 53.160599514409952 ], [ 6.68902131764593, 53.154311809041431 ], [ 6.690102040331501, 53.150336125265 ], [ 6.686443146356246, 53.148393874178822 ], [ 6.689489357034596, 53.14326430669076 ], [ 6.693044493064441, 53.128502326502122 ], [ 6.695220839433198, 53.121116910616223 ], [ 6.709991288974751, 53.120388436011176 ], [ 6.712788915310995, 53.120357510642002 ], [ 6.73755005865609, 53.119514660089806 ], [ 6.747754388112228, 53.113453154140252 ], [ 6.752051901618684, 53.110289661668901 ], [ 6.776335037478383, 53.094720512140086 ], [ 6.813915380741008, 53.071060224078387 ], [ 6.801501977212529, 53.119059817276195 ], [ 6.80594428342724, 53.120423023696908 ], [ 6.803266927443527, 53.124135617492442 ], [ 6.821012037427077, 53.128738060177056 ], [ 6.822926271756392, 53.126166804937768 ], [ 6.844481323385553, 53.125057096262516 ], [ 6.86605454342544, 53.124509576561614 ], [ 6.874018948692306, 53.123561540695555 ], [ 6.874476880087006, 53.125254762583737 ], [ 6.88408879202322, 53.125701349688754 ], [ 6.886185096904948, 53.128506652949255 ], [ 6.896947688719449, 53.127522052747267 ], [ 6.896977264644959, 53.128371136149177 ], [ 6.90215368068586, 53.127739486271068 ], [ 6.93481771332276, 53.124207282845312 ], [ 6.943549333453365, 53.122395230713217 ], [ 6.946316317633506, 53.121509783200217 ], [ 6.95946324394562, 53.120205322727571 ], [ 6.961890536400829, 53.109979785362022 ], [ 6.965117659500103, 53.110786784551578 ], [ 6.965968250575915, 53.112191363173856 ], [ 6.960016887748065, 53.124445398889776 ], [ 6.960826487254915, 53.124717922894561 ], [ 6.955661298750506, 53.136678182658812 ], [ 6.954461969954386, 53.136693876067547 ], [ 6.954687213247215, 53.142920326832282 ], [ 6.950461126376282, 53.158832110091495 ], [ 6.943661427481755, 53.158920598381336 ], [ 6.943105528076027, 53.165723456562944 ], [ 6.942335934481815, 53.166582896654496 ], [ 6.929883776029341, 53.165328031771899 ], [ 6.929214733656566, 53.16901759544016 ], [ 6.903110279610932, 53.16651903089052 ], [ 6.90803029603722, 53.169854504543721 ], [ 6.912110947666772, 53.172067862537432 ], [ 6.907739562933418, 53.172972828974459 ], [ 6.908999621748382, 53.174655733604951 ], [ 6.91182049536908, 53.175186193603622 ], [ 6.913080777701583, 53.176869053324126 ], [ 6.911539972289449, 53.178587542634219 ], [ 6.911639668166258, 53.18141775758879 ], [ 6.913700549933097, 53.183090428450441 ], [ 6.915891581626066, 53.188442327997869 ], [ 6.918803614118482, 53.191519797844556 ], [ 6.922776353511227, 53.190619553263737 ], [ 6.925308841449638, 53.194268023230407 ], [ 6.916942285414873, 53.195507616624589 ], [ 6.918253458177268, 53.198605504121595 ], [ 6.924490128632472, 53.205038114165013 ], [ 6.920566284690766, 53.207353506357592 ], [ 6.929577730675162, 53.212900913651417 ], [ 6.926834811404825, 53.214635021775521 ], [ 6.922640394592436, 53.22063482913795 ], [ 6.925474510475667, 53.221447964629924 ], [ 6.920077390760155, 53.227463072453375 ], [ 6.912776273803668, 53.225007816148697 ], [ 6.908678566720073, 53.23383729166305 ], [ 6.910010291624372, 53.237501261017783 ], [ 6.911412152413225, 53.24314632024641 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0473\", \"naam\": \"Zandvoort\", \"code\": \"0473\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.525877555366327, 52.405110703317291 ], [ 4.51938100854258, 52.395435291887814 ], [ 4.514060917595237, 52.386051348443281 ], [ 4.507558488951672, 52.376941535531294 ], [ 4.501058722931096, 52.367831354681996 ], [ 4.497283015365324, 52.360157195988045 ], [ 4.485057582784687, 52.343073835828356 ], [ 4.477811143072614, 52.332540662970992 ], [ 4.530305398095519, 52.318490335614491 ], [ 4.547267524598841, 52.314081119893366 ], [ 4.56211507769332, 52.338822203371052 ], [ 4.574658165523384, 52.361563189448695 ], [ 4.591798730988161, 52.391696194015751 ], [ 4.542867926598059, 52.400985406531682 ], [ 4.525877555366327, 52.405110703317291 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0353\", \"naam\": \"IJsselstein\", \"code\": \"0353\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.07735861159589, 51.997517302536821 ], [ 5.075776249264528, 52.0009113341656 ], [ 5.072662445426129, 52.000336688799294 ], [ 5.074979064074358, 52.003457876852806 ], [ 5.069056567704513, 52.014202998393664 ], [ 5.067885038746277, 52.014483010831988 ], [ 5.06313736791265, 52.024098270191885 ], [ 5.062726944374978, 52.026928969634781 ], [ 5.061171272710786, 52.026358307799292 ], [ 5.054913292480162, 52.028889465042425 ], [ 5.055296965473795, 52.029740095454279 ], [ 5.049436713160569, 52.031139350520334 ], [ 5.043935720666056, 52.036503920957585 ], [ 5.039594851655604, 52.043004391609934 ], [ 5.028611211347239, 52.050617396861043 ], [ 5.027011880467079, 52.055426615946132 ], [ 5.021152012892647, 52.05625810348856 ], [ 5.017210214313931, 52.061059887466584 ], [ 5.010247819679148, 52.053675082028668 ], [ 5.004378188479195, 52.055638433898437 ], [ 5.000103169776481, 52.053642188720403 ], [ 4.989971097463259, 52.052192550215345 ], [ 4.983445519100213, 52.040276676159159 ], [ 4.978379891807152, 52.0396928369574 ], [ 4.98316783323847, 52.027815642868582 ], [ 4.994069134504438, 52.029834823196161 ], [ 4.995310865297023, 52.021626630227878 ], [ 5.020232025514156, 52.02567149629914 ], [ 5.034051588485478, 52.003908596539695 ], [ 5.042223205301197, 52.005631928648178 ], [ 5.054375191195521, 51.996321832551374 ], [ 5.053212472183638, 51.995468986642827 ], [ 5.062595391422097, 51.991247468592192 ], [ 5.066471524650524, 51.994089936190996 ], [ 5.069968475137127, 51.995515332386482 ], [ 5.07735861159589, 51.997517302536821 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0399\", \"naam\": \"Heiloo\", \"code\": \"0399\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.714468806791333, 52.624650931659787 ], [ 4.70781568989019, 52.62036574405353 ], [ 4.705822279511569, 52.621486961204582 ], [ 4.689978979771349, 52.623660344566431 ], [ 4.685699400909612, 52.619387806397995 ], [ 4.683832121912163, 52.612580985516864 ], [ 4.68032162436452, 52.609728576345098 ], [ 4.678014977506574, 52.605750615665229 ], [ 4.674491656944959, 52.603747425781449 ], [ 4.672723182882214, 52.590994637633017 ], [ 4.673926247632519, 52.589869227556434 ], [ 4.670785454467939, 52.588717690023451 ], [ 4.671598223384203, 52.587306788715217 ], [ 4.679940648363572, 52.58424198831468 ], [ 4.68628078147817, 52.582863766590457 ], [ 4.685127834285254, 52.580874838226364 ], [ 4.697003520187523, 52.578962314233877 ], [ 4.698143676008548, 52.581800531045197 ], [ 4.703280865870527, 52.581547059063382 ], [ 4.703693256071757, 52.580416794366144 ], [ 4.710010352998169, 52.580452974750784 ], [ 4.74004166445832, 52.578921426666447 ], [ 4.744614256448914, 52.590272581919784 ], [ 4.750949160299708, 52.589174044259408 ], [ 4.752093054705677, 52.592011741769213 ], [ 4.737451627345244, 52.593914680326584 ], [ 4.737804839785925, 52.596748188815738 ], [ 4.73657812838516, 52.599573054041223 ], [ 4.735317739542205, 52.604662978658922 ], [ 4.736490304637724, 52.60551887637817 ], [ 4.733300520352741, 52.607483467435074 ], [ 4.739529933010296, 52.613747026809612 ], [ 4.737924408579325, 52.615437205747199 ], [ 4.727578825607206, 52.620193901667378 ], [ 4.714468806791333, 52.624650931659787 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1978\", \"naam\": \"Molenlanden\", \"code\": \"1978\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.925050512320786, 51.839847849468306 ], [ 4.921935164254868, 51.840685122905278 ], [ 4.930095828391863, 51.840150791020676 ], [ 4.936669038834472, 51.843008114708795 ], [ 4.937817140331437, 51.84471166475884 ], [ 4.94286588173391, 51.844730877002199 ], [ 4.940398066679237, 51.858597895081914 ], [ 4.938404843810106, 51.863687736803101 ], [ 4.957483303279164, 51.859511217820049 ], [ 4.959393485165535, 51.862916480480052 ], [ 4.972631945964756, 51.859848852199448 ], [ 4.983146771543061, 51.857053587281776 ], [ 4.981250353479096, 51.851949615278613 ], [ 4.983583463958468, 51.851674465615666 ], [ 4.996423662167664, 51.849169174290211 ], [ 4.998727231281246, 51.852291913014483 ], [ 4.998314349528985, 51.855122451605283 ], [ 4.993989406853571, 51.861055050772613 ], [ 4.995924564446311, 51.861911083474517 ], [ 5.004505599085273, 51.857974690284962 ], [ 5.009167380201744, 51.857989786112881 ], [ 5.018481679265597, 51.859152153539533 ], [ 5.027033044607039, 51.85861230476457 ], [ 5.027380806506632, 51.863710787420501 ], [ 5.021897711367365, 51.869074469477646 ], [ 5.023040540234392, 51.871909912928501 ], [ 5.023019922546171, 51.874458554107122 ], [ 5.025301583233707, 51.880695767930966 ], [ 5.026847228246917, 51.881833274551788 ], [ 5.001254556289858, 51.874672263405451 ], [ 4.996214723593083, 51.873239650899244 ], [ 4.995024213130862, 51.876067580923447 ], [ 4.995388200162127, 51.878900692170333 ], [ 4.99847059226199, 51.882026015235979 ], [ 4.999617148819747, 51.884295318057745 ], [ 4.996450923505627, 51.890798186052606 ], [ 4.996396808426608, 51.897028165643249 ], [ 4.994794598200086, 51.902403415874005 ], [ 4.991302291350634, 51.901542138486789 ], [ 4.974234187273717, 51.896952382004535 ], [ 4.973453948370874, 51.897232827134751 ], [ 4.973746459829188, 51.907711852866186 ], [ 4.968280615203951, 51.909958012079507 ], [ 4.963997062932997, 51.910509046529882 ], [ 4.964745664762721, 51.91362681678914 ], [ 4.956169525395429, 51.915578007021146 ], [ 4.949399717991366, 51.931694745286009 ], [ 4.947823868861086, 51.933671186095282 ], [ 4.945883762324582, 51.933097544289524 ], [ 4.942023336073799, 51.92996791938878 ], [ 4.939310915410616, 51.92882486438463 ], [ 4.93251585071228, 51.946639654647548 ], [ 4.929364362260426, 51.950308873754366 ], [ 4.926244332102526, 51.950863063793925 ], [ 4.921230678764765, 51.946312297631373 ], [ 4.918140399290929, 51.944034506707723 ], [ 4.913876858399823, 51.942318293909338 ], [ 4.885116750727724, 51.938517566367914 ], [ 4.877728891962092, 51.937919412381049 ], [ 4.872666474305176, 51.938180560083246 ], [ 4.857062963641598, 51.941226337992383 ], [ 4.847718890371493, 51.941467033013843 ], [ 4.837224460323865, 51.940285660992579 ], [ 4.832571713078844, 51.93884785753346 ], [ 4.811734152166952, 51.924871372152218 ], [ 4.800496050449769, 51.92141752722339 ], [ 4.793119640060712, 51.920247714593017 ], [ 4.779542599983188, 51.917346395229679 ], [ 4.767114663191547, 51.915865530393113 ], [ 4.759755851755466, 51.913560937960682 ], [ 4.753576558766624, 51.91041266654387 ], [ 4.745473865790244, 51.905837612147756 ], [ 4.73813007146069, 51.902682152798874 ], [ 4.731155481691076, 51.900944260913334 ], [ 4.721877815588791, 51.897210575555064 ], [ 4.715673832315609, 51.896042507349577 ], [ 4.705547989357131, 51.897116982741871 ], [ 4.700113383522344, 51.896518941540123 ], [ 4.680726870326825, 51.893005638497833 ], [ 4.674158233968334, 51.890417198358456 ], [ 4.668340648528024, 51.88953216079716 ], [ 4.657058121304788, 51.89002898079552 ], [ 4.651620398073813, 51.889711866393704 ], [ 4.637991060079383, 51.891041730323003 ], [ 4.625579939443731, 51.88926275070245 ], [ 4.619744148931527, 51.889507972816972 ], [ 4.619374749798768, 51.888372769753566 ], [ 4.622926176822943, 51.8852807550481 ], [ 4.626501052554779, 51.880772798528824 ], [ 4.628828227057117, 51.881071042419592 ], [ 4.637070360768464, 51.876309607983984 ], [ 4.642061469091176, 51.880022937431988 ], [ 4.664296619446938, 51.875064333075677 ], [ 4.67634805902861, 51.874854685120049 ], [ 4.687949185301081, 51.878605864544454 ], [ 4.697259270949779, 51.879793695703782 ], [ 4.700368505869634, 51.879811915251082 ], [ 4.690465184903516, 51.866726580535016 ], [ 4.686584185699233, 51.866420297513073 ], [ 4.681260116385364, 51.859025305326959 ], [ 4.683366264397845, 51.848559662102403 ], [ 4.690012627263235, 51.845767344517476 ], [ 4.705615623071529, 51.841327809695834 ], [ 4.715323705987554, 51.841383767205457 ], [ 4.737384711322361, 51.846605466928104 ], [ 4.73898302045964, 51.843499147719086 ], [ 4.743266946635402, 51.842673133357174 ], [ 4.742902910771359, 51.840971961362726 ], [ 4.747150316269965, 51.842694367324704 ], [ 4.756050342025291, 51.84500811075241 ], [ 4.759949693743885, 51.843896225120403 ], [ 4.768105017430637, 51.843939509423507 ], [ 4.780497886061205, 51.846552953028244 ], [ 4.787122858574538, 51.8448878290789 ], [ 4.795666754335923, 51.844931182976353 ], [ 4.803415598875627, 51.846385936269861 ], [ 4.811920015781753, 51.849543044244356 ], [ 4.838196681360674, 51.860713369732217 ], [ 4.843462583030072, 51.842896692047717 ], [ 4.847853030372987, 51.833005163892928 ], [ 4.851347365904111, 51.833021165256078 ], [ 4.854851740303713, 51.832187527039537 ], [ 4.862998465648163, 51.832790572972698 ], [ 4.866469885218205, 51.834788375714879 ], [ 4.868055612982257, 51.831963464274537 ], [ 4.876593943232244, 51.832284103830702 ], [ 4.884346401868897, 51.833450337734334 ], [ 4.903325815280508, 51.83777798438696 ], [ 4.9137951370153, 51.839236624880002 ], [ 4.925050512320786, 51.839847849468306 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1669\", \"naam\": \"Roerdalen\", \"code\": \"1669\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.036643790231219, 51.096396069009309 ], [ 6.042056599697752, 51.100897005806942 ], [ 6.044353001918225, 51.101167233029976 ], [ 6.052450009402918, 51.106218878713456 ], [ 6.056702609969816, 51.109592946052672 ], [ 6.055190540210532, 51.110734500834923 ], [ 6.060232967114364, 51.115803154999782 ], [ 6.067145742902446, 51.118028546708508 ], [ 6.075571098359864, 51.119111725357321 ], [ 6.075596540008688, 51.120810839238494 ], [ 6.08058678944148, 51.122197189811025 ], [ 6.081024586843888, 51.125876315594304 ], [ 6.083670402673502, 51.123877993961422 ], [ 6.087123566785704, 51.124706856177028 ], [ 6.084469262269776, 51.126138885902506 ], [ 6.088704444857531, 51.12809584616528 ], [ 6.087192565388608, 51.129237817080352 ], [ 6.089116999916961, 51.130075830001502 ], [ 6.09186690358816, 51.134873759694223 ], [ 6.096454964974366, 51.134845820457294 ], [ 6.102220876029419, 51.136792931420374 ], [ 6.109881307599849, 51.137595134549002 ], [ 6.121410913651454, 51.141204548626128 ], [ 6.121046616229415, 51.142339699258542 ], [ 6.125667260468207, 51.144292887003516 ], [ 6.134476606515031, 51.145086162096689 ], [ 6.138319331585445, 51.146194216886734 ], [ 6.144834640610936, 51.14700152561371 ], [ 6.146770231268263, 51.148404942914539 ], [ 6.155561774804123, 51.148063889033921 ], [ 6.160552612696778, 51.149163608860995 ], [ 6.163607447533572, 51.148860010707196 ], [ 6.162904713256512, 51.152546476073724 ], [ 6.170220115790229, 51.155329511762744 ], [ 6.175246104958815, 51.158410861437815 ], [ 6.138764122416708, 51.173379716322614 ], [ 6.180703424093751, 51.18641182668636 ], [ 6.165144582302482, 51.194447004797716 ], [ 6.160904796077197, 51.19277603643318 ], [ 6.149751330891188, 51.189734431503176 ], [ 6.12974527695077, 51.183633346620319 ], [ 6.122436870555015, 51.181414133839866 ], [ 6.115489407284376, 51.177776144492235 ], [ 6.111217228234618, 51.173837889083487 ], [ 6.101611002620153, 51.171348464894223 ], [ 6.099675818085477, 51.169944295039102 ], [ 6.095101719810826, 51.171105105889211 ], [ 6.090114385995209, 51.170285760634812 ], [ 6.082100502682225, 51.171750033713813 ], [ 6.078355047607666, 51.177153381339068 ], [ 6.073081997581692, 51.182848843042464 ], [ 6.066592190111151, 51.18401981710457 ], [ 6.06084262627656, 51.183486877050726 ], [ 6.055117924818291, 51.18465276985777 ], [ 6.054656909236646, 51.179274430118383 ], [ 6.056899455424703, 51.175579793352746 ], [ 6.048085574103328, 51.17478064267199 ], [ 6.0499621428209, 51.172221061999856 ], [ 6.059894490335876, 51.171031125720965 ], [ 6.063641624194131, 51.165628369496936 ], [ 6.057108553427132, 51.163683763704448 ], [ 6.055553497674175, 51.161993462212052 ], [ 6.040230655331094, 51.160664581477896 ], [ 6.039860173571399, 51.161516293261776 ], [ 6.036026530713059, 51.160971354484495 ], [ 6.029523013444412, 51.161007505618421 ], [ 6.026123314068319, 51.164141561980465 ], [ 6.016948994745824, 51.164758087654128 ], [ 6.013532705433907, 51.166759024694898 ], [ 6.005830911186034, 51.163118586049507 ], [ 6.000080879188917, 51.162299445339592 ], [ 5.997826868798683, 51.165426614408105 ], [ 5.998243388071126, 51.167973302451749 ], [ 5.995576304932388, 51.168836929049192 ], [ 5.993629500320863, 51.166298232148222 ], [ 5.991731383427656, 51.16744096164269 ], [ 5.99253022065016, 51.169985678444526 ], [ 5.990628201729948, 51.170845200975442 ], [ 5.986783261582552, 51.169449069907344 ], [ 5.98602907756133, 51.170302585996502 ], [ 5.989131043641418, 51.173401845759088 ], [ 5.987622605762132, 51.175108903470679 ], [ 5.984553792500604, 51.174558308579051 ], [ 5.983427836381519, 51.176263343546097 ], [ 5.955660119981499, 51.159126872359813 ], [ 5.914045754907028, 51.133268066063543 ], [ 5.916307161896929, 51.130425708525415 ], [ 5.914369614300421, 51.128168866488494 ], [ 5.920756819757393, 51.118510633055429 ], [ 5.926815710409422, 51.113668093189084 ], [ 5.940584108277416, 51.114452879291882 ], [ 5.940563658754353, 51.112753730198513 ], [ 5.946685166420209, 51.113290795239678 ], [ 5.954328517847065, 51.113253694835151 ], [ 5.955874698628093, 51.114662168947127 ], [ 5.9627751822252, 51.116327400177006 ], [ 5.965479022626037, 51.118579625368746 ], [ 5.972308354902771, 51.114580479317375 ], [ 5.976162773239493, 51.117109859141067 ], [ 5.978441393969661, 51.115965439336115 ], [ 5.984618959761433, 51.120748351450544 ], [ 5.990730882488193, 51.120433522227884 ], [ 5.997588364038095, 51.118698407669861 ], [ 6.00058559152905, 51.114151261700385 ], [ 6.014015638735852, 51.11804443369553 ], [ 6.013235806881259, 51.116915805445124 ], [ 6.021979348699395, 51.113469798763148 ], [ 6.024221337423639, 51.109775789579963 ], [ 6.02268105961114, 51.108934605684787 ], [ 6.023796081039523, 51.106662817673261 ], [ 6.028389276778025, 51.107203948544402 ], [ 6.03060667859099, 51.10181068991907 ], [ 6.036643790231219, 51.096396069009309 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0743\", \"naam\": \"Asten\", \"code\": \"0743\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.840063476357199, 51.346833655359703 ], [ 5.870472186700188, 51.352658723801703 ], [ 5.866267083242623, 51.354658526833205 ], [ 5.856653598256246, 51.353848061040352 ], [ 5.853389675897659, 51.372835832584833 ], [ 5.854196034733557, 51.376514251693251 ], [ 5.842800523272782, 51.390153136014952 ], [ 5.837091835114753, 51.396122582549786 ], [ 5.832875730404983, 51.39755479759252 ], [ 5.831741397258511, 51.399541551002073 ], [ 5.815244775761736, 51.40385134807488 ], [ 5.787630171723304, 51.412728762466635 ], [ 5.783433132321332, 51.416707932942131 ], [ 5.776909911037668, 51.41871233654264 ], [ 5.773848865241596, 51.420704942048353 ], [ 5.77041231131384, 51.423831507975194 ], [ 5.765811464492279, 51.425828951640888 ], [ 5.76276813113082, 51.43008681745706 ], [ 5.755875573564789, 51.43435683604477 ], [ 5.743966904238627, 51.437225893579701 ], [ 5.73281796673345, 51.438958678839619 ], [ 5.723191146363365, 51.438420414608011 ], [ 5.718189487421516, 51.438717920711326 ], [ 5.707420136300371, 51.439880796617679 ], [ 5.698940392357899, 51.438204573576044 ], [ 5.693944319037239, 51.439350626251269 ], [ 5.700738176348838, 51.419791709217968 ], [ 5.702995617346564, 51.412422391296914 ], [ 5.705666627035311, 51.409299912162396 ], [ 5.72749050823909, 51.395644565983297 ], [ 5.733615180648427, 51.391944897621819 ], [ 5.737047517861828, 51.388253019876601 ], [ 5.740365296249541, 51.369834882845034 ], [ 5.745372597231902, 51.371235604203562 ], [ 5.7639804908788, 51.343989453105394 ], [ 5.770424714491426, 51.333773116345895 ], [ 5.823903122684132, 51.344063342833401 ], [ 5.840063476357199, 51.346833655359703 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0377\", \"naam\": \"Bloemendaal\", \"code\": \"0377\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.611642784650666, 52.313671222527937 ], [ 4.611494466902922, 52.322165590212123 ], [ 4.607156929651302, 52.323269778740546 ], [ 4.597263294515769, 52.327734973811722 ], [ 4.593715063239445, 52.328560762070339 ], [ 4.590187028149966, 52.328253868265094 ], [ 4.596568255315485, 52.344720977232718 ], [ 4.604898509487025, 52.362333266846193 ], [ 4.605664294306679, 52.36347102816439 ], [ 4.60717108664751, 52.367162248479865 ], [ 4.604415711054043, 52.36742723578304 ], [ 4.604738697826451, 52.371393825741876 ], [ 4.601580063053627, 52.372222432654638 ], [ 4.601106808402317, 52.376750093539748 ], [ 4.599519736784271, 52.37758907057303 ], [ 4.600608338931455, 52.382693454988292 ], [ 4.602145438963357, 52.384685878290668 ], [ 4.608419586668036, 52.385576832181414 ], [ 4.610703646125287, 52.389839443607052 ], [ 4.621745048621602, 52.387929112279792 ], [ 4.62403538617203, 52.391908325181305 ], [ 4.624331053973075, 52.397573696192886 ], [ 4.631560129562676, 52.411778664995794 ], [ 4.627612477114665, 52.412602934913266 ], [ 4.62873909793606, 52.415725045788477 ], [ 4.625902960860818, 52.420520776646249 ], [ 4.623513349588597, 52.422204428535203 ], [ 4.625062590031225, 52.423630262249993 ], [ 4.621497388966656, 52.425023134266588 ], [ 4.617961476504362, 52.42471705969389 ], [ 4.613997586359301, 52.426390289869452 ], [ 4.587882600551361, 52.434428994897111 ], [ 4.560268491545988, 52.437920763939246 ], [ 4.544106606566131, 52.439222753576601 ], [ 4.543395081277554, 52.435253264100211 ], [ 4.539994372961004, 52.427866484391025 ], [ 4.529323531565662, 52.409949694686446 ], [ 4.525877555366327, 52.405110703317291 ], [ 4.542867926598059, 52.400985406531682 ], [ 4.591798730988161, 52.391696194015751 ], [ 4.574658165523384, 52.361563189448695 ], [ 4.56211507769332, 52.338822203371052 ], [ 4.547267524598841, 52.314081119893366 ], [ 4.563839141764888, 52.309383586133528 ], [ 4.568809923631671, 52.316497576832177 ], [ 4.573147743807281, 52.315394793901454 ], [ 4.583300245266885, 52.31829602179571 ], [ 4.598627004778302, 52.317266480682385 ], [ 4.611642784650666, 52.313671222527937 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0614\", \"naam\": \"Westvoorne\", \"code\": \"0614\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.155360537308697, 51.881591359107041 ], [ 4.160366272270936, 51.883343037952308 ], [ 4.155601879848036, 51.886974971285994 ], [ 4.150790015159837, 51.892305504268784 ], [ 4.150751093778643, 51.893721168208366 ], [ 4.135632920001435, 51.906022547081783 ], [ 4.135530437135594, 51.909703248872383 ], [ 4.137396016265292, 51.91255525239886 ], [ 4.142785544563586, 51.914594948664202 ], [ 4.146309131616756, 51.913782565177634 ], [ 4.148976809929809, 51.915793201667178 ], [ 4.153472795016736, 51.922071186467555 ], [ 4.150726636876087, 51.922891968966084 ], [ 4.142837351532394, 51.926773701964727 ], [ 4.145046157079414, 51.931328483503798 ], [ 4.142307125738231, 51.931865935174635 ], [ 4.113007916577356, 51.935800216794988 ], [ 4.112650969908444, 51.934663487560613 ], [ 4.107552688968522, 51.936024175832451 ], [ 4.101586663475707, 51.926896182253046 ], [ 4.10207285327138, 51.923502909283428 ], [ 4.092865434109028, 51.932464789654723 ], [ 4.084662518182667, 51.933507046203019 ], [ 4.074538709250391, 51.933677648393441 ], [ 4.066004385345567, 51.932732385675479 ], [ 4.027356838652063, 51.923795064686153 ], [ 3.97250749580791, 51.910969072208076 ], [ 3.955537857072772, 51.857517293712405 ], [ 4.035159001262747, 51.858461177454622 ], [ 4.039922905964871, 51.842089089185968 ], [ 4.082881414171935, 51.847389022941258 ], [ 4.084344568950052, 51.850520683955835 ], [ 4.08932774502368, 51.852841632457938 ], [ 4.098252023366379, 51.85322316807013 ], [ 4.117154363733395, 51.857960650800422 ], [ 4.116733990837477, 51.859088973033131 ], [ 4.120958839732082, 51.860833914600583 ], [ 4.119261539007499, 51.865913508967211 ], [ 4.120395102322502, 51.86705861153488 ], [ 4.127300748569069, 51.870248288036528 ], [ 4.130250730559895, 51.875944227057019 ], [ 4.134089101428841, 51.877684540084552 ], [ 4.136801318736374, 51.877996662149343 ], [ 4.137150572072942, 51.879416459132464 ], [ 4.140282906336939, 51.878600107510167 ], [ 4.155360537308697, 51.881591359107041 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0597\", \"naam\": \"Ridderkerk\", \"code\": \"0597\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.600028213456907, 51.838684939999034 ], [ 4.604908829555027, 51.848346344430823 ], [ 4.613802594206932, 51.850670855418876 ], [ 4.618842095866031, 51.851270338321413 ], [ 4.623459707512938, 51.853849250789033 ], [ 4.627329625396232, 51.854723952472646 ], [ 4.630062940689693, 51.85389201307261 ], [ 4.633620379726804, 51.850233319084559 ], [ 4.636348585451849, 51.849684400126534 ], [ 4.647490988447055, 51.857118268117091 ], [ 4.643569027233384, 51.859359080376613 ], [ 4.638040870336702, 51.86470470321953 ], [ 4.635236089100993, 51.869784337462711 ], [ 4.634056184179101, 51.870626370495145 ], [ 4.626501052554779, 51.880772798528824 ], [ 4.622926176822943, 51.8852807550481 ], [ 4.619374749798768, 51.888372769753566 ], [ 4.619744148931527, 51.889507972816972 ], [ 4.604150518156221, 51.891953858010957 ], [ 4.595951854548786, 51.893881316242485 ], [ 4.591650358726486, 51.895268260147766 ], [ 4.584561357153975, 51.90031761406842 ], [ 4.581420326980586, 51.901995305492406 ], [ 4.576345015804074, 51.903093186664933 ], [ 4.576022576772544, 51.899409384714147 ], [ 4.570478334871863, 51.883511851386785 ], [ 4.569021465901632, 51.878120929796495 ], [ 4.562020933806997, 51.878355160458916 ], [ 4.554689326158129, 51.875471431118164 ], [ 4.549275204339923, 51.874016933527841 ], [ 4.565605612306232, 51.852325903962509 ], [ 4.569872958695965, 51.85263888556868 ], [ 4.571477895491358, 51.849818044705188 ], [ 4.571140820327038, 51.846983699965286 ], [ 4.583250827513775, 51.843102446057841 ], [ 4.600028213456907, 51.838684939999034 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0313\", \"naam\": \"Bunschoten\", \"code\": \"0313\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.395393494116492, 52.219085912225324 ], [ 5.39304388023896, 52.220501914515282 ], [ 5.395003024513136, 52.225598889558263 ], [ 5.404804911932391, 52.249667354363808 ], [ 5.402845395906115, 52.249667632795635 ], [ 5.393048541999288, 52.255048771217488 ], [ 5.33970862397587, 52.287603906416102 ], [ 5.327185236873556, 52.266643725816017 ], [ 5.322485126317045, 52.263526385992186 ], [ 5.322488824287603, 52.260977860180688 ], [ 5.328373718604901, 52.257299719732707 ], [ 5.328767543146707, 52.255884064406906 ], [ 5.324459990008942, 52.25305015974638 ], [ 5.316230302951608, 52.252479173420717 ], [ 5.313097233792324, 52.251061402402684 ], [ 5.310363584999059, 52.245396249290302 ], [ 5.311154557260658, 52.24114919830398 ], [ 5.313125451331993, 52.234071171248701 ], [ 5.312343820229364, 52.232937994367553 ], [ 5.322533161917547, 52.230395456821945 ], [ 5.335462661885151, 52.228419610954717 ], [ 5.33429723936218, 52.220207116805291 ], [ 5.330387643811791, 52.214825036727355 ], [ 5.35819430450435, 52.209738003056422 ], [ 5.364459135442595, 52.209739367433031 ], [ 5.369158327093466, 52.20832431046469 ], [ 5.378555491538024, 52.207192669715525 ], [ 5.380904669084972, 52.207192815147273 ], [ 5.392650342961146, 52.205493805743451 ], [ 5.395393494116492, 52.219085912225324 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0141\", \"naam\": \"Almelo\", \"code\": \"0141\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.690843612378883, 52.308459024949805 ], [ 6.689307454050916, 52.309608751358454 ], [ 6.690935024209959, 52.311573207618622 ], [ 6.690241662336732, 52.314696040250233 ], [ 6.694958724988174, 52.314927157353182 ], [ 6.706038259139375, 52.317919281398062 ], [ 6.704518969428681, 52.319635414364321 ], [ 6.706915658108257, 52.321024685194431 ], [ 6.694916498521038, 52.326821972610325 ], [ 6.696970886014642, 52.329914419083437 ], [ 6.706859808900531, 52.332353270193799 ], [ 6.709557036898957, 52.330623948456186 ], [ 6.715221894265418, 52.336224451344279 ], [ 6.718806090927688, 52.337883345602393 ], [ 6.720871166914163, 52.341258465936534 ], [ 6.713829291346201, 52.34218725302123 ], [ 6.709544056584925, 52.343368031085333 ], [ 6.720417667290785, 52.352308324528018 ], [ 6.719511605089708, 52.361380868463186 ], [ 6.71796587708599, 52.362247856912845 ], [ 6.715736231451825, 52.366520874190556 ], [ 6.712813499376371, 52.373916773370127 ], [ 6.713282633714782, 52.376460287390522 ], [ 6.708182870990099, 52.376800517111882 ], [ 6.705474376283997, 52.378246698862156 ], [ 6.698000404211311, 52.391356700140051 ], [ 6.698460503437085, 52.39361716396045 ], [ 6.690966749005605, 52.392850349869533 ], [ 6.685078742194828, 52.393198245882864 ], [ 6.684226259735358, 52.390942035158886 ], [ 6.676120014676395, 52.396128065719196 ], [ 6.671975377113614, 52.38881008365793 ], [ 6.666112263419316, 52.390006350000199 ], [ 6.664130625290519, 52.389461356432307 ], [ 6.651811249446512, 52.398655772573356 ], [ 6.647791201215089, 52.395583531403254 ], [ 6.640024945580336, 52.399064276589698 ], [ 6.636783929709308, 52.395700229151046 ], [ 6.62167183167346, 52.389628571022442 ], [ 6.618519433660508, 52.389378213242018 ], [ 6.614101655285054, 52.386025791057278 ], [ 6.609478935958925, 52.389471908335373 ], [ 6.598703569776929, 52.383635680328993 ], [ 6.606252374198276, 52.372230517933801 ], [ 6.60848506852458, 52.367676426447062 ], [ 6.61352193817704, 52.365075602814635 ], [ 6.615384243935571, 52.361374783289541 ], [ 6.614465419324578, 52.356570039530112 ], [ 6.611284157643077, 52.355187032779639 ], [ 6.608363343943653, 52.348986973179116 ], [ 6.604712426260445, 52.344776709607906 ], [ 6.597590275825963, 52.342867451913861 ], [ 6.598698669121537, 52.340307367107748 ], [ 6.601754483432893, 52.337160900918413 ], [ 6.607919319764524, 52.332849525493515 ], [ 6.616453794184616, 52.329079597541195 ], [ 6.619122934314086, 52.326219874867043 ], [ 6.604604521300107, 52.312210504701838 ], [ 6.609320900399698, 52.312445040034909 ], [ 6.610129057228718, 52.313286268737144 ], [ 6.614021685901361, 52.312113158682273 ], [ 6.613951303312552, 52.309565130046451 ], [ 6.616705647212278, 52.309819712449929 ], [ 6.611150179555603, 52.307611795381142 ], [ 6.608011445273425, 52.307644250192368 ], [ 6.618565408926021, 52.306118810750668 ], [ 6.631785504826599, 52.301732416414715 ], [ 6.625961921457527, 52.289899323249912 ], [ 6.633453087371239, 52.291236553297935 ], [ 6.636574719293934, 52.290637199944619 ], [ 6.637791121183807, 52.292040322711344 ], [ 6.647644297162497, 52.293634839651013 ], [ 6.657490079647882, 52.294945421170695 ], [ 6.657906592931329, 52.295790538953263 ], [ 6.668202528321748, 52.299077784030494 ], [ 6.676538545694815, 52.302385535851116 ], [ 6.684900614147938, 52.306542018507301 ], [ 6.690843612378883, 52.308459024949805 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1773\", \"naam\": \"Olst-Wijhe\", \"code\": \"1773\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.235420705873526, 52.319683265450891 ], [ 6.235980986821685, 52.328457822570087 ], [ 6.232469479930336, 52.329615692258123 ], [ 6.231797471235843, 52.335567259399497 ], [ 6.235804945734825, 52.339786260612264 ], [ 6.222985672923049, 52.347240179163578 ], [ 6.19715320685618, 52.35223389030218 ], [ 6.195246058047819, 52.355361879296886 ], [ 6.196093632395711, 52.3587542093507 ], [ 6.194522293034362, 52.358764941972062 ], [ 6.190650365501699, 52.361906240473822 ], [ 6.188732109057148, 52.364467837340101 ], [ 6.189574239273823, 52.367577067200934 ], [ 6.188456900950714, 52.370982749387615 ], [ 6.189329878262446, 52.375790822259916 ], [ 6.195586669338351, 52.374049194279877 ], [ 6.196729386115826, 52.37205915128596 ], [ 6.201434412052058, 52.371460519286344 ], [ 6.201481217162812, 52.374008782273044 ], [ 6.19992491192325, 52.374869008471222 ], [ 6.203094784517392, 52.376263076977303 ], [ 6.203524274139729, 52.378242346689731 ], [ 6.201202631032018, 52.380240567657324 ], [ 6.201658092318948, 52.383635541386461 ], [ 6.207145138008059, 52.382748129843719 ], [ 6.206395680662633, 52.384735548880244 ], [ 6.202470245345293, 52.3850458274433 ], [ 6.204079048281732, 52.387016963311403 ], [ 6.216254048377613, 52.386365962941156 ], [ 6.218591265947018, 52.385216866006935 ], [ 6.221778462042346, 52.387459843845924 ], [ 6.22611313693038, 52.387995553983039 ], [ 6.229683257128589, 52.389669254191496 ], [ 6.232112079760896, 52.39333323073631 ], [ 6.229839410874862, 52.397880240693077 ], [ 6.231412125784142, 52.397869036260204 ], [ 6.226004123894273, 52.403004631766585 ], [ 6.222178629075428, 52.40869516915096 ], [ 6.228287486552221, 52.419695741273458 ], [ 6.231111259985108, 52.423356917793143 ], [ 6.220904042756248, 52.424561903942816 ], [ 6.207543591837959, 52.425504716250025 ], [ 6.208372466689468, 52.427764357872924 ], [ 6.196553530127732, 52.426996190423729 ], [ 6.193431795549876, 52.428433344347717 ], [ 6.191148224210665, 52.432696452493097 ], [ 6.17734566741522, 52.431090295372748 ], [ 6.175025122322173, 52.433371127039784 ], [ 6.157667675168873, 52.453590413764104 ], [ 6.154902087002522, 52.453042024075074 ], [ 6.147665009673877, 52.444310420323617 ], [ 6.141751378653189, 52.443781890834742 ], [ 6.136975466514505, 52.440697340635502 ], [ 6.135809139899182, 52.441554227022557 ], [ 6.126363346622156, 52.441613538645356 ], [ 6.120469096958432, 52.442216507358935 ], [ 6.10942107270142, 52.440585357365507 ], [ 6.114486245802722, 52.437439503044153 ], [ 6.11952726961876, 52.432877725482271 ], [ 6.116332630872763, 52.430065731137965 ], [ 6.117883150184814, 52.428640324485244 ], [ 6.11741961629563, 52.424395625223099 ], [ 6.115026488068128, 52.42242816139543 ], [ 6.113392480854985, 52.41875697194795 ], [ 6.114896161922903, 52.414500176074306 ], [ 6.110851745603078, 52.407728850539215 ], [ 6.115163808360399, 52.406852903200253 ], [ 6.1190262959523, 52.402581514997138 ], [ 6.123730916030531, 52.401702824742912 ], [ 6.125280208650488, 52.40027731512415 ], [ 6.130387159962469, 52.399962194367546 ], [ 6.125148132818927, 52.392349307942737 ], [ 6.12584944078102, 52.38724782145372 ], [ 6.125797527197911, 52.384133240731664 ], [ 6.122194197506591, 52.380191246046373 ], [ 6.117047499812099, 52.377957709929959 ], [ 6.094970999854425, 52.37384420276129 ], [ 6.084338369529924, 52.372491453438258 ], [ 6.078395333249169, 52.369411415525803 ], [ 6.077922992863634, 52.364317060715834 ], [ 6.081030688534881, 52.362033492302807 ], [ 6.090437156281247, 52.360562089428861 ], [ 6.094699873240804, 52.356855415944956 ], [ 6.087187025306145, 52.35378519332972 ], [ 6.078130588934986, 52.352422564726737 ], [ 6.076135868022025, 52.350451981819845 ], [ 6.075611277875756, 52.341959814405875 ], [ 6.076754159864628, 52.339687762022791 ], [ 6.075475124674724, 52.333182196467618 ], [ 6.073865228823247, 52.330642981749193 ], [ 6.070589326162418, 52.321883532157756 ], [ 6.066245644935896, 52.32020950604138 ], [ 6.066603485840768, 52.317942047835011 ], [ 6.071692667124499, 52.317063167800981 ], [ 6.07994346627688, 52.317581464245578 ], [ 6.081032415548862, 52.311911560300487 ], [ 6.084952252836429, 52.311605314111681 ], [ 6.082919152577853, 52.307086475677067 ], [ 6.084011912451918, 52.30169968451716 ], [ 6.091047079697207, 52.299958940954866 ], [ 6.099290382252086, 52.300192744360125 ], [ 6.101270206831249, 52.301313509436277 ], [ 6.108664762563342, 52.297587299780403 ], [ 6.11849556119724, 52.298942773390799 ], [ 6.125982434130842, 52.300878460804391 ], [ 6.141336070829426, 52.303896462356974 ], [ 6.168880431512945, 52.30824839050112 ], [ 6.170459978212267, 52.308804293164052 ], [ 6.1822368716751, 52.309008857628179 ], [ 6.181558426866087, 52.314960175256431 ], [ 6.190187160853004, 52.314618707238516 ], [ 6.199631721089172, 52.315970081355005 ], [ 6.202399703583557, 52.317083746000549 ], [ 6.203634366474932, 52.320190198165939 ], [ 6.206397488211633, 52.321020624489122 ], [ 6.235420705873526, 52.319683265450891 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0501\", \"naam\": \"Brielle\", \"code\": \"0501\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.18536944513138, 51.849615832878719 ], [ 4.239542603404224, 51.873098062373572 ], [ 4.234023011000079, 51.876159324351939 ], [ 4.230797927134796, 51.880659001711159 ], [ 4.227499198983401, 51.887989980573813 ], [ 4.220700673257233, 51.89528617028995 ], [ 4.216336011810815, 51.8986412924435 ], [ 4.208860279791349, 51.901965096752448 ], [ 4.198601750003826, 51.907526011716875 ], [ 4.18798955936798, 51.91166637473949 ], [ 4.175362117584414, 51.91833394198796 ], [ 4.168338176976481, 51.919110945278739 ], [ 4.167483436300857, 51.921934207111839 ], [ 4.163867083600672, 51.92614481649224 ], [ 4.159541603030461, 51.927798996370711 ], [ 4.151730078087917, 51.928850003690435 ], [ 4.145046157079414, 51.931328483503798 ], [ 4.142837351532394, 51.926773701964727 ], [ 4.150726636876087, 51.922891968966084 ], [ 4.153472795016736, 51.922071186467555 ], [ 4.148976809929809, 51.915793201667178 ], [ 4.146309131616756, 51.913782565177634 ], [ 4.142785544563586, 51.914594948664202 ], [ 4.137396016265292, 51.91255525239886 ], [ 4.135530437135594, 51.909703248872383 ], [ 4.135632920001435, 51.906022547081783 ], [ 4.150751093778643, 51.893721168208366 ], [ 4.150790015159837, 51.892305504268784 ], [ 4.155601879848036, 51.886974971285994 ], [ 4.160366272270936, 51.883343037952308 ], [ 4.155360537308697, 51.881591359107041 ], [ 4.158173697545794, 51.878222250266539 ], [ 4.153564955047496, 51.876191427414945 ], [ 4.154404161365401, 51.873934517634979 ], [ 4.160036955128084, 51.866913131916505 ], [ 4.165064312199856, 51.867815205346751 ], [ 4.168987654948623, 51.866439896311888 ], [ 4.181883709496904, 51.863740827094759 ], [ 4.186194643917294, 51.862368926472982 ], [ 4.184648379417306, 51.862069886888364 ], [ 4.177770319722795, 51.857751025963807 ], [ 4.175500787746826, 51.855461907748726 ], [ 4.18256012033592, 51.852985617104544 ], [ 4.183024219803817, 51.850158230884183 ], [ 4.18536944513138, 51.849615832878719 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0400\", \"naam\": \"Den Helder\", \"code\": \"0400\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.876251650281505, 53.021849639610103 ], [ 4.791465093399684, 52.980404297182233 ], [ 4.74086292067043, 52.980141475355445 ], [ 4.646292074362315, 52.9410867650952 ], [ 4.629269188790539, 52.889732175417841 ], [ 4.694169587070214, 52.884463804529474 ], [ 4.71565983407914, 52.88317094128741 ], [ 4.770188991562143, 52.878935052133201 ], [ 4.770988020408712, 52.878656043181806 ], [ 4.794779660271974, 52.912469485380107 ], [ 4.80435393032027, 52.910534659499255 ], [ 4.808283195303752, 52.91423449597572 ], [ 4.875005669933957, 52.890473007182976 ], [ 4.92593210902044, 52.963161693565397 ], [ 4.876251650281505, 53.021849639610103 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1681\", \"naam\": \"Borger-Odoorn\", \"code\": \"1681\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 7.014963698441735, 52.873105810364642 ], [ 7.045614701649903, 52.91601027407728 ], [ 7.027027272563299, 52.919098813940316 ], [ 7.016090520210613, 52.924628886429417 ], [ 6.936520714743451, 52.992798856261878 ], [ 6.935743942698408, 52.993375253395428 ], [ 6.841970955157157, 52.978696234889995 ], [ 6.83755146970237, 52.977617305692931 ], [ 6.799314654468989, 52.965899362691168 ], [ 6.788860411559014, 52.962907699605466 ], [ 6.727663838713864, 52.954832080564202 ], [ 6.731510660295354, 52.93751619609548 ], [ 6.724338300430808, 52.937313555215177 ], [ 6.726421834054968, 52.927379638039326 ], [ 6.726861082340296, 52.915765148028953 ], [ 6.728182468293608, 52.906972323655658 ], [ 6.73210352332475, 52.892203781872674 ], [ 6.736454385961868, 52.87856282584643 ], [ 6.73753293096417, 52.87486949014783 ], [ 6.740589403944064, 52.870870552400518 ], [ 6.744995696074562, 52.871953143129957 ], [ 6.747327100184192, 52.870227595158987 ], [ 6.753419347632684, 52.86166300569613 ], [ 6.752942427070603, 52.859119971308481 ], [ 6.768997453115378, 52.851572699821467 ], [ 6.765766330077242, 52.849911087431472 ], [ 6.816233525012927, 52.825813797030527 ], [ 6.823626882227805, 52.821194173167967 ], [ 6.824042387503205, 52.821755511378292 ], [ 6.839211956009731, 52.812226943559864 ], [ 6.840733441382382, 52.810226174389271 ], [ 6.849680264366678, 52.80473638566145 ], [ 6.854631163398879, 52.810339037960603 ], [ 6.858316620852452, 52.813691709684669 ], [ 6.865139329199526, 52.815872706725663 ], [ 6.868826058797388, 52.81922504389361 ], [ 6.8836753731535, 52.823853535567956 ], [ 6.908271538597643, 52.834586129196992 ], [ 6.948895649086912, 52.848786209578797 ], [ 6.952163994672931, 52.851291966880879 ], [ 6.951013012606297, 52.852439777315354 ], [ 6.951908703516717, 52.855259807897774 ], [ 6.954352808986928, 52.856926784094703 ], [ 6.957703469308505, 52.861696732864353 ], [ 6.961370571113638, 52.864196991905494 ], [ 6.964579468578094, 52.865004133945916 ], [ 6.966524973077711, 52.863845679094823 ], [ 7.007403475163146, 52.872925546874256 ], [ 7.014963698441735, 52.873105810364642 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0505\", \"naam\": \"Dordrecht\", \"code\": \"0505\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.645101315515001, 51.719184745123712 ], [ 4.675232614042836, 51.724186112231649 ], [ 4.6763811962292, 51.72504268827214 ], [ 4.681750662038011, 51.728473545522583 ], [ 4.693314692960084, 51.732224189456375 ], [ 4.703705547246694, 51.736816448295343 ], [ 4.717164632195447, 51.743690949964183 ], [ 4.729461062293569, 51.750840566994398 ], [ 4.740586398796489, 51.758832017007322 ], [ 4.744785711209295, 51.763386273563398 ], [ 4.750424804771428, 51.775877743402994 ], [ 4.755386435782928, 51.78156852801186 ], [ 4.758449473989556, 51.784416960596992 ], [ 4.76536418959999, 51.789268170434958 ], [ 4.773455711345466, 51.793275536299461 ], [ 4.781955618016651, 51.795868462084464 ], [ 4.797033283182438, 51.799910017209562 ], [ 4.806728941110152, 51.800241578767626 ], [ 4.816435494930596, 51.799722804748221 ], [ 4.828871619988016, 51.798083466858351 ], [ 4.836246280653682, 51.797835131610597 ], [ 4.845934995610337, 51.798729810593628 ], [ 4.854446802346928, 51.800751129539506 ], [ 4.865642626372988, 51.805615732435065 ], [ 4.87604868473388, 51.811891789565401 ], [ 4.88453591861069, 51.816459546787449 ], [ 4.883346244937633, 51.818719994981628 ], [ 4.878310042771163, 51.81784868714881 ], [ 4.871326943152627, 51.817535009415884 ], [ 4.843361373817844, 51.819107929949304 ], [ 4.821625625185824, 51.819005206448566 ], [ 4.811537683069814, 51.818672967517067 ], [ 4.800296562015504, 51.817484514030532 ], [ 4.788679204441966, 51.81544347637665 ], [ 4.782473330537174, 51.815128468214091 ], [ 4.768105815549749, 51.815619950062377 ], [ 4.762260690499589, 51.817288148411606 ], [ 4.754838766896947, 51.820646749576241 ], [ 4.748996510369381, 51.822031109534983 ], [ 4.743170080846814, 51.822282480756449 ], [ 4.729584471259045, 51.822207149589147 ], [ 4.714041208647267, 51.823251822655998 ], [ 4.707442367048005, 51.823213791454322 ], [ 4.695417911140416, 51.822577141147924 ], [ 4.685352210050828, 51.820818194756733 ], [ 4.676041218838928, 51.820478948076889 ], [ 4.67176717475509, 51.820736170808871 ], [ 4.669050174569639, 51.8207195772981 ], [ 4.661711933128291, 51.818408856930034 ], [ 4.653251632672383, 51.813541870545926 ], [ 4.645587863978894, 51.807546502328513 ], [ 4.634798708159957, 51.802946619570044 ], [ 4.625908474797185, 51.800906871974817 ], [ 4.621252849110455, 51.800876571278032 ], [ 4.623336571684631, 51.792394142018608 ], [ 4.626966023598702, 51.784204900241413 ], [ 4.627836984041072, 51.778546525362259 ], [ 4.626108218183512, 51.766074468782826 ], [ 4.626964621285596, 51.761265600034712 ], [ 4.631432342112229, 51.749116814946142 ], [ 4.63151761807847, 51.744019732071131 ], [ 4.630081595249419, 51.737213617329346 ], [ 4.627106070348661, 51.729831099075028 ], [ 4.620397863287028, 51.714211243839365 ], [ 4.645101315515001, 51.719184745123712 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1963\", \"naam\": \"Hoeksche Waard\", \"code\": \"1963\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.620397863287028, 51.714211243839365 ], [ 4.627106070348661, 51.729831099075028 ], [ 4.630081595249419, 51.737213617329346 ], [ 4.63151761807847, 51.744019732071131 ], [ 4.631432342112229, 51.749116814946142 ], [ 4.626964621285596, 51.761265600034712 ], [ 4.626108218183512, 51.766074468782826 ], [ 4.627836984041072, 51.778546525362259 ], [ 4.626966023598702, 51.784204900241413 ], [ 4.623336571684631, 51.792394142018608 ], [ 4.621252849110455, 51.800876571278032 ], [ 4.61736349930084, 51.801417517099168 ], [ 4.602939597065371, 51.805286801390132 ], [ 4.596711666304313, 51.806377812713812 ], [ 4.579608671043938, 51.807960552820248 ], [ 4.569458377843731, 51.81128867320885 ], [ 4.564356828912064, 51.814368229361648 ], [ 4.561184737786355, 51.818027565645089 ], [ 4.55914534469882, 51.823394023303081 ], [ 4.557141974240234, 51.826778289524391 ], [ 4.55359067814018, 51.829868337234934 ], [ 4.548507021175066, 51.83181453417577 ], [ 4.542683587813332, 51.831772781025066 ], [ 4.531451874953235, 51.830275424626066 ], [ 4.525634075691414, 51.829949663135054 ], [ 4.516677876586859, 51.83129959414579 ], [ 4.50497024686574, 51.834327413927561 ], [ 4.496406424332936, 51.835395550157521 ], [ 4.489029573857584, 51.83533933824986 ], [ 4.478957804638404, 51.834129027394987 ], [ 4.473157138746329, 51.832951186018576 ], [ 4.464251002892629, 51.831748678710319 ], [ 4.452986730409017, 51.831942770941744 ], [ 4.44714567942655, 51.832745750952235 ], [ 4.432297012217547, 51.837157177153379 ], [ 4.424270553874623, 51.831144292312494 ], [ 4.418477808240416, 51.829680596780747 ], [ 4.39708959226064, 51.831201361618852 ], [ 4.380567391659481, 51.823414224694979 ], [ 4.369063889903094, 51.817084413057856 ], [ 4.360487305834685, 51.818708937955428 ], [ 4.353495030089999, 51.818930761922189 ], [ 4.337247623810951, 51.816520842789238 ], [ 4.330729937710153, 51.813063827407426 ], [ 4.321436887831032, 51.812130157934824 ], [ 4.310231135901978, 51.810045366654464 ], [ 4.305996873794753, 51.808590370343254 ], [ 4.296835376792223, 51.802274937547431 ], [ 4.274652388027341, 51.804898792473736 ], [ 4.268444846640008, 51.804839762994327 ], [ 4.26306973637082, 51.80252268103466 ], [ 4.261193620031212, 51.799955772010605 ], [ 4.252851521137623, 51.792228639568648 ], [ 4.246817564302163, 51.785372995614473 ], [ 4.242602043269614, 51.783349431412923 ], [ 4.237575298430083, 51.782733836527683 ], [ 4.222700961738747, 51.787968177512838 ], [ 4.213071795070576, 51.785323239836181 ], [ 4.22215200351798, 51.7791830534387 ], [ 4.230892828032809, 51.771056323998778 ], [ 4.235609968650863, 51.768553809540293 ], [ 4.245889493038312, 51.760724301792791 ], [ 4.25182438877929, 51.755967275286032 ], [ 4.254622458509382, 51.752595763477238 ], [ 4.259047879093491, 51.746124497074575 ], [ 4.265021667328355, 51.73966790284036 ], [ 4.272494268206719, 51.735207779374093 ], [ 4.278367414200847, 51.732714565047964 ], [ 4.295554643383557, 51.726928435062227 ], [ 4.302206811137845, 51.72415808011813 ], [ 4.31163635410113, 51.718580744816187 ], [ 4.316717349392595, 51.716644783662495 ], [ 4.330723438738898, 51.713939786533736 ], [ 4.341998000905789, 51.712058424336021 ], [ 4.357143303906556, 51.710210079380161 ], [ 4.372649121113432, 51.709495751674844 ], [ 4.397390493975995, 51.711406662921235 ], [ 4.398558230933839, 51.711133312431649 ], [ 4.423380100580502, 51.709357678108113 ], [ 4.469660209830836, 51.699533786296932 ], [ 4.488717524728401, 51.695150188734424 ], [ 4.500373484221363, 51.692973359778392 ], [ 4.515091702854238, 51.692517459290542 ], [ 4.530556881540979, 51.69348120795717 ], [ 4.542533999975838, 51.694701015531614 ], [ 4.554883203362461, 51.696771855896486 ], [ 4.589222757685508, 51.703241317772203 ], [ 4.597312896093555, 51.705561777409144 ], [ 4.616927318011972, 51.713338870519216 ], [ 4.620397863287028, 51.714211243839365 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0327\", \"naam\": \"Leusden\", \"code\": \"0327\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.486413039194792, 52.115402462406081 ], [ 5.487977216617347, 52.115967487776025 ], [ 5.495791114396763, 52.115677361147199 ], [ 5.498917637698718, 52.115957612604667 ], [ 5.503600477668142, 52.113687657392177 ], [ 5.507508333982337, 52.113966905877355 ], [ 5.507512915183837, 52.115665964823471 ], [ 5.503607865481089, 52.116519422492978 ], [ 5.505179038572797, 52.119632806630428 ], [ 5.496973049629977, 52.119640744175562 ], [ 5.495024718264294, 52.12190796038518 ], [ 5.494640758090075, 52.124740079630762 ], [ 5.49659478845612, 52.124738280135837 ], [ 5.497780546140196, 52.130117528514909 ], [ 5.501297499380328, 52.129830996484664 ], [ 5.504818888196838, 52.131243414260489 ], [ 5.512247663461213, 52.132085289520433 ], [ 5.511862333910508, 52.134067933095935 ], [ 5.514213304239673, 52.136047655540764 ], [ 5.507575565160627, 52.138886389208189 ], [ 5.502494942080564, 52.139457824912249 ], [ 5.497417689227526, 52.141444918479927 ], [ 5.498996411171051, 52.147390122961895 ], [ 5.496650385042212, 52.147392326549955 ], [ 5.485314995876987, 52.149101369887219 ], [ 5.481407794428587, 52.150520438258653 ], [ 5.477109871557438, 52.152222851117699 ], [ 5.469681028400481, 52.152794640592816 ], [ 5.459513675754183, 52.152801325859116 ], [ 5.454433419094295, 52.155069739755554 ], [ 5.452089876407582, 52.157053281295632 ], [ 5.4423182527826, 52.161589064259282 ], [ 5.43879776123346, 52.161307486531229 ], [ 5.432928529534172, 52.159044516519465 ], [ 5.423540803587734, 52.157631920050704 ], [ 5.417672440227038, 52.154801839393912 ], [ 5.413366495671722, 52.147723496818919 ], [ 5.404369906977013, 52.138946716415454 ], [ 5.398895820345827, 52.13498293039379 ], [ 5.3985047059214, 52.134133440846391 ], [ 5.392250352054432, 52.13300117864933 ], [ 5.374661349058912, 52.131018410868364 ], [ 5.372315712798209, 52.132434022376103 ], [ 5.370361660212618, 52.131584233613424 ], [ 5.355504933974048, 52.136961542488336 ], [ 5.334024191169576, 52.120529610956076 ], [ 5.32855601100518, 52.118544787362161 ], [ 5.318404718465658, 52.113158950845794 ], [ 5.310989515184272, 52.108340386287026 ], [ 5.322328173521736, 52.101834073244639 ], [ 5.326236931707663, 52.099853910496954 ], [ 5.334443297243764, 52.096459724555281 ], [ 5.340693713746288, 52.095046458686042 ], [ 5.366080863675815, 52.091655571956252 ], [ 5.379358699481688, 52.090241294828147 ], [ 5.401226714256019, 52.089391156480879 ], [ 5.400837003107966, 52.091939805776079 ], [ 5.404356398860636, 52.104115985621803 ], [ 5.409824733631331, 52.10326552274379 ], [ 5.414900836665539, 52.100149478278603 ], [ 5.420367640864093, 52.098165814909372 ], [ 5.421928832743557, 52.09674947395289 ], [ 5.432474002331846, 52.096745880248029 ], [ 5.437945414417961, 52.099858599748515 ], [ 5.442247139225065, 52.104104327916652 ], [ 5.443813240608137, 52.106935358843423 ], [ 5.457873973292274, 52.105228682581306 ], [ 5.467631185581346, 52.100408394392907 ], [ 5.472321009635187, 52.101820982985359 ], [ 5.475064731548164, 52.106632985519092 ], [ 5.476250807613568, 52.113711527875608 ], [ 5.47899335227205, 52.11739072306225 ], [ 5.486413039194792, 52.115402462406081 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1901\", \"naam\": \"Bodegraven-Reeuwijk\", \"code\": \"1901\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.798786793641297, 52.022224499185597 ], [ 4.810035422821202, 52.026811171774234 ], [ 4.806831575524448, 52.033308727243011 ], [ 4.811894206263318, 52.033899941800918 ], [ 4.818860284155245, 52.038181564639252 ], [ 4.829640294818698, 52.049560531843774 ], [ 4.829636768853059, 52.049843700898727 ], [ 4.848264577963286, 52.058142768201215 ], [ 4.856058725324449, 52.059027719049126 ], [ 4.868106280014215, 52.063329183285347 ], [ 4.873117833099283, 52.068731654842608 ], [ 4.862185996595478, 52.06896663898209 ], [ 4.854770187482504, 52.068933364144137 ], [ 4.842280432725683, 52.068876267092911 ], [ 4.829815402618604, 52.066835668026208 ], [ 4.834035049157173, 52.072802433612551 ], [ 4.832839478383907, 52.074779107565462 ], [ 4.826203444292724, 52.074747703141831 ], [ 4.826533478641004, 52.079563411989852 ], [ 4.825745577987461, 52.080126029973393 ], [ 4.823235389181601, 52.093423703576498 ], [ 4.82308536056459, 52.105316699659745 ], [ 4.825407738720298, 52.107026888589232 ], [ 4.792000166266685, 52.122154886546369 ], [ 4.792022797307085, 52.120455900793317 ], [ 4.789295111810093, 52.119875735463239 ], [ 4.784203942958622, 52.120699362532918 ], [ 4.783468346139775, 52.117297395296596 ], [ 4.78033486513526, 52.117847678025939 ], [ 4.778408226380521, 52.115855460026225 ], [ 4.774907347274415, 52.114704597162486 ], [ 4.770992533092167, 52.115250571697139 ], [ 4.769066423047236, 52.113258201021253 ], [ 4.762416820040924, 52.113789522157326 ], [ 4.759335043847737, 52.110658122689237 ], [ 4.75311253801527, 52.108642528992071 ], [ 4.738687406735345, 52.106581769067859 ], [ 4.740278603036268, 52.10460821425567 ], [ 4.734057802348832, 52.102591615535538 ], [ 4.734847251031114, 52.102029615637257 ], [ 4.704871541210125, 52.09534663776838 ], [ 4.706854336066264, 52.093375792623611 ], [ 4.708802591394771, 52.093670208485101 ], [ 4.71324333163748, 52.084067335938009 ], [ 4.715628421378108, 52.08124908219213 ], [ 4.712959607006741, 52.076986036306856 ], [ 4.704761901301838, 52.076938846344767 ], [ 4.696998265102284, 52.074061752070868 ], [ 4.694362342977742, 52.067816147366109 ], [ 4.685359127395736, 52.069461990587229 ], [ 4.682011530582114, 52.05896402443193 ], [ 4.67927559642803, 52.059230803981642 ], [ 4.677225735130055, 52.065448621588196 ], [ 4.665513259293566, 52.065660647407597 ], [ 4.665930906225956, 52.063964070999042 ], [ 4.660072551600122, 52.064211248707437 ], [ 4.664080303549441, 52.057722563900128 ], [ 4.666811677326383, 52.057739298685554 ], [ 4.669579368977505, 52.055490677296802 ], [ 4.668848996280406, 52.05237114225605 ], [ 4.679777682678067, 52.052154094421169 ], [ 4.677176869311067, 52.043925952521924 ], [ 4.686933230646163, 52.043701175832304 ], [ 4.687332156797779, 52.043137168339719 ], [ 4.706102969048374, 52.040132137041319 ], [ 4.716273863878696, 52.038208196805179 ], [ 4.717486291962876, 52.035383209045378 ], [ 4.719830541687887, 52.03511332851825 ], [ 4.719957076857284, 52.026618373527349 ], [ 4.727374073438642, 52.026093792103488 ], [ 4.730120158356529, 52.02497639242651 ], [ 4.734409228497507, 52.025000249752487 ], [ 4.736781606260035, 52.022747867023099 ], [ 4.743803811493235, 52.022503260591051 ], [ 4.745834340446547, 52.016850560789564 ], [ 4.748961170663335, 52.016301175562958 ], [ 4.750946553841411, 52.01376322122087 ], [ 4.76420829408279, 52.013267770801988 ], [ 4.772000724927575, 52.013591938499012 ], [ 4.78327496327474, 52.015915820283112 ], [ 4.798786793641297, 52.022224499185597 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0153\", \"naam\": \"Enschede\", \"code\": \"0153\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.88955518862607, 52.161095307623434 ], [ 6.90589518072276, 52.169949002922358 ], [ 6.906030163734044, 52.173912311238105 ], [ 6.908053379874814, 52.175868766978311 ], [ 6.912013206728166, 52.177233738033422 ], [ 6.91868225747949, 52.17771378448878 ], [ 6.933575612770867, 52.17836915525816 ], [ 6.937917759872071, 52.179445034304955 ], [ 6.949692484097774, 52.180422549924579 ], [ 6.951277051937166, 52.180967992305476 ], [ 6.962600223987925, 52.191296477355372 ], [ 6.962319009724676, 52.194415650107736 ], [ 6.967145044271658, 52.198032991105066 ], [ 6.970848096126343, 52.203081314216355 ], [ 6.974059732653303, 52.205303933910052 ], [ 6.976589874053496, 52.210367847002615 ], [ 6.979873183917562, 52.214571887434424 ], [ 6.979613295279374, 52.218257250382841 ], [ 6.981270510198384, 52.220783860143051 ], [ 6.965940609301596, 52.230336079954135 ], [ 6.964996545187586, 52.236862713950458 ], [ 6.968632212402145, 52.239929475455526 ], [ 6.971525250847962, 52.244138965171913 ], [ 6.972851761670579, 52.248369428948237 ], [ 6.968824783344921, 52.267398966606862 ], [ 6.96039240961656, 52.272892660325859 ], [ 6.946176657963057, 52.281294320138116 ], [ 6.941168888597419, 52.283909210316615 ], [ 6.939208448473376, 52.283934974754963 ], [ 6.918800206810621, 52.283634825223423 ], [ 6.913654434463187, 52.282285346064086 ], [ 6.912192961671898, 52.285419551983559 ], [ 6.907095582613525, 52.285485223114875 ], [ 6.890120024886228, 52.282303805350267 ], [ 6.887805764949337, 52.283466061059826 ], [ 6.883091128933238, 52.283242626795143 ], [ 6.879887852851551, 52.281300659522401 ], [ 6.880605423220477, 52.279309117643926 ], [ 6.876533105110259, 52.274829145702206 ], [ 6.868234707152545, 52.272950984365707 ], [ 6.840504113308867, 52.276410636778692 ], [ 6.837769093549222, 52.276727454070702 ], [ 6.831778103002116, 52.273402351838399 ], [ 6.840263543604527, 52.269050164347128 ], [ 6.843315880219432, 52.26646369949448 ], [ 6.843223190566405, 52.263632747396642 ], [ 6.840396472627889, 52.26111866907506 ], [ 6.842516308581306, 52.254012326920986 ], [ 6.82743389963406, 52.24824980297177 ], [ 6.819443161551978, 52.243532421740348 ], [ 6.813896611686111, 52.229439093607439 ], [ 6.774606548226767, 52.238403541764988 ], [ 6.765038945572749, 52.233134636475157 ], [ 6.769162693563493, 52.227139091158875 ], [ 6.755934820829866, 52.217380939396953 ], [ 6.759623268759986, 52.209974716832669 ], [ 6.762302328937067, 52.207961079809365 ], [ 6.766459204037912, 52.203098034425444 ], [ 6.766873811537949, 52.191198418790904 ], [ 6.788323516168672, 52.176218719690752 ], [ 6.805628550733781, 52.166665918695692 ], [ 6.814368096417281, 52.17080868697964 ], [ 6.828066090722163, 52.170925374208068 ], [ 6.870051327783022, 52.162758221653291 ], [ 6.88955518862607, 52.161095307623434 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0431\", \"naam\": \"Oostzaan\", \"code\": \"0431\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.89889586023318, 52.424508786964012 ], [ 4.899198817041428, 52.432721814414371 ], [ 4.894429414763946, 52.436949548445256 ], [ 4.896353207558089, 52.440921830297057 ], [ 4.896293545374005, 52.446301698524714 ], [ 4.893055973018094, 52.45421682862743 ], [ 4.893414918063899, 52.457333120197148 ], [ 4.897280106830064, 52.463861901299154 ], [ 4.898842756725028, 52.465000997840299 ], [ 4.90426319858727, 52.473518064731088 ], [ 4.906558744291157, 52.479756948758521 ], [ 4.895150533940198, 52.478294361456129 ], [ 4.890417173262164, 52.478840954012497 ], [ 4.882583991150311, 52.47484361535107 ], [ 4.876304727894269, 52.472834594374092 ], [ 4.866488064423253, 52.470243432911211 ], [ 4.861782126425159, 52.46852369776024 ], [ 4.852700138810652, 52.470465252565909 ], [ 4.849276068316251, 52.460539045956459 ], [ 4.84538358811395, 52.456840190001515 ], [ 4.845034969878943, 52.453157460757808 ], [ 4.84307696397401, 52.452298996984986 ], [ 4.853435675216978, 52.442152163260495 ], [ 4.855844818328558, 52.438198677944158 ], [ 4.86184899255335, 52.429730486430827 ], [ 4.862632604022872, 52.430017122971215 ], [ 4.866167311033086, 52.430599046584319 ], [ 4.87326329689197, 52.429497370154117 ], [ 4.875656895462493, 52.42667607319909 ], [ 4.878814299489647, 52.425840164347377 ], [ 4.889834068950272, 52.425603761416404 ], [ 4.89889586023318, 52.424508786964012 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0766\", \"naam\": \"Dongen\", \"code\": \"0766\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.987274382765984, 51.654584122642454 ], [ 4.957909443773157, 51.651648168131963 ], [ 4.957834293049073, 51.659577415883405 ], [ 4.957025775710766, 51.663256010949951 ], [ 4.953858151892632, 51.670890651205646 ], [ 4.947610452070639, 51.676814502695031 ], [ 4.94410874165117, 51.678783685996116 ], [ 4.933294311046825, 51.67675989665274 ], [ 4.925186292295725, 51.675029010271544 ], [ 4.925206521153799, 51.673046708984323 ], [ 4.92679439780059, 51.669088199051558 ], [ 4.931069787823725, 51.667122547810202 ], [ 4.931106867059303, 51.663441125539357 ], [ 4.934263641954452, 51.657223032951102 ], [ 4.932344084522753, 51.655799603471841 ], [ 4.932781962456479, 51.650703744514495 ], [ 4.930473185285372, 51.649561969095622 ], [ 4.929338873155353, 51.647008757139382 ], [ 4.912851521104653, 51.633632787761684 ], [ 4.910190354229652, 51.629373992092688 ], [ 4.911769090382315, 51.626265229604208 ], [ 4.904446893016558, 51.624252861737091 ], [ 4.915675226909455, 51.622316249906696 ], [ 4.914533570067492, 51.620612451014381 ], [ 4.909920114675227, 51.618328133487168 ], [ 4.911881910017168, 51.615504128350871 ], [ 4.918055498556311, 51.616378640328875 ], [ 4.925039672439366, 51.613574445020809 ], [ 4.943622071113526, 51.609964783086177 ], [ 4.943994588127949, 51.611382187983473 ], [ 4.947860978715771, 51.611113570806872 ], [ 4.952848438467417, 51.614813771215125 ], [ 4.964842496308742, 51.613158488256197 ], [ 4.976856176978365, 51.609236461066786 ], [ 4.982270102825382, 51.6086889262304 ], [ 4.983441735650896, 51.607276984593128 ], [ 4.986141047510007, 51.607852664360792 ], [ 5.004298878741904, 51.607913494189994 ], [ 4.987274382765984, 51.654584122642454 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0310\", \"naam\": \"De Bilt\", \"code\": \"0310\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.224835147383875, 52.165738134080733 ], [ 5.224053852991837, 52.165453882257829 ], [ 5.222845974595661, 52.174796978048299 ], [ 5.221282051566323, 52.174511616827203 ], [ 5.220877095805943, 52.178192316736677 ], [ 5.211884478224694, 52.176480263967555 ], [ 5.216143832955156, 52.188096656296921 ], [ 5.213396589790901, 52.190074864279659 ], [ 5.21413761114345, 52.200836551684205 ], [ 5.216477775456795, 52.203105342771295 ], [ 5.215690435794602, 52.204236895579569 ], [ 5.192706658925037, 52.177866112381629 ], [ 5.189186483241762, 52.177577087957239 ], [ 5.143392792954352, 52.180323170876164 ], [ 5.141829187005472, 52.180036757179835 ], [ 5.124216226665172, 52.180848369599012 ], [ 5.115221626236105, 52.179978468628896 ], [ 5.118789199923167, 52.172340896081032 ], [ 5.095036024711147, 52.155293927132035 ], [ 5.120514807989556, 52.145443063913646 ], [ 5.113515262106146, 52.139197142345154 ], [ 5.106906771859953, 52.133234902888987 ], [ 5.126501868849308, 52.124501319533039 ], [ 5.140589474486425, 52.121133474970705 ], [ 5.146846398873773, 52.120296854904815 ], [ 5.149198527224735, 52.118885734348964 ], [ 5.148830422750112, 52.114637321588916 ], [ 5.150412780722139, 52.110959192597988 ], [ 5.16176116496485, 52.10730011013716 ], [ 5.156337358188558, 52.098511084336032 ], [ 5.160652324639013, 52.094838127600568 ], [ 5.166906588007076, 52.093717260709504 ], [ 5.170810550147018, 52.09400766735623 ], [ 5.180577870682984, 52.093175647648167 ], [ 5.180571331998977, 52.094591529993423 ], [ 5.186046546163019, 52.092901922964998 ], [ 5.189590047112717, 52.086394799044832 ], [ 5.192715034943441, 52.086116815054339 ], [ 5.205605056387143, 52.085004651906239 ], [ 5.210659786986772, 52.090392724415182 ], [ 5.208694837903633, 52.093504732062868 ], [ 5.212583584000321, 52.097758229790784 ], [ 5.211010156044497, 52.100587673193594 ], [ 5.222324863841299, 52.104002166232675 ], [ 5.219176473690866, 52.110227637801103 ], [ 5.218382291553168, 52.113624636154398 ], [ 5.230874067839897, 52.116756798218674 ], [ 5.229656970786359, 52.129498148017838 ], [ 5.229639006449249, 52.134595303831816 ], [ 5.224835147383875, 52.165738134080733 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0060\", \"naam\": \"Ameland\", \"code\": \"0060\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.004903333044446, 53.492711213232347 ], [ 5.959624207274521, 53.483876203837681 ], [ 5.838995609493568, 53.475330301055884 ], [ 5.703538743737414, 53.47123286301516 ], [ 5.613383948595331, 53.49408185007119 ], [ 5.552812483144097, 53.471534411354064 ], [ 5.582977766405344, 53.458184567136435 ], [ 5.613005123963815, 53.422180969142033 ], [ 5.612463283215971, 53.318855583123522 ], [ 5.627345585954438, 53.323073122436632 ], [ 5.702778698749424, 53.367909914955035 ], [ 5.702976116320347, 53.394802558784505 ], [ 5.748032607496246, 53.394675868775025 ], [ 5.778042056337882, 53.376747680088187 ], [ 5.792920475614264, 53.376698416416822 ], [ 5.823260113860923, 53.394426756047686 ], [ 5.958786688204317, 53.421035732527699 ], [ 5.95902407752964, 53.438868986403151 ], [ 6.004385817201379, 53.456762470150039 ], [ 6.004903333044446, 53.492711213232347 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0230\", \"naam\": \"Elburg\", \"code\": \"0230\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.92422473840556, 52.391449180613265 ], [ 5.909055597836462, 52.405392225897359 ], [ 5.905945947019975, 52.408520725557551 ], [ 5.916225724626775, 52.413005906435423 ], [ 5.899784339378751, 52.419874207274397 ], [ 5.893161333966189, 52.425566000419153 ], [ 5.888859092855697, 52.427849624130644 ], [ 5.876390193338558, 52.438945201231434 ], [ 5.872104409121202, 52.44292711951082 ], [ 5.870526906302808, 52.442650402439597 ], [ 5.868974093863889, 52.444638874486714 ], [ 5.873722417674945, 52.446884778743971 ], [ 5.871369891866923, 52.447743907548492 ], [ 5.877727875989198, 52.453097860327766 ], [ 5.872634737770433, 52.455384143098662 ], [ 5.871478407002079, 52.457654179526045 ], [ 5.858930282143415, 52.462518565619973 ], [ 5.848345545201507, 52.467090824620563 ], [ 5.844830493606135, 52.46993606943137 ], [ 5.840115971233163, 52.471086827588636 ], [ 5.831473939250806, 52.473384831000594 ], [ 5.815543276010304, 52.455321135547372 ], [ 5.822574382591437, 52.449632257920356 ], [ 5.809469903952816, 52.437786855519846 ], [ 5.811429554123685, 52.43693036339036 ], [ 5.804300239802073, 52.43214190858329 ], [ 5.795207743487857, 52.427642967289458 ], [ 5.787292265003048, 52.422573030017674 ], [ 5.779393652060326, 52.419201489881409 ], [ 5.768720717794036, 52.413289920576972 ], [ 5.756477467785825, 52.407382297492511 ], [ 5.75919482174373, 52.403126325104786 ], [ 5.761544766245329, 52.401986258968229 ], [ 5.764270946335929, 52.398862794814143 ], [ 5.768596312255518, 52.398848936854932 ], [ 5.770926162194819, 52.395443427295184 ], [ 5.775654309042125, 52.396560664639154 ], [ 5.779997023327445, 52.398528488272895 ], [ 5.787876620994197, 52.400201068621534 ], [ 5.790598254730929, 52.396793842817353 ], [ 5.811494557671257, 52.402667257095516 ], [ 5.811868798181725, 52.400683757906222 ], [ 5.816989023044139, 52.401514774850618 ], [ 5.817734207294968, 52.397264583750228 ], [ 5.820483829278913, 52.396971385160946 ], [ 5.821214732355269, 52.391305389216384 ], [ 5.834094275212191, 52.381912963379548 ], [ 5.838785048385544, 52.379346653776686 ], [ 5.864908015108181, 52.359705485900733 ], [ 5.868462227382826, 52.361390092518029 ], [ 5.8712123770985, 52.361378873096925 ], [ 5.875889468491552, 52.357961619615317 ], [ 5.911587191428985, 52.386691988960337 ], [ 5.92422473840556, 52.391449180613265 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0845\", \"naam\": \"Sint-Michielsgestel\", \"code\": \"0845\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.380600268829324, 51.602875651073653 ], [ 5.390257987201525, 51.605424540594335 ], [ 5.394893914726363, 51.605707516219645 ], [ 5.391417531216666, 51.611371599642702 ], [ 5.39257675663831, 51.612221135483068 ], [ 5.390645031307119, 51.614486770673714 ], [ 5.391031606370135, 51.61646912244548 ], [ 5.388326725370177, 51.617885157832418 ], [ 5.389099738739639, 51.621283484365726 ], [ 5.386008078252485, 51.621000303246817 ], [ 5.383689112417032, 51.624115401825271 ], [ 5.384461996969608, 51.625531394729187 ], [ 5.387553956885423, 51.625814616589359 ], [ 5.383302326485788, 51.627796920407988 ], [ 5.383302023007832, 51.631478449459451 ], [ 5.37518397897374, 51.633743464379592 ], [ 5.370932070134899, 51.632893373010951 ], [ 5.37131715371288, 51.637141341502222 ], [ 5.37286361675972, 51.636858344694964 ], [ 5.378662170705397, 51.638558069430331 ], [ 5.382914859293784, 51.638275102232406 ], [ 5.374795731037963, 51.639973700279143 ], [ 5.371702117727551, 51.641955695504926 ], [ 5.37943443155764, 51.644222006908478 ], [ 5.378273976298418, 51.646770672923012 ], [ 5.384074168999668, 51.645921381220788 ], [ 5.396060781414994, 51.645354682650272 ], [ 5.401474795471451, 51.647619692830474 ], [ 5.406115230516384, 51.648185416525777 ], [ 5.405729360750219, 51.650167837048137 ], [ 5.412303342077346, 51.650166602494721 ], [ 5.411144584418705, 51.652715592735866 ], [ 5.415012724434576, 51.654130701750255 ], [ 5.414627021029618, 51.65582995663776 ], [ 5.42352074533101, 51.65384516505133 ], [ 5.427776626207724, 51.655826118452239 ], [ 5.431649736757665, 51.661488582552039 ], [ 5.432038790032697, 51.66375398327655 ], [ 5.433973774615601, 51.664602804424597 ], [ 5.442483989951296, 51.664599082904829 ], [ 5.445191421602672, 51.664314575540928 ], [ 5.445580810621513, 51.666296737061657 ], [ 5.448680177449468, 51.669693469166688 ], [ 5.456831988274229, 51.68753007208587 ], [ 5.452575955840882, 51.688382110501742 ], [ 5.451799461014894, 51.686683384170109 ], [ 5.445222726182899, 51.688669187923068 ], [ 5.447553262672113, 51.69489825110599 ], [ 5.441359530003565, 51.694618094879608 ], [ 5.443298827950994, 51.697732300002848 ], [ 5.43942869908276, 51.698583673308242 ], [ 5.439430995594314, 51.700566021067701 ], [ 5.427430550542764, 51.701420352219735 ], [ 5.407298100387556, 51.699160023899495 ], [ 5.399168351865071, 51.69859476273303 ], [ 5.394522972966787, 51.698878344392426 ], [ 5.386393398577227, 51.700860930168837 ], [ 5.374392351605484, 51.700010671479319 ], [ 5.371683108175069, 51.698027999069197 ], [ 5.36742534596651, 51.69689459268016 ], [ 5.361617827436656, 51.698592632370328 ], [ 5.359295114862012, 51.698592105224137 ], [ 5.36471910986041, 51.68981428773241 ], [ 5.369752733344947, 51.684434472003254 ], [ 5.377106931821871, 51.678771463735977 ], [ 5.372463085209457, 51.680186943806227 ], [ 5.357370480822466, 51.681883251507976 ], [ 5.356984069322309, 51.681033573474188 ], [ 5.351953478692677, 51.681032174210472 ], [ 5.350795748686359, 51.677067116245652 ], [ 5.355828046832201, 51.673953439146452 ], [ 5.353894129112347, 51.673103327480995 ], [ 5.353508696960928, 51.671120863734707 ], [ 5.343840117236272, 51.667436179706471 ], [ 5.342294667728512, 51.665453244030395 ], [ 5.338814658661302, 51.664035893932834 ], [ 5.327584515240622, 51.673376116694023 ], [ 5.319077329472629, 51.670256359054569 ], [ 5.309409311287252, 51.667984798732178 ], [ 5.303997993235592, 51.665432342226836 ], [ 5.304389998269063, 51.662600682083152 ], [ 5.311359218603967, 51.658640681588402 ], [ 5.312527471600873, 51.6538271340481 ], [ 5.31678420164816, 51.652130602403027 ], [ 5.31910792801258, 51.649866421634862 ], [ 5.319888469868609, 51.645052571373391 ], [ 5.318733184530378, 51.641936765836249 ], [ 5.319511518787485, 51.638538885348794 ], [ 5.32106041461801, 51.636840602443399 ], [ 5.317584570099678, 51.634573035159995 ], [ 5.338472790973778, 51.622123006225138 ], [ 5.343882498121967, 51.622974711193486 ], [ 5.341952951571284, 51.620142035615643 ], [ 5.343501465658063, 51.617310673594623 ], [ 5.340026582893594, 51.614477379359734 ], [ 5.33500435510573, 51.613625668128854 ], [ 5.332302339636677, 51.611358874670252 ], [ 5.335010204694442, 51.608528159568245 ], [ 5.331919408643301, 51.608526743856281 ], [ 5.335788984981097, 51.603147794719895 ], [ 5.340423465134913, 51.604282514701367 ], [ 5.342745217680759, 51.600318683275447 ], [ 5.345833139212818, 51.602868569567867 ], [ 5.350854153240332, 51.604003011724487 ], [ 5.352788274916396, 51.600605251069993 ], [ 5.360513254868188, 51.601740039389824 ], [ 5.374806052013258, 51.601742407661412 ], [ 5.380600268829324, 51.602875651073653 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0303\", \"naam\": \"Dronten\", \"code\": \"0303\", \"ligtInProvincieCode\": \"24\", \"ligtInProvincieNaam\": \"Flevoland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.620560868349439, 52.36412104639836 ], [ 5.644960867194415, 52.370866350850527 ], [ 5.652395112757349, 52.365469779376127 ], [ 5.677629324320419, 52.378719278573307 ], [ 5.678808442345427, 52.378716378279698 ], [ 5.688642124194835, 52.379824392540883 ], [ 5.694549639376398, 52.381508183966666 ], [ 5.698877321470134, 52.382063193292481 ], [ 5.706771362489556, 52.38657277417812 ], [ 5.714650264368455, 52.388816552497261 ], [ 5.715430225845711, 52.387964897586869 ], [ 5.727267294987494, 52.393594768680515 ], [ 5.728853078510269, 52.39528918876784 ], [ 5.733586795109615, 52.397257580877337 ], [ 5.729290003906921, 52.400951213333421 ], [ 5.733235628090689, 52.402638729317339 ], [ 5.737530013462002, 52.398661797367645 ], [ 5.739493832695161, 52.398372804122353 ], [ 5.746608406760391, 52.402882045209722 ], [ 5.752919136257003, 52.405128030447422 ], [ 5.756477467785825, 52.407382297492511 ], [ 5.768720717794036, 52.413289920576972 ], [ 5.779393652060326, 52.419201489881409 ], [ 5.787292265003048, 52.422573030017674 ], [ 5.795207743487857, 52.427642967289458 ], [ 5.804300239802073, 52.43214190858329 ], [ 5.811429554123685, 52.43693036339036 ], [ 5.809469903952816, 52.437786855519846 ], [ 5.822574382591437, 52.449632257920356 ], [ 5.815543276010304, 52.455321135547372 ], [ 5.831473939250806, 52.473384831000594 ], [ 5.840115971233163, 52.471086827588636 ], [ 5.845703365022651, 52.478144380079456 ], [ 5.845726870396903, 52.480409578835605 ], [ 5.84774377660135, 52.484932335965269 ], [ 5.851005582777193, 52.495396561616687 ], [ 5.856570713672651, 52.499905224254633 ], [ 5.863022926428791, 52.513471177277864 ], [ 5.864257641243507, 52.518279924129502 ], [ 5.861928542560531, 52.521687176860844 ], [ 5.862735457920073, 52.523382897265222 ], [ 5.860421156791743, 52.52820584826533 ], [ 5.861240302873906, 52.531034160768073 ], [ 5.859316840738114, 52.53557236008961 ], [ 5.855140319696674, 52.550879402983369 ], [ 5.815544843571893, 52.577362380097618 ], [ 5.810434140264346, 52.579645944931436 ], [ 5.802943141355075, 52.58080503079546 ], [ 5.778068414102618, 52.580889535373309 ], [ 5.777691145875872, 52.582872851687334 ], [ 5.777909662371546, 52.607506413652914 ], [ 5.723783950009262, 52.607672143546807 ], [ 5.723812101406519, 52.611353026039716 ], [ 5.664544924172523, 52.61150622183365 ], [ 5.655464154964045, 52.612659682332385 ], [ 5.650342747025631, 52.615219489337136 ], [ 5.627541597038531, 52.636787130314289 ], [ 5.6223915213355, 52.634815401976738 ], [ 5.607045988503191, 52.64928531637127 ], [ 5.592414076669904, 52.649311490885104 ], [ 5.511385092549457, 52.663581136830793 ], [ 5.564593731536958, 52.615095402311134 ], [ 5.587278093956629, 52.563525878437453 ], [ 5.58766762828152, 52.562392610251962 ], [ 5.589108808293028, 52.532375876475648 ], [ 5.591390048228374, 52.513966878647189 ], [ 5.58823480003714, 52.513689115734131 ], [ 5.591325863235127, 52.500092331517145 ], [ 5.60583119792849, 52.484492808850746 ], [ 5.565587822783733, 52.470402335508801 ], [ 5.586360098282958, 52.447716493742959 ], [ 5.581231405651076, 52.445176569041614 ], [ 5.575304036187548, 52.439806090987915 ], [ 5.566629094273634, 52.435855310930926 ], [ 5.588958041202201, 52.413166457194514 ], [ 5.588949005028007, 52.411184338166791 ], [ 5.615683687904122, 52.408870446335939 ], [ 5.623156545555204, 52.408855784097625 ], [ 5.61753089061459, 52.385930649630552 ], [ 5.612368707217612, 52.375746680010295 ], [ 5.611964200974718, 52.373482133805162 ], [ 5.615095050166121, 52.370927661761343 ], [ 5.620560868349439, 52.36412104639836 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0995\", \"naam\": \"Lelystad\", \"code\": \"0995\", \"ligtInProvincieCode\": \"24\", \"ligtInProvincieNaam\": \"Flevoland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.588949005028007, 52.411184338166791 ], [ 5.588958041202201, 52.413166457194514 ], [ 5.566629094273634, 52.435855310930926 ], [ 5.575304036187548, 52.439806090987915 ], [ 5.581231405651076, 52.445176569041614 ], [ 5.586360098282958, 52.447716493742959 ], [ 5.565587822783733, 52.470402335508801 ], [ 5.60583119792849, 52.484492808850746 ], [ 5.591325863235127, 52.500092331517145 ], [ 5.58823480003714, 52.513689115734131 ], [ 5.591390048228374, 52.513966878647189 ], [ 5.589108808293028, 52.532375876475648 ], [ 5.58766762828152, 52.562392610251962 ], [ 5.587278093956629, 52.563525878437453 ], [ 5.564593731536958, 52.615095402311134 ], [ 5.511385092549457, 52.663581136830793 ], [ 5.361054463593603, 52.675818524820642 ], [ 5.353138321961531, 52.678647973446942 ], [ 5.301667360941146, 52.692496208466586 ], [ 5.295729056054387, 52.692774942550216 ], [ 5.287814610698697, 52.69163603251647 ], [ 5.286633563106438, 52.688803607809035 ], [ 5.285049648246079, 52.689085404029001 ], [ 5.276354519433048, 52.68398104598748 ], [ 5.268844777210808, 52.680292949387201 ], [ 5.262126899377694, 52.676888353068811 ], [ 5.257078161586261, 52.644604346847629 ], [ 5.135126948960358, 52.603918183430167 ], [ 5.074432371670285, 52.583670217796694 ], [ 5.254140065367079, 52.439031641028087 ], [ 5.26558103378555, 52.429133311286499 ], [ 5.273463191077818, 52.424327398301287 ], [ 5.279370415632375, 52.422067627540564 ], [ 5.319911097547035, 52.41048793097498 ], [ 5.334076222456651, 52.405964527008145 ], [ 5.343519793686644, 52.401154622496819 ], [ 5.349418189595062, 52.401439805167129 ], [ 5.350598856061442, 52.400307526432456 ], [ 5.370257708346702, 52.407957311818819 ], [ 5.384809601566309, 52.414188029549138 ], [ 5.401333114005315, 52.421832533648441 ], [ 5.421012239638028, 52.432022300193758 ], [ 5.423767325909242, 52.43258779840626 ], [ 5.426918050137108, 52.435418380017609 ], [ 5.438733051813599, 52.442775967489659 ], [ 5.448169964092585, 52.435692481451369 ], [ 5.474900380401616, 52.420101847897733 ], [ 5.509457845375115, 52.397418233737248 ], [ 5.53300743875187, 52.384366050925365 ], [ 5.537333375945659, 52.384926964942224 ], [ 5.555461035744396, 52.396795413976584 ], [ 5.576352770204172, 52.408939844712215 ], [ 5.583050313301001, 52.411477408986016 ], [ 5.588949005028007, 52.411184338166791 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1640\", \"naam\": \"Leudal\", \"code\": \"1640\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.826424469013907, 51.166767721494239 ], [ 5.826842345467439, 51.170447811094093 ], [ 5.842601178649009, 51.177467230821215 ], [ 5.846056866390754, 51.178586453835543 ], [ 5.852522837581355, 51.174595850081523 ], [ 5.847976133739436, 51.17914526778992 ], [ 5.857210731126901, 51.183922769047797 ], [ 5.87374446305382, 51.190934850996484 ], [ 5.868429569063202, 51.195205076832877 ], [ 5.868447395700655, 51.196904238755522 ], [ 5.87114539810088, 51.198592268714307 ], [ 5.873095808564179, 51.201982601121244 ], [ 5.872727888927973, 51.203400168933236 ], [ 5.879702595715095, 51.211017381593066 ], [ 5.883943044752616, 51.213548189182596 ], [ 5.889326839378802, 51.215507497026202 ], [ 5.891992403695273, 51.214079919282902 ], [ 5.894312391569207, 51.216052263705251 ], [ 5.901947479592788, 51.213753048736244 ], [ 5.908049850574658, 51.211460208994872 ], [ 5.909182693356233, 51.210039093554549 ], [ 5.906833489919372, 51.205518315938868 ], [ 5.914148356263018, 51.208883857731486 ], [ 5.91795178949793, 51.20660089556474 ], [ 5.924814941457011, 51.204020485750739 ], [ 5.928637499416538, 51.20343632443808 ], [ 5.938217282887974, 51.203957709455807 ], [ 5.94663468093065, 51.203351077683024 ], [ 5.947007228703078, 51.202499661401063 ], [ 5.951201832809577, 51.201063341317976 ], [ 5.962766958865087, 51.207237203834424 ], [ 5.968561460354985, 51.211173270851177 ], [ 5.973984815451731, 51.215960549975762 ], [ 5.97982531573085, 51.223294324892954 ], [ 5.986776363234324, 51.227506800880612 ], [ 5.993308080448315, 51.228888970571056 ], [ 5.997548893719905, 51.230849241049903 ], [ 6.002966189688379, 51.23478559138929 ], [ 6.005694300046077, 51.238169611398739 ], [ 6.00891365633261, 51.249480777661255 ], [ 6.008196970567685, 51.253166315040268 ], [ 6.005969683024627, 51.258559142961104 ], [ 6.005628378222411, 51.261676248105879 ], [ 6.009516284823524, 51.265620426375627 ], [ 6.011131073927982, 51.271559148315824 ], [ 6.008143871121136, 51.277522501385874 ], [ 5.978768991209451, 51.289853491627746 ], [ 5.954726087146878, 51.300168681572032 ], [ 5.90767236309963, 51.313132886005903 ], [ 5.910681462616226, 51.307738484896412 ], [ 5.883898910985591, 51.31550240248572 ], [ 5.877769306394512, 51.316661216956504 ], [ 5.860817387385757, 51.310784127468672 ], [ 5.850642829555277, 51.291567168615451 ], [ 5.84134500087167, 51.282541281073385 ], [ 5.837864839391243, 51.279722767581717 ], [ 5.839379497257825, 51.277734457057768 ], [ 5.833979449847962, 51.274640070590699 ], [ 5.846828547976949, 51.255615276237087 ], [ 5.850287374537834, 51.256451169741133 ], [ 5.854858846344452, 51.253600823926085 ], [ 5.855579187479623, 51.249066640479477 ], [ 5.852071958991519, 51.243416609384091 ], [ 5.849409160395513, 51.245409661814826 ], [ 5.845962529261304, 51.245706516758766 ], [ 5.839821703408154, 51.244880968032938 ], [ 5.83480321499561, 51.241218730420016 ], [ 5.828668648348597, 51.240958980621436 ], [ 5.817562724974821, 51.241850234647487 ], [ 5.807965968507536, 51.240186133913618 ], [ 5.803346600756121, 51.237937123869564 ], [ 5.793756203362936, 51.236838239809927 ], [ 5.791845182482704, 51.237411315946304 ], [ 5.789921666244053, 51.236568382052219 ], [ 5.789899262982313, 51.234019620279113 ], [ 5.783292147615825, 51.223280555478262 ], [ 5.782118469898059, 51.220452505474078 ], [ 5.777514415573449, 51.219618445382871 ], [ 5.774818616098871, 51.217928241716429 ], [ 5.773647985960789, 51.215383301440731 ], [ 5.768280909560116, 51.214834616148124 ], [ 5.761400385295703, 51.216556199638362 ], [ 5.756416348709247, 51.216005732699735 ], [ 5.7518019437582, 51.213754669169028 ], [ 5.751006700125059, 51.210075509130064 ], [ 5.74907613967954, 51.208099109110016 ], [ 5.753286504691398, 51.207802716527219 ], [ 5.754018446646507, 51.203552346480059 ], [ 5.752464176262403, 51.200725201703307 ], [ 5.745899419876943, 51.193665552586623 ], [ 5.746656234045143, 51.192530396918883 ], [ 5.745483392835747, 51.189418774754827 ], [ 5.748921986177808, 51.188558505935802 ], [ 5.753497531806742, 51.186278534290778 ], [ 5.756935739215914, 51.185418028680729 ], [ 5.755780583889496, 51.184572086894519 ], [ 5.767256623877938, 51.183685492590179 ], [ 5.77678237980169, 51.178556252221703 ], [ 5.773672929336869, 51.172902548072734 ], [ 5.779405741838563, 51.172033715914807 ], [ 5.777097727391223, 51.170625463799908 ], [ 5.7694305207493, 51.168951723791565 ], [ 5.77015563324029, 51.16413485668064 ], [ 5.776286811052566, 51.165247294413703 ], [ 5.776652601352369, 51.163263635286249 ], [ 5.779330739615379, 51.16325462260891 ], [ 5.779296878512922, 51.159289870234595 ], [ 5.774667942517787, 51.154774133019878 ], [ 5.776578144062084, 51.154484538034154 ], [ 5.777699208197244, 51.151365520400795 ], [ 5.784981271957471, 51.153040029316237 ], [ 5.786526070338764, 51.154733956078822 ], [ 5.791903808388255, 51.157264181379283 ], [ 5.796494295277897, 51.157248091236418 ], [ 5.802635435954999, 51.15949192320398 ], [ 5.802265677292891, 51.160909271015562 ], [ 5.806109469782063, 51.162877904449317 ], [ 5.81372437056863, 51.158885311412362 ], [ 5.81567413472046, 51.162843007720404 ], [ 5.824139539258772, 51.167909162237287 ], [ 5.826424469013907, 51.166767721494239 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1961\", \"naam\": \"Vijfheerenlanden\", \"code\": \"1961\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.142444786130975, 51.924892118225451 ], [ 5.148256670837951, 51.929435045861169 ], [ 5.147853997239182, 51.931982900281369 ], [ 5.15134721474399, 51.933689071084778 ], [ 5.154052104107615, 51.937375876917557 ], [ 5.163733552015452, 51.947022966710961 ], [ 5.169531245237375, 51.955529382487583 ], [ 5.180377742047648, 51.967442690737677 ], [ 5.172578239012431, 51.969694200974814 ], [ 5.160890364421303, 51.970521861472406 ], [ 5.155042605641766, 51.971643209411681 ], [ 5.14879304566488, 51.975028927159421 ], [ 5.145264662611926, 51.979269488994696 ], [ 5.142482331634506, 51.98945835497468 ], [ 5.140122757082122, 51.993417996323927 ], [ 5.136603177100766, 51.9956760252932 ], [ 5.119432001383494, 51.999885977712857 ], [ 5.112794734175252, 52.001852980198692 ], [ 5.106941689865454, 52.002971927758445 ], [ 5.100316098480924, 52.002955970975165 ], [ 5.090192227889738, 52.00151495054812 ], [ 5.07735861159589, 51.997517302536821 ], [ 5.069968475137127, 51.995515332386482 ], [ 5.066471524650524, 51.994089936190996 ], [ 5.062595391422097, 51.991247468592192 ], [ 5.05949277022436, 51.989256580781529 ], [ 5.050173798272, 51.984982496914149 ], [ 5.045132969705256, 51.98185292077337 ], [ 5.040874086044987, 51.978442244301348 ], [ 5.038959417077694, 51.974188814941002 ], [ 5.03392726868176, 51.97020921862422 ], [ 5.029652298250704, 51.969063563824619 ], [ 5.022248264025032, 51.969607204337649 ], [ 5.01599601807931, 51.972136318905889 ], [ 5.010125422350986, 51.975515882514941 ], [ 5.003092628540367, 51.978041808788994 ], [ 4.998031314693335, 51.977741994072609 ], [ 4.991816492222392, 51.975738975829934 ], [ 4.986001833272529, 51.972604247768906 ], [ 4.975958566955462, 51.963507607288001 ], [ 4.968597055731995, 51.959517028589069 ], [ 4.96548484597448, 51.959222726291742 ], [ 4.958852288661459, 51.960614698696432 ], [ 4.950650788474986, 51.963133234858596 ], [ 4.941686409102289, 51.963949191018948 ], [ 4.93471153350926, 51.960524322388771 ], [ 4.926244332102526, 51.950863063793925 ], [ 4.929364362260426, 51.950308873754366 ], [ 4.93251585071228, 51.946639654647548 ], [ 4.939310915410616, 51.92882486438463 ], [ 4.942023336073799, 51.92996791938878 ], [ 4.945883762324582, 51.933097544289524 ], [ 4.947823868861086, 51.933671186095282 ], [ 4.949399717991366, 51.931694745286009 ], [ 4.956169525395429, 51.915578007021146 ], [ 4.964745664762721, 51.91362681678914 ], [ 4.963997062932997, 51.910509046529882 ], [ 4.968280615203951, 51.909958012079507 ], [ 4.973746459829188, 51.907711852866186 ], [ 4.973453948370874, 51.897232827134751 ], [ 4.974234187273717, 51.896952382004535 ], [ 4.991302291350634, 51.901542138486789 ], [ 4.994794598200086, 51.902403415874005 ], [ 4.996396808426608, 51.897028165643249 ], [ 4.996450923505627, 51.890798186052606 ], [ 4.999617148819747, 51.884295318057745 ], [ 4.99847059226199, 51.882026015235979 ], [ 4.995388200162127, 51.878900692170333 ], [ 4.995024213130862, 51.876067580923447 ], [ 4.996214723593083, 51.873239650899244 ], [ 5.001254556289858, 51.874672263405451 ], [ 5.026847228246917, 51.881833274551788 ], [ 5.025301583233707, 51.880695767930966 ], [ 5.023019922546171, 51.874458554107122 ], [ 5.023040540234392, 51.871909912928501 ], [ 5.021897711367365, 51.869074469477646 ], [ 5.027380806506632, 51.863710787420501 ], [ 5.027033044607039, 51.85861230476457 ], [ 5.035968272859274, 51.858639361611523 ], [ 5.043733727200071, 51.859228703342509 ], [ 5.053072291280833, 51.857273309712468 ], [ 5.058118358913847, 51.857853933634473 ], [ 5.063536764118131, 51.860700882262286 ], [ 5.061970465376342, 51.862395692638763 ], [ 5.0541790934833, 51.865205758128269 ], [ 5.052225831925503, 51.866616151722816 ], [ 5.051818290419647, 51.869163692450016 ], [ 5.054126725516354, 51.87228533993683 ], [ 5.06188454292055, 51.874289398197796 ], [ 5.073545257695968, 51.874037914959445 ], [ 5.080917531019159, 51.875756494907506 ], [ 5.085939500406124, 51.880300493420457 ], [ 5.088609518692666, 51.887953390565869 ], [ 5.092489534221862, 51.889095936020951 ], [ 5.098716850154295, 51.887978633871477 ], [ 5.105708927149401, 51.888845151545098 ], [ 5.112713365106559, 51.887728966593805 ], [ 5.117738187841323, 51.892554785082439 ], [ 5.118493772034508, 51.89623795295978 ], [ 5.116928302982633, 51.897933488933013 ], [ 5.119259598753382, 51.89822201311118 ], [ 5.132385296392687, 51.91495922746509 ], [ 5.136665633047971, 51.91468523823989 ], [ 5.135868689879623, 51.918081776337317 ], [ 5.142444786130975, 51.924892118225451 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1742\", \"naam\": \"Rijssen-Holten\", \"code\": \"1742\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.416547381544047, 52.242067421614067 ], [ 6.426108833701034, 52.248780275545734 ], [ 6.428446639130011, 52.248193306802463 ], [ 6.431647799048161, 52.250996950282875 ], [ 6.429701756632804, 52.251580524261783 ], [ 6.439180193916298, 52.254611585264499 ], [ 6.441578524678874, 52.256572537797886 ], [ 6.447882832018906, 52.257932051960225 ], [ 6.461736827976322, 52.263470669909943 ], [ 6.470855570085583, 52.26763524985563 ], [ 6.471288987689781, 52.269330422483485 ], [ 6.475649708795769, 52.271272669780807 ], [ 6.485142446906171, 52.274583138902322 ], [ 6.517514601684343, 52.283056870678095 ], [ 6.525763933859491, 52.283544063781612 ], [ 6.541420018665718, 52.282259409447057 ], [ 6.553997730664481, 52.283268664981236 ], [ 6.549802746391821, 52.28784111305152 ], [ 6.552333930600523, 52.294612834605438 ], [ 6.553518062241104, 52.294884349256257 ], [ 6.553252134472482, 52.299701261425632 ], [ 6.5511284057656, 52.308501174695635 ], [ 6.548877936102521, 52.312488005617723 ], [ 6.545109033706212, 52.31847201202369 ], [ 6.539541321237061, 52.315694487877046 ], [ 6.536009528053877, 52.31572885717037 ], [ 6.532899369497979, 52.316891802061711 ], [ 6.527950483447244, 52.322886666346761 ], [ 6.524883144072569, 52.325748125137643 ], [ 6.524054619027289, 52.324056949304307 ], [ 6.518174371904125, 52.324396526609853 ], [ 6.517803502099907, 52.325249644352134 ], [ 6.499305897020639, 52.323442725723552 ], [ 6.468367587475066, 52.326561531261021 ], [ 6.460752126585694, 52.320117585679064 ], [ 6.454878703988246, 52.320737142350261 ], [ 6.429853254074388, 52.324925078279193 ], [ 6.422016151501631, 52.325560293487499 ], [ 6.401939255752279, 52.323185608713267 ], [ 6.375970932189646, 52.320573754424956 ], [ 6.355898707360811, 52.318191240189641 ], [ 6.349539534761877, 52.314561773498589 ], [ 6.341176833103516, 52.308965862139637 ], [ 6.326502976621794, 52.301720577460024 ], [ 6.328811151665248, 52.281029720667725 ], [ 6.343578282597503, 52.274681033559368 ], [ 6.354831474644002, 52.269208862955558 ], [ 6.370704263608077, 52.260015787607607 ], [ 6.373074773824248, 52.260845591910794 ], [ 6.376558276624806, 52.258834150781368 ], [ 6.377291732060779, 52.256562498507037 ], [ 6.374933945803475, 52.256299049388943 ], [ 6.377247621727543, 52.254580548832692 ], [ 6.376413457354801, 52.252322029181528 ], [ 6.381760513681949, 52.24604696860748 ], [ 6.383283441039306, 52.244051809193351 ], [ 6.390695812574984, 52.24257311013772 ], [ 6.398942738565429, 52.243352315585312 ], [ 6.411081928282545, 52.242964504705697 ], [ 6.416547381544047, 52.242067421614067 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0986\", \"naam\": \"Voerendaal\", \"code\": \"0986\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.954852849095341, 50.84590274506656 ], [ 5.953360690345926, 50.848175723001226 ], [ 5.954556117425457, 50.852701182461196 ], [ 5.960664422006257, 50.854936704563549 ], [ 5.96141044852389, 50.853800170743035 ], [ 5.966368475149383, 50.855191477234825 ], [ 5.966009671324776, 50.856892521057127 ], [ 5.969469282144709, 50.859990435711225 ], [ 5.964609505364756, 50.866528588504458 ], [ 5.957087075757006, 50.873079686084779 ], [ 5.946201940480835, 50.88474432757404 ], [ 5.940545142411549, 50.888736434766059 ], [ 5.932268314998104, 50.896422334265793 ], [ 5.928510936450089, 50.900404880455866 ], [ 5.923231142149033, 50.904394366728404 ], [ 5.920551716603041, 50.90299071433607 ], [ 5.917524500720532, 50.904420666692268 ], [ 5.913320298564758, 50.902740620023977 ], [ 5.914829094910112, 50.901600920181508 ], [ 5.901448263681051, 50.895713832107013 ], [ 5.903714688452253, 50.894287700015305 ], [ 5.890337383972104, 50.888399322920769 ], [ 5.894109487232376, 50.88555078634532 ], [ 5.88686258609753, 50.883599876443789 ], [ 5.885727866823244, 50.884171186154042 ], [ 5.880385862821198, 50.882494851605962 ], [ 5.873930294816863, 50.883371819588703 ], [ 5.867842996151568, 50.883114072273024 ], [ 5.86174995672943, 50.88228961639571 ], [ 5.863979027266231, 50.87718273972358 ], [ 5.870018263708172, 50.872909591071569 ], [ 5.870754972456441, 50.870640863907134 ], [ 5.869216610943329, 50.868948050673843 ], [ 5.871485685191368, 50.867805744915891 ], [ 5.873350725814157, 50.864399445091472 ], [ 5.871435336338142, 50.862991452726192 ], [ 5.871025643339362, 50.860161107625096 ], [ 5.86908987366501, 50.856770720784318 ], [ 5.874416584481594, 50.857314806430182 ], [ 5.875535857602404, 50.855327641443303 ], [ 5.881215338755556, 50.853321067520625 ], [ 5.886112960216547, 50.849335146926798 ], [ 5.887988430339646, 50.847061387213685 ], [ 5.891361964706337, 50.842798628385424 ], [ 5.898970109672831, 50.84361481142821 ], [ 5.903171575019554, 50.845578577931128 ], [ 5.916888987569725, 50.848915012985046 ], [ 5.924868713412155, 50.848878172473363 ], [ 5.930095603795201, 50.840923946646512 ], [ 5.93312162634148, 50.839776865642122 ], [ 5.937690655187159, 50.840604815888149 ], [ 5.94685998460101, 50.844808890845087 ], [ 5.951419407335028, 50.844786725335027 ], [ 5.954852849095341, 50.84590274506656 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1696\", \"naam\": \"Wijdemeren\", \"code\": \"1696\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.115221626236105, 52.179978468628896 ], [ 5.124216226665172, 52.180848369599012 ], [ 5.121839828504303, 52.18565702866519 ], [ 5.132389762833902, 52.188512011621469 ], [ 5.140973170067863, 52.193344185409892 ], [ 5.145260195645719, 52.19675113567267 ], [ 5.1456316928499, 52.200433158654313 ], [ 5.137743740462893, 52.210894193162559 ], [ 5.133808836774517, 52.214283900379606 ], [ 5.122425857137002, 52.218789711965393 ], [ 5.123194017717442, 52.221339989495711 ], [ 5.129852079971299, 52.221354678514899 ], [ 5.127875701519734, 52.224465260250156 ], [ 5.140409411828613, 52.224492102030084 ], [ 5.141969894054061, 52.225628041750646 ], [ 5.14150794935756, 52.238369839755599 ], [ 5.142265082612538, 52.243185334020474 ], [ 5.140291739070736, 52.24572977425354 ], [ 5.139462328502996, 52.253940011937161 ], [ 5.136718763807447, 52.253934230836187 ], [ 5.136293316674988, 52.259879922678536 ], [ 5.127279201681926, 52.259577278337396 ], [ 5.125707926309579, 52.260140155681086 ], [ 5.122129413443406, 52.268627313382169 ], [ 5.118963865416535, 52.273434074341509 ], [ 5.108362729730633, 52.275674915788599 ], [ 5.1032542168349, 52.277361782342794 ], [ 5.102061454090977, 52.279907445402294 ], [ 5.087539889464546, 52.281570562449303 ], [ 5.084417868295393, 52.279297246785823 ], [ 5.076976706877419, 52.277862106927543 ], [ 5.06481605565548, 52.278395920155994 ], [ 5.064407467597894, 52.280660171282342 ], [ 5.06280987377356, 52.284620187623631 ], [ 5.060452476749551, 52.285180038711744 ], [ 5.051845188683896, 52.282324237463783 ], [ 5.049894997181531, 52.280902836917669 ], [ 5.048748640214919, 52.276935168160108 ], [ 5.042075708235134, 52.277765393045435 ], [ 5.033466535119532, 52.275474581322307 ], [ 5.030744351060189, 52.27263469158224 ], [ 5.028396321944628, 52.272061246125077 ], [ 5.022900048847233, 52.272893953313485 ], [ 5.024888226412041, 52.269502002540172 ], [ 5.027648744575612, 52.267528227659966 ], [ 5.027288752947362, 52.263562725092029 ], [ 5.032013325572689, 52.261028466387842 ], [ 5.032810847725482, 52.259331827101001 ], [ 5.031261033877512, 52.257061792371736 ], [ 5.034430392834071, 52.25282370752273 ], [ 5.037169415548407, 52.253398195629174 ], [ 5.041062298221537, 52.256807727581474 ], [ 5.043424994433755, 52.255398761507415 ], [ 5.045031962705914, 52.250306321494193 ], [ 5.046610406145472, 52.24889501791688 ], [ 5.045867868320565, 52.243512594318879 ], [ 5.056104224739136, 52.237028739311626 ], [ 5.057683940544739, 52.235334116407088 ], [ 5.040487881310535, 52.22990461610258 ], [ 5.042455263846257, 52.228777678320377 ], [ 5.038566935452538, 52.225085009532194 ], [ 5.036615215004575, 52.224229712243847 ], [ 5.035885450959406, 52.217431364922042 ], [ 5.036697629611904, 52.21375251029766 ], [ 5.034352625719691, 52.213179179682278 ], [ 5.03359643101955, 52.209778822575572 ], [ 5.036339484277244, 52.209503827930682 ], [ 5.035198393131761, 52.205252810252453 ], [ 5.037549653701869, 52.204976619527557 ], [ 5.036788901806059, 52.202142614820644 ], [ 5.025811424529054, 52.204091760062099 ], [ 5.022679457108599, 52.204082134893959 ], [ 5.022700293119993, 52.201533622088348 ], [ 5.026225847653906, 52.201261275509125 ], [ 5.030943866396219, 52.198727024764302 ], [ 5.037211499857889, 52.198179415508406 ], [ 5.038016562925193, 52.195350045361586 ], [ 5.03646647397665, 52.193363223332156 ], [ 5.034952305677771, 52.186845675074359 ], [ 5.03262674572042, 52.184006954611561 ], [ 5.041629303330397, 52.183750471394404 ], [ 5.042025003365274, 52.183185277019128 ], [ 5.044464249598806, 52.171298982076983 ], [ 5.046461372676911, 52.165924408073934 ], [ 5.082394202772361, 52.17395159609439 ], [ 5.115221626236105, 52.179978468628896 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0273\", \"naam\": \"Putten\", \"code\": \"0273\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.63344643134822, 52.208068518985698 ], [ 5.665644263843668, 52.222721951688847 ], [ 5.670743087650619, 52.223842504595709 ], [ 5.681327581598556, 52.225232467521884 ], [ 5.683779575636257, 52.240517666494256 ], [ 5.681051808546099, 52.242789866819997 ], [ 5.676399447910457, 52.25044700113645 ], [ 5.667809669026631, 52.255564817916785 ], [ 5.662334612321419, 52.257559902070305 ], [ 5.656874521204523, 52.262103236942622 ], [ 5.654137256648499, 52.263242140200823 ], [ 5.648281908527481, 52.267502792821944 ], [ 5.642804506052844, 52.269496969063056 ], [ 5.642026850090576, 52.270631331568111 ], [ 5.636940884096628, 52.272624388631172 ], [ 5.620881047088465, 52.275772128288651 ], [ 5.618131717911966, 52.274928026158328 ], [ 5.611077777200652, 52.275791118460113 ], [ 5.61069276705705, 52.27720769701439 ], [ 5.599327358987131, 52.278644506369211 ], [ 5.591481624312282, 52.278091998820273 ], [ 5.587563937710414, 52.278948219344791 ], [ 5.576205768308179, 52.282364976464947 ], [ 5.566412447101706, 52.285211935594916 ], [ 5.555435786766107, 52.286643927750823 ], [ 5.551526081503141, 52.290047458459334 ], [ 5.545261041602391, 52.293170864374467 ], [ 5.536182413699966, 52.276475701529243 ], [ 5.53342532677907, 52.272797946047 ], [ 5.522047372088008, 52.270546135665548 ], [ 5.476940796231787, 52.262377139931232 ], [ 5.478498958696802, 52.257562054835361 ], [ 5.474185598614834, 52.256715804749831 ], [ 5.478088443881767, 52.248500921596069 ], [ 5.483554674371236, 52.239151945047844 ], [ 5.49020757180879, 52.235748267348086 ], [ 5.497261015871541, 52.236308238175276 ], [ 5.499213519716794, 52.233757857908813 ], [ 5.506259178857735, 52.231485584041003 ], [ 5.510180518997489, 52.232897418165123 ], [ 5.510187567804242, 52.235445953700946 ], [ 5.515277409432483, 52.234307851381068 ], [ 5.514876698764598, 52.231193398984217 ], [ 5.519575890269408, 52.230621875641795 ], [ 5.526605813281371, 52.223817652310011 ], [ 5.533248480283969, 52.21899568714641 ], [ 5.534424314091106, 52.219277397662495 ], [ 5.549640178418955, 52.203399747717647 ], [ 5.55002753072978, 52.202266520580991 ], [ 5.606022288133362, 52.204724490846033 ], [ 5.63344643134822, 52.208068518985698 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0269\", \"naam\": \"Oldebroek\", \"code\": \"0269\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.951048422416405, 52.398403651686849 ], [ 5.951867313809118, 52.400948260982808 ], [ 5.966872838898771, 52.405689596936639 ], [ 5.975596168718827, 52.411026758860302 ], [ 5.98712883852037, 52.420313428456971 ], [ 5.987533753447778, 52.421160879298711 ], [ 6.006627033275593, 52.436070432742248 ], [ 6.017762988922216, 52.444223524296227 ], [ 6.022486255369571, 52.44419829050063 ], [ 6.030908529280915, 52.454913169824167 ], [ 6.03494921410644, 52.461970311216291 ], [ 6.033796911951048, 52.463958767146018 ], [ 6.037038716116812, 52.470170686762295 ], [ 6.035915385574323, 52.474141159497492 ], [ 6.031665376838019, 52.47982764867583 ], [ 6.025021826775754, 52.483544723918918 ], [ 6.019904456426315, 52.483855311382499 ], [ 6.016728581808404, 52.482173232061655 ], [ 6.018336710764606, 52.484429997315324 ], [ 6.018799482869136, 52.489241326040641 ], [ 6.01217346588837, 52.494373389668745 ], [ 6.00670040529151, 52.497516910457769 ], [ 6.000824587708584, 52.500095932451977 ], [ 5.991674912925353, 52.493913341309089 ], [ 5.982141429882196, 52.488298298495316 ], [ 5.965437728314331, 52.476488085453347 ], [ 5.958052448900925, 52.4841692938409 ], [ 5.952934526214579, 52.484476991800072 ], [ 5.949775570252713, 52.483925699460784 ], [ 5.937474531595059, 52.476904366467146 ], [ 5.935512050532965, 52.477479787168434 ], [ 5.925622976041232, 52.47412716555516 ], [ 5.919066771178559, 52.485766431786303 ], [ 5.909755223102889, 52.49798379295855 ], [ 5.903131755735449, 52.504525499737838 ], [ 5.886721599195813, 52.517337962385248 ], [ 5.882798026792055, 52.519053379012043 ], [ 5.878883612758242, 52.52161810389704 ], [ 5.876126626105446, 52.521912659591351 ], [ 5.864257641243507, 52.518279924129502 ], [ 5.863022926428791, 52.513471177277864 ], [ 5.856570713672651, 52.499905224254633 ], [ 5.851005582777193, 52.495396561616687 ], [ 5.84774377660135, 52.484932335965269 ], [ 5.845726870396903, 52.480409578835605 ], [ 5.845703365022651, 52.478144380079456 ], [ 5.840115971233163, 52.471086827588636 ], [ 5.844830493606135, 52.46993606943137 ], [ 5.848345545201507, 52.467090824620563 ], [ 5.858930282143415, 52.462518565619973 ], [ 5.871478407002079, 52.457654179526045 ], [ 5.872634737770433, 52.455384143098662 ], [ 5.877727875989198, 52.453097860327766 ], [ 5.871369891866923, 52.447743907548492 ], [ 5.873722417674945, 52.446884778743971 ], [ 5.868974093863889, 52.444638874486714 ], [ 5.870526906302808, 52.442650402439597 ], [ 5.872104409121202, 52.44292711951082 ], [ 5.876390193338558, 52.438945201231434 ], [ 5.888859092855697, 52.427849624130644 ], [ 5.893161333966189, 52.425566000419153 ], [ 5.899784339378751, 52.419874207274397 ], [ 5.916225724626775, 52.413005906435423 ], [ 5.905945947019975, 52.408520725557551 ], [ 5.909055597836462, 52.405392225897359 ], [ 5.92422473840556, 52.391449180613265 ], [ 5.932508600411857, 52.393676651703544 ], [ 5.942376662920132, 52.396745629837042 ], [ 5.951048422416405, 52.398403651686849 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1724\", \"naam\": \"Bergeijk\", \"code\": \"1724\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.417456962011705, 51.262183937866318 ], [ 5.403657791738105, 51.273514771434677 ], [ 5.400973328511754, 51.274081525963851 ], [ 5.397906009510282, 51.277763466029683 ], [ 5.387933724242962, 51.285127194811373 ], [ 5.397141712639073, 51.290507576359907 ], [ 5.39253817970416, 51.293906294915516 ], [ 5.394840707793914, 51.296171769707165 ], [ 5.393306336311225, 51.299570271623004 ], [ 5.395226140468052, 51.305800567977307 ], [ 5.394075249640368, 51.308915850406962 ], [ 5.395610673663328, 51.309765349351032 ], [ 5.397530829898137, 51.31429640165652 ], [ 5.400601468652326, 51.313446482713125 ], [ 5.410968940622054, 51.319958425968785 ], [ 5.412888805139402, 51.320524416591653 ], [ 5.413655478259967, 51.318541840273134 ], [ 5.416343301459541, 51.319390796415327 ], [ 5.419797423568314, 51.317973873239218 ], [ 5.424015885933364, 51.312591799023949 ], [ 5.425934639061436, 51.312024772601575 ], [ 5.434007832511867, 51.324199419710489 ], [ 5.424414547212826, 51.330716503649292 ], [ 5.422880105016234, 51.332699388555483 ], [ 5.42288365878423, 51.337230592654386 ], [ 5.421349994728829, 51.340629457779947 ], [ 5.424809780255178, 51.344309990198987 ], [ 5.422892324503622, 51.348275398560524 ], [ 5.42327984123858, 51.352523280379266 ], [ 5.421744402343818, 51.354222948336606 ], [ 5.419826467823638, 51.358471504302003 ], [ 5.419831144829251, 51.364985101848951 ], [ 5.420987165112515, 51.369232768890349 ], [ 5.418682993207696, 51.37178221577026 ], [ 5.423297601749123, 51.374896068971502 ], [ 5.425607654615315, 51.379426523053127 ], [ 5.421766582322775, 51.383392526127075 ], [ 5.417921201011764, 51.381977610247219 ], [ 5.413309177221572, 51.383961138430756 ], [ 5.408693796000343, 51.379714092702329 ], [ 5.396392864252346, 51.380848527821499 ], [ 5.392932636949855, 51.377450358111219 ], [ 5.389088675637642, 51.376600890040962 ], [ 5.388319873489546, 51.375468102155175 ], [ 5.382554489454196, 51.372919225264717 ], [ 5.378327242066725, 51.369520588474025 ], [ 5.375637175379504, 51.368670756888704 ], [ 5.371409382324035, 51.369519866092432 ], [ 5.364108477353708, 51.366969859702337 ], [ 5.355656902474913, 51.362436691789831 ], [ 5.352583202771608, 51.361869423592395 ], [ 5.346054322340096, 51.357902510348232 ], [ 5.342601232518411, 51.352803643554751 ], [ 5.346831752115557, 51.347707578080424 ], [ 5.341841268648722, 51.344307346605859 ], [ 5.347224778109025, 51.337512504887648 ], [ 5.332251678328671, 51.333258419475747 ], [ 5.324187639047782, 51.332971146785361 ], [ 5.32112039630509, 51.329571046122936 ], [ 5.323041532868158, 51.32872251624363 ], [ 5.316522134773682, 51.323337941769715 ], [ 5.308077966791505, 51.321916519660313 ], [ 5.292344669903573, 51.318223180442878 ], [ 5.263549587445499, 51.319329007330516 ], [ 5.260868519031168, 51.317060526834595 ], [ 5.259341683196024, 51.31394365312898 ], [ 5.259348799794952, 51.311394852980122 ], [ 5.24400155747092, 51.309394603785535 ], [ 5.24247702170819, 51.305994308548847 ], [ 5.240942763534624, 51.305709192333673 ], [ 5.242095923146833, 51.305144231557449 ], [ 5.231436681180759, 51.279642359141512 ], [ 5.226106531326852, 51.268307050384969 ], [ 5.238017287283405, 51.261242875888399 ], [ 5.263307432802186, 51.26693654812221 ], [ 5.296295988432212, 51.261586126697559 ], [ 5.315847288318276, 51.263582141187484 ], [ 5.336553460738617, 51.263026565641425 ], [ 5.342685621455264, 51.26586107644431 ], [ 5.343449297136081, 51.269259778620743 ], [ 5.346513908268996, 51.2729425004311 ], [ 5.346127863305465, 51.27577437591912 ], [ 5.395986130974502, 51.267001989664791 ], [ 5.417456962011705, 51.262183937866318 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0703\", \"naam\": \"Reimerswaal\", \"code\": \"0703\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.277428685898373, 51.376133170967982 ], [ 4.273797131477733, 51.383179096194688 ], [ 4.268408851891107, 51.383410727112903 ], [ 4.266410451137597, 51.386506978341394 ], [ 4.268675268401563, 51.388228066487997 ], [ 4.269145806443237, 51.400411141874635 ], [ 4.264203876885643, 51.41367509995117 ], [ 4.263749481102063, 51.416502946060476 ], [ 4.266743283226829, 51.419930412031 ], [ 4.275851650208735, 51.425115548448325 ], [ 4.265486234882636, 51.439743865414172 ], [ 4.230360834695537, 51.488964847354218 ], [ 4.133894320552971, 51.479472333826607 ], [ 4.112341275791578, 51.506145556279215 ], [ 4.060582482332032, 51.509534252949003 ], [ 4.067412490674195, 51.52660539285872 ], [ 4.059651483211596, 51.528216825943282 ], [ 4.055737595423576, 51.530154888377623 ], [ 4.053448931320432, 51.529279091745167 ], [ 4.047589962270591, 51.53176112048984 ], [ 4.045284655329611, 51.531451432617501 ], [ 4.029356339651081, 51.535232610924631 ], [ 4.016176335106332, 51.53734453248282 ], [ 4.013065411236584, 51.538157678709361 ], [ 4.013681617527658, 51.517772243234667 ], [ 4.017313110808949, 51.512433489378537 ], [ 4.015043170961009, 51.510990681671437 ], [ 4.014349241562653, 51.508433438117692 ], [ 4.004817315086735, 51.504922201804355 ], [ 4.005092643888157, 51.495862015423306 ], [ 4.006876863540828, 51.462461631098051 ], [ 4.007381994925304, 51.458502338739386 ], [ 4.003575151400808, 51.457041094681905 ], [ 4.000119021013859, 51.456716828800225 ], [ 3.995953550900269, 51.454401367156542 ], [ 3.991472981465186, 51.449816110013316 ], [ 3.987545584141987, 51.452318172447526 ], [ 3.973180143040668, 51.456110255456579 ], [ 3.969321721686375, 51.456346669735396 ], [ 3.955874780765857, 51.455332789035928 ], [ 3.951667084079295, 51.454431389600956 ], [ 3.942133342386597, 51.451481338316206 ], [ 3.937586419901993, 51.449159037995557 ], [ 3.935340203753214, 51.447148447024922 ], [ 3.963078586843509, 51.421999092492008 ], [ 4.019702744219191, 51.420127683826507 ], [ 4.047912263235291, 51.389865973818651 ], [ 4.114793323356137, 51.390898406552438 ], [ 4.102392412275411, 51.366971076482578 ], [ 4.118474903310498, 51.369129886698353 ], [ 4.130010117649221, 51.368971669942574 ], [ 4.140353863626175, 51.37021571169727 ], [ 4.146463526547524, 51.371697058538608 ], [ 4.162850573925056, 51.376968456808143 ], [ 4.168969435071177, 51.378165480985963 ], [ 4.175834754686007, 51.380219621496529 ], [ 4.181155756710953, 51.382540610654836 ], [ 4.189190305511246, 51.384039595035368 ], [ 4.197188470724932, 51.386953777896132 ], [ 4.206791302809409, 51.38733463794469 ], [ 4.20914161697289, 51.385659063609218 ], [ 4.211224105108788, 51.37944914148985 ], [ 4.214872270193324, 51.372122043738067 ], [ 4.220911361792417, 51.36142009286268 ], [ 4.22915174201315, 51.35470488856086 ], [ 4.236962842692232, 51.349684224392206 ], [ 4.242233748970288, 51.353984504759275 ], [ 4.226717434112977, 51.35977871231006 ], [ 4.221984473982562, 51.364546301172496 ], [ 4.217518723668916, 51.373847983462205 ], [ 4.277428685898373, 51.376133170967982 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0059\", \"naam\": \"Achtkarspelen\", \"code\": \"0059\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.176600877338706, 53.159631132657239 ], [ 6.177130059542566, 53.16670556962562 ], [ 6.181204188070025, 53.170642287136346 ], [ 6.184109679912562, 53.176285333831437 ], [ 6.188232506507243, 53.182769524327789 ], [ 6.18985467826532, 53.183891139263125 ], [ 6.192751654164835, 53.188967788927513 ], [ 6.19560170180762, 53.191496646723358 ], [ 6.199236932311649, 53.193170778396833 ], [ 6.199733028103593, 53.198263482174994 ], [ 6.204164540371641, 53.19964895336696 ], [ 6.209375729486305, 53.199896462082158 ], [ 6.214662799609077, 53.204106824678959 ], [ 6.219512231940358, 53.206338191160782 ], [ 6.222397798116677, 53.210564849227872 ], [ 6.224828497711872, 53.211963473147271 ], [ 6.224471794150435, 53.214230873626512 ], [ 6.230151669580543, 53.217871581144621 ], [ 6.228977390273231, 53.219295392435093 ], [ 6.230245523270401, 53.22268384866463 ], [ 6.22549252343653, 53.225548275364453 ], [ 6.226321375427943, 53.226958045770587 ], [ 6.224378205656409, 53.230085853642841 ], [ 6.220409136776647, 53.23209525958994 ], [ 6.217993771706617, 53.231545780221204 ], [ 6.217224914926245, 53.233249770889394 ], [ 6.214435871072362, 53.234118361815099 ], [ 6.215692448992057, 53.236940808786372 ], [ 6.220112069366394, 53.237476443212714 ], [ 6.224943577945163, 53.238575264249874 ], [ 6.217794369893195, 53.242022282237023 ], [ 6.228282298368033, 53.245346585255007 ], [ 6.231082846754139, 53.245043819378878 ], [ 6.231923331444139, 53.247019684836765 ], [ 6.229946529301206, 53.248449132495431 ], [ 6.229985197940429, 53.250430635268522 ], [ 6.234005453319854, 53.25096856647292 ], [ 6.235252686329627, 53.253224646787068 ], [ 6.231688501685767, 53.255514651664264 ], [ 6.232111621110183, 53.256644115003986 ], [ 6.224103119077229, 53.257266424013054 ], [ 6.218939457201461, 53.259850289901344 ], [ 6.217037818318127, 53.26524251750547 ], [ 6.206642629665472, 53.267012553924431 ], [ 6.193861212247994, 53.269930168179414 ], [ 6.190626064984277, 53.26853631792391 ], [ 6.189048011234353, 53.269962402289082 ], [ 6.185786828502197, 53.267153059004194 ], [ 6.190531230355732, 53.263441012333864 ], [ 6.180859420577243, 53.260957357310403 ], [ 6.179218997303596, 53.258986432971774 ], [ 6.176448225414644, 53.260986433404852 ], [ 6.171245268185598, 53.261586735314786 ], [ 6.167270831053423, 53.263594373021014 ], [ 6.164067579775645, 53.263898246941061 ], [ 6.160422669270802, 53.261940022868281 ], [ 6.158848916072269, 53.263648789450876 ], [ 6.154803236281015, 53.261692970694263 ], [ 6.153610208309195, 53.262266805563989 ], [ 6.148356861969948, 53.260035365761759 ], [ 6.14514876910135, 53.260055659776199 ], [ 6.141212810097257, 53.2643270408646 ], [ 6.129944372795374, 53.262132420239325 ], [ 6.115464198034432, 53.259673162846269 ], [ 6.110656812334843, 53.259985331176736 ], [ 6.105396537435362, 53.257185850994119 ], [ 6.100561290745221, 53.255799146841127 ], [ 6.074376130798395, 53.248308019724945 ], [ 6.065538360258552, 53.247225860867978 ], [ 6.043829519855792, 53.243383092259158 ], [ 6.039006330141721, 53.242560062796223 ], [ 6.031385818914745, 53.242318096589855 ], [ 6.027765526367184, 53.241488154819187 ], [ 6.022976184435058, 53.24292914538988 ], [ 6.019740272885929, 53.240964504243124 ], [ 6.02404103655788, 53.2335810104167 ], [ 6.027196912356383, 53.230166945386671 ], [ 6.030394424941531, 53.229583637113777 ], [ 6.086268186625502, 53.215115722836266 ], [ 6.080227424840253, 53.213169001601202 ], [ 6.081797913917466, 53.211178151687754 ], [ 6.078584353678696, 53.210630494824315 ], [ 6.079367342395081, 53.209493540646136 ], [ 6.08298138040159, 53.210038854460514 ], [ 6.084155658533194, 53.208333378100725 ], [ 6.078520984856501, 53.206667321046382 ], [ 6.08165241510943, 53.202119467768973 ], [ 6.08239421641112, 53.198434730444788 ], [ 6.085128811849665, 53.194172181089236 ], [ 6.087913306264903, 53.193023499149668 ], [ 6.097038757683306, 53.187873818973806 ], [ 6.100199540876836, 53.185307055564252 ], [ 6.104909495778998, 53.179616698143903 ], [ 6.108855540842681, 53.176195651179796 ], [ 6.109269946806283, 53.177042497409701 ], [ 6.114454103969639, 53.175878710306428 ], [ 6.104849757334415, 53.151871826661775 ], [ 6.108049860107892, 53.151852622500776 ], [ 6.112421556369964, 53.150127552603855 ], [ 6.119211919594868, 53.149520038222278 ], [ 6.118749777000853, 53.145842344111969 ], [ 6.121535074464414, 53.144975958693301 ], [ 6.148160283825693, 53.157833238807939 ], [ 6.152035940304016, 53.150730647408786 ], [ 6.176600877338706, 53.159631132657239 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0398\", \"naam\": \"Heerhugowaard\", \"code\": \"0398\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.899823673700346, 52.697475363172366 ], [ 4.898532094979835, 52.706813915071457 ], [ 4.89098956262691, 52.708481594671298 ], [ 4.877087522944978, 52.712103744182642 ], [ 4.871889527481679, 52.716328556802026 ], [ 4.861141911032292, 52.720811897834572 ], [ 4.857942471265437, 52.72334603571624 ], [ 4.851222389935075, 52.722183391438335 ], [ 4.847681833735979, 52.72018537596427 ], [ 4.82632593161286, 52.717538367789125 ], [ 4.831877917380665, 52.716998098480829 ], [ 4.833897437328186, 52.713892881384758 ], [ 4.824421854612559, 52.711583285511523 ], [ 4.819306751970043, 52.709010663881628 ], [ 4.821704515687697, 52.707323190144074 ], [ 4.824131134543022, 52.7033706187636 ], [ 4.825405840702831, 52.696581077500682 ], [ 4.826669313105318, 52.690640906936274 ], [ 4.825968091983303, 52.683558866800581 ], [ 4.827195034688988, 52.680450000073513 ], [ 4.82724553482336, 52.67648613782174 ], [ 4.825303285142506, 52.673645478516498 ], [ 4.822152540559498, 52.67249795454368 ], [ 4.810271840295074, 52.673290387527395 ], [ 4.807147665551652, 52.670160536799351 ], [ 4.801646552478159, 52.667302075336039 ], [ 4.799713927897636, 52.663894728902939 ], [ 4.800554180146363, 52.660217903294118 ], [ 4.799823604241943, 52.655683865462557 ], [ 4.798271934110117, 52.653410974096204 ], [ 4.791629297090578, 52.647431688821861 ], [ 4.785414813211438, 52.639188956363739 ], [ 4.791748091635212, 52.638654533314863 ], [ 4.806435716126725, 52.634196724209076 ], [ 4.808811279903794, 52.633925150563073 ], [ 4.823836511939383, 52.633714139240844 ], [ 4.830175709003757, 52.632611394231517 ], [ 4.83446349910857, 52.63744500347007 ], [ 4.835585630292847, 52.642546959244221 ], [ 4.838702817831877, 52.646242355605885 ], [ 4.842660494712555, 52.645977391324877 ], [ 4.847447157644238, 52.642601389265614 ], [ 4.851425140206092, 52.640637313987931 ], [ 4.860535542701065, 52.63926225256143 ], [ 4.863745537866986, 52.635312296980686 ], [ 4.873243150985652, 52.634504272749417 ], [ 4.876389228627009, 52.63593358989511 ], [ 4.877140504384774, 52.639334636699161 ], [ 4.875522863033509, 52.642442354928988 ], [ 4.865158889378803, 52.649476096702166 ], [ 4.862745700017782, 52.65286329371304 ], [ 4.863097322652568, 52.656545805537093 ], [ 4.866610005863117, 52.66052533948406 ], [ 4.868145409744058, 52.664496152936643 ], [ 4.872041532501601, 52.669609786570206 ], [ 4.874336040269819, 52.676415285859136 ], [ 4.879434230257002, 52.680401236630026 ], [ 4.876199290833904, 52.68633351018282 ], [ 4.888816096514859, 52.690634238104252 ], [ 4.891535728459317, 52.695175958736371 ], [ 4.899823673700346, 52.697475363172366 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0851\", \"naam\": \"Steenbergen\", \"code\": \"0851\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.44411775393484, 51.569053950461125 ], [ 4.438958188731189, 51.575809313709939 ], [ 4.433814928041275, 51.581714949617911 ], [ 4.431004994049772, 51.586789829703356 ], [ 4.429329007442906, 51.59300678682537 ], [ 4.427919015480132, 51.60489014560661 ], [ 4.426616251608776, 51.611676544601977 ], [ 4.431650513598187, 51.611151352011802 ], [ 4.431977191980756, 51.61398613823966 ], [ 4.433867280353724, 51.61598403830736 ], [ 4.435816955861124, 51.615150275306632 ], [ 4.437707262065184, 51.617148113664626 ], [ 4.429872045460579, 51.622182070603067 ], [ 4.427499558663115, 51.624711539081034 ], [ 4.425078719427153, 51.629506256127549 ], [ 4.420797205366735, 51.630887031763592 ], [ 4.413447713659952, 51.631109313758415 ], [ 4.408773074333163, 51.632769592111003 ], [ 4.399348691670055, 51.639487507960311 ], [ 4.397341620362513, 51.642869096742075 ], [ 4.394991038714065, 51.644265253935799 ], [ 4.3883937487327, 51.645341987566326 ], [ 4.380928544768549, 51.650659083443436 ], [ 4.376263340644536, 51.651751734317621 ], [ 4.372700862760641, 51.655402679430843 ], [ 4.361700148633959, 51.662953577060129 ], [ 4.354416236946872, 51.660057410292211 ], [ 4.344819500643925, 51.656856997280556 ], [ 4.332517354102124, 51.653631442237554 ], [ 4.326356992395253, 51.652442913252536 ], [ 4.311317252306011, 51.650606344626219 ], [ 4.299405838232567, 51.647380872434347 ], [ 4.275132050747392, 51.643754140934277 ], [ 4.251113836734125, 51.645505971367108 ], [ 4.242952265679786, 51.647125768820239 ], [ 4.238249444215466, 51.634334856424147 ], [ 4.22789347583708, 51.631117300125119 ], [ 4.217137913905015, 51.628461260362478 ], [ 4.207185967905379, 51.62467944887262 ], [ 4.199204729068525, 51.619500702645659 ], [ 4.195073735650412, 51.614927141293812 ], [ 4.191003329626973, 51.608088274223299 ], [ 4.190031372295834, 51.600997789277137 ], [ 4.192148966285748, 51.593938904328525 ], [ 4.195758238810449, 51.588877743198069 ], [ 4.200888784492108, 51.584681584264075 ], [ 4.226491073262423, 51.565113093692702 ], [ 4.231237412782981, 51.560628596078658 ], [ 4.235268586605129, 51.553871097394392 ], [ 4.236126342513478, 51.550480898935042 ], [ 4.239591326490776, 51.550798197776757 ], [ 4.242849477446296, 51.559326762167927 ], [ 4.243142609049221, 51.563011496162254 ], [ 4.251827159298693, 51.570743112545074 ], [ 4.267721678974828, 51.568064214607297 ], [ 4.267026637136753, 51.5649421448772 ], [ 4.273215244220541, 51.564434849712349 ], [ 4.298828342711635, 51.558728564715956 ], [ 4.296242895216232, 51.553889750272255 ], [ 4.317916042570204, 51.551257878727753 ], [ 4.354285320376157, 51.547053524181301 ], [ 4.375193011648029, 51.543837868766602 ], [ 4.411295714238769, 51.551508516923946 ], [ 4.42671057038072, 51.552485859248264 ], [ 4.428959833881049, 51.555619668825486 ], [ 4.438588504703529, 51.556547852612539 ], [ 4.441248273257585, 51.558551898750984 ], [ 4.441837304189143, 51.567336256155365 ], [ 4.44411775393484, 51.569053950461125 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0798\", \"naam\": \"Hilvarenbeek\", \"code\": \"0798\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.224454987017337, 51.517237411508134 ], [ 5.21483606109197, 51.511842868047694 ], [ 5.210980796948574, 51.511837119896541 ], [ 5.20289277396709, 51.509842261657361 ], [ 5.195953608397037, 51.509831113851945 ], [ 5.190182006971956, 51.507272745024295 ], [ 5.179766110334397, 51.508953911347355 ], [ 5.176671619439269, 51.511213963204717 ], [ 5.17089150660329, 51.51063701219578 ], [ 5.165472213608367, 51.515158027169853 ], [ 5.164318327176509, 51.514589436191933 ], [ 5.160834299179502, 51.517414721736898 ], [ 5.159296264338458, 51.516562138472459 ], [ 5.14884891099278, 51.523621253836644 ], [ 5.145003216329789, 51.521630961650878 ], [ 5.130300536476004, 51.530378714818696 ], [ 5.126040145492007, 51.533484453324668 ], [ 5.118638092731717, 51.545928394952853 ], [ 5.112874817351612, 51.541950242852131 ], [ 5.112501016673442, 51.539966978777485 ], [ 5.109804132737313, 51.539394214488581 ], [ 5.109433947322097, 51.536844552198545 ], [ 5.10559763370093, 51.533436994764216 ], [ 5.104438750754071, 51.533717395499799 ], [ 5.100210245608565, 51.531441503466688 ], [ 5.105245291799177, 51.528055376782568 ], [ 5.098323174042355, 51.524923290023708 ], [ 5.100649473580834, 51.522946626841417 ], [ 5.098726771604259, 51.522092301148 ], [ 5.101051126937104, 51.520398823641251 ], [ 5.094901603030843, 51.517268419052314 ], [ 5.098384318338242, 51.515294687092414 ], [ 5.096105429121575, 51.50990825484913 ], [ 5.088000465181683, 51.511303777295417 ], [ 5.073023904810263, 51.502768492694408 ], [ 5.076891886117556, 51.5007964353197 ], [ 5.062687544135909, 51.492828256384868 ], [ 5.069280232255167, 51.486899193836756 ], [ 5.068521502584321, 51.485197928159948 ], [ 5.051553826815385, 51.487132799090809 ], [ 5.048970244996749, 51.471832543934148 ], [ 5.049746906870195, 51.470985190393179 ], [ 5.072472352921337, 51.471048651716721 ], [ 5.07901654389848, 51.471632505598954 ], [ 5.081352361729357, 51.467957048661901 ], [ 5.104688032656396, 51.431483041761403 ], [ 5.102010063418416, 51.428927725717621 ], [ 5.119330421119145, 51.428402364215472 ], [ 5.152421960137846, 51.429040020490994 ], [ 5.157810931628346, 51.428767535769488 ], [ 5.158563541914564, 51.432167409982156 ], [ 5.170890876692583, 51.429642106859589 ], [ 5.173591319302501, 51.428231081231026 ], [ 5.178200057388766, 51.430221821663544 ], [ 5.185133366058094, 51.428818030996858 ], [ 5.190899626804407, 51.430243867666022 ], [ 5.190899626804407, 51.430243867666022 ], [ 5.210003909319168, 51.465674315411114 ], [ 5.220376653992846, 51.472769555268059 ], [ 5.2253268520145, 51.488918827026289 ], [ 5.229947908269397, 51.489774730967312 ], [ 5.228374947537808, 51.498834943395536 ], [ 5.247260364547207, 51.498859078082731 ], [ 5.248008693358506, 51.50622311522055 ], [ 5.251092528213501, 51.5062267459341 ], [ 5.251082368900174, 51.509625106622465 ], [ 5.236033449829924, 51.513854583310497 ], [ 5.232194406785752, 51.50903519502431 ], [ 5.226416865209114, 51.507611402446834 ], [ 5.224454987017337, 51.517237411508134 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0383\", \"naam\": \"Castricum\", \"code\": \"0383\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.69584641707823, 52.526853850574611 ], [ 4.697782739066028, 52.529130419284904 ], [ 4.695704503300875, 52.535914239727511 ], [ 4.694392357817591, 52.544118300513738 ], [ 4.703842656891491, 52.545305721205501 ], [ 4.706591083915727, 52.546170994639503 ], [ 4.705771452021638, 52.548148425114618 ], [ 4.713640439256538, 52.549609135046495 ], [ 4.718739474349202, 52.55162008065102 ], [ 4.719644268541086, 52.543979815354334 ], [ 4.723550877917868, 52.54655017026176 ], [ 4.725523460300025, 52.546561180234598 ], [ 4.735428211677872, 52.543784357034774 ], [ 4.743359378610441, 52.540996023189848 ], [ 4.755270467308716, 52.535679964046885 ], [ 4.759190510250868, 52.537399734095096 ], [ 4.763529317670122, 52.537422608435676 ], [ 4.767907857535288, 52.534613922372074 ], [ 4.774612875016396, 52.534648713633757 ], [ 4.777779908828942, 52.533815532754438 ], [ 4.778029735672434, 52.544293752647881 ], [ 4.781026262782794, 52.55591863731695 ], [ 4.781799927303974, 52.557055221228119 ], [ 4.77189509661989, 52.5598359050189 ], [ 4.752911793020014, 52.562567623731155 ], [ 4.744956724156332, 52.566772262720633 ], [ 4.74454552052543, 52.567902676076798 ], [ 4.748422884235733, 52.572737298823562 ], [ 4.751442089028878, 52.582380889818801 ], [ 4.756445340343553, 52.591468611698907 ], [ 4.752093054705677, 52.592011741769213 ], [ 4.750949160299708, 52.589174044259408 ], [ 4.744614256448914, 52.590272581919784 ], [ 4.74004166445832, 52.578921426666447 ], [ 4.710010352998169, 52.580452974750784 ], [ 4.703693256071757, 52.580416794366144 ], [ 4.703280865870527, 52.581547059063382 ], [ 4.698143676008548, 52.581800531045197 ], [ 4.697003520187523, 52.578962314233877 ], [ 4.685127834285254, 52.580874838226364 ], [ 4.68628078147817, 52.582863766590457 ], [ 4.679940648363572, 52.58424198831468 ], [ 4.671598223384203, 52.587306788715217 ], [ 4.670785454467939, 52.588717690023451 ], [ 4.673926247632519, 52.589869227556434 ], [ 4.672723182882214, 52.590994637633017 ], [ 4.659770607644426, 52.586102313762446 ], [ 4.65543648592138, 52.585509374542134 ], [ 4.655083955139675, 52.582958756595552 ], [ 4.610232512546792, 52.573612669255965 ], [ 4.594012126735458, 52.57548759337439 ], [ 4.589592521157202, 52.557901846339981 ], [ 4.585831622375212, 52.547682593538958 ], [ 4.585575995964157, 52.540035404289867 ], [ 4.583322770465686, 52.533790518515076 ], [ 4.598754684372625, 52.531062374405955 ], [ 4.653187530818563, 52.530845154400467 ], [ 4.659877852753281, 52.531735832130991 ], [ 4.686359834113296, 52.528214028605575 ], [ 4.69584641707823, 52.526853850574611 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1960\", \"naam\": \"West Betuwe\", \"code\": \"1960\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.400759032480163, 51.837641136260906 ], [ 5.409305003398845, 51.843869965460762 ], [ 5.415135454360514, 51.851797976140752 ], [ 5.408144813457087, 51.854348130528344 ], [ 5.403094767210704, 51.85406574211968 ], [ 5.39959883116453, 51.85463254351945 ], [ 5.395325460704181, 51.852933796820672 ], [ 5.391052715710321, 51.854633146786092 ], [ 5.379786286776509, 51.861429492292096 ], [ 5.378231825163228, 51.863411697648758 ], [ 5.369296735405507, 51.860295626155263 ], [ 5.364246409849188, 51.859728379503103 ], [ 5.359973720078145, 51.85831153482269 ], [ 5.349484450172847, 51.858308648441444 ], [ 5.344823615225136, 51.857174314889335 ], [ 5.338996088729586, 51.857455262609889 ], [ 5.338217892219062, 51.858587691923489 ], [ 5.328119278211011, 51.856883933001697 ], [ 5.328108898515205, 51.864813177726354 ], [ 5.329661283448345, 51.866229883160635 ], [ 5.336651237573118, 51.869914524402404 ], [ 5.338978250540595, 51.874163305901789 ], [ 5.339362978123801, 51.877844892799665 ], [ 5.337805548804114, 51.880392931649894 ], [ 5.335472157909456, 51.881524677415399 ], [ 5.327308125617559, 51.88265355638363 ], [ 5.322644517792499, 51.882084718770734 ], [ 5.317594084916032, 51.88038272064486 ], [ 5.314872403261404, 51.880947453548053 ], [ 5.316811858446717, 51.88349730994176 ], [ 5.323415102230745, 51.886899311805806 ], [ 5.323412298107545, 51.888881615984062 ], [ 5.319519643117461, 51.892277680326686 ], [ 5.312904701974163, 51.895671928119647 ], [ 5.307460304100467, 51.896234738960096 ], [ 5.297340283278042, 51.90160798585287 ], [ 5.295009990340771, 51.900190253068942 ], [ 5.28916610096655, 51.905282879706597 ], [ 5.282928666734791, 51.911790793950452 ], [ 5.273573060146383, 51.919994516533151 ], [ 5.28523801207288, 51.922553868098539 ], [ 5.286781560029059, 51.928218899504813 ], [ 5.284830284430115, 51.930765884667423 ], [ 5.27937653201747, 51.933309681017519 ], [ 5.276264813269647, 51.932740419919021 ], [ 5.268482124787486, 51.932732828186431 ], [ 5.255243252784778, 51.935550580644971 ], [ 5.243593821252147, 51.927607757515666 ], [ 5.233101988814691, 51.923629888445454 ], [ 5.211719447001114, 51.919635337245367 ], [ 5.207803266661955, 51.92614270192152 ], [ 5.204306186687115, 51.925004574476318 ], [ 5.1871923120229, 51.923843978134414 ], [ 5.17592299616553, 51.920992416253007 ], [ 5.159201846958678, 51.919545259341099 ], [ 5.166950315181718, 51.926073304292217 ], [ 5.158379138282725, 51.92832242973968 ], [ 5.150208161237198, 51.928306250203981 ], [ 5.142444786130975, 51.924892118225451 ], [ 5.135868689879623, 51.918081776337317 ], [ 5.136665633047971, 51.91468523823989 ], [ 5.132385296392687, 51.91495922746509 ], [ 5.119259598753382, 51.89822201311118 ], [ 5.116928302982633, 51.897933488933013 ], [ 5.118493772034508, 51.89623795295978 ], [ 5.117738187841323, 51.892554785082439 ], [ 5.112713365106559, 51.887728966593805 ], [ 5.105708927149401, 51.888845151545098 ], [ 5.098716850154295, 51.887978633871477 ], [ 5.092489534221862, 51.889095936020951 ], [ 5.088609518692666, 51.887953390565869 ], [ 5.085939500406124, 51.880300493420457 ], [ 5.080917531019159, 51.875756494907506 ], [ 5.073545257695968, 51.874037914959445 ], [ 5.06188454292055, 51.874289398197796 ], [ 5.054126725516354, 51.87228533993683 ], [ 5.051818290419647, 51.869163692450016 ], [ 5.052225831925503, 51.866616151722816 ], [ 5.0541790934833, 51.865205758128269 ], [ 5.061970465376342, 51.862395692638763 ], [ 5.063536764118131, 51.860700882262286 ], [ 5.058118358913847, 51.857853933634473 ], [ 5.053072291280833, 51.857273309712468 ], [ 5.043733727200071, 51.859228703342509 ], [ 5.035968272859274, 51.858639361611523 ], [ 5.027033044607039, 51.85861230476457 ], [ 5.018481679265597, 51.859152153539533 ], [ 5.009167380201744, 51.857989786112881 ], [ 5.004505599085273, 51.857974690284962 ], [ 4.995924564446311, 51.861911083474517 ], [ 4.993989406853571, 51.861055050772613 ], [ 4.998314349528985, 51.855122451605283 ], [ 4.998727231281246, 51.852291913014483 ], [ 4.999926614898328, 51.8483312056538 ], [ 4.999181527440365, 51.84464726674711 ], [ 5.003074850848827, 51.843527303030712 ], [ 5.003453559829115, 51.844661304205701 ], [ 5.007351553503252, 51.842974832679964 ], [ 5.014737275019683, 51.842148918046519 ], [ 5.031445095810146, 51.841067959244235 ], [ 5.027327178963716, 51.821798433207967 ], [ 5.026185343437505, 51.818963014863698 ], [ 5.035511899788631, 51.817575369875186 ], [ 5.042112355683779, 51.817311767074038 ], [ 5.050642818853242, 51.818469297344947 ], [ 5.059937694828972, 51.821327484740706 ], [ 5.071943177724662, 51.825325004306578 ], [ 5.08241507616356, 51.826768606423286 ], [ 5.093288798984974, 51.826229947631987 ], [ 5.105342816297762, 51.823144409253189 ], [ 5.122074729116775, 51.816386817535339 ], [ 5.132953459919079, 51.81442854769287 ], [ 5.140717214023068, 51.814161913157719 ], [ 5.1593349739062, 51.816465041055586 ], [ 5.170587981038524, 51.817052718748933 ], [ 5.176024504608269, 51.816496241885915 ], [ 5.186515329671712, 51.813965931379407 ], [ 5.195064549254807, 51.811431522668208 ], [ 5.203218970532392, 51.810311822596731 ], [ 5.211369676764522, 51.810041119832 ], [ 5.22068032095688, 51.810904260143673 ], [ 5.227660785122347, 51.812329898182305 ], [ 5.238129971001054, 51.815175547013411 ], [ 5.245887024405022, 51.816884271190837 ], [ 5.253646342674384, 51.818026105807661 ], [ 5.269556537544269, 51.819459059692953 ], [ 5.281585398737911, 51.821169620618029 ], [ 5.292448833540845, 51.823727580677712 ], [ 5.304482298012777, 51.824019852068673 ], [ 5.311083054919631, 51.823174743532242 ], [ 5.319627011510738, 51.820631262776296 ], [ 5.326230809199244, 51.816953414120526 ], [ 5.333224675110382, 51.81072666951524 ], [ 5.339050416047852, 51.806481357717132 ], [ 5.347589383143875, 51.80421902471047 ], [ 5.356513773865254, 51.804504875614853 ], [ 5.364273043071122, 51.8070553419916 ], [ 5.367764522416612, 51.809321481612514 ], [ 5.374359868372527, 51.815835729194504 ], [ 5.379404443014622, 51.822066321442307 ], [ 5.385226878148635, 51.828296706687702 ], [ 5.3933805623981, 51.833960318789671 ], [ 5.400759032480163, 51.837641136260906 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1948\", \"naam\": \"Meierijstad\", \"code\": \"1948\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.531010468607865, 51.524908165502282 ], [ 5.547252164763162, 51.537630898775255 ], [ 5.543016741620191, 51.539902207352434 ], [ 5.545337250425684, 51.541598269209857 ], [ 5.533044191677669, 51.557756498798113 ], [ 5.553499833881824, 51.558295546767717 ], [ 5.584393160395809, 51.562778612474418 ], [ 5.608307377625601, 51.559620617288893 ], [ 5.614070856791071, 51.55451201285603 ], [ 5.618322830590797, 51.555919661785339 ], [ 5.621782750497201, 51.553363986792647 ], [ 5.627195518969723, 51.55533537058232 ], [ 5.630299359419199, 51.558444122376279 ], [ 5.641529142958838, 51.565216945880678 ], [ 5.64500616204302, 51.565775718247714 ], [ 5.647331799341447, 51.567469746322246 ], [ 5.65236299933107, 51.569724012813722 ], [ 5.655078488262637, 51.571983396004889 ], [ 5.656639448901908, 51.57481177897904 ], [ 5.654329764571379, 51.575949871701177 ], [ 5.651650397098992, 51.579920726865467 ], [ 5.651279134923867, 51.582470339889554 ], [ 5.6505315522705, 51.586719981313848 ], [ 5.648639936762519, 51.593520952011559 ], [ 5.642918542127857, 51.606277454437432 ], [ 5.633695974804908, 51.615359544897423 ], [ 5.626396144070185, 51.623304194386101 ], [ 5.62332207679491, 51.626708791952815 ], [ 5.616382236432528, 51.630120948693147 ], [ 5.607509926094033, 51.633819543947986 ], [ 5.602463064179861, 51.629297819197525 ], [ 5.595141204707264, 51.634125391593443 ], [ 5.593207086843471, 51.633845620343401 ], [ 5.585887235070991, 51.639522191080914 ], [ 5.588220740905482, 51.64263334733932 ], [ 5.57972914512837, 51.64604597607773 ], [ 5.571629891843011, 51.651156535733655 ], [ 5.570470903933007, 51.651441552557991 ], [ 5.56427017804106, 51.648052771538552 ], [ 5.542202906262442, 51.640437855299247 ], [ 5.542971273622162, 51.639020860275139 ], [ 5.542182540023725, 51.634490791820703 ], [ 5.533681666889343, 51.635634533873215 ], [ 5.530967512064356, 51.633089150719883 ], [ 5.52671449985867, 51.632811110314229 ], [ 5.524388297930569, 51.630548305437365 ], [ 5.517047353256003, 51.631689472193592 ], [ 5.504688896635725, 51.635950472227066 ], [ 5.505454660776858, 51.633117753005493 ], [ 5.49732107541217, 51.626612222516641 ], [ 5.467587992715334, 51.642212171704372 ], [ 5.465269640306952, 51.643063327501117 ], [ 5.42352074533101, 51.65384516505133 ], [ 5.414627021029618, 51.65582995663776 ], [ 5.415012724434576, 51.654130701750255 ], [ 5.411144584418705, 51.652715592735866 ], [ 5.412303342077346, 51.650166602494721 ], [ 5.405729360750219, 51.650167837048137 ], [ 5.406115230516384, 51.648185416525777 ], [ 5.401474795471451, 51.647619692830474 ], [ 5.396060781414994, 51.645354682650272 ], [ 5.384074168999668, 51.645921381220788 ], [ 5.378273976298418, 51.646770672923012 ], [ 5.37943443155764, 51.644222006908478 ], [ 5.371702117727551, 51.641955695504926 ], [ 5.374795731037963, 51.639973700279143 ], [ 5.382914859293784, 51.638275102232406 ], [ 5.378662170705397, 51.638558069430331 ], [ 5.37286361675972, 51.636858344694964 ], [ 5.37131715371288, 51.637141341502222 ], [ 5.370932070134899, 51.632893373010951 ], [ 5.37518397897374, 51.633743464379592 ], [ 5.383302023007832, 51.631478449459451 ], [ 5.383302326485788, 51.627796920407988 ], [ 5.387553956885423, 51.625814616589359 ], [ 5.384461996969608, 51.625531394729187 ], [ 5.383689112417032, 51.624115401825271 ], [ 5.386008078252485, 51.621000303246817 ], [ 5.389099738739639, 51.621283484365726 ], [ 5.388326725370177, 51.617885157832418 ], [ 5.391031606370135, 51.61646912244548 ], [ 5.390645031307119, 51.614486770673714 ], [ 5.39257675663831, 51.612221135483068 ], [ 5.391417531216666, 51.611371599642702 ], [ 5.394893914726363, 51.605707516219645 ], [ 5.390257987201525, 51.605424540594335 ], [ 5.380600268829324, 51.602875651073653 ], [ 5.386394819357228, 51.60089345977476 ], [ 5.381373720633318, 51.596079003821679 ], [ 5.38446379807748, 51.593813549357677 ], [ 5.386008766022504, 51.590698422895407 ], [ 5.389484485150866, 51.589565619701929 ], [ 5.385236415392721, 51.589565631429075 ], [ 5.381374781239567, 51.587583139198372 ], [ 5.385622709537319, 51.586167289729289 ], [ 5.389870284329044, 51.583335307386172 ], [ 5.387939591767894, 51.582485751112642 ], [ 5.393731092616715, 51.579653605512732 ], [ 5.391414114741564, 51.575972169492609 ], [ 5.395661019717854, 51.576538325083511 ], [ 5.400293699165841, 51.575688303960135 ], [ 5.403768434129163, 51.575971054179256 ], [ 5.401837333031201, 51.573705747419325 ], [ 5.402608759381938, 51.571723275571209 ], [ 5.398748249806412, 51.571157334115114 ], [ 5.399518911285151, 51.566059725606834 ], [ 5.39797489030716, 51.565776684179667 ], [ 5.399132168671261, 51.563227804925461 ], [ 5.401447503938212, 51.561811561485335 ], [ 5.405307138541565, 51.562094218098736 ], [ 5.402989919299843, 51.557846613692661 ], [ 5.404146394066382, 51.554448094145357 ], [ 5.404144047355752, 51.548217772817317 ], [ 5.405301557024496, 51.548217597632949 ], [ 5.411085956690867, 51.542269422168076 ], [ 5.420342121968388, 51.538585593371891 ], [ 5.423810247241995, 51.534053404621332 ], [ 5.429982509599321, 51.534900889315679 ], [ 5.431524016965099, 51.533484328256989 ], [ 5.434610597296374, 51.5343327027269 ], [ 5.437310313857346, 51.534048375334528 ], [ 5.465863613826511, 51.539979733307391 ], [ 5.472423237092752, 51.540824714089688 ], [ 5.487085118053277, 51.541945866703692 ], [ 5.487855426813171, 51.54137881090039 ], [ 5.488994330851963, 51.533165111426328 ], [ 5.493607554865365, 51.526647460610057 ], [ 5.498240239418083, 51.528625522620011 ], [ 5.502479008484905, 51.527205424720613 ], [ 5.503246703199173, 51.525788677388611 ], [ 5.499774488380722, 51.525225685585575 ], [ 5.500150262871514, 51.521260560324762 ], [ 5.505549500410549, 51.52153840430541 ], [ 5.508254807605851, 51.523801206797302 ], [ 5.509023024829548, 51.522667617768803 ], [ 5.512883918367974, 51.524362705918257 ], [ 5.519048293072319, 51.522373520451318 ], [ 5.522522216237753, 51.523502332263391 ], [ 5.52521643205351, 51.521799991727185 ], [ 5.531010468607865, 51.524908165502282 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0873\", \"naam\": \"Woensdrecht\", \"code\": \"0873\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.391109496759702, 51.451363055705471 ], [ 4.383329012938249, 51.454978201322064 ], [ 4.367114737827912, 51.456820116020744 ], [ 4.344308336878042, 51.460583590095794 ], [ 4.340405849517511, 51.462814399215631 ], [ 4.336627101777469, 51.459665041383332 ], [ 4.328051012917237, 51.464119026082706 ], [ 4.324239969304615, 51.462385064817212 ], [ 4.322361039968441, 51.460385402884114 ], [ 4.311194956650561, 51.4602829867206 ], [ 4.308378965172865, 51.465354943045632 ], [ 4.303724335028734, 51.466727924608925 ], [ 4.297576454568652, 51.466104251447213 ], [ 4.297901585458229, 51.452512720434669 ], [ 4.29757080201855, 51.450243869884481 ], [ 4.294910099767943, 51.448802891434383 ], [ 4.293836835396947, 51.445394193470129 ], [ 4.288846680017865, 51.444780883268166 ], [ 4.28543048581119, 51.442766127863869 ], [ 4.283196640138788, 51.43962958023905 ], [ 4.268166335755717, 51.440336046399842 ], [ 4.265486234882636, 51.439743865414172 ], [ 4.275851650208735, 51.425115548448325 ], [ 4.266743283226829, 51.419930412031 ], [ 4.263749481102063, 51.416502946060476 ], [ 4.264203876885643, 51.41367509995117 ], [ 4.269145806443237, 51.400411141874635 ], [ 4.268675268401563, 51.388228066487997 ], [ 4.266410451137597, 51.386506978341394 ], [ 4.268408851891107, 51.383410727112903 ], [ 4.273797131477733, 51.383179096194688 ], [ 4.277428685898373, 51.376133170967982 ], [ 4.306239692745375, 51.376970375103809 ], [ 4.334673990106634, 51.377513828562755 ], [ 4.341284029696629, 51.357464717689894 ], [ 4.348941744154523, 51.358666080677942 ], [ 4.350875510049909, 51.358116855411367 ], [ 4.365883857618567, 51.35711649022511 ], [ 4.378611581191005, 51.354961602726164 ], [ 4.383983537538018, 51.355291196456278 ], [ 4.384386344333994, 51.354445008483239 ], [ 4.393965515276722, 51.355659929103467 ], [ 4.39855095267519, 51.356831796785407 ], [ 4.421812038030288, 51.36524012587504 ], [ 4.431447823221095, 51.363903464704542 ], [ 4.429839651925531, 51.367288864645332 ], [ 4.425144976464591, 51.371215240109585 ], [ 4.431600975283891, 51.374950166088581 ], [ 4.406938495151626, 51.395703432214439 ], [ 4.391671169111164, 51.408035641386725 ], [ 4.383692530468025, 51.420995264315991 ], [ 4.389773590390439, 51.42444603196158 ], [ 4.391250696378431, 51.427290824698339 ], [ 4.39510451717755, 51.427040448121687 ], [ 4.394621104593365, 51.431567806797766 ], [ 4.397314719689618, 51.431590694537562 ], [ 4.398774102654382, 51.435284886385645 ], [ 4.395304439179431, 51.43553865487884 ], [ 4.39559685984739, 51.439789392247484 ], [ 4.396702235801052, 51.442064515141077 ], [ 4.391990782833003, 51.446272674444337 ], [ 4.386620482505183, 51.445377095396132 ], [ 4.379275735331897, 51.446729966176171 ], [ 4.382665174699654, 51.450157800164618 ], [ 4.384993610982023, 51.449328170830412 ], [ 4.391109496759702, 51.451363055705471 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0642\", \"naam\": \"Zwijndrecht\", \"code\": \"0642\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.67176717475509, 51.820736170808871 ], [ 4.670557723693594, 51.823560775273705 ], [ 4.665055328545433, 51.827775025160207 ], [ 4.661885897237632, 51.831720259315595 ], [ 4.637142525549097, 51.825334386051551 ], [ 4.600028213456907, 51.838684939999034 ], [ 4.583250827513775, 51.843102446057841 ], [ 4.571140820327038, 51.846983699965286 ], [ 4.565791552335239, 51.842131988610014 ], [ 4.560790157354005, 51.839548081736709 ], [ 4.558916356796437, 51.83585326323778 ], [ 4.55359067814018, 51.829868337234934 ], [ 4.557141974240234, 51.826778289524391 ], [ 4.55914534469882, 51.823394023303081 ], [ 4.561184737786355, 51.818027565645089 ], [ 4.564356828912064, 51.814368229361648 ], [ 4.569458377843731, 51.81128867320885 ], [ 4.579608671043938, 51.807960552820248 ], [ 4.596711666304313, 51.806377812713812 ], [ 4.602939597065371, 51.805286801390132 ], [ 4.61736349930084, 51.801417517099168 ], [ 4.621252849110455, 51.800876571278032 ], [ 4.625908474797185, 51.800906871974817 ], [ 4.634798708159957, 51.802946619570044 ], [ 4.645587863978894, 51.807546502328513 ], [ 4.653251632672383, 51.813541870545926 ], [ 4.661711933128291, 51.818408856930034 ], [ 4.669050174569639, 51.8207195772981 ], [ 4.67176717475509, 51.820736170808871 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0093\", \"naam\": \"Terschelling\", \"code\": \"0093\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.612463283215971, 53.318855583123522 ], [ 5.613005123963815, 53.422180969142033 ], [ 5.582977766405344, 53.458184567136435 ], [ 5.552812483144097, 53.471534411354064 ], [ 5.492730466096757, 53.458297514854017 ], [ 5.356975044690488, 53.431164668441923 ], [ 5.176703870153752, 53.408621370478535 ], [ 5.161931306902042, 53.386231072928695 ], [ 5.101719602769929, 53.367985889906514 ], [ 5.087157626245992, 53.322939278751242 ], [ 5.102017617279881, 53.322975425733709 ], [ 5.132995944543867, 53.313985948595068 ], [ 5.162354062271269, 53.30526855433007 ], [ 5.152905023288135, 53.27099611946548 ], [ 5.147397503800093, 53.251451576361013 ], [ 5.387172153546433, 53.215737208033872 ], [ 5.432042639224083, 53.21572877062237 ], [ 5.476969023334685, 53.242597912189964 ], [ 5.537194116743892, 53.269431882431469 ], [ 5.567027358860162, 53.305343804041918 ], [ 5.612463283215971, 53.318855583123522 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0342\", \"naam\": \"Soest\", \"code\": \"0342\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.306297978808807, 52.110319507678639 ], [ 5.311761300782666, 52.114004427174706 ], [ 5.325424525142001, 52.122507667592615 ], [ 5.331281027611706, 52.126758231706212 ], [ 5.334011417597543, 52.131290313455793 ], [ 5.330487905838098, 52.13581949515482 ], [ 5.330877028482066, 52.137235561308216 ], [ 5.336340204714242, 52.145733310295462 ], [ 5.33867049765304, 52.160176226100454 ], [ 5.34336390022519, 52.160178057054992 ], [ 5.347656938693683, 52.170657029262763 ], [ 5.347263709895096, 52.172922291840408 ], [ 5.350001605171196, 52.173772705695434 ], [ 5.350000194271388, 52.175471750258275 ], [ 5.34139035358308, 52.177734126272824 ], [ 5.337472609691845, 52.1822633284674 ], [ 5.333558485324875, 52.183111140970802 ], [ 5.325733683565152, 52.181974640271683 ], [ 5.323776340288538, 52.182539954904861 ], [ 5.324945941579247, 52.185655487319416 ], [ 5.324551426449379, 52.187920668014961 ], [ 5.321025831054815, 52.190184136797313 ], [ 5.314761456198662, 52.191596334011216 ], [ 5.311631275504685, 52.191028028820739 ], [ 5.309277024200076, 52.19442458153889 ], [ 5.314351594592441, 52.202923007097262 ], [ 5.313958245299538, 52.204055455477707 ], [ 5.308087726041225, 52.202918984033403 ], [ 5.304178073934326, 52.20008457516213 ], [ 5.282665975869357, 52.192138662749706 ], [ 5.281491114920663, 52.192420791456833 ], [ 5.270150932932084, 52.188445675129465 ], [ 5.262335529383235, 52.184190068233832 ], [ 5.247104891750589, 52.174261891637535 ], [ 5.243206194208964, 52.170009583906236 ], [ 5.254611584632639, 52.149634322600164 ], [ 5.256584911092856, 52.143406653542918 ], [ 5.255425360703887, 52.138874547892286 ], [ 5.255822947850043, 52.136609580988953 ], [ 5.264064027642609, 52.125008225033042 ], [ 5.271875083768495, 52.12699835033046 ], [ 5.282071825967488, 52.111999488565104 ], [ 5.291833765018488, 52.114556372076017 ], [ 5.298872262208056, 52.111730074090715 ], [ 5.306297978808807, 52.110319507678639 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1896\", \"naam\": \"Zwartewaterland\", \"code\": \"1896\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.147319185064615, 52.584479782727328 ], [ 6.131467777867886, 52.581182262912328 ], [ 6.126077984980039, 52.589427588060303 ], [ 6.124136667748018, 52.591421773920359 ], [ 6.125340386548407, 52.592546939431898 ], [ 6.120676749224003, 52.597106394877898 ], [ 6.105774332290977, 52.603710156422373 ], [ 6.103041382436508, 52.605708770510994 ], [ 6.106224842627627, 52.607105336884196 ], [ 6.103551599067793, 52.612784658756645 ], [ 6.10713996868702, 52.614745074847534 ], [ 6.106051707237333, 52.620697984171521 ], [ 6.103759019450677, 52.625525513457895 ], [ 6.098225927742544, 52.625558752531909 ], [ 6.09594125256764, 52.630952386554796 ], [ 6.096809430555152, 52.635760870055741 ], [ 6.102026714543729, 52.640543264018838 ], [ 6.102918792809355, 52.646767331822055 ], [ 6.104528150472261, 52.648456566132765 ], [ 6.104602062324258, 52.652986612363769 ], [ 6.103452561867867, 52.65525878807135 ], [ 6.104275865149942, 52.657235912364591 ], [ 6.106639629485955, 52.656655320202148 ], [ 6.109854826817722, 52.659750528385345 ], [ 6.120228240948296, 52.665066973258782 ], [ 6.119484267101312, 52.667903108565625 ], [ 6.107178884771744, 52.665429864380933 ], [ 6.099984984589769, 52.660942732706921 ], [ 6.097275671760399, 52.664639956784647 ], [ 6.085385984245324, 52.663294598982013 ], [ 6.068662621851177, 52.656312774758213 ], [ 6.061491507364135, 52.65295581403457 ], [ 6.05831478085583, 52.652124328032706 ], [ 6.054725524044989, 52.650162456993087 ], [ 6.038499650305604, 52.649403007905491 ], [ 6.024552535895284, 52.642116605655893 ], [ 6.020981919848051, 52.641286237322788 ], [ 6.017452013050859, 52.643287087629808 ], [ 6.010654183575001, 52.637943013748085 ], [ 5.988790470732231, 52.629277927093597 ], [ 5.980869947118677, 52.628185147026628 ], [ 5.991847498067925, 52.62161723448758 ], [ 5.992195978398707, 52.61821759990886 ], [ 5.991355124523961, 52.614540860453438 ], [ 5.980161801878506, 52.604969973159442 ], [ 5.976131823528327, 52.599043749736971 ], [ 5.971328077269052, 52.59425381899019 ], [ 5.972475293995816, 52.591416606372022 ], [ 5.982950542283672, 52.577489812337717 ], [ 6.007922419099222, 52.584440829743343 ], [ 6.012680815410713, 52.585831648499592 ], [ 6.022381100475656, 52.57388750060791 ], [ 6.033222762135908, 52.559387861086698 ], [ 6.033218613143724, 52.559104723611952 ], [ 6.06333627808579, 52.567148632700807 ], [ 6.070304840404637, 52.558330752640217 ], [ 6.073475024529406, 52.559161948117641 ], [ 6.076202017868143, 52.556880859566199 ], [ 6.074220158039935, 52.556326025505115 ], [ 6.081282876598282, 52.553736478706178 ], [ 6.089537448190269, 52.551705783313906 ], [ 6.092326531138111, 52.553388216821084 ], [ 6.093151944764105, 52.555648605122038 ], [ 6.097937284786155, 52.558734825580238 ], [ 6.099180593263271, 52.562408475768649 ], [ 6.103209920028643, 52.567481145604944 ], [ 6.109919814598734, 52.567440484269298 ], [ 6.109817694947349, 52.561211548188922 ], [ 6.114539399499568, 52.56033322268992 ], [ 6.118044178344974, 52.557480071461718 ], [ 6.127899887859023, 52.556852649533596 ], [ 6.140449772221769, 52.552243054894134 ], [ 6.165132241137441, 52.564543034014946 ], [ 6.166725938626676, 52.565382068888439 ], [ 6.159005912801462, 52.575343209173298 ], [ 6.15751593679513, 52.58044980503454 ], [ 6.155186543606463, 52.582730189508744 ], [ 6.147319185064615, 52.584479782727328 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0148\", \"naam\": \"Dalfsen\", \"code\": \"0148\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.380378893789194, 52.429845087696243 ], [ 6.384136781354886, 52.439441596610912 ], [ 6.381007584087366, 52.440317423266549 ], [ 6.37606238836917, 52.448004606810287 ], [ 6.373281862528557, 52.446895069998881 ], [ 6.370983219638751, 52.449745952923116 ], [ 6.378614430870167, 52.456478604941218 ], [ 6.342788703402051, 52.456772919696739 ], [ 6.344121399457712, 52.481964756508376 ], [ 6.334413659421505, 52.506961968496078 ], [ 6.336790677736035, 52.507509304860719 ], [ 6.334510845119947, 52.511491950111555 ], [ 6.332169998598237, 52.512643312038392 ], [ 6.333813540016876, 52.515745098496602 ], [ 6.33227909343127, 52.517739537205721 ], [ 6.33158147840959, 52.521992667262843 ], [ 6.338672311183609, 52.521652832959504 ], [ 6.344943779774018, 52.519903332306534 ], [ 6.351338430272008, 52.523815940168333 ], [ 6.352108439050413, 52.522960163182425 ], [ 6.361596179238641, 52.524015300464526 ], [ 6.360106396660975, 52.527991939257895 ], [ 6.358541557076437, 52.528571105843675 ], [ 6.355911758881125, 52.534539214434545 ], [ 6.331592301509268, 52.577777005663322 ], [ 6.323220016123495, 52.592567991142822 ], [ 6.319803734281035, 52.59910769133139 ], [ 6.303173883715376, 52.597254946262616 ], [ 6.275058011069064, 52.593787313077861 ], [ 6.274685909186545, 52.594922753425266 ], [ 6.259255466107896, 52.593621236211526 ], [ 6.258432018325045, 52.591928293805474 ], [ 6.246957583057095, 52.590879261689018 ], [ 6.246946530408254, 52.590313013488846 ], [ 6.202218416808129, 52.584965148910072 ], [ 6.20558797690674, 52.575031251451144 ], [ 6.209414075434869, 52.568492040530629 ], [ 6.210982296155494, 52.567914839686956 ], [ 6.189481045158089, 52.536064472727332 ], [ 6.192953192941736, 52.531793452805807 ], [ 6.187303598398739, 52.524752530194256 ], [ 6.187677368408243, 52.523617342456504 ], [ 6.183288976646844, 52.520815208153635 ], [ 6.182469814118734, 52.519121702893422 ], [ 6.173396734185533, 52.518899019625202 ], [ 6.183847576950971, 52.508068940451913 ], [ 6.18380160456566, 52.505520741424611 ], [ 6.186524709752003, 52.503520244277226 ], [ 6.188029316375556, 52.499545741241597 ], [ 6.197020615716942, 52.495520318687682 ], [ 6.199384915250919, 52.49550414761368 ], [ 6.198544809331721, 52.492678211272917 ], [ 6.200084436846595, 52.490685482934403 ], [ 6.196517626286829, 52.489577207800536 ], [ 6.192500237610242, 52.485357027865774 ], [ 6.193640775480528, 52.483083921090021 ], [ 6.189655101853945, 52.48056244353144 ], [ 6.182963598220552, 52.480890720181542 ], [ 6.182145196372507, 52.479197196179292 ], [ 6.177428449557996, 52.479795071120435 ], [ 6.177791969038507, 52.47809363273673 ], [ 6.171080658927184, 52.477288696533478 ], [ 6.169873918743617, 52.475880825468124 ], [ 6.167510655005414, 52.475896406268134 ], [ 6.162365413940541, 52.474514321152064 ], [ 6.169359786046998, 52.46908815746292 ], [ 6.174469313191343, 52.468487988959936 ], [ 6.178054132377595, 52.470729480183699 ], [ 6.186677425949592, 52.468406268610266 ], [ 6.193760817721485, 52.468075106130335 ], [ 6.202440195107182, 52.468865234600955 ], [ 6.211423952630765, 52.46483870845649 ], [ 6.21417508383169, 52.464536372402115 ], [ 6.235854230562296, 52.46551580263521 ], [ 6.239392786585057, 52.465207239607651 ], [ 6.247629018897766, 52.463448697427744 ], [ 6.253136110200244, 52.463125414283184 ], [ 6.27821660642083, 52.456992861297934 ], [ 6.278815628481907, 52.447643615899615 ], [ 6.289813766519651, 52.446427642899785 ], [ 6.289362418765055, 52.443599333206322 ], [ 6.291602348148339, 52.437635578949902 ], [ 6.291937982307953, 52.434801262640605 ], [ 6.301787203600056, 52.435291980309849 ], [ 6.302098754968267, 52.431325112336957 ], [ 6.31433187378401, 52.432929052709575 ], [ 6.31942328815017, 52.431756387337416 ], [ 6.328394847920521, 52.428004140466456 ], [ 6.334617117687786, 52.424556404363024 ], [ 6.337044387407804, 52.427651916165836 ], [ 6.343290392999349, 52.425336241160956 ], [ 6.349572676233016, 52.424719005928701 ], [ 6.350396455181873, 52.42641137778412 ], [ 6.355498542498241, 52.42580342049196 ], [ 6.35635976583942, 52.429194514379056 ], [ 6.368131733065174, 52.427681716796044 ], [ 6.380334420725162, 52.427863207877351 ], [ 6.380378893789194, 52.429845087696243 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0345\", \"naam\": \"Veenendaal\", \"code\": \"0345\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.589475036958725, 52.009361164983602 ], [ 5.585978165576639, 52.011915769122538 ], [ 5.586774214082839, 52.015595789806071 ], [ 5.589503181130294, 52.01559112718536 ], [ 5.590304723598633, 52.020403840927969 ], [ 5.587185569177803, 52.020409185877291 ], [ 5.587603352571105, 52.026638474770188 ], [ 5.586843665076551, 52.031170671945112 ], [ 5.589573581011385, 52.031166007221721 ], [ 5.589977682816253, 52.034280307209627 ], [ 5.582967320600232, 52.036557632347289 ], [ 5.56738187517973, 52.040547070663287 ], [ 5.57012394396025, 52.043374647954195 ], [ 5.570922741594324, 52.04790429519101 ], [ 5.558051555187211, 52.048773231824931 ], [ 5.544788720340486, 52.049358105915502 ], [ 5.540863894866829, 52.042566964994215 ], [ 5.538908651841865, 52.041153599465162 ], [ 5.53539890755782, 52.041441254682901 ], [ 5.531492642151105, 52.039747027330442 ], [ 5.529154057576702, 52.040316234620263 ], [ 5.512709974750429, 52.018529988307925 ], [ 5.528678900554564, 52.013414583876425 ], [ 5.53374396659965, 52.012558833691649 ], [ 5.532179155901819, 52.010861682033401 ], [ 5.535684647635306, 52.010007760688779 ], [ 5.535291095960836, 52.008875528802804 ], [ 5.540351647945652, 52.006886770058351 ], [ 5.551239479687308, 51.999792521850175 ], [ 5.553184909451341, 51.99894024329614 ], [ 5.557879752727707, 52.003747623982235 ], [ 5.570323956634627, 51.996932516013622 ], [ 5.589475036958725, 52.009361164983602 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1586\", \"naam\": \"Oost Gelre\", \"code\": \"1586\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.638725440101998, 51.962662324355101 ], [ 6.63762060564446, 51.964939781266629 ], [ 6.642705774559299, 51.965735230876291 ], [ 6.645915855821343, 51.969099466072223 ], [ 6.655834340539294, 51.975506779508038 ], [ 6.657058737701393, 51.97747605650563 ], [ 6.655159536360777, 51.97919582634367 ], [ 6.652563130735532, 51.997632599440969 ], [ 6.654241665884519, 52.001862713668729 ], [ 6.658411288386062, 52.011446941021148 ], [ 6.655755248989113, 52.014024510353359 ], [ 6.661650010921734, 52.015660084201755 ], [ 6.662088130436142, 52.017354608845835 ], [ 6.67199529238844, 52.022911100071418 ], [ 6.678006050608441, 52.028509568866959 ], [ 6.683456257349235, 52.028166456548774 ], [ 6.687692189994463, 52.039731429722053 ], [ 6.687823799388043, 52.044261366381726 ], [ 6.683939975320378, 52.044870633818292 ], [ 6.678544917245961, 52.047195626264283 ], [ 6.66189367841094, 52.051625244596728 ], [ 6.663924898449876, 52.054435339203323 ], [ 6.663631697129821, 52.057837039841246 ], [ 6.659094834766809, 52.062983907935525 ], [ 6.650916839969299, 52.063638370473122 ], [ 6.64667250623086, 52.065383094391287 ], [ 6.643017535207149, 52.060324367040792 ], [ 6.638725683438446, 52.060370059745679 ], [ 6.636281913923106, 52.056714293391252 ], [ 6.631296715604044, 52.059882364664389 ], [ 6.63210855774434, 52.061006618532062 ], [ 6.635222058509322, 52.060690453292182 ], [ 6.6368855541692, 52.064354523124912 ], [ 6.631032488366527, 52.06441648955586 ], [ 6.624375501479715, 52.063636989536583 ], [ 6.621308579696689, 52.065651624396693 ], [ 6.613176081334765, 52.068002225459828 ], [ 6.606074627838617, 52.065243866794312 ], [ 6.606333673608873, 52.060426663293477 ], [ 6.604649714382894, 52.055912768454277 ], [ 6.605322079031705, 52.051940909348986 ], [ 6.602537559375142, 52.049987231941067 ], [ 6.598613738085849, 52.049178047966336 ], [ 6.596189151072779, 52.046087689161055 ], [ 6.59609738888335, 52.042690141322275 ], [ 6.59060665811915, 52.04161356795889 ], [ 6.590148172686389, 52.03906938720052 ], [ 6.586997907235172, 52.037968708233734 ], [ 6.57435334957106, 52.031866355031319 ], [ 6.539077427512979, 52.025136717845001 ], [ 6.517283194517369, 52.042340276306426 ], [ 6.514893111195285, 52.040380767005381 ], [ 6.508752269424818, 52.044404285933034 ], [ 6.499563111409516, 52.035712161203207 ], [ 6.494152527896572, 52.037745590512628 ], [ 6.491777670342909, 52.036351882419162 ], [ 6.487780465823199, 52.032424477574871 ], [ 6.486645398329471, 52.033851101673534 ], [ 6.483463366809351, 52.031331951956801 ], [ 6.479995421969877, 52.03306341882633 ], [ 6.477217530762631, 52.03110675580141 ], [ 6.464877485673666, 52.020741888131226 ], [ 6.462168966580534, 52.021616268333254 ], [ 6.459379010161785, 52.01909289526899 ], [ 6.462053463444277, 52.016802874873711 ], [ 6.460439960287171, 52.014551978081684 ], [ 6.462751508219635, 52.013398060277844 ], [ 6.461937988890758, 52.011989477786678 ], [ 6.465733424090769, 52.007706699378851 ], [ 6.460236520055664, 52.006057738995366 ], [ 6.467518247235588, 52.000893436609736 ], [ 6.459260656244381, 51.997853734803911 ], [ 6.459972180517967, 51.995015211485693 ], [ 6.475781524726385, 51.988073067804926 ], [ 6.472165874930822, 51.983575200358956 ], [ 6.468598744343516, 51.981059210443306 ], [ 6.46775152539967, 51.978234950379253 ], [ 6.473538752887052, 51.975915994822941 ], [ 6.481279446072145, 51.973861797213438 ], [ 6.483629891488795, 51.974406317170271 ], [ 6.494832684750306, 51.970619654560046 ], [ 6.506090073304762, 51.969097044818128 ], [ 6.524751992649882, 51.967785159301329 ], [ 6.527434449868593, 51.966059931881759 ], [ 6.547078105286385, 51.972664802270195 ], [ 6.559194367579812, 51.974243923546339 ], [ 6.569656670843626, 51.972156724176862 ], [ 6.574748972056145, 51.973238246477635 ], [ 6.576681046619752, 51.972652300187889 ], [ 6.591860492870133, 51.972214567975342 ], [ 6.592601265688121, 51.970790925191245 ], [ 6.598449828143857, 51.971014037823274 ], [ 6.611642887901103, 51.96917813452103 ], [ 6.628728465513296, 51.967299707593355 ], [ 6.633742944328231, 51.965547379913069 ], [ 6.638725440101998, 51.962662324355101 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0014\", \"naam\": \"Groningen\", \"code\": \"0014\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.695220839433198, 53.121116910616223 ], [ 6.693044493064441, 53.128502326502122 ], [ 6.689489357034596, 53.14326430669076 ], [ 6.686443146356246, 53.148393874178822 ], [ 6.690102040331501, 53.150336125265 ], [ 6.68902131764593, 53.154311809041431 ], [ 6.683608031837743, 53.160599514409952 ], [ 6.680058413128727, 53.162336674619645 ], [ 6.676942303741408, 53.165201610854091 ], [ 6.673766901689634, 53.166085141222709 ], [ 6.669058029636434, 53.169250081862216 ], [ 6.664673437618921, 53.169863153383581 ], [ 6.661922578397582, 53.171591246545255 ], [ 6.660071694608723, 53.176707344069435 ], [ 6.657386676081011, 53.180699702175332 ], [ 6.639523912819063, 53.185983984653888 ], [ 6.646786541838818, 53.187889856597543 ], [ 6.63964681001138, 53.190229694793793 ], [ 6.642890404484258, 53.191611442079619 ], [ 6.650145863163402, 53.193234057410578 ], [ 6.656267227252468, 53.197133306013114 ], [ 6.666827721991848, 53.20211750425154 ], [ 6.673592782098323, 53.200629480013298 ], [ 6.682810598598907, 53.200813405717732 ], [ 6.684062744595641, 53.202498677829915 ], [ 6.68263910120934, 53.208459862684023 ], [ 6.679827289024033, 53.208207059289627 ], [ 6.680329342813803, 53.211599243597114 ], [ 6.682715425204542, 53.211007235888701 ], [ 6.693188291401649, 53.212875621953081 ], [ 6.693231043168312, 53.214290822665454 ], [ 6.698054572727333, 53.214804486032783 ], [ 6.697322123526495, 53.217077551885318 ], [ 6.703459733602414, 53.221257376244985 ], [ 6.707194737102817, 53.225463342502209 ], [ 6.708805922501822, 53.225728741840754 ], [ 6.705678556825644, 53.228311336794185 ], [ 6.708203644301784, 53.232247422019434 ], [ 6.709823753059275, 53.232795843200847 ], [ 6.706678652530122, 53.234812386325082 ], [ 6.709483685985447, 53.234781515578256 ], [ 6.710345799621944, 53.236753938641769 ], [ 6.717715953102556, 53.241768841314894 ], [ 6.71259261951685, 53.24465683587956 ], [ 6.714622763687618, 53.24548379751436 ], [ 6.703589629731995, 53.2518341652762 ], [ 6.70364140091697, 53.253532378224968 ], [ 6.698507136414262, 53.256136732583997 ], [ 6.716356564661311, 53.262735580552267 ], [ 6.731796398022561, 53.269075677294083 ], [ 6.743951937913399, 53.272902786863391 ], [ 6.772362591280974, 53.283054323733154 ], [ 6.769262125182714, 53.286487603706341 ], [ 6.772115890992227, 53.287870388367153 ], [ 6.769799388280798, 53.290728373561954 ], [ 6.772243121456981, 53.291832743942081 ], [ 6.764818430660351, 53.298146958843972 ], [ 6.760715279255716, 53.295362646919571 ], [ 6.755633417651643, 53.299667565961393 ], [ 6.753198626674427, 53.298845887184704 ], [ 6.748106671064015, 53.302867460574063 ], [ 6.744646038391317, 53.30771976899527 ], [ 6.749534284492307, 53.309929467351111 ], [ 6.747170459728709, 53.311371876105895 ], [ 6.74274587510505, 53.311138739649216 ], [ 6.737981999128182, 53.312891138579545 ], [ 6.732719086634313, 53.311534548314455 ], [ 6.729313784202221, 53.305343852405819 ], [ 6.726486596276709, 53.304809143944375 ], [ 6.71974207489071, 53.307432260034076 ], [ 6.708973871508641, 53.309816187835459 ], [ 6.706880144331318, 53.307007948978793 ], [ 6.705291890484147, 53.307591630930141 ], [ 6.689730938309244, 53.297568821258672 ], [ 6.68183229029777, 53.301901059897695 ], [ 6.673087070317467, 53.304826205358594 ], [ 6.660694589915477, 53.306656919150264 ], [ 6.653929114593813, 53.308710284648889 ], [ 6.65057679903976, 53.303932495280783 ], [ 6.64381667870634, 53.292395346935564 ], [ 6.625806450656388, 53.266251874970997 ], [ 6.633638880991986, 53.259658941857495 ], [ 6.635512734684015, 53.255109454596727 ], [ 6.636208132960646, 53.251421575263898 ], [ 6.619306384350773, 53.249331216246588 ], [ 6.618168331397241, 53.251607899720618 ], [ 6.606534595422739, 53.251443495385544 ], [ 6.606197628567918, 53.253711919945957 ], [ 6.586207165320499, 53.255895093372743 ], [ 6.588801795265842, 53.262664127512068 ], [ 6.585562422142357, 53.261564005976304 ], [ 6.567109386114489, 53.261463627888887 ], [ 6.566770273194954, 53.263731940094026 ], [ 6.551493844413375, 53.262465422726066 ], [ 6.548740187460794, 53.264473942692412 ], [ 6.540697196285321, 53.26370210889656 ], [ 6.537897683709178, 53.264012089709674 ], [ 6.539403513466223, 53.260317072679456 ], [ 6.531739918354398, 53.258691639138767 ], [ 6.525703080306576, 53.257899668815405 ], [ 6.524462934065074, 53.256495815808378 ], [ 6.51890165884535, 53.258530209683911 ], [ 6.510838195215973, 53.256907216932099 ], [ 6.508046251364516, 53.257499553671536 ], [ 6.508804041498367, 53.255793754027003 ], [ 6.511566382375344, 53.254069192396088 ], [ 6.502577922584733, 53.247641254114107 ], [ 6.499392882299565, 53.248520167203928 ], [ 6.495712381925792, 53.245722999939069 ], [ 6.492097522530383, 53.245473205040035 ], [ 6.49252734175688, 53.246601731468921 ], [ 6.488533227074686, 53.247204682155036 ], [ 6.488576536664246, 53.248903007638084 ], [ 6.480988546030396, 53.250104862170772 ], [ 6.480458677968519, 53.245013525484552 ], [ 6.473260045170447, 53.229790345214838 ], [ 6.464688469259981, 53.207500954011323 ], [ 6.467056095378663, 53.206064048737979 ], [ 6.467013686108372, 53.204365689173386 ], [ 6.462545208451242, 53.201857716332448 ], [ 6.46330383646587, 53.200152170513654 ], [ 6.4822170026788, 53.203661626351078 ], [ 6.489010350752426, 53.20303317352375 ], [ 6.492570999960727, 53.201301666836954 ], [ 6.493306716447341, 53.198746758768912 ], [ 6.496095078251136, 53.19815476289051 ], [ 6.506957288354726, 53.200035733191143 ], [ 6.513282956462483, 53.196862128447222 ], [ 6.515722228611708, 53.198254834800842 ], [ 6.52966155723214, 53.195291607937989 ], [ 6.534180858222688, 53.184489617749058 ], [ 6.539694227705966, 53.181039213522084 ], [ 6.541627479706929, 53.17847245547145 ], [ 6.548099293108267, 53.180958137772279 ], [ 6.553550076591351, 53.175242648307389 ], [ 6.553950263430315, 53.175238754822047 ], [ 6.559391893933252, 53.169239937263931 ], [ 6.563878028969332, 53.15758759611866 ], [ 6.581250624008963, 53.163644716470777 ], [ 6.580811532414218, 53.162233427175295 ], [ 6.583494672497262, 53.157959689131509 ], [ 6.587039985613107, 53.155942321304551 ], [ 6.584593000709984, 53.154267991026366 ], [ 6.587251754277061, 53.149144993838355 ], [ 6.587949637026235, 53.14545726002158 ], [ 6.595547868634612, 53.145380889423912 ], [ 6.597107966359246, 53.143949475043591 ], [ 6.599930983432109, 53.144770345312828 ], [ 6.606577900985561, 53.139323323171745 ], [ 6.610536428229092, 53.137867296330725 ], [ 6.614470639321814, 53.135561975992154 ], [ 6.613590907671498, 53.132739618091328 ], [ 6.616397444974039, 53.132993995570715 ], [ 6.619155736808399, 53.131549981941319 ], [ 6.619099418102518, 53.129568601276532 ], [ 6.6218090279901, 53.126426198178152 ], [ 6.627699634620429, 53.122684554698701 ], [ 6.628809538590188, 53.11955853400454 ], [ 6.630799738089216, 53.119254750719882 ], [ 6.627537666947904, 53.11702346265001 ], [ 6.629470991708089, 53.114738316926932 ], [ 6.635824138210343, 53.113256561822112 ], [ 6.634967915157135, 53.111283508080263 ], [ 6.636876125731802, 53.108149075939792 ], [ 6.635220877974333, 53.106184356025494 ], [ 6.651750488180681, 53.111107496350776 ], [ 6.665444726737049, 53.114642963469322 ], [ 6.675527557900304, 53.11764949173363 ], [ 6.681147857133724, 53.11843833600328 ], [ 6.695220839433198, 53.121116910616223 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0417\", \"naam\": \"Laren\", \"code\": \"0417\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.218792518009478, 52.2121702014501 ], [ 5.224618609722036, 52.225204291922545 ], [ 5.223051863208055, 52.225202126655581 ], [ 5.245285172392724, 52.254397544635893 ], [ 5.244108431159135, 52.254679297368973 ], [ 5.231923548169172, 52.264574887577105 ], [ 5.2264228127238, 52.267965578157629 ], [ 5.225621216455917, 52.272778371517596 ], [ 5.209179969778371, 52.265958693833319 ], [ 5.203686669280021, 52.267082978292706 ], [ 5.188875627144155, 52.247520292340219 ], [ 5.199093272526021, 52.240740879131749 ], [ 5.218792518009478, 52.2121702014501 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0222\", \"naam\": \"Doetinchem\", \"code\": \"0222\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.416203991690117, 51.972750009233344 ], [ 6.402395910027929, 51.982215698158292 ], [ 6.39766430870506, 51.979707627566519 ], [ 6.390276590339496, 51.980337272713541 ], [ 6.380872119691031, 51.977868294358835 ], [ 6.38823428882519, 51.976106648607434 ], [ 6.388931004544353, 51.972419091969321 ], [ 6.390840146483704, 51.970703601218332 ], [ 6.390400073398435, 51.968441739677075 ], [ 6.38690181459055, 51.968754735196313 ], [ 6.381431392758692, 51.967951510712709 ], [ 6.373291471962157, 51.969719263656913 ], [ 6.368204382567258, 51.968629008218855 ], [ 6.365497105449418, 51.969501166806666 ], [ 6.366325361793472, 51.971759882376531 ], [ 6.369873625176288, 51.973712693087165 ], [ 6.36992945780081, 51.976261036575231 ], [ 6.353535224162868, 51.974697688184328 ], [ 6.337561557302656, 51.97454466271121 ], [ 6.327459471296073, 51.975758666431318 ], [ 6.327878629719605, 51.977171312093702 ], [ 6.331059998508822, 51.980261017301167 ], [ 6.332683682292288, 51.983363169857633 ], [ 6.335847851165403, 51.985603287082142 ], [ 6.327750433948387, 51.989633105041271 ], [ 6.32662914026004, 51.991907657097236 ], [ 6.318884086087982, 51.994234844912391 ], [ 6.312254577767249, 51.994003966651512 ], [ 6.304415708945866, 51.991799764576228 ], [ 6.295775478272438, 51.988468444646799 ], [ 6.293896298564706, 51.99188131909041 ], [ 6.291976828081099, 51.993312087086771 ], [ 6.278950321870617, 51.984915639111165 ], [ 6.274670879221388, 51.985231204618344 ], [ 6.270352336309241, 51.983564526874829 ], [ 6.267241584407842, 51.983871041209859 ], [ 6.258348131627123, 51.987335611263823 ], [ 6.254463361229673, 51.987930712475745 ], [ 6.250556676904725, 51.987393059761615 ], [ 6.24776444611989, 51.984015164244198 ], [ 6.257475555897492, 51.98252772462903 ], [ 6.257058562290542, 51.981114824756162 ], [ 6.252751997283077, 51.980013810507543 ], [ 6.249949170423728, 51.976069648921133 ], [ 6.246860504761044, 51.977508251743778 ], [ 6.243355112486284, 51.977533823416998 ], [ 6.244577708312855, 51.980356883022488 ], [ 6.237187690613534, 51.980976917666297 ], [ 6.234114320168052, 51.983264658959442 ], [ 6.235704622874084, 51.984952373665465 ], [ 6.232262679272459, 51.988375505414211 ], [ 6.232614888119382, 51.986390602928395 ], [ 6.227966639254999, 51.987839900426266 ], [ 6.222443953632238, 51.984197703594951 ], [ 6.229402623440969, 51.981316120487186 ], [ 6.231734423462152, 51.981016203208412 ], [ 6.22931754736803, 51.976785591074808 ], [ 6.22505968063757, 51.978231984095196 ], [ 6.214953675005917, 51.979436332152183 ], [ 6.211427292411995, 51.97832831677637 ], [ 6.205231475340145, 51.980353944768318 ], [ 6.190793982146203, 51.979037505264607 ], [ 6.185350978291443, 51.979640960923938 ], [ 6.179503301688268, 51.979397307065874 ], [ 6.172906436977613, 51.980857536886624 ], [ 6.168212434562591, 51.979756025493863 ], [ 6.160417271979639, 51.979524340212215 ], [ 6.16044168356654, 51.980940149901862 ], [ 6.151472957833669, 51.980432387449547 ], [ 6.144851099940158, 51.980475233448345 ], [ 6.146693204879341, 51.974233089000869 ], [ 6.148222246725842, 51.97252403991083 ], [ 6.150842357407678, 51.966276781774106 ], [ 6.157725067716544, 51.958868818400092 ], [ 6.16159396230082, 51.957427423603328 ], [ 6.163116970792263, 51.955435016284511 ], [ 6.168921981186416, 51.953414192025633 ], [ 6.172036258518751, 51.953393441769578 ], [ 6.178574200794179, 51.948818479783988 ], [ 6.184781977137874, 51.947643739291181 ], [ 6.188638921959335, 51.945635132435015 ], [ 6.18820928556969, 51.943372490841789 ], [ 6.193223079211452, 51.940789447182233 ], [ 6.205215208045663, 51.936741838334527 ], [ 6.202921534311747, 51.939023356158252 ], [ 6.202978127025614, 51.94213812892098 ], [ 6.208836617146602, 51.943230109426004 ], [ 6.218177245611959, 51.943164444433599 ], [ 6.220927882449859, 51.944560952338122 ], [ 6.230268764405081, 51.944494326133388 ], [ 6.261377234873394, 51.942851091436211 ], [ 6.272669187352269, 51.943049766197873 ], [ 6.273036025741557, 51.941914206027896 ], [ 6.276149438504657, 51.941890700218281 ], [ 6.278901791154528, 51.943285847724383 ], [ 6.301886868520068, 51.944242027217769 ], [ 6.301445776565007, 51.941696659286123 ], [ 6.30566874455252, 51.938831733762214 ], [ 6.308410202405804, 51.939659879389971 ], [ 6.314572330244723, 51.936496213623052 ], [ 6.32078656848035, 51.935880613232207 ], [ 6.326876206797076, 51.929318453513382 ], [ 6.333017726862728, 51.925304360959402 ], [ 6.336925961011276, 51.926122444189197 ], [ 6.348566662876541, 51.924611774393178 ], [ 6.349326508632188, 51.923755948296048 ], [ 6.355550704700778, 51.923704819923202 ], [ 6.360984586480678, 51.923093508369284 ], [ 6.377089768310054, 51.930039018448966 ], [ 6.381444694729314, 51.9334006932337 ], [ 6.379950916549728, 51.93624535172308 ], [ 6.385926231251083, 51.94242519510518 ], [ 6.397473408318612, 51.953937843190687 ], [ 6.403389379731691, 51.957285292133605 ], [ 6.407417539231237, 51.963197670835086 ], [ 6.416203991690117, 51.972750009233344 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0437\", \"naam\": \"Ouder-Amstel\", \"code\": \"0437\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.955404020302359, 52.278330156559356 ], [ 4.952225312235253, 52.282566089041971 ], [ 4.946280796972096, 52.288773857377208 ], [ 4.93715041398713, 52.299499988781854 ], [ 4.929614481656538, 52.307399872160644 ], [ 4.92998649241048, 52.309383508637247 ], [ 4.936233604551817, 52.3125223698121 ], [ 4.935041855067563, 52.31393367454487 ], [ 4.938562562019663, 52.31507976154424 ], [ 4.939700048033154, 52.319048456725938 ], [ 4.940871875579798, 52.319619224040132 ], [ 4.93769454648791, 52.323288408468443 ], [ 4.940419564712671, 52.325564090534122 ], [ 4.944723658458399, 52.326996114021924 ], [ 4.942738111254778, 52.329254030991869 ], [ 4.948997300186932, 52.331542732862751 ], [ 4.94583385729829, 52.333796332134533 ], [ 4.950503726924223, 52.338061196393156 ], [ 4.949712799030356, 52.338624613508188 ], [ 4.936401973519459, 52.334610286399858 ], [ 4.928528646649707, 52.336562219112352 ], [ 4.923828548988746, 52.335411229910406 ], [ 4.921499378282513, 52.332853557950877 ], [ 4.912885790278158, 52.330553984160424 ], [ 4.913734393416155, 52.324610805095851 ], [ 4.910213574926446, 52.323463980965045 ], [ 4.91062130763565, 52.322049770618598 ], [ 4.914172176731499, 52.32036499659403 ], [ 4.912230788205146, 52.318375022569015 ], [ 4.909090802149618, 52.318362374454139 ], [ 4.905579807259469, 52.316365935628298 ], [ 4.905251827112747, 52.310418002636759 ], [ 4.907643062485613, 52.307029663021325 ], [ 4.904927004680185, 52.304186902727345 ], [ 4.898689503903609, 52.300480068572988 ], [ 4.901080701954252, 52.297091855149972 ], [ 4.900700787086222, 52.295957603704963 ], [ 4.892864242336188, 52.295075588722419 ], [ 4.891304551124093, 52.294219541014506 ], [ 4.890943873390563, 52.29138630119035 ], [ 4.887046766246589, 52.289104499172865 ], [ 4.889808275136871, 52.287700282649745 ], [ 4.88512074279819, 52.285981433102016 ], [ 4.884358733475953, 52.283995982393449 ], [ 4.878926279143349, 52.278875630960897 ], [ 4.881317814347971, 52.275487803869694 ], [ 4.881362892840146, 52.271523562220175 ], [ 4.879450951676307, 52.26726775328487 ], [ 4.882619430271377, 52.264449578177533 ], [ 4.879123573004669, 52.261602858217707 ], [ 4.87403416058783, 52.261014521699344 ], [ 4.873674844936804, 52.258181213317712 ], [ 4.870203075226354, 52.253352101720068 ], [ 4.873759776839697, 52.250819031198937 ], [ 4.877264177417155, 52.252816430870475 ], [ 4.882741410418442, 52.253689462834579 ], [ 4.886297426591653, 52.251156014152201 ], [ 4.890586261534631, 52.253156338973689 ], [ 4.896486946078478, 52.251198764234793 ], [ 4.900014092658028, 52.251213357584554 ], [ 4.902735858982614, 52.253206769065947 ], [ 4.910972308120214, 52.252673897075873 ], [ 4.917590120916454, 52.256947992448211 ], [ 4.919104342768082, 52.262051130291965 ], [ 4.923404558759687, 52.263200776691811 ], [ 4.924542323277003, 52.266886491769625 ], [ 4.929232287872579, 52.268320621464973 ], [ 4.926838927008263, 52.272275750397576 ], [ 4.927605559977136, 52.27397777173713 ], [ 4.925996032447791, 52.277935925016173 ], [ 4.926367639274827, 52.279919583557223 ], [ 4.933810016727318, 52.280797874751215 ], [ 4.942855338825402, 52.278283661769059 ], [ 4.947947644638202, 52.278869035067245 ], [ 4.955404020302359, 52.278330156559356 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1970\", \"naam\": \"Noardeast-Fryslân\", \"code\": \"1970\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.232111621110183, 53.256644115003986 ], [ 6.236934436991783, 53.257176299715979 ], [ 6.238566256227677, 53.258580290343772 ], [ 6.237803313942884, 53.260567466981527 ], [ 6.238649995268956, 53.262826343905104 ], [ 6.243106221955023, 53.265059540205243 ], [ 6.245162110322836, 53.267592854469676 ], [ 6.247585479683987, 53.268424844574717 ], [ 6.249568262425012, 53.267278184405015 ], [ 6.254398165260391, 53.268092731785721 ], [ 6.255652658560127, 53.27063165223381 ], [ 6.252907408341767, 53.273765674280867 ], [ 6.251370908583296, 53.277174045982441 ], [ 6.252631168820975, 53.279996057628523 ], [ 6.251874174966055, 53.282266376050188 ], [ 6.253191442693801, 53.287919045983834 ], [ 6.25806373060029, 53.290714900845749 ], [ 6.265699714153938, 53.291225519854635 ], [ 6.268479835958696, 53.289789617884082 ], [ 6.270526803860278, 53.291756340247332 ], [ 6.270567386497358, 53.293737796699077 ], [ 6.274237434954983, 53.296541832844028 ], [ 6.274697029941716, 53.299369513538892 ], [ 6.278379528700951, 53.302739544101435 ], [ 6.281614195681485, 53.303847938819253 ], [ 6.289264619703171, 53.304923178961793 ], [ 6.294554522815568, 53.308280639193171 ], [ 6.292588897658524, 53.310277213787984 ], [ 6.286602327956319, 53.312020807094001 ], [ 6.280591804314634, 53.312631851866634 ], [ 6.286815302858303, 53.341462143646957 ], [ 6.280008885638688, 53.342645290220609 ], [ 6.273633006847494, 53.345240390423761 ], [ 6.264409024686709, 53.346157342536685 ], [ 6.255615002866167, 53.348485990383104 ], [ 6.251596740095859, 53.348514941915958 ], [ 6.246339100837543, 53.346854010356651 ], [ 6.241862986634477, 53.344054890435899 ], [ 6.237817168832678, 53.342668070484727 ], [ 6.232610782544604, 53.343554094778575 ], [ 6.227883338281794, 53.348399961299769 ], [ 6.226358780268758, 53.352657120906656 ], [ 6.22399709276542, 53.355221480236125 ], [ 6.215215356630901, 53.358396360062549 ], [ 6.196362211969453, 53.360506371124757 ], [ 6.187545767221293, 53.361980853929573 ], [ 6.17875474670328, 53.364870009032686 ], [ 6.173616870074001, 53.369716366293879 ], [ 6.169725256472882, 53.376819162057892 ], [ 6.1678585974785, 53.384757973729293 ], [ 6.167966509637289, 53.390702272523569 ], [ 6.194133921500317, 53.413177212565273 ], [ 6.079281245607924, 53.429179118207422 ], [ 6.050060946129515, 53.492471344637842 ], [ 6.004903333044446, 53.492711213232347 ], [ 6.004385817201379, 53.456762470150039 ], [ 5.95902407752964, 53.438868986403151 ], [ 5.958786688204317, 53.421035732527699 ], [ 5.823260113860923, 53.394426756047686 ], [ 5.792920475614264, 53.376698416416822 ], [ 5.778042056337882, 53.376747680088187 ], [ 5.748032607496246, 53.394675868775025 ], [ 5.702976116320347, 53.394802558784505 ], [ 5.702778698749424, 53.367909914955035 ], [ 5.718220849559107, 53.337011700800041 ], [ 5.722525486767728, 53.322279021520089 ], [ 5.721272351629495, 53.316054481111507 ], [ 5.729716268715149, 53.317446170935106 ], [ 5.749359782003229, 53.31342526931671 ], [ 5.747323742133701, 53.310034268362138 ], [ 5.740052723833318, 53.304677061818417 ], [ 5.737201204352688, 53.29958970812622 ], [ 5.735556709804277, 53.294781879629731 ], [ 5.74919571145284, 53.293892264563709 ], [ 5.763247829837174, 53.294415284136136 ], [ 5.794457018397403, 53.284122060734298 ], [ 5.797664370502501, 53.283828045119371 ], [ 5.801259341769234, 53.282117123082955 ], [ 5.810875118017325, 53.280668099658925 ], [ 5.813268476158505, 53.279244145213163 ], [ 5.810443343562515, 53.277555549690192 ], [ 5.813652895802966, 53.277544195064507 ], [ 5.817653535584011, 53.27639753043092 ], [ 5.838500208299164, 53.274905505351889 ], [ 5.84579645438001, 53.281955317666061 ], [ 5.847838895989701, 53.285344673799031 ], [ 5.861117943879863, 53.288690183680337 ], [ 5.86151301294528, 53.288122429314342 ], [ 5.874694776843364, 53.282690791368076 ], [ 5.877073278097819, 53.280133227671378 ], [ 5.882250090790836, 53.276714814538288 ], [ 5.891516997990291, 53.28007344530706 ], [ 5.897979985169044, 53.283726417238171 ], [ 5.897588785861721, 53.284577375986579 ], [ 5.906457287267061, 53.287936546261605 ], [ 5.903716084522483, 53.293610326310095 ], [ 5.896588948310229, 53.301850579675239 ], [ 5.907076957689582, 53.306052108235782 ], [ 5.921194474819701, 53.311369033455748 ], [ 5.922416560840942, 53.312779078479124 ], [ 5.934899527257409, 53.315553797321805 ], [ 5.937308776647765, 53.315542793012902 ], [ 5.946975175040158, 53.317762927664788 ], [ 5.949384543869121, 53.317751681184198 ], [ 5.953846383397796, 53.321127882760237 ], [ 5.959070840067042, 53.321386233852309 ], [ 5.963908916691855, 53.322778597882944 ], [ 5.968724381532804, 53.322472299244033 ], [ 5.971921848239156, 53.32132440027307 ], [ 5.974277413142625, 53.317349561953101 ], [ 5.973845029195824, 53.31508689651141 ], [ 5.97061358684822, 53.313687141431991 ], [ 5.975740602595414, 53.306867796164831 ], [ 5.980569790639932, 53.30769334024582 ], [ 5.990240599914086, 53.310193079508913 ], [ 5.998274375850119, 53.310435592962364 ], [ 6.009102346760743, 53.309530747515787 ], [ 6.01149483446221, 53.308385946991031 ], [ 6.020327173449752, 53.308339735417469 ], [ 6.021138438165408, 53.308901656187373 ], [ 6.021305008464163, 53.3202247129108 ], [ 6.022940562400761, 53.322197757218355 ], [ 6.022564008302286, 53.323898333914293 ], [ 6.032629792192182, 53.325543290234009 ], [ 6.035022539869743, 53.324398027356708 ], [ 6.038248315113909, 53.325229891721854 ], [ 6.04666077995862, 53.323768541758014 ], [ 6.05230081404824, 53.324869858202426 ], [ 6.056709848856634, 53.324279184093051 ], [ 6.067544512038513, 53.323652148817551 ], [ 6.071578584009549, 53.32476164225109 ], [ 6.075982815014973, 53.323887188706387 ], [ 6.077562044434753, 53.322179534636639 ], [ 6.074335744177133, 53.321348725143771 ], [ 6.075080174370898, 53.317664176224412 ], [ 6.072634839609543, 53.315413351142809 ], [ 6.071535142008667, 53.296734985238487 ], [ 6.069934191032129, 53.297027194957209 ], [ 6.07387567686731, 53.29247510566649 ], [ 6.066651939856958, 53.292516178670368 ], [ 6.054184756072391, 53.290887434861361 ], [ 6.051798773949556, 53.26627072974177 ], [ 6.050194468862397, 53.266279598207227 ], [ 6.04674795999832, 53.250727834938047 ], [ 6.045946095535784, 53.250732237682293 ], [ 6.043829519855792, 53.243383092259158 ], [ 6.065538360258552, 53.247225860867978 ], [ 6.074376130798395, 53.248308019724945 ], [ 6.100561290745221, 53.255799146841127 ], [ 6.105396537435362, 53.257185850994119 ], [ 6.110656812334843, 53.259985331176736 ], [ 6.115464198034432, 53.259673162846269 ], [ 6.129944372795374, 53.262132420239325 ], [ 6.141212810097257, 53.2643270408646 ], [ 6.14514876910135, 53.260055659776199 ], [ 6.148356861969948, 53.260035365761759 ], [ 6.153610208309195, 53.262266805563989 ], [ 6.154803236281015, 53.261692970694263 ], [ 6.158848916072269, 53.263648789450876 ], [ 6.160422669270802, 53.261940022868281 ], [ 6.164067579775645, 53.263898246941061 ], [ 6.167270831053423, 53.263594373021014 ], [ 6.171245268185598, 53.261586735314786 ], [ 6.176448225414644, 53.260986433404852 ], [ 6.179218997303596, 53.258986432971774 ], [ 6.180859420577243, 53.260957357310403 ], [ 6.190531230355732, 53.263441012333864 ], [ 6.185786828502197, 53.267153059004194 ], [ 6.189048011234353, 53.269962402289082 ], [ 6.190626064984277, 53.26853631792391 ], [ 6.193861212247994, 53.269930168179414 ], [ 6.206642629665472, 53.267012553924431 ], [ 6.217037818318127, 53.26524251750547 ], [ 6.218939457201461, 53.259850289901344 ], [ 6.224103119077229, 53.257266424013054 ], [ 6.232111621110183, 53.256644115003986 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0753\", \"naam\": \"Best\", \"code\": \"0753\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.442661122047978, 51.493831933734889 ], [ 5.440736920692533, 51.496098416083463 ], [ 5.447695164864664, 51.511954069551379 ], [ 5.434213706895901, 51.523571378894957 ], [ 5.423810247241995, 51.534053404621332 ], [ 5.420342121968388, 51.538585593371891 ], [ 5.411085956690867, 51.542269422168076 ], [ 5.405301557024496, 51.548217597632949 ], [ 5.404144047355752, 51.548217772817317 ], [ 5.390639542764025, 51.545387004077199 ], [ 5.388324635500257, 51.544254266186876 ], [ 5.382537647986477, 51.543687793427139 ], [ 5.368649031524908, 51.543403236506776 ], [ 5.365176052914721, 51.545101817933876 ], [ 5.357074228307204, 51.544816824653786 ], [ 5.368653729935433, 51.531792170704101 ], [ 5.366725877367911, 51.530375866981082 ], [ 5.355541992360709, 51.528957402445052 ], [ 5.353615709913454, 51.526124897441186 ], [ 5.35400485766345, 51.521310658134169 ], [ 5.349381782853592, 51.516211710171227 ], [ 5.35092696632518, 51.512530633748156 ], [ 5.350544614618712, 51.508565752140157 ], [ 5.35247405199328, 51.506017562481311 ], [ 5.353248164938797, 51.501769826929653 ], [ 5.355950133184304, 51.496106626101806 ], [ 5.361347415105303, 51.492992764187285 ], [ 5.366743579308016, 51.490728245205332 ], [ 5.385240485916681, 51.486765226540108 ], [ 5.389864323440228, 51.487614799512308 ], [ 5.390634767123575, 51.485065998063575 ], [ 5.391018903640448, 51.471755681455448 ], [ 5.394871079484079, 51.473454674920355 ], [ 5.399110262209489, 51.48081746110703 ], [ 5.395258123387396, 51.483649774817884 ], [ 5.400652847348296, 51.485914852988294 ], [ 5.403350004628275, 51.485914507267381 ], [ 5.407202207917032, 51.483931520549994 ], [ 5.415294205854662, 51.48534583159401 ], [ 5.429940804303319, 51.490722125949702 ], [ 5.442661122047978, 51.493831933734889 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1730\", \"naam\": \"Tynaarlo\", \"code\": \"1730\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.631325582700858, 53.026095326856812 ], [ 6.648482303726722, 53.02619877988711 ], [ 6.644472014220956, 53.039265756042418 ], [ 6.640556243356804, 53.041855158734549 ], [ 6.64217655736394, 53.042687610352978 ], [ 6.64226648535206, 53.045801269997284 ], [ 6.645515733558857, 53.047749160859389 ], [ 6.646786590514366, 53.050284098561775 ], [ 6.651249974705564, 53.052785339009112 ], [ 6.654125850266364, 53.055586378548014 ], [ 6.660918365195708, 53.055797416007266 ], [ 6.66697950965522, 53.058281059167477 ], [ 6.664235772895018, 53.060009243440241 ], [ 6.665499753882304, 53.06226091196352 ], [ 6.669923642342138, 53.063346159179744 ], [ 6.670423149070829, 53.066738548262784 ], [ 6.664510484237135, 53.069350098723689 ], [ 6.666173973348481, 53.071597491916457 ], [ 6.663371126597147, 53.071344263921027 ], [ 6.653646656866771, 53.080225000926177 ], [ 6.649637200361879, 53.079701064217453 ], [ 6.648912659701031, 53.082256988843369 ], [ 6.657755635313165, 53.084145466140029 ], [ 6.661690790565609, 53.08212163531423 ], [ 6.670816419634702, 53.080042128397075 ], [ 6.675557544179418, 53.078292331201723 ], [ 6.6877570401428, 53.072214360644232 ], [ 6.692496624228474, 53.070463893392045 ], [ 6.69912913690131, 53.065294741737077 ], [ 6.711250480345437, 53.069974757544173 ], [ 6.713611074211206, 53.068816032315716 ], [ 6.72614290799296, 53.073773152894184 ], [ 6.727323123442932, 53.073193650265686 ], [ 6.733780937100303, 53.075386356585014 ], [ 6.745926529471026, 53.080628921415375 ], [ 6.74955567486155, 53.081720267492734 ], [ 6.749218548854487, 53.083706138244693 ], [ 6.74525193124098, 53.084600642797767 ], [ 6.748916917058456, 53.086824192848354 ], [ 6.776335037478383, 53.094720512140086 ], [ 6.752051901618684, 53.110289661668901 ], [ 6.747754388112228, 53.113453154140252 ], [ 6.73755005865609, 53.119514660089806 ], [ 6.712788915310995, 53.120357510642002 ], [ 6.709991288974751, 53.120388436011176 ], [ 6.695220839433198, 53.121116910616223 ], [ 6.681147857133724, 53.11843833600328 ], [ 6.675527557900304, 53.11764949173363 ], [ 6.665444726737049, 53.114642963469322 ], [ 6.651750488180681, 53.111107496350776 ], [ 6.635220877974333, 53.106184356025494 ], [ 6.636876125731802, 53.108149075939792 ], [ 6.634967915157135, 53.111283508080263 ], [ 6.635824138210343, 53.113256561822112 ], [ 6.629470991708089, 53.114738316926932 ], [ 6.627537666947904, 53.11702346265001 ], [ 6.630799738089216, 53.119254750719882 ], [ 6.628809538590188, 53.11955853400454 ], [ 6.627699634620429, 53.122684554698701 ], [ 6.6218090279901, 53.126426198178152 ], [ 6.619099418102518, 53.129568601276532 ], [ 6.619155736808399, 53.131549981941319 ], [ 6.616397444974039, 53.132993995570715 ], [ 6.613590907671498, 53.132739618091328 ], [ 6.614470639321814, 53.135561975992154 ], [ 6.610536428229092, 53.137867296330725 ], [ 6.606577900985561, 53.139323323171745 ], [ 6.599930983432109, 53.144770345312828 ], [ 6.597107966359246, 53.143949475043591 ], [ 6.595547868634612, 53.145380889423912 ], [ 6.587949637026235, 53.14545726002158 ], [ 6.587251754277061, 53.149144993838355 ], [ 6.584593000709984, 53.154267991026366 ], [ 6.587039985613107, 53.155942321304551 ], [ 6.583494672497262, 53.157959689131509 ], [ 6.580811532414218, 53.162233427175295 ], [ 6.581250624008963, 53.163644716470777 ], [ 6.563878028969332, 53.15758759611866 ], [ 6.559391893933252, 53.169239937263931 ], [ 6.553950263430315, 53.175238754822047 ], [ 6.553550076591351, 53.175242648307389 ], [ 6.548099293108267, 53.180958137772279 ], [ 6.541627479706929, 53.17847245547145 ], [ 6.539694227705966, 53.181039213522084 ], [ 6.534180858222688, 53.184489617749058 ], [ 6.52966155723214, 53.195291607937989 ], [ 6.515722228611708, 53.198254834800842 ], [ 6.513282956462483, 53.196862128447222 ], [ 6.512067059721866, 53.196307284907121 ], [ 6.517480161874341, 53.188895098929471 ], [ 6.516649970190233, 53.187770411318283 ], [ 6.521401707263021, 53.185743673402904 ], [ 6.523721649428871, 53.182607302593233 ], [ 6.524833128343384, 53.179199224237507 ], [ 6.530694422721995, 53.17376402324129 ], [ 6.532235223200255, 53.171484283851285 ], [ 6.535443965687534, 53.171736725960365 ], [ 6.533375728806357, 53.169208349464711 ], [ 6.536146611438081, 53.168049307755624 ], [ 6.537249228144541, 53.16435804390332 ], [ 6.534358614441094, 53.160988175530441 ], [ 6.537891430674364, 53.158406138599801 ], [ 6.537831263297339, 53.156141668367198 ], [ 6.534111213050436, 53.151647223270999 ], [ 6.537243339735684, 53.149069026448004 ], [ 6.538352913902686, 53.145660791517393 ], [ 6.536678146382617, 53.142845545832841 ], [ 6.540179224296279, 53.139131189428539 ], [ 6.539206428267319, 53.132628487552509 ], [ 6.53360928911818, 53.13268217155737 ], [ 6.528389570771169, 53.13188260154368 ], [ 6.517580461004877, 53.131418800776636 ], [ 6.510762066443093, 53.130633537653921 ], [ 6.512628663701316, 53.125519634240341 ], [ 6.50090548253387, 53.120532804254715 ], [ 6.49857991744876, 53.123385726366173 ], [ 6.480121607094224, 53.12072422625296 ], [ 6.484289003356486, 53.111625898774861 ], [ 6.484559681463985, 53.106527025905258 ], [ 6.490707785617575, 53.096843983956383 ], [ 6.506662423118104, 53.080274021538607 ], [ 6.513245189993467, 53.072284446065012 ], [ 6.514665745863295, 53.065475767609151 ], [ 6.511636949616012, 53.056443835763844 ], [ 6.504989164210211, 53.046313118432181 ], [ 6.510930302350988, 53.044558628215206 ], [ 6.52413389358242, 53.045849586908858 ], [ 6.528862369169194, 53.043539437076788 ], [ 6.530368915598766, 53.040127362211891 ], [ 6.533508209581663, 53.038115335216482 ], [ 6.541863082878446, 53.037185560753109 ], [ 6.541426579781867, 53.035774064594484 ], [ 6.547395017522901, 53.035150043692902 ], [ 6.549472766158842, 53.038244436709341 ], [ 6.550669542714915, 53.038232803321918 ], [ 6.552401847625569, 53.043312496130333 ], [ 6.550083766380571, 53.046166464010682 ], [ 6.551386940536363, 53.050117767078618 ], [ 6.5538571576351, 53.052925116988163 ], [ 6.552720733073903, 53.055201317307151 ], [ 6.555928609536125, 53.055736311023828 ], [ 6.555206551231833, 53.058574766608452 ], [ 6.569613045263578, 53.059848993586016 ], [ 6.570280214630226, 53.0550289990694 ], [ 6.575069136328616, 53.054981556149514 ], [ 6.575983486211133, 53.059219598711756 ], [ 6.580365971665434, 53.058892842318187 ], [ 6.586376081368757, 53.059682193305363 ], [ 6.587925601911429, 53.057967804772247 ], [ 6.599977664665623, 53.060677694386712 ], [ 6.601206689548103, 53.061797802377001 ], [ 6.604296652953983, 53.058085563994105 ], [ 6.607322487595432, 53.052108745411424 ], [ 6.607969454912839, 53.046722417237717 ], [ 6.606534168043525, 53.038242727874518 ], [ 6.60320026116425, 53.033180059961531 ], [ 6.631325582700858, 53.026095326856812 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1641\", \"naam\": \"Maasgouw\", \"code\": \"1641\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.914045754907028, 51.133268066063543 ], [ 5.955660119981499, 51.159126872359813 ], [ 5.952596242133513, 51.158858621775813 ], [ 5.946878747467951, 51.160585563486705 ], [ 5.941140323219251, 51.160613076810741 ], [ 5.928226629699692, 51.16860375952453 ], [ 5.922500397866235, 51.169763120606788 ], [ 5.916747740971223, 51.168656662803656 ], [ 5.921751608019436, 51.171182604789387 ], [ 5.92603722483624, 51.177676567382989 ], [ 5.921075236047001, 51.1788323067005 ], [ 5.925351511472194, 51.18447671706096 ], [ 5.929219267226366, 51.187857222043768 ], [ 5.934242799264743, 51.1917985782679 ], [ 5.951201832809577, 51.201063341317976 ], [ 5.947007228703078, 51.202499661401063 ], [ 5.94663468093065, 51.203351077683024 ], [ 5.938217282887974, 51.203957709455807 ], [ 5.928637499416538, 51.20343632443808 ], [ 5.924814941457011, 51.204020485750739 ], [ 5.91795178949793, 51.20660089556474 ], [ 5.914148356263018, 51.208883857731486 ], [ 5.906833489919372, 51.205518315938868 ], [ 5.909182693356233, 51.210039093554549 ], [ 5.908049850574658, 51.211460208994872 ], [ 5.901947479592788, 51.213753048736244 ], [ 5.894312391569207, 51.216052263705251 ], [ 5.891992403695273, 51.214079919282902 ], [ 5.889326839378802, 51.215507497026202 ], [ 5.883943044752616, 51.213548189182596 ], [ 5.879702595715095, 51.211017381593066 ], [ 5.872727888927973, 51.203400168933236 ], [ 5.873095808564179, 51.201982601121244 ], [ 5.87114539810088, 51.198592268714307 ], [ 5.868447395700655, 51.196904238755522 ], [ 5.868429569063202, 51.195205076832877 ], [ 5.87374446305382, 51.190934850996484 ], [ 5.857210731126901, 51.183922769047797 ], [ 5.847976133739436, 51.17914526778992 ], [ 5.852522837581355, 51.174595850081523 ], [ 5.846056866390754, 51.178586453835543 ], [ 5.842601178649009, 51.177467230821215 ], [ 5.826842345467439, 51.170447811094093 ], [ 5.826424469013907, 51.166767721494239 ], [ 5.827930473635844, 51.164213166725546 ], [ 5.829843459144548, 51.164205891003995 ], [ 5.833259316715, 51.161360765203035 ], [ 5.8328520049776, 51.158813478719317 ], [ 5.838573578815097, 51.157092145524068 ], [ 5.836245122202822, 51.153702705142457 ], [ 5.840438748175356, 51.152270382740632 ], [ 5.846142243687947, 51.148849508952054 ], [ 5.855660621675089, 51.14456340426657 ], [ 5.846833499992319, 51.141483421098947 ], [ 5.843349657090892, 51.137249073878991 ], [ 5.844097504382422, 51.135546897484382 ], [ 5.84215206686012, 51.132156067814364 ], [ 5.840226458431525, 51.130747569793478 ], [ 5.828751460173546, 51.13022537715166 ], [ 5.824920223968332, 51.129390271504462 ], [ 5.820690798451537, 51.126857294279759 ], [ 5.814134047479017, 51.120651077372166 ], [ 5.809908624227878, 51.118400901311595 ], [ 5.807566120702589, 51.113028507528334 ], [ 5.810966516554588, 51.108768057456572 ], [ 5.814774714902122, 51.107338059357787 ], [ 5.823574323048663, 51.108438122071838 ], [ 5.828910586036122, 51.107001902299061 ], [ 5.832709848220744, 51.104721730454195 ], [ 5.833424592365829, 51.099621278454983 ], [ 5.8372784425358, 51.103004863231327 ], [ 5.844560633334781, 51.105242034593594 ], [ 5.84919426741359, 51.110038181280238 ], [ 5.851478562251547, 51.109179445804614 ], [ 5.858441213639779, 51.117364359623224 ], [ 5.872388914867455, 51.135148890901817 ], [ 5.874291674998993, 51.13429130323118 ], [ 5.881562338272075, 51.13482698059984 ], [ 5.882694120115141, 51.133406122348049 ], [ 5.886535965560701, 51.135088899853969 ], [ 5.890735630608937, 51.134504345808388 ], [ 5.897633601663926, 51.135890254118642 ], [ 5.89838571619118, 51.134754117217796 ], [ 5.903337162435923, 51.133032966087711 ], [ 5.907944425831043, 51.134711631784107 ], [ 5.911735577820656, 51.131862492166633 ], [ 5.914045754907028, 51.133268066063543 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0197\", \"naam\": \"Aalten\", \"code\": \"0197\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.6688772892671, 51.913907710722349 ], [ 6.664282991382431, 51.916506683543084 ], [ 6.661147575866472, 51.915691075684975 ], [ 6.66083089922476, 51.918243449431088 ], [ 6.663212735762916, 51.919916900008062 ], [ 6.658268584469252, 51.923935503464158 ], [ 6.658801836924116, 51.929027606630797 ], [ 6.653776440579106, 51.930214737623281 ], [ 6.651394404632313, 51.928541098757798 ], [ 6.643653553719469, 51.930040190975937 ], [ 6.634069124892457, 51.935240122471512 ], [ 6.634132021925615, 51.93750516408825 ], [ 6.632194363351823, 51.937808919260043 ], [ 6.633805805027467, 51.93977433276693 ], [ 6.634709917297408, 51.944296154758767 ], [ 6.633247579074776, 51.947710224425059 ], [ 6.629029145239523, 51.950020568689396 ], [ 6.634643331466043, 51.955908599097789 ], [ 6.6394250616752, 51.959822746148291 ], [ 6.638725440101998, 51.962662324355101 ], [ 6.633742944328231, 51.965547379913069 ], [ 6.628728465513296, 51.967299707593355 ], [ 6.611642887901103, 51.96917813452103 ], [ 6.598449828143857, 51.971014037823274 ], [ 6.592601265688121, 51.970790925191245 ], [ 6.591860492870133, 51.972214567975342 ], [ 6.576681046619752, 51.972652300187889 ], [ 6.574748972056145, 51.973238246477635 ], [ 6.569656670843626, 51.972156724176862 ], [ 6.559194367579812, 51.974243923546339 ], [ 6.547078105286385, 51.972664802270195 ], [ 6.527434449868593, 51.966059931881759 ], [ 6.532791516656502, 51.962326156435047 ], [ 6.527643883809346, 51.958977704192158 ], [ 6.519772117101235, 51.95565530531843 ], [ 6.517633198358804, 51.948029279506741 ], [ 6.504732964333623, 51.945886968717907 ], [ 6.503063600737419, 51.941371506898832 ], [ 6.500679545093591, 51.939411663118314 ], [ 6.503014343286201, 51.939389520726138 ], [ 6.495397184233862, 51.930398945442718 ], [ 6.496932417949012, 51.929534834527857 ], [ 6.492548359156631, 51.925328036468144 ], [ 6.493145132670951, 51.917959013646744 ], [ 6.490797531522145, 51.917414671498854 ], [ 6.491144732666718, 51.915712161197327 ], [ 6.487213846459336, 51.914049782270602 ], [ 6.488741741012162, 51.912902634447342 ], [ 6.482839119311633, 51.91012574976947 ], [ 6.479332300774137, 51.90987519476456 ], [ 6.472666620341911, 51.907671311138934 ], [ 6.473771593073735, 51.905112226171596 ], [ 6.478640851743265, 51.897420465870468 ], [ 6.47973147501545, 51.894295034089716 ], [ 6.479920653067295, 51.886080224551279 ], [ 6.484002703917822, 51.878112316957996 ], [ 6.48198387288514, 51.875015855959603 ], [ 6.474464003810136, 51.869421549692916 ], [ 6.47173063660199, 51.868880412844142 ], [ 6.471239779908863, 51.864636809703256 ], [ 6.468506741933094, 51.864095596554222 ], [ 6.468023044688483, 51.860135122978029 ], [ 6.464411766190489, 51.855353761936051 ], [ 6.47253422969292, 51.853862892019414 ], [ 6.474128839744133, 51.855547394348442 ], [ 6.478435680102679, 51.856923483214878 ], [ 6.482319900610857, 51.856887309717216 ], [ 6.487417827232417, 51.858822108430971 ], [ 6.498752426473269, 51.861547430577403 ], [ 6.50193024322284, 51.864349402322297 ], [ 6.501244405892153, 51.868037647105353 ], [ 6.504366591602791, 51.868574399756881 ], [ 6.5114165424666, 51.870772788831921 ], [ 6.515761487549638, 51.873563211632366 ], [ 6.518078623045573, 51.872974495108764 ], [ 6.524705554626832, 51.873760112530377 ], [ 6.529814398138255, 51.87597619654796 ], [ 6.52945457628672, 51.877112542145284 ], [ 6.539659483878546, 51.880977786523253 ], [ 6.544029012770265, 51.884616571599551 ], [ 6.549433580448617, 51.883147148219344 ], [ 6.548326138240678, 51.885423797132546 ], [ 6.552234749354409, 51.886234721358008 ], [ 6.552564717526009, 51.883965752635561 ], [ 6.555270542630864, 51.883372445476454 ], [ 6.556003676572124, 51.881665878247688 ], [ 6.560293345789614, 51.882189527690628 ], [ 6.560726305486401, 51.883884475351756 ], [ 6.569395591873331, 51.888328921505291 ], [ 6.585878738883605, 51.894109313462025 ], [ 6.604241016923973, 51.897319040151785 ], [ 6.625366366999243, 51.901912893543177 ], [ 6.627667878088076, 51.900755752714538 ], [ 6.634285054394362, 51.900968899936849 ], [ 6.637878654246308, 51.904329272685331 ], [ 6.648852838628306, 51.907327288439795 ], [ 6.662185756457995, 51.911148361221827 ], [ 6.6688772892671, 51.913907710722349 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0441\", \"naam\": \"Schagen\", \"code\": \"0441\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.82632593161286, 52.717538367789125 ], [ 4.847681833735979, 52.72018537596427 ], [ 4.84843577847807, 52.723303400991291 ], [ 4.850392100527616, 52.725294260264562 ], [ 4.845579151574511, 52.730085949546648 ], [ 4.844362616741861, 52.732345577289976 ], [ 4.839979780045756, 52.734307539443869 ], [ 4.835528916255368, 52.741648789693485 ], [ 4.831508770652969, 52.746160425146066 ], [ 4.810658425746329, 52.76446574427991 ], [ 4.807011406884727, 52.770394065607789 ], [ 4.813344853049144, 52.771274165066906 ], [ 4.816139100861462, 52.769871870600831 ], [ 4.820901131618496, 52.769611453089247 ], [ 4.819652892326152, 52.774135808910714 ], [ 4.829156155248, 52.77531326106574 ], [ 4.827464968076029, 52.78351646739533 ], [ 4.831427928689076, 52.783818154626907 ], [ 4.832406382780843, 52.800528068210916 ], [ 4.83429749272547, 52.807898510654475 ], [ 4.813745345550807, 52.831585192380857 ], [ 4.809703444980395, 52.836945331344673 ], [ 4.794470272040869, 52.847346743643783 ], [ 4.782494605628825, 52.851533723350528 ], [ 4.759497758065781, 52.848300431194055 ], [ 4.758699211875462, 52.848579366303362 ], [ 4.770208982090713, 52.877519473542101 ], [ 4.770988020408712, 52.878656043181806 ], [ 4.770188991562143, 52.878935052133201 ], [ 4.71565983407914, 52.88317094128741 ], [ 4.694169587070214, 52.884463804529474 ], [ 4.690342997010505, 52.875097965583052 ], [ 4.686495343795599, 52.867147546259154 ], [ 4.675805773927651, 52.840185938464444 ], [ 4.671178900388308, 52.831663990024659 ], [ 4.66814649060986, 52.822868315886637 ], [ 4.65626974153205, 52.797029955040266 ], [ 4.651249747351656, 52.788787833498681 ], [ 4.647803769254311, 52.78140469157001 ], [ 4.641210586078863, 52.77258603044217 ], [ 4.636607216255475, 52.763496376398002 ], [ 4.634315967212349, 52.758385239260313 ], [ 4.651008230294732, 52.755941224772485 ], [ 4.65904425673263, 52.749478194095587 ], [ 4.659077159081088, 52.747496351543752 ], [ 4.662658058239579, 52.746668740716132 ], [ 4.671077676144633, 52.740773528916307 ], [ 4.678629462660227, 52.73940295209924 ], [ 4.681038844172376, 52.737435218104693 ], [ 4.683479795629306, 52.733485575652701 ], [ 4.689827899021573, 52.732956621711196 ], [ 4.692632595597531, 52.730990967859562 ], [ 4.702286552069308, 52.72170295155604 ], [ 4.707092258192596, 52.718332701443479 ], [ 4.709512316257379, 52.715515001213177 ], [ 4.715931101315538, 52.710171513877263 ], [ 4.716378990536845, 52.706776233128139 ], [ 4.719680039529946, 52.698017115482763 ], [ 4.728887034599829, 52.691272770887849 ], [ 4.731636623529748, 52.692703705746176 ], [ 4.736769828229173, 52.693581325061025 ], [ 4.752158399374874, 52.697062240689412 ], [ 4.766397726048939, 52.697986816221039 ], [ 4.769552814121284, 52.698852680958439 ], [ 4.770692788787676, 52.702256387663432 ], [ 4.770233236400148, 52.70678439731595 ], [ 4.772850469224585, 52.717840737145764 ], [ 4.772438552100119, 52.718971204413222 ], [ 4.77823426030805, 52.729477458677387 ], [ 4.778999120973602, 52.731463399116215 ], [ 4.786576952787641, 52.727820946144611 ], [ 4.785462259761539, 52.722435514222703 ], [ 4.786669928299642, 52.721025872316972 ], [ 4.795391502639337, 52.720503246670802 ], [ 4.797383333151278, 52.719663687338709 ], [ 4.80498012996173, 52.714321271145451 ], [ 4.808929228137982, 52.71518996184637 ], [ 4.81368536579922, 52.714929820542878 ], [ 4.823964110337529, 52.716394628914458 ], [ 4.82632593161286, 52.717538367789125 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1731\", \"naam\": \"Midden-Drenthe\", \"code\": \"1731\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.714665343143619, 52.86804703425183 ], [ 6.68626631872813, 52.875438719551298 ], [ 6.680740975904337, 52.890223115270118 ], [ 6.674814239414536, 52.905011496480228 ], [ 6.666587178866196, 52.909347332076955 ], [ 6.641594948841986, 52.91187782138995 ], [ 6.625310859637878, 52.912897284836397 ], [ 6.614722371004332, 52.91838657396498 ], [ 6.585704504228723, 52.919530851077063 ], [ 6.575294494959794, 52.931810446903903 ], [ 6.564901589083266, 52.944938333900744 ], [ 6.561364715165845, 52.946672055079006 ], [ 6.542879786118541, 52.955346795288968 ], [ 6.539447408375915, 52.946036040878219 ], [ 6.535904627327363, 52.932478986353182 ], [ 6.533163551838188, 52.934204220508001 ], [ 6.530370299295101, 52.933947841449701 ], [ 6.530820250939431, 52.935925581074706 ], [ 6.527628911986008, 52.935672948743722 ], [ 6.51778192853939, 52.939730657139577 ], [ 6.519454921117863, 52.942829443860688 ], [ 6.496981855808533, 52.951534780519694 ], [ 6.493305200969569, 52.947887971559958 ], [ 6.48972225469613, 52.947921095468082 ], [ 6.483807649894985, 52.950240711976903 ], [ 6.486232109769617, 52.951634162993685 ], [ 6.493976506482028, 52.958641323378878 ], [ 6.487669605031178, 52.961247894966128 ], [ 6.495835860450738, 52.969100478323483 ], [ 6.485572887668432, 52.972876137466024 ], [ 6.496594714729778, 52.983250675871652 ], [ 6.492233561923605, 52.984140508519801 ], [ 6.499166046727117, 52.990305382180445 ], [ 6.493637524642421, 52.992338686997527 ], [ 6.498057269448788, 52.993713414083949 ], [ 6.492463557483827, 52.993198977094032 ], [ 6.488387845387007, 53.005411720499829 ], [ 6.413355039452905, 52.98541001901873 ], [ 6.427773078798546, 52.971694561758412 ], [ 6.393410646421243, 52.932915169785176 ], [ 6.368885245510202, 52.922076692066454 ], [ 6.385447207708836, 52.915427039854379 ], [ 6.385408340247992, 52.913728492946454 ], [ 6.383374067033986, 52.911763467112657 ], [ 6.381398035555084, 52.912346230545623 ], [ 6.376508973704164, 52.907290229683582 ], [ 6.370447079254999, 52.903093132151803 ], [ 6.366463634445945, 52.902842733494595 ], [ 6.359513383530115, 52.894405183466262 ], [ 6.373340881453227, 52.890327677042443 ], [ 6.36638496397535, 52.881607401127717 ], [ 6.368661876683827, 52.876775187155012 ], [ 6.37261740459186, 52.8758931397156 ], [ 6.372347660429281, 52.88155832048173 ], [ 6.376425395873374, 52.886054942542984 ], [ 6.381279821319568, 52.889695516042558 ], [ 6.420075453373417, 52.882287317258488 ], [ 6.422413559170344, 52.880285009553326 ], [ 6.420372496193057, 52.87803750458707 ], [ 6.427796361227181, 52.872593136929346 ], [ 6.430962232889015, 52.871999180495507 ], [ 6.432052915599397, 52.867742373148026 ], [ 6.430860772544112, 52.867752808730941 ], [ 6.43417938812921, 52.856963978094015 ], [ 6.429398487265378, 52.856439545870273 ], [ 6.430845624303117, 52.850480702086998 ], [ 6.436420346561807, 52.850998092115468 ], [ 6.440769380761139, 52.850110293913787 ], [ 6.453090060845272, 52.850283966425131 ], [ 6.460706758700707, 52.853047181142507 ], [ 6.462985699537566, 52.848779345586138 ], [ 6.461306442966294, 52.845113484606053 ], [ 6.462734937501795, 52.838588065255429 ], [ 6.476229677332367, 52.838182422070354 ], [ 6.480172444018624, 52.837013725512385 ], [ 6.47526639100098, 52.831395492667596 ], [ 6.46788869971197, 52.822118465548513 ], [ 6.461370453153395, 52.815381641460114 ], [ 6.459385940580468, 52.81539950961114 ], [ 6.459727327550419, 52.813131189639165 ], [ 6.457535175879522, 52.804656204431993 ], [ 6.455447504411721, 52.800427584970947 ], [ 6.491771202913554, 52.793017451081802 ], [ 6.496359436724647, 52.786179000327266 ], [ 6.490817947971935, 52.770939821667454 ], [ 6.493196926206838, 52.770917754477303 ], [ 6.503073254073976, 52.769409828433389 ], [ 6.505416015331758, 52.767972049008733 ], [ 6.50782378480578, 52.769082064243435 ], [ 6.512796175551231, 52.761956126872462 ], [ 6.535554789430463, 52.76796842618969 ], [ 6.537462793927879, 52.765118384590089 ], [ 6.566425465065162, 52.765684619371079 ], [ 6.557555826246985, 52.745384259773083 ], [ 6.559529546232526, 52.745081675531253 ], [ 6.573260585229277, 52.739848680690898 ], [ 6.574068321541625, 52.740406963294262 ], [ 6.586226982185177, 52.735754446550743 ], [ 6.587415485055459, 52.735742469066324 ], [ 6.61631279627615, 52.762914869811112 ], [ 6.64030797758867, 52.783902334231541 ], [ 6.661044825785719, 52.801238737736078 ], [ 6.66774817271267, 52.799751058326741 ], [ 6.675211189511322, 52.797122120527128 ], [ 6.678046601232829, 52.799073607235904 ], [ 6.675699554088797, 52.800231677415084 ], [ 6.678948655891923, 52.802745002637756 ], [ 6.681083096363411, 52.80781884802802 ], [ 6.689880264113893, 52.809988348147904 ], [ 6.693586915538072, 52.814478445119789 ], [ 6.690259599297451, 52.822726688599779 ], [ 6.689077197339683, 52.823022773763043 ], [ 6.69114630479555, 52.825831816595986 ], [ 6.693984295784183, 52.82778290079866 ], [ 6.695935350552447, 52.826628834656894 ], [ 6.707746779705075, 52.836409394999379 ], [ 6.706337865706229, 52.84237146546257 ], [ 6.704091586976843, 52.846926932907216 ], [ 6.719641159462191, 52.848736363554274 ], [ 6.728544027129459, 52.854016706422158 ], [ 6.72586752807356, 52.857444760476689 ], [ 6.720029603799508, 52.861474444814903 ], [ 6.721765751763097, 52.866268826378523 ], [ 6.714665343143619, 52.86804703425183 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1711\", \"naam\": \"Echt-Susteren\", \"code\": \"1711\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.036643790231219, 51.096396069009309 ], [ 6.03060667859099, 51.10181068991907 ], [ 6.028389276778025, 51.107203948544402 ], [ 6.023796081039523, 51.106662817673261 ], [ 6.02268105961114, 51.108934605684787 ], [ 6.024221337423639, 51.109775789579963 ], [ 6.021979348699395, 51.113469798763148 ], [ 6.013235806881259, 51.116915805445124 ], [ 6.014015638735852, 51.11804443369553 ], [ 6.00058559152905, 51.114151261700385 ], [ 5.997588364038095, 51.118698407669861 ], [ 5.990730882488193, 51.120433522227884 ], [ 5.984618959761433, 51.120748351450544 ], [ 5.978441393969661, 51.115965439336115 ], [ 5.976162773239493, 51.117109859141067 ], [ 5.972308354902771, 51.114580479317375 ], [ 5.965479022626037, 51.118579625368746 ], [ 5.9627751822252, 51.116327400177006 ], [ 5.955874698628093, 51.114662168947127 ], [ 5.954328517847065, 51.113253694835151 ], [ 5.946685166420209, 51.113290795239678 ], [ 5.940563658754353, 51.112753730198513 ], [ 5.940584108277416, 51.114452879291882 ], [ 5.926815710409422, 51.113668093189084 ], [ 5.920756819757393, 51.118510633055429 ], [ 5.914369614300421, 51.128168866488494 ], [ 5.916307161896929, 51.130425708525415 ], [ 5.914045754907028, 51.133268066063543 ], [ 5.911735577820656, 51.131862492166633 ], [ 5.907944425831043, 51.134711631784107 ], [ 5.903337162435923, 51.133032966087711 ], [ 5.89838571619118, 51.134754117217796 ], [ 5.897633601663926, 51.135890254118642 ], [ 5.890735630608937, 51.134504345808388 ], [ 5.886535965560701, 51.135088899853969 ], [ 5.882694120115141, 51.133406122348049 ], [ 5.881562338272075, 51.13482698059984 ], [ 5.874291674998993, 51.13429130323118 ], [ 5.872388914867455, 51.135148890901817 ], [ 5.858441213639779, 51.117364359623224 ], [ 5.851478562251547, 51.109179445804614 ], [ 5.84919426741359, 51.110038181280238 ], [ 5.844560633334781, 51.105242034593594 ], [ 5.8372784425358, 51.103004863231327 ], [ 5.833424592365829, 51.099621278454983 ], [ 5.831093970719643, 51.095665337198078 ], [ 5.825715893844165, 51.092570527106872 ], [ 5.822657200098614, 51.092298843194136 ], [ 5.81390010081166, 51.09544664593539 ], [ 5.808177484728097, 51.096317169654782 ], [ 5.802436755803844, 51.095205037753523 ], [ 5.798601314544123, 51.093519470696265 ], [ 5.795128061513048, 51.089566862081121 ], [ 5.797007679800973, 51.086161772901725 ], [ 5.798914892864515, 51.085871813611462 ], [ 5.803464949129389, 51.082173903333135 ], [ 5.804969474589975, 51.079619644771277 ], [ 5.8041800252589, 51.076790431053055 ], [ 5.800351140448099, 51.075671312409398 ], [ 5.79649725823904, 51.071720102494012 ], [ 5.801010475490182, 51.064057539011294 ], [ 5.799447911352263, 51.060098228915223 ], [ 5.803242213942721, 51.057535827065358 ], [ 5.809365178225764, 51.059212927912469 ], [ 5.814011507319025, 51.066276058663775 ], [ 5.819796806368957, 51.072485146535037 ], [ 5.82399699125916, 51.072469403003183 ], [ 5.823574886112555, 51.06822290535203 ], [ 5.824685299414048, 51.06453704609455 ], [ 5.827260241527385, 51.054331892005671 ], [ 5.827198013966044, 51.047818393267285 ], [ 5.835223264518499, 51.048920480676649 ], [ 5.837872572210232, 51.046644563777555 ], [ 5.841298778424409, 51.04578157549993 ], [ 5.848555092012974, 51.046319337264805 ], [ 5.85266989672082, 51.038089906377316 ], [ 5.849218918579584, 51.0364044753725 ], [ 5.852581229946, 51.029310867261486 ], [ 5.856005872232248, 51.028447446426014 ], [ 5.865169926665148, 51.029259635560244 ], [ 5.877025739739487, 51.032042203742328 ], [ 5.878224545476423, 51.037134852662859 ], [ 5.874430107860182, 51.039133310726626 ], [ 5.867260197335527, 51.046809802307692 ], [ 5.866159503704605, 51.051062452721553 ], [ 5.868837014824162, 51.051617773745058 ], [ 5.875325232012345, 51.051590638895227 ], [ 5.887162811788137, 51.052106610573894 ], [ 5.892136850311071, 51.053217882852614 ], [ 5.896379074299066, 51.057164229136525 ], [ 5.907130739819793, 51.062780661756157 ], [ 5.913287282059176, 51.067001004999362 ], [ 5.918596321235507, 51.063861517320461 ], [ 5.926430861003389, 51.048248932190717 ], [ 5.934742550728298, 51.041129781288653 ], [ 5.938105574399071, 51.035166482934301 ], [ 5.946523077854006, 51.037108628318862 ], [ 5.954146825560223, 51.036505175948193 ], [ 5.957559570416379, 51.034789184738258 ], [ 5.959509355362394, 51.038178074226302 ], [ 5.958018259118268, 51.041017508977447 ], [ 5.961844532083928, 51.041848230524785 ], [ 5.963777211641666, 51.043821093103723 ], [ 5.967985418078667, 51.044649713050084 ], [ 5.969158828082631, 51.046909496801526 ], [ 5.968063970221305, 51.050879906097734 ], [ 5.970393303851554, 51.053983506877344 ], [ 5.968124686444036, 51.055694146021345 ], [ 5.970828805539272, 51.058229443589198 ], [ 5.97009764546713, 51.060781997924735 ], [ 5.974707318201521, 51.063024403973742 ], [ 5.981662888132808, 51.069502758198929 ], [ 5.979393928054908, 51.071213618161629 ], [ 5.981328595604305, 51.073186184734517 ], [ 5.988601917394172, 51.07456474334812 ], [ 5.992109221501594, 51.079927474723995 ], [ 5.997893908273448, 51.084145299862577 ], [ 6.003656892191267, 51.086663700477864 ], [ 6.00944348390852, 51.090880946383663 ], [ 6.012499309411886, 51.090864516328836 ], [ 6.015574470067434, 51.092263948321232 ], [ 6.017515454059237, 51.094519095262754 ], [ 6.020548126293368, 51.092803322583855 ], [ 6.029743646787595, 51.094735228212706 ], [ 6.036643790231219, 51.096396069009309 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0119\", \"naam\": \"Meppel\", \"code\": \"0119\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.231285232986113, 52.741631966952433 ], [ 6.221090228119844, 52.747366867580297 ], [ 6.218728481391635, 52.748232842685532 ], [ 6.201730701981885, 52.729379135903315 ], [ 6.177472139262663, 52.768334346978534 ], [ 6.172800408253631, 52.773178789712318 ], [ 6.168327336106651, 52.766978929755098 ], [ 6.164352383409347, 52.766438636107885 ], [ 6.156754496922572, 52.762807035469123 ], [ 6.138850890399267, 52.759240449716209 ], [ 6.132498487727264, 52.758714080000033 ], [ 6.126122369128375, 52.756771775470121 ], [ 6.121719246789336, 52.754250678798108 ], [ 6.120459066401002, 52.750011211114519 ], [ 6.128972563212681, 52.737783032257255 ], [ 6.145555112447546, 52.711345435807672 ], [ 6.145951102266773, 52.71134291133793 ], [ 6.151347074492543, 52.702813786240831 ], [ 6.151322434255754, 52.701398177076136 ], [ 6.156701266423543, 52.692019424744451 ], [ 6.159081130613507, 52.692287159727584 ], [ 6.163014288633783, 52.690845799171903 ], [ 6.164958207286163, 52.688851021154463 ], [ 6.168114421841144, 52.688264031337887 ], [ 6.169657189049841, 52.685988651657617 ], [ 6.162824277951075, 52.680087148294305 ], [ 6.16400138526951, 52.679513154675604 ], [ 6.183313736302966, 52.675138099123139 ], [ 6.181761814226101, 52.676847415985058 ], [ 6.184141006094343, 52.677114652029033 ], [ 6.180661713242477, 52.681668412642615 ], [ 6.185821506427601, 52.68248334415788 ], [ 6.187748541033309, 52.67963882801471 ], [ 6.19130466417019, 52.6793316806788 ], [ 6.192044189878673, 52.676495114036882 ], [ 6.194423424049039, 52.676762144348082 ], [ 6.194871147431517, 52.67959066921096 ], [ 6.201692524662882, 52.684640962737717 ], [ 6.211992503153525, 52.685136294175443 ], [ 6.213992562095777, 52.686255033795895 ], [ 6.219918195457467, 52.685647381532874 ], [ 6.218704139155268, 52.684240091498602 ], [ 6.226575641909404, 52.68191954270776 ], [ 6.232505961251211, 52.68159438336324 ], [ 6.232858073538078, 52.679326620055527 ], [ 6.238359391589669, 52.677305269327277 ], [ 6.243530763443623, 52.678683934265123 ], [ 6.248217975122163, 52.675535350517507 ], [ 6.24737122876618, 52.672709893923283 ], [ 6.252063101949492, 52.669844274530831 ], [ 6.259579632100216, 52.669789366557588 ], [ 6.26038209605609, 52.670349794806768 ], [ 6.26550240214187, 52.669179447513677 ], [ 6.265479768310847, 52.668046977029547 ], [ 6.266327586418043, 52.670872305547817 ], [ 6.269153717855545, 52.673682970697165 ], [ 6.272307433548415, 52.673093220364237 ], [ 6.269719959591156, 52.682173536994718 ], [ 6.274095706602138, 52.683273621805519 ], [ 6.283575791129026, 52.682353073813836 ], [ 6.284011969319213, 52.684331898706667 ], [ 6.281637557629724, 52.684349778653122 ], [ 6.275374480471025, 52.68779461614924 ], [ 6.275821802070746, 52.690339700045932 ], [ 6.284913379884604, 52.689705115351579 ], [ 6.286687872578726, 52.699035934524694 ], [ 6.275924931847125, 52.695435774722178 ], [ 6.276372365821021, 52.697980851432042 ], [ 6.279562250216306, 52.69908959748178 ], [ 6.276819852534348, 52.700525924715997 ], [ 6.277273132182771, 52.703354109005936 ], [ 6.273709965717792, 52.703380712677173 ], [ 6.274163075690905, 52.706208907153133 ], [ 6.269004565165369, 52.705680937128136 ], [ 6.256323601204902, 52.705207933260589 ], [ 6.252760268065032, 52.705233909981267 ], [ 6.24846062481158, 52.708096674021824 ], [ 6.238913802137324, 52.705900149574525 ], [ 6.231792439783117, 52.706234070980557 ], [ 6.224210243531052, 52.70317294232126 ], [ 6.217083854604197, 52.703222865337551 ], [ 6.216184838542413, 52.718519493757157 ], [ 6.219455258108977, 52.723876596327962 ], [ 6.234433402406111, 52.740476990776685 ], [ 6.231285232986113, 52.741631966952433 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0362\", \"naam\": \"Amstelveen\", \"code\": \"0362\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.851918949722606, 52.241943665671833 ], [ 4.855043368837413, 52.242807307031676 ], [ 4.855401377535773, 52.245640678273283 ], [ 4.857337058250223, 52.247631604472851 ], [ 4.863198472934144, 52.249073619623374 ], [ 4.868655176840921, 52.251646268490674 ], [ 4.870203075226354, 52.253352101720068 ], [ 4.873674844936804, 52.258181213317712 ], [ 4.87403416058783, 52.261014521699344 ], [ 4.879123573004669, 52.261602858217707 ], [ 4.882619430271377, 52.264449578177533 ], [ 4.879450951676307, 52.26726775328487 ], [ 4.881362892840146, 52.271523562220175 ], [ 4.881317814347971, 52.275487803869694 ], [ 4.878926279143349, 52.278875630960897 ], [ 4.884358733475953, 52.283995982393449 ], [ 4.88512074279819, 52.285981433102016 ], [ 4.889808275136871, 52.287700282649745 ], [ 4.887046766246589, 52.289104499172865 ], [ 4.890943873390563, 52.29138630119035 ], [ 4.891304551124093, 52.294219541014506 ], [ 4.892864242336188, 52.295075588722419 ], [ 4.900700787086222, 52.295957603704963 ], [ 4.901080701954252, 52.297091855149972 ], [ 4.898689503903609, 52.300480068572988 ], [ 4.904927004680185, 52.304186902727345 ], [ 4.907643062485613, 52.307029663021325 ], [ 4.905251827112747, 52.310418002636759 ], [ 4.905579807259469, 52.316365935628298 ], [ 4.909090802149618, 52.318362374454139 ], [ 4.907901088714733, 52.319490244201191 ], [ 4.901599298629908, 52.321446742418779 ], [ 4.896483964450163, 52.322558319835082 ], [ 4.856452376579876, 52.321819162819217 ], [ 4.855958258948299, 52.330312091311185 ], [ 4.848102805783436, 52.330559732588057 ], [ 4.839483011033417, 52.329104286782702 ], [ 4.839503962588837, 52.327405353240209 ], [ 4.826174331734197, 52.325927037088263 ], [ 4.818719307460759, 52.325608278620457 ], [ 4.819140836342982, 52.323344924172702 ], [ 4.816127946816882, 52.313419371378899 ], [ 4.817323454694958, 52.312009271656578 ], [ 4.809948079794246, 52.30574369248437 ], [ 4.811546947978695, 52.30348609609775 ], [ 4.823875263251176, 52.290519465036354 ], [ 4.821169180934392, 52.287391625016511 ], [ 4.810711403767707, 52.277146803816606 ], [ 4.798343218483351, 52.263493406503265 ], [ 4.794852840509273, 52.260644202350775 ], [ 4.795241056744579, 52.260929323781404 ], [ 4.834968818723829, 52.250077771873869 ], [ 4.834580441898625, 52.249792780204764 ], [ 4.851918949722606, 52.241943665671833 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0512\", \"naam\": \"Gorinchem\", \"code\": \"0512\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.00055075660159, 51.820863722695819 ], [ 5.007923447612655, 51.821170965590447 ], [ 5.020353938872623, 51.820077702264655 ], [ 5.026185343437505, 51.818963014863698 ], [ 5.027327178963716, 51.821798433207967 ], [ 5.031445095810146, 51.841067959244235 ], [ 5.014737275019683, 51.842148918046519 ], [ 5.007351553503252, 51.842974832679964 ], [ 5.003453559829115, 51.844661304205701 ], [ 5.003074850848827, 51.843527303030712 ], [ 4.999181527440365, 51.84464726674711 ], [ 4.999926614898328, 51.8483312056538 ], [ 4.998727231281246, 51.852291913014483 ], [ 4.996423662167664, 51.849169174290211 ], [ 4.983583463958468, 51.851674465615666 ], [ 4.981250353479096, 51.851949615278613 ], [ 4.983146771543061, 51.857053587281776 ], [ 4.972631945964756, 51.859848852199448 ], [ 4.959393485165535, 51.862916480480052 ], [ 4.957483303279164, 51.859511217820049 ], [ 4.938404843810106, 51.863687736803101 ], [ 4.940398066679237, 51.858597895081914 ], [ 4.94286588173391, 51.844730877002199 ], [ 4.937817140331437, 51.84471166475884 ], [ 4.936669038834472, 51.843008114708795 ], [ 4.930095828391863, 51.840150791020676 ], [ 4.921935164254868, 51.840685122905278 ], [ 4.925050512320786, 51.839847849468306 ], [ 4.927110678195933, 51.828245055599005 ], [ 4.936039794951196, 51.828279709729657 ], [ 4.942262545691415, 51.82717068959154 ], [ 4.962473703165669, 51.824696821782837 ], [ 4.987738931475217, 51.821104017428667 ], [ 5.00055075660159, 51.820863722695819 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0312\", \"naam\": \"Bunnik\", \"code\": \"0312\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.279970486445677, 52.010619294175932 ], [ 5.2717742697813, 52.014576097330803 ], [ 5.269815415223862, 52.018255523821516 ], [ 5.263170286269705, 52.024478710174677 ], [ 5.270961569637269, 52.027318462843354 ], [ 5.269397284422997, 52.029015996795728 ], [ 5.263929914712201, 52.031842216957607 ], [ 5.25768754105922, 52.032685066999761 ], [ 5.257671181742493, 52.038348666310505 ], [ 5.254941655649049, 52.038062454921501 ], [ 5.251037724605804, 52.039190733399153 ], [ 5.249078705635445, 52.042020261221282 ], [ 5.251017940040864, 52.045703864287034 ], [ 5.247891734347207, 52.047399294337168 ], [ 5.249055143099005, 52.049666106028191 ], [ 5.251389179422991, 52.051934259517928 ], [ 5.251380597294514, 52.054766050831823 ], [ 5.247466288573137, 52.058725996956163 ], [ 5.245516038581622, 52.058440489817187 ], [ 5.218975335719687, 52.059821509005623 ], [ 5.218584031548902, 52.060104130024108 ], [ 5.225200715691608, 52.064927465017846 ], [ 5.206431716694276, 52.073678752652249 ], [ 5.200563349452197, 52.076784584000599 ], [ 5.195095517569537, 52.07734216152852 ], [ 5.193141109225155, 52.077905320030986 ], [ 5.181437058334774, 52.076186399549819 ], [ 5.179477272751018, 52.07788204031975 ], [ 5.171665283123804, 52.078717557277415 ], [ 5.166990209550519, 52.076726661205306 ], [ 5.163079273552525, 52.078135189840019 ], [ 5.160723996656126, 52.080679305313282 ], [ 5.160736892068509, 52.078130713896059 ], [ 5.155696884546544, 52.071324609378024 ], [ 5.156489233871167, 52.069060722515154 ], [ 5.159620411852117, 52.067367728491291 ], [ 5.156908682568081, 52.063397938731185 ], [ 5.157715340879803, 52.058302264249711 ], [ 5.153040059060256, 52.05687716540087 ], [ 5.160901517903946, 52.045565289079811 ], [ 5.178846725648854, 52.045598383281408 ], [ 5.178842775082299, 52.046447919015783 ], [ 5.191731597711651, 52.043071830644919 ], [ 5.189407296284839, 52.039386599102798 ], [ 5.189416044470398, 52.037404345686859 ], [ 5.192549912107147, 52.034294570315915 ], [ 5.195270319334577, 52.036564482684746 ], [ 5.19957256095152, 52.033739599088811 ], [ 5.200752015783204, 52.031476020594063 ], [ 5.199216988997938, 52.025526769945152 ], [ 5.200398604517554, 52.022696832369292 ], [ 5.203528360402426, 52.020153117034098 ], [ 5.201979317480784, 52.017602054750384 ], [ 5.219533016379019, 52.015079707198353 ], [ 5.224216344608214, 52.013670369362416 ], [ 5.231637967527169, 52.009432672026186 ], [ 5.234768872055487, 52.005755396262828 ], [ 5.243366455262033, 51.998686647844011 ], [ 5.259727697259519, 52.000970945906786 ], [ 5.264787963619535, 52.003241769729499 ], [ 5.266354572492395, 52.000411564253412 ], [ 5.268698135183263, 51.998431668042159 ], [ 5.272206926320148, 51.997868779752906 ], [ 5.277657194498377, 52.000139430941864 ], [ 5.275702971314455, 52.002403056072261 ], [ 5.275694530734276, 52.005801233485258 ], [ 5.279970486445677, 52.010619294175932 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0118\", \"naam\": \"Hoogeveen\", \"code\": \"0118\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.629529604211592, 52.669614544441806 ], [ 6.632047354148814, 52.674685344648509 ], [ 6.632392354551808, 52.686858189337627 ], [ 6.629378706636768, 52.692269981402355 ], [ 6.628707217821966, 52.696524575924535 ], [ 6.629955566873551, 52.712652323674142 ], [ 6.624800174659313, 52.712422884659468 ], [ 6.610545827456191, 52.712570287579283 ], [ 6.595911005723435, 52.713286186746778 ], [ 6.596587822027637, 52.723473396778964 ], [ 6.576404222754633, 52.724243123604438 ], [ 6.576434917727313, 52.725375487693441 ], [ 6.587415485055459, 52.735742469066324 ], [ 6.586226982185177, 52.735754446550743 ], [ 6.574068321541625, 52.740406963294262 ], [ 6.573260585229277, 52.739848680690898 ], [ 6.559529546232526, 52.745081675531253 ], [ 6.557555826246985, 52.745384259773083 ], [ 6.566425465065162, 52.765684619371079 ], [ 6.537462793927879, 52.765118384590089 ], [ 6.535554789430463, 52.76796842618969 ], [ 6.512796175551231, 52.761956126872462 ], [ 6.50782378480578, 52.769082064243435 ], [ 6.505416015331758, 52.767972049008733 ], [ 6.503073254073976, 52.769409828433389 ], [ 6.493196926206838, 52.770917754477303 ], [ 6.490817947971935, 52.770939821667454 ], [ 6.496359436724647, 52.786179000327266 ], [ 6.491771202913554, 52.793017451081802 ], [ 6.455447504411721, 52.800427584970947 ], [ 6.449707223564143, 52.792833667570257 ], [ 6.446759055065718, 52.785780986227202 ], [ 6.446129678020707, 52.776159209843009 ], [ 6.437673153166878, 52.770854081585057 ], [ 6.432074863679341, 52.768921217525531 ], [ 6.4276866372995, 52.767827001771771 ], [ 6.415356015966549, 52.766235140629668 ], [ 6.410168958021751, 52.76486401894433 ], [ 6.41628610667427, 52.755183933251658 ], [ 6.419477001654314, 52.756005790047645 ], [ 6.426107902766948, 52.751417574305322 ], [ 6.420485916640036, 52.748351743606158 ], [ 6.42313291457312, 52.742948707889518 ], [ 6.415551023415121, 52.740749163768918 ], [ 6.421274187245383, 52.731355297951851 ], [ 6.406940482349365, 52.728364198686165 ], [ 6.413099644827924, 52.720665927719452 ], [ 6.41420827905733, 52.717258430486375 ], [ 6.405377592679668, 52.712237411978663 ], [ 6.403636335054073, 52.705456421039834 ], [ 6.404804388860587, 52.704596950890874 ], [ 6.407232453056963, 52.706841454370384 ], [ 6.419782187878845, 52.701636276848056 ], [ 6.42379444278723, 52.7038666879806 ], [ 6.431759540416982, 52.705779164506673 ], [ 6.451193563936757, 52.707022776537144 ], [ 6.449964667145747, 52.70533477806795 ], [ 6.45140417365028, 52.699375468535635 ], [ 6.448496325600386, 52.693738160550708 ], [ 6.462786828847145, 52.69530879468418 ], [ 6.463134087637587, 52.693323499542259 ], [ 6.473452841954007, 52.694362381373878 ], [ 6.486104458574234, 52.693679848190769 ], [ 6.484683577448173, 52.684348479841901 ], [ 6.493382172703488, 52.683984729096309 ], [ 6.492391308840163, 52.67606525919124 ], [ 6.499901288632561, 52.675712060331691 ], [ 6.499448318438642, 52.673450954795427 ], [ 6.530686996474331, 52.672588329719034 ], [ 6.529424825390456, 52.654477584933936 ], [ 6.546279625717473, 52.663659086499806 ], [ 6.552660524682505, 52.665578906439926 ], [ 6.614616634026132, 52.674017015279247 ], [ 6.629529604211592, 52.669614544441806 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1959\", \"naam\": \"Altena\", \"code\": \"1959\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.918142290553961, 51.720029295423721 ], [ 4.932452172996699, 51.722068063121689 ], [ 4.943288522430643, 51.722959192989926 ], [ 4.951422208478012, 51.722989716004577 ], [ 4.960723207676089, 51.72245753686947 ], [ 4.969257222505143, 51.721072301842696 ], [ 4.979344990516615, 51.719125473096803 ], [ 4.996809591950103, 51.714937021179566 ], [ 5.006117952572847, 51.713268487962573 ], [ 5.014646515270533, 51.712163129769678 ], [ 5.027434074881898, 51.711070302940001 ], [ 5.044858973730637, 51.71112249700375 ], [ 5.054146016096463, 51.711998839283865 ], [ 5.065742748022667, 51.71486316084232 ], [ 5.075009463779469, 51.71885292389674 ], [ 5.081570390177883, 51.722268538827677 ], [ 5.090448953878655, 51.726822446689681 ], [ 5.099334717168763, 51.730526114423675 ], [ 5.111706996329141, 51.734520540880141 ], [ 5.127960913605432, 51.737672722896299 ], [ 5.126017116504835, 51.738801180645723 ], [ 5.125598515665164, 51.744180907996437 ], [ 5.127526284068582, 51.74588434742185 ], [ 5.137962803035183, 51.750721259975435 ], [ 5.142589027735986, 51.755262073243138 ], [ 5.137537687888491, 51.757516967506092 ], [ 5.135962006334694, 51.762044675199604 ], [ 5.139410555244097, 51.769414995936692 ], [ 5.139401232349048, 51.77111412600712 ], [ 5.135120310239078, 51.773936922604975 ], [ 5.127746328085969, 51.775053614949734 ], [ 5.11609109096213, 51.778708754494886 ], [ 5.10869140164975, 51.783788872347422 ], [ 5.100137184445365, 51.787166555941305 ], [ 5.09431539024175, 51.787718553022685 ], [ 5.088510321308649, 51.785721579460493 ], [ 5.083882621311071, 51.781745024008266 ], [ 5.08001590821553, 51.780035813240943 ], [ 5.074204608003221, 51.779170878733254 ], [ 5.066826263116674, 51.780566923969936 ], [ 5.060974218014974, 51.785365063631666 ], [ 5.057056280137664, 51.790734752200109 ], [ 5.052363609345401, 51.795818908757361 ], [ 5.048079158102032, 51.798072140192623 ], [ 5.036023536854428, 51.801718178086176 ], [ 5.029028335363106, 51.8031129973931 ], [ 5.024748852891598, 51.804515818406024 ], [ 5.014622872362335, 51.809015180244465 ], [ 5.010321083373688, 51.812966131299966 ], [ 5.009506946081141, 51.817494581061233 ], [ 5.00055075660159, 51.820863722695819 ], [ 4.987738931475217, 51.821104017428667 ], [ 4.962473703165669, 51.824696821782837 ], [ 4.942262545691415, 51.82717068959154 ], [ 4.936039794951196, 51.828279709729657 ], [ 4.927110678195933, 51.828245055599005 ], [ 4.91857863191112, 51.827361729744069 ], [ 4.911217521650336, 51.825916150396452 ], [ 4.904251141815476, 51.823905346272511 ], [ 4.889553332010586, 51.819029669059049 ], [ 4.88453591861069, 51.816459546787449 ], [ 4.87604868473388, 51.811891789565401 ], [ 4.865642626372988, 51.805615732435065 ], [ 4.854446802346928, 51.800751129539506 ], [ 4.845934995610337, 51.798729810593628 ], [ 4.836246280653682, 51.797835131610597 ], [ 4.828871619988016, 51.798083466858351 ], [ 4.816435494930596, 51.799722804748221 ], [ 4.806728941110152, 51.800241578767626 ], [ 4.797033283182438, 51.799910017209562 ], [ 4.781955618016651, 51.795868462084464 ], [ 4.773455711345466, 51.793275536299461 ], [ 4.76536418959999, 51.789268170434958 ], [ 4.758449473989556, 51.784416960596992 ], [ 4.755386435782928, 51.78156852801186 ], [ 4.750424804771428, 51.775877743402994 ], [ 4.744785711209295, 51.763386273563398 ], [ 4.740586398796489, 51.758832017007322 ], [ 4.729461062293569, 51.750840566994398 ], [ 4.717164632195447, 51.743690949964183 ], [ 4.703705547246694, 51.736816448295343 ], [ 4.693314692960084, 51.732224189456375 ], [ 4.681750662038011, 51.728473545522583 ], [ 4.6763811962292, 51.72504268827214 ], [ 4.677231451698084, 51.720233420412107 ], [ 4.6985060396429, 51.72205958641986 ], [ 4.721952044085304, 51.734372626450146 ], [ 4.733545515894976, 51.736420248906597 ], [ 4.737350508677168, 51.74125579342239 ], [ 4.747348392323068, 51.746691569905501 ], [ 4.748095370532603, 51.748678035725447 ], [ 4.750756201728586, 51.752374092371944 ], [ 4.754983693949988, 51.754945749758917 ], [ 4.760762088367587, 51.7575255480496 ], [ 4.764219284912446, 51.759809551358579 ], [ 4.766169094183905, 51.758970300102618 ], [ 4.771979510112537, 51.759284127132936 ], [ 4.778891844197583, 51.764134549178571 ], [ 4.780028176879313, 51.766122820516145 ], [ 4.782346671247905, 51.766701196167226 ], [ 4.785591540635379, 51.755956382779708 ], [ 4.802627352757924, 51.757458537692031 ], [ 4.812715956647706, 51.756658807300958 ], [ 4.822441399718938, 51.753874083059593 ], [ 4.831743267930533, 51.753918516834361 ], [ 4.841786118778269, 51.756797626125682 ], [ 4.8468215792675, 51.757104135721619 ], [ 4.851873892327302, 51.755994524595657 ], [ 4.853100311393574, 51.750619387316362 ], [ 4.849302360503188, 51.744088504279887 ], [ 4.850141308270544, 51.738711612546432 ], [ 4.847075568608115, 51.735865558190703 ], [ 4.8468134342034, 51.725386056527107 ], [ 4.840725636296302, 51.716295508484137 ], [ 4.836897881137388, 51.712596024686164 ], [ 4.850417136072165, 51.715490709125042 ], [ 4.862008330357716, 51.717808808053626 ], [ 4.873213426394198, 51.720124063245812 ], [ 4.880571953383634, 51.720156104286126 ], [ 4.891422330751072, 51.71963611338775 ], [ 4.900342144022297, 51.718540721387711 ], [ 4.910018134267606, 51.719146910543579 ], [ 4.918142290553961, 51.720029295423721 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0965\", \"naam\": \"Simpelveld\", \"code\": \"0965\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.02363168882556, 50.818356474321284 ], [ 6.022136030312824, 50.820063955041405 ], [ 6.017974240857135, 50.821219583066764 ], [ 6.015730261124872, 50.823780688176186 ], [ 6.016896513124472, 50.82575679961748 ], [ 6.011648081219936, 50.830883033855585 ], [ 6.002926926760764, 50.832062660863059 ], [ 6.005243754061896, 50.834882379143529 ], [ 6.004894080241652, 50.837149916465513 ], [ 5.99772846663043, 50.841152906670459 ], [ 5.994700248340098, 50.84201848703092 ], [ 5.980722739470444, 50.848321681231774 ], [ 5.977331784137917, 50.850604705949202 ], [ 5.972456205981734, 50.855727235037854 ], [ 5.969469282144709, 50.859990435711225 ], [ 5.966009671324776, 50.856892521057127 ], [ 5.966368475149383, 50.855191477234825 ], [ 5.96141044852389, 50.853800170743035 ], [ 5.960664422006257, 50.854936704563549 ], [ 5.954556117425457, 50.852701182461196 ], [ 5.953360690345926, 50.848175723001226 ], [ 5.954852849095341, 50.84590274506656 ], [ 5.955957967633323, 50.843065237603049 ], [ 5.955912782756125, 50.839383762571195 ], [ 5.957010718799286, 50.835979865225212 ], [ 5.955484256725552, 50.83542096602325 ], [ 5.959571946300889, 50.828037399823721 ], [ 5.961840298143129, 50.827176520096778 ], [ 5.968612884120969, 50.822044907194872 ], [ 5.972020046392192, 50.821178090577966 ], [ 5.969304859638699, 50.81666047932768 ], [ 5.979531973335561, 50.814626048571533 ], [ 5.983646787065521, 50.809790347275239 ], [ 5.985556063503802, 50.810630098234022 ], [ 5.991217917588537, 50.808051764899908 ], [ 6.003659737480478, 50.801472257915556 ], [ 6.010147056030143, 50.803986331556061 ], [ 6.016681194167933, 50.809898290880561 ], [ 6.025092177809587, 50.814100289120695 ], [ 6.022093377021, 50.816948893333318 ], [ 6.02363168882556, 50.818356474321284 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0375\", \"naam\": \"Beverwijk\", \"code\": \"0375\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.571682472880273, 52.501996362442448 ], [ 4.566338568806455, 52.49261493392175 ], [ 4.596012127075787, 52.486020532152281 ], [ 4.60275981902163, 52.483233667952412 ], [ 4.60397174647447, 52.481542665950293 ], [ 4.612598476216657, 52.483864672047503 ], [ 4.618123618189915, 52.483334293030943 ], [ 4.620900864362721, 52.482219597615945 ], [ 4.637479787250579, 52.480343387078392 ], [ 4.647754858268607, 52.478425725224461 ], [ 4.646596863787934, 52.47700266065879 ], [ 4.653293005620831, 52.47704429015112 ], [ 4.667615964894546, 52.468353875111553 ], [ 4.661815560256636, 52.461805666862062 ], [ 4.667365009896371, 52.459574144805565 ], [ 4.674909838328454, 52.455655360463041 ], [ 4.685038260330955, 52.462511810404216 ], [ 4.684232733612199, 52.463639707372351 ], [ 4.688541887748598, 52.465081014867728 ], [ 4.695183113783316, 52.468517966868319 ], [ 4.697895710677114, 52.47136543484698 ], [ 4.699422645110423, 52.474489133313924 ], [ 4.698590808059306, 52.477315969935709 ], [ 4.701295376528561, 52.480729637086263 ], [ 4.705991967794995, 52.482738867535339 ], [ 4.707905135283672, 52.486430993822566 ], [ 4.703159869446692, 52.487536384290955 ], [ 4.703536340020396, 52.488671216921773 ], [ 4.699578740523815, 52.489781002224412 ], [ 4.697644040810997, 52.487504445682511 ], [ 4.694478830648185, 52.488335499427556 ], [ 4.694824036588845, 52.491452337019325 ], [ 4.690498719390992, 52.490860679787041 ], [ 4.686930138370428, 52.492255494529481 ], [ 4.679824027145354, 52.493062828116408 ], [ 4.675851769229934, 52.49502123473416 ], [ 4.666302131612359, 52.50062690227373 ], [ 4.66588953988425, 52.50175705720531 ], [ 4.655309497461939, 52.498011099277548 ], [ 4.645039703378704, 52.499363126232282 ], [ 4.635192300429177, 52.499017944683963 ], [ 4.621418960543346, 52.497797165220128 ], [ 4.613168221316179, 52.496327779065282 ], [ 4.611587011680137, 52.49660061847203 ], [ 4.60728730982535, 52.494590253144352 ], [ 4.604139975696083, 52.494286350073459 ], [ 4.59859308790412, 52.495948610765922 ], [ 4.595400057215595, 52.49819268415775 ], [ 4.591858477717566, 52.497885824054478 ], [ 4.587109106078245, 52.498986558649392 ], [ 4.571682472880273, 52.501996362442448 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0216\", \"naam\": \"Culemborg\", \"code\": \"0216\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.255243252784778, 51.935550580644971 ], [ 5.254850760480538, 51.93668287975995 ], [ 5.247053272091997, 51.941204811287491 ], [ 5.245489301406327, 51.943468416713344 ], [ 5.241979854468616, 51.945446431922512 ], [ 5.260256750424014, 51.951697618661818 ], [ 5.2551883838084, 51.954240703205251 ], [ 5.270343183325399, 51.965300893448813 ], [ 5.260987638628858, 51.968689442905251 ], [ 5.256307686434548, 51.970949803074049 ], [ 5.247720980069887, 51.976886799004212 ], [ 5.23992414072569, 51.978859589863269 ], [ 5.234084027723799, 51.97800259102933 ], [ 5.229807176824488, 51.975731484441127 ], [ 5.224380777769396, 51.96836132980652 ], [ 5.219724360434416, 51.963823854495374 ], [ 5.21156128928015, 51.96013056351029 ], [ 5.206112378688206, 51.959555938006574 ], [ 5.200270712012838, 51.959829989792667 ], [ 5.194813493653136, 51.961237117896445 ], [ 5.187402672887265, 51.964056614277098 ], [ 5.180377742047648, 51.967442690737677 ], [ 5.169531245237375, 51.955529382487583 ], [ 5.163733552015452, 51.947022966710961 ], [ 5.154052104107615, 51.937375876917557 ], [ 5.15134721474399, 51.933689071084778 ], [ 5.147853997239182, 51.931982900281369 ], [ 5.148256670837951, 51.929435045861169 ], [ 5.142444786130975, 51.924892118225451 ], [ 5.150208161237198, 51.928306250203981 ], [ 5.158379138282725, 51.92832242973968 ], [ 5.166950315181718, 51.926073304292217 ], [ 5.159201846958678, 51.919545259341099 ], [ 5.17592299616553, 51.920992416253007 ], [ 5.1871923120229, 51.923843978134414 ], [ 5.204306186687115, 51.925004574476318 ], [ 5.207803266661955, 51.92614270192152 ], [ 5.211719447001114, 51.919635337245367 ], [ 5.233101988814691, 51.923629888445454 ], [ 5.243593821252147, 51.927607757515666 ], [ 5.255243252784778, 51.935550580644971 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0815\", \"naam\": \"Mill en Sint Hubert\", \"code\": \"0815\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.842619945747411, 51.679867924590873 ], [ 5.822681253524888, 51.698917968651457 ], [ 5.822686709353413, 51.69948434067512 ], [ 5.815734698826462, 51.701209169026491 ], [ 5.805274256288348, 51.700397400971987 ], [ 5.799108623069904, 51.703534408111139 ], [ 5.802995781483755, 51.705219842582139 ], [ 5.788316077313861, 51.708952592613059 ], [ 5.793359852659901, 51.710067987573296 ], [ 5.792292149513, 51.720549909202731 ], [ 5.787639539550718, 51.719999519940039 ], [ 5.784913520299986, 51.718309639234633 ], [ 5.782214938497618, 51.719734747554604 ], [ 5.768690775421285, 51.723461114540932 ], [ 5.766357318455402, 51.722335913728067 ], [ 5.762878544986675, 51.723196708294161 ], [ 5.757057107618576, 51.721799264929849 ], [ 5.752416241995943, 51.72266341284103 ], [ 5.752015201718502, 51.720965496089399 ], [ 5.74811727365435, 51.717862434695867 ], [ 5.743496740468315, 51.721274917001672 ], [ 5.733052451716546, 51.723005392548288 ], [ 5.72915564792809, 51.719901700001571 ], [ 5.713323526929884, 51.726460321315905 ], [ 5.710222681599284, 51.726185721310323 ], [ 5.705548530414464, 51.722517001146272 ], [ 5.700049575041342, 51.711487257206258 ], [ 5.734253683609299, 51.677690664500609 ], [ 5.742550449588558, 51.65019575722701 ], [ 5.747824371807059, 51.632621426114319 ], [ 5.778082646181037, 51.644984883830695 ], [ 5.790500942318141, 51.650040276109337 ], [ 5.798719374592185, 51.660773141261046 ], [ 5.806844527816134, 51.66102747970897 ], [ 5.809978522285775, 51.665264152304076 ], [ 5.812694286453984, 51.66610389959849 ], [ 5.814230925729596, 51.664965514220434 ], [ 5.821610451997558, 51.668053518914711 ], [ 5.822760093924942, 51.666916457383664 ], [ 5.825871275524218, 51.668604018520199 ], [ 5.823945209811914, 51.669460813721031 ], [ 5.829792435669453, 51.673969998252417 ], [ 5.830563458011827, 51.673683882904299 ], [ 5.842619945747411, 51.679867924590873 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0809\", \"naam\": \"Loon op Zand\", \"code\": \"0809\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.106120799257375, 51.635955602805552 ], [ 5.101707901849792, 51.661432524194687 ], [ 5.102825626626004, 51.668231925789897 ], [ 5.101638277787481, 51.672476961589638 ], [ 5.103943685284865, 51.675031312479945 ], [ 5.101611488859216, 51.676724818950142 ], [ 5.095046508780719, 51.674726266493785 ], [ 5.088855942228124, 51.674710663773226 ], [ 5.080365029730985, 51.671573584573942 ], [ 5.071859520371246, 51.670701409679424 ], [ 5.060636055681638, 51.671237046915053 ], [ 5.061043331822484, 51.668406227353103 ], [ 5.057948488203454, 51.668397568330327 ], [ 5.058384689468496, 51.661602099347107 ], [ 5.04910156014699, 51.661575667243881 ], [ 5.047154820608495, 51.663269205704722 ], [ 5.045225041156327, 51.662697194977852 ], [ 5.030882035534765, 51.666619177361007 ], [ 4.992114224766471, 51.676123485378518 ], [ 4.987274382765984, 51.654584122642454 ], [ 5.004298878741904, 51.607913494189994 ], [ 5.03985503366221, 51.606325260419915 ], [ 5.042947784301806, 51.60605120301156 ], [ 5.044840932295892, 51.611154307709455 ], [ 5.060299689083288, 51.610632118959877 ], [ 5.061855294262318, 51.609220469222819 ], [ 5.070733459447863, 51.610377603418385 ], [ 5.071135604337762, 51.608113115034968 ], [ 5.074216567408599, 51.609537380387167 ], [ 5.073857597427178, 51.605571662980786 ], [ 5.075400930591088, 51.605858982457882 ], [ 5.075379521224853, 51.608974091286996 ], [ 5.080011873421403, 51.609552736684144 ], [ 5.079617839428042, 51.610684488807948 ], [ 5.093909641358319, 51.611287572409069 ], [ 5.095834211559177, 51.612425166009601 ], [ 5.099277470668091, 51.61781442010539 ], [ 5.103147040475219, 51.616974286123195 ], [ 5.101193523700927, 51.620367884742649 ], [ 5.09960643420037, 51.626877509031921 ], [ 5.098047785026679, 51.628856042235668 ], [ 5.101503259803454, 51.632546074734854 ], [ 5.101492552219455, 51.63424522430828 ], [ 5.106120799257375, 51.635955602805552 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0277\", \"naam\": \"Rozendaal\", \"code\": \"0277\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.006182811954746, 52.066243286267486 ], [ 6.008989539540185, 52.071609040197643 ], [ 6.009021035739304, 52.073874363184231 ], [ 5.990353244292331, 52.079068784775856 ], [ 5.975897604022952, 52.07829236729026 ], [ 5.964550857684689, 52.076366239303859 ], [ 5.9559231407124, 52.073293182895512 ], [ 5.943298393340243, 52.062592444442245 ], [ 5.940900821973049, 52.058072779551594 ], [ 5.937270568100247, 52.048461490191336 ], [ 5.939011718888153, 52.031462178299236 ], [ 5.940024330555358, 52.018714024045906 ], [ 5.941492691327096, 52.011344249932485 ], [ 5.946159721272697, 52.010472608221548 ], [ 5.943427641381977, 52.010202368718979 ], [ 5.94805906791076, 52.0064989432678 ], [ 5.951481324766251, 51.999686069593864 ], [ 5.957730950369745, 52.000788677620982 ], [ 5.963179607197014, 52.0001957496481 ], [ 5.974518130281433, 52.002971571663672 ], [ 5.978887390676411, 52.009179821203993 ], [ 5.980135431477015, 52.015120488721266 ], [ 5.979374480776477, 52.016540260562522 ], [ 5.980963890606494, 52.018797754264895 ], [ 5.984877654778045, 52.019910692405432 ], [ 5.988806826790469, 52.022156173816036 ], [ 5.994296045677711, 52.024393487201408 ], [ 5.995878789329835, 52.026084439157351 ], [ 5.990151871598314, 52.035175921671382 ], [ 5.98711149363651, 52.041138387824731 ], [ 5.98174092380966, 52.047962118256429 ], [ 5.977925696886507, 52.054494611313366 ], [ 5.988858233435297, 52.055005625231281 ], [ 5.998210945403236, 52.054107900649349 ], [ 6.003708458982856, 52.056627923860944 ], [ 6.005300526474637, 52.058885070856618 ], [ 6.006182811954746, 52.066243286267486 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0098\", \"naam\": \"Weststellingwerf\", \"code\": \"0098\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.119822850204541, 52.854212573582004 ], [ 6.121421504045761, 52.854769025181838 ], [ 6.165888678478083, 52.875156337431036 ], [ 6.206728070301549, 52.890738728012195 ], [ 6.232221360015481, 52.91349534800311 ], [ 6.244676055044533, 52.919635624179811 ], [ 6.247135841339357, 52.923298750893004 ], [ 6.21375459585195, 52.925799604531811 ], [ 6.210683422522715, 52.93176672361222 ], [ 6.209128841731403, 52.933759397405936 ], [ 6.200871157278692, 52.939195551256695 ], [ 6.2025057298994, 52.941449499076121 ], [ 6.200541774138381, 52.942878572632054 ], [ 6.188526276919332, 52.938995879760355 ], [ 6.172542933634591, 52.935704415530836 ], [ 6.161337926809145, 52.932379940519702 ], [ 6.157725958552706, 52.930704483296815 ], [ 6.145344278294965, 52.92823550970887 ], [ 6.140107279847117, 52.924587875320611 ], [ 6.130086808997726, 52.920403597621579 ], [ 6.126491426090045, 52.919576505600759 ], [ 6.122877078784948, 52.917616877415384 ], [ 6.11689019453695, 52.916521073720496 ], [ 6.11046821399574, 52.913162517490996 ], [ 6.086568611858873, 52.936238837731374 ], [ 6.084976472449431, 52.936248150913471 ], [ 6.077731116481875, 52.931193855955364 ], [ 6.043705766687724, 52.918361617639803 ], [ 6.037335548543236, 52.918113342945297 ], [ 6.00413034008343, 52.933578707336466 ], [ 5.998554144010633, 52.933324253010817 ], [ 5.988545208776634, 52.929128097735678 ], [ 5.9809566668679, 52.927184150042066 ], [ 5.97697707604288, 52.927203873037065 ], [ 5.971019053997989, 52.928082548372487 ], [ 5.966247199005597, 52.928388916155271 ], [ 5.959470543580495, 52.927572192648192 ], [ 5.953475346926913, 52.925618856029487 ], [ 5.948232836197088, 52.92026410495815 ], [ 5.937780263814029, 52.911818809636344 ], [ 5.933351061628992, 52.907592171774979 ], [ 5.911353901422451, 52.897781160030569 ], [ 5.904181976218148, 52.896679913048111 ], [ 5.901401516073848, 52.89697505840028 ], [ 5.899396462818054, 52.895568017277846 ], [ 5.890246662549686, 52.895323805145416 ], [ 5.886260215144129, 52.894491145340204 ], [ 5.885012321108102, 52.889683100771812 ], [ 5.880228060839998, 52.888570432868988 ], [ 5.877028099762726, 52.886884814259595 ], [ 5.871805905845408, 52.88209287546379 ], [ 5.868606744489102, 52.880407027072984 ], [ 5.865386126591163, 52.876739244184606 ], [ 5.856577094017875, 52.870828421587028 ], [ 5.856947140327708, 52.868278758804678 ], [ 5.8549357414976, 52.86602158977847 ], [ 5.844093175782525, 52.855304505651532 ], [ 5.840040838906599, 52.847675314044068 ], [ 5.839593776597391, 52.842863705855713 ], [ 5.835601458960362, 52.840896836615265 ], [ 5.8331779345367, 52.83694202306738 ], [ 5.829972099106927, 52.834122610784988 ], [ 5.828760724913844, 52.832145149435007 ], [ 5.825963965916798, 52.830456657556859 ], [ 5.827523801704992, 52.827619539474867 ], [ 5.824724547672255, 52.82564788970069 ], [ 5.819140776948241, 52.823120023457513 ], [ 5.818313247224665, 52.819725374656407 ], [ 5.819875999254926, 52.817171475571087 ], [ 5.819867598174842, 52.816322093697316 ], [ 5.824996888163248, 52.813188846788904 ], [ 5.828175179858851, 52.813460266131607 ], [ 5.833714889708325, 52.811740810435481 ], [ 5.837252187507533, 52.808329844763591 ], [ 5.836038297919095, 52.806069315574639 ], [ 5.839216140085097, 52.806340441574072 ], [ 5.842005979950362, 52.807462380217643 ], [ 5.843969677446774, 52.805472898536607 ], [ 5.851122140023202, 52.806294682461861 ], [ 5.855084745807093, 52.805712911176009 ], [ 5.857481123111864, 52.807119171957986 ], [ 5.859437990548521, 52.804563182160166 ], [ 5.864996980003955, 52.804824160362088 ], [ 5.868940566894191, 52.802543167612882 ], [ 5.876461365702963, 52.800813685775609 ], [ 5.878842256971177, 52.800803885428202 ], [ 5.88324572780229, 52.804183310303941 ], [ 5.89199591570834, 52.805845400318006 ], [ 5.897971946372815, 52.80780191187683 ], [ 5.899599240475542, 52.811192599186519 ], [ 5.902390932238409, 52.812313120488824 ], [ 5.908758495188713, 52.81370112022622 ], [ 5.911557367622455, 52.815387674423427 ], [ 5.914780732219517, 52.819337397236197 ], [ 5.924367378704108, 52.824107940439191 ], [ 5.922817420801596, 52.827229440751502 ], [ 5.926401364243592, 52.828062699101061 ], [ 5.922845162141099, 52.829494423917708 ], [ 5.923263058816985, 52.831191375441371 ], [ 5.93041416260554, 52.831442142975682 ], [ 5.927268908958847, 52.834004677445691 ], [ 5.932449037982255, 52.835396789403383 ], [ 5.941590109680813, 52.835920909603125 ], [ 5.945579490749758, 52.837317983667631 ], [ 5.956250746832931, 52.833303587414932 ], [ 5.955912558695213, 52.837835419125568 ], [ 5.961112631718173, 52.84064188595147 ], [ 5.969873052050466, 52.842298227800498 ], [ 5.972252382881511, 52.842003438502132 ], [ 5.977301122348182, 52.833484391191703 ], [ 5.9816115600808, 52.829215885102911 ], [ 5.986672529827313, 52.821828900554991 ], [ 5.990638621705246, 52.821525747639804 ], [ 5.996526528108726, 52.816682400848713 ], [ 5.99851129105312, 52.816672237552439 ], [ 6.007292390598035, 52.820024569347694 ], [ 6.017245480087109, 52.821954362352344 ], [ 6.024399708021737, 52.822482615197316 ], [ 6.026761031146302, 52.821054262434842 ], [ 6.031040417163535, 52.815085248439473 ], [ 6.041816980288799, 52.818990535135995 ], [ 6.047400203291216, 52.820658592969735 ], [ 6.053009707531482, 52.824025094663014 ], [ 6.059793796980471, 52.826252144442165 ], [ 6.05549129355401, 52.830523465198318 ], [ 6.052418056318146, 52.837336037838632 ], [ 6.061582754182206, 52.839266539634409 ], [ 6.067941613205027, 52.839513545620385 ], [ 6.075474185696031, 52.838620878582461 ], [ 6.08103872847736, 52.838871768764449 ], [ 6.087461119499785, 52.843081343991635 ], [ 6.092245617636424, 52.84418571587404 ], [ 6.119822850204541, 52.854212573582004 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0971\", \"naam\": \"Stein\", \"code\": \"0971\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.788169823148535, 50.948554910691826 ], [ 5.786312255185134, 50.953942227879203 ], [ 5.786002316769221, 50.962156245417574 ], [ 5.783775147991164, 50.968960818927208 ], [ 5.786464053297429, 50.971500425046017 ], [ 5.786488549379693, 50.974332392554068 ], [ 5.782362740384401, 50.981993084349121 ], [ 5.782401544932442, 50.986524234522307 ], [ 5.78396500912116, 50.991050172169579 ], [ 5.785892847920731, 50.993592399391325 ], [ 5.789008915451941, 51.001228174515866 ], [ 5.774926583620844, 51.004108214013904 ], [ 5.784553510292174, 51.015120598276397 ], [ 5.787257443786022, 51.019076167804201 ], [ 5.782675853325318, 51.018525484585403 ], [ 5.77352723863268, 51.019122757545531 ], [ 5.768145581599764, 51.014042885168891 ], [ 5.765820251878465, 51.00951922774405 ], [ 5.767303495697769, 51.004416681413417 ], [ 5.767645054262997, 50.999601075603969 ], [ 5.764950903754094, 50.996494638145137 ], [ 5.757292650761252, 50.992271287118946 ], [ 5.75267369455961, 50.98662185849178 ], [ 5.749974631137755, 50.982665478281397 ], [ 5.745381710168802, 50.980130932821631 ], [ 5.739663436594659, 50.979865273732159 ], [ 5.736218796181063, 50.977893275113402 ], [ 5.735431042522049, 50.974497192579605 ], [ 5.733506780066869, 50.971954123209528 ], [ 5.728539030330175, 50.969986443637076 ], [ 5.720102086149375, 50.962364492930789 ], [ 5.720081668075485, 50.959532508782921 ], [ 5.721969765876469, 50.95726142975829 ], [ 5.728047216159576, 50.954978059981102 ], [ 5.734145340069282, 50.955526352559225 ], [ 5.739111771604224, 50.957493792727455 ], [ 5.742182817144316, 50.960599666462407 ], [ 5.746381669016244, 50.961719533988457 ], [ 5.750565123065255, 50.960856865359638 ], [ 5.755873054053088, 50.957724831975973 ], [ 5.759259981118523, 50.952616310552898 ], [ 5.758101521761119, 50.950637594957506 ], [ 5.751616233209345, 50.949242170186103 ], [ 5.746650158319319, 50.947275266084858 ], [ 5.745857768235122, 50.943312860260882 ], [ 5.750015102195083, 50.939335038488608 ], [ 5.74846558029007, 50.935941430888349 ], [ 5.753399090481878, 50.933943492693608 ], [ 5.755284507901882, 50.931671874090604 ], [ 5.757573091201789, 50.932230981378801 ], [ 5.761366118136276, 50.930519551388535 ], [ 5.770861560727375, 50.92793961644756 ], [ 5.776985279341602, 50.931884020305574 ], [ 5.780100503871007, 50.940086430510469 ], [ 5.783551479298232, 50.942906714729546 ], [ 5.77899189731356, 50.944055058567592 ], [ 5.77976548010164, 50.945468462573693 ], [ 5.783961430474231, 50.946303771142162 ], [ 5.788169823148535, 50.948554910691826 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0668\", \"naam\": \"West Maas en Waal\", \"code\": \"0668\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.597977722829523, 51.828107148510149 ], [ 5.599535980914331, 51.829237094929788 ], [ 5.603024697959556, 51.828097968491413 ], [ 5.608862070075709, 51.830918974569606 ], [ 5.607708407845122, 51.833186664198706 ], [ 5.610042248221896, 51.834031820899419 ], [ 5.606556009631642, 51.835737528563321 ], [ 5.60966516455612, 51.83629805082866 ], [ 5.598411123163435, 51.837734803011415 ], [ 5.598419096896992, 51.839433922942696 ], [ 5.584826415268081, 51.839174425445165 ], [ 5.584068347980505, 51.843423533062015 ], [ 5.58099194797541, 51.850508372071026 ], [ 5.581388926763602, 51.852490034828463 ], [ 5.584904794283312, 51.857015175970041 ], [ 5.578697576515528, 51.859007790190418 ], [ 5.577926589208655, 51.860424986934582 ], [ 5.577167515279114, 51.86467403922331 ], [ 5.571335864291438, 51.863833772998426 ], [ 5.553069362202606, 51.862445082596004 ], [ 5.554253876819046, 51.867540782234258 ], [ 5.553875805177374, 51.870373196599303 ], [ 5.559705805454211, 51.870647956932714 ], [ 5.560111828733231, 51.875178360171475 ], [ 5.568278879942534, 51.876581978126474 ], [ 5.569456304661285, 51.879412029594931 ], [ 5.567132206989648, 51.881397927573765 ], [ 5.566364988061436, 51.883947786643532 ], [ 5.569478124361995, 51.884792554131522 ], [ 5.571418235034054, 51.88393996308772 ], [ 5.576896049056348, 51.892426850064204 ], [ 5.574563341936322, 51.892430596923688 ], [ 5.551219705866597, 51.887934551084349 ], [ 5.54538851335372, 51.88794255651888 ], [ 5.541117154558461, 51.889364171173717 ], [ 5.539570763827093, 51.891914870389584 ], [ 5.531015773478895, 51.89135929358622 ], [ 5.531415458922984, 51.894757042853058 ], [ 5.518186160820209, 51.891374317254687 ], [ 5.507684639882203, 51.889686452081875 ], [ 5.501074251679257, 51.889126681941079 ], [ 5.472306747188283, 51.889434272751508 ], [ 5.463753059925167, 51.88887379722172 ], [ 5.453254582717214, 51.887464251666138 ], [ 5.448198611571647, 51.885767873521424 ], [ 5.440808369071934, 51.882090062495877 ], [ 5.433418167144909, 51.877279037660173 ], [ 5.426027582660569, 51.870202048712486 ], [ 5.420970734251577, 51.863407124960688 ], [ 5.417858766166546, 51.858027421357718 ], [ 5.415135454360514, 51.851797976140752 ], [ 5.409305003398845, 51.843869965460762 ], [ 5.400759032480163, 51.837641136260906 ], [ 5.405417751337663, 51.835091804507371 ], [ 5.407745025594444, 51.829710836652197 ], [ 5.415118677521765, 51.824895097460576 ], [ 5.416281817331024, 51.822629303428364 ], [ 5.414728211883808, 51.821213736290289 ], [ 5.422098405763241, 51.814698419891194 ], [ 5.427917569976474, 51.811864645633037 ], [ 5.432185437425745, 51.810730324251104 ], [ 5.439557662205473, 51.809594498828936 ], [ 5.44537873440659, 51.809591748643633 ], [ 5.459738745397603, 51.810433297034926 ], [ 5.467114250203736, 51.811561252097455 ], [ 5.474105854904518, 51.814671353523195 ], [ 5.476827736870598, 51.817218004447831 ], [ 5.47916929382808, 51.82344634731264 ], [ 5.481894376874578, 51.827125631156974 ], [ 5.487335790758004, 51.8299529943395 ], [ 5.494714503528541, 51.83079602262557 ], [ 5.498983886416281, 51.830225650489062 ], [ 5.505189923991789, 51.827954056307618 ], [ 5.509064544973751, 51.825118202399089 ], [ 5.512937095979185, 51.821715843296587 ], [ 5.51913959775796, 51.818877133091291 ], [ 5.529229726821169, 51.81829896130548 ], [ 5.535046330061494, 51.816592632515196 ], [ 5.539314811969962, 51.816303981211391 ], [ 5.543974322886828, 51.816864220520401 ], [ 5.54864207272794, 51.819689778640267 ], [ 5.552155201859069, 51.825065484110134 ], [ 5.555267173667751, 51.826760199310471 ], [ 5.561094819964162, 51.827884457332473 ], [ 5.571576963849035, 51.827868442745668 ], [ 5.585948869968294, 51.829544099292981 ], [ 5.591772491963119, 51.829534084484159 ], [ 5.597977722829523, 51.828107148510149 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1771\", \"naam\": \"Geldrop-Mierlo\", \"code\": \"1771\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.639192898532716, 51.422489818723278 ], [ 5.642722531420176, 51.434376537349145 ], [ 5.643913854303433, 51.440887518347445 ], [ 5.648151265758464, 51.441444510851795 ], [ 5.653183461344804, 51.446247537668498 ], [ 5.65630171401134, 51.452753978959962 ], [ 5.656323479853473, 51.456435525395321 ], [ 5.643229995739542, 51.456181807381242 ], [ 5.620864878713502, 51.449998379492868 ], [ 5.614699187168644, 51.448877775091802 ], [ 5.614704848615331, 51.450010561873327 ], [ 5.608158437821526, 51.44973995252009 ], [ 5.608938094341369, 51.451720868050415 ], [ 5.603558630325157, 51.453996569012787 ], [ 5.600855401820044, 51.452302358169277 ], [ 5.59702476839996, 51.456557303239101 ], [ 5.592796809498006, 51.458264029853119 ], [ 5.590483845690232, 51.457701687076579 ], [ 5.584720124279505, 51.460543583984006 ], [ 5.57119037604524, 51.447821762088502 ], [ 5.56616108116176, 51.441599209766402 ], [ 5.548813998781857, 51.434544574973316 ], [ 5.543418007843637, 51.432286339686627 ], [ 5.539180836499515, 51.43115914626302 ], [ 5.531871496571791, 51.432018048694538 ], [ 5.530316955696437, 51.427205581584445 ], [ 5.525316132092517, 51.427778015966787 ], [ 5.525631205410153, 51.404838487885897 ], [ 5.536015076369003, 51.404542483056893 ], [ 5.536395059238105, 51.403125998445887 ], [ 5.543707465578092, 51.40453240065586 ], [ 5.557556932075533, 51.405362568210592 ], [ 5.560637174555436, 51.406207622256872 ], [ 5.561401027749825, 51.404790483403026 ], [ 5.566789072474209, 51.405631901042959 ], [ 5.566026484076932, 51.407332273165309 ], [ 5.56910927742148, 51.408743499336701 ], [ 5.594150375693752, 51.417197707937227 ], [ 5.60531689478064, 51.419159741387851 ], [ 5.639192898532716, 51.422489818723278 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0632\", \"naam\": \"Woerden\", \"code\": \"0632\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.970198883187422, 52.122353239972135 ], [ 4.961105704643475, 52.133364751170305 ], [ 4.943963496606452, 52.127637986780073 ], [ 4.935259423861966, 52.13808261632979 ], [ 4.923435000892925, 52.147381654518121 ], [ 4.913302213173546, 52.14422641299597 ], [ 4.91173834794645, 52.144220120857199 ], [ 4.911172297579076, 52.160642247241157 ], [ 4.909595737483751, 52.161768593403899 ], [ 4.891995374712556, 52.161696049441339 ], [ 4.887712087503636, 52.159978920637876 ], [ 4.873678004133724, 52.155954164377761 ], [ 4.874655203456944, 52.138967590337117 ], [ 4.864898809848234, 52.137508891277086 ], [ 4.855129563700642, 52.137182049844412 ], [ 4.85197520323693, 52.139433229711102 ], [ 4.848069409281718, 52.139132262442828 ], [ 4.842589646805468, 52.13967345363276 ], [ 4.840219832367845, 52.141644758688251 ], [ 4.83749370897384, 52.140782542695888 ], [ 4.836687409526084, 52.142761052529863 ], [ 4.833950762233902, 52.142748250001922 ], [ 4.833144270023939, 52.14472673468326 ], [ 4.826138895444161, 52.142144992101343 ], [ 4.820665686205234, 52.142118834117838 ], [ 4.816401506706999, 52.139266459511468 ], [ 4.813259607295851, 52.140383942415056 ], [ 4.809766889104877, 52.138384622519851 ], [ 4.807461862727988, 52.135258311570055 ], [ 4.809069374843151, 52.131868012947848 ], [ 4.807933536503707, 52.129030614527842 ], [ 4.802900922894477, 52.125324413024472 ], [ 4.798211382536959, 52.12530108571675 ], [ 4.793927682643877, 52.124146881655228 ], [ 4.792000166266685, 52.122154886546369 ], [ 4.825407738720298, 52.107026888589232 ], [ 4.82308536056459, 52.105316699659745 ], [ 4.823235389181601, 52.093423703576498 ], [ 4.825745577987461, 52.080126029973393 ], [ 4.826533478641004, 52.079563411989852 ], [ 4.826203444292724, 52.074747703141831 ], [ 4.832839478383907, 52.074779107565462 ], [ 4.834035049157173, 52.072802433612551 ], [ 4.829815402618604, 52.066835668026208 ], [ 4.842280432725683, 52.068876267092911 ], [ 4.854770187482504, 52.068933364144137 ], [ 4.862185996595478, 52.06896663898209 ], [ 4.873117833099283, 52.068731654842608 ], [ 4.889120349121063, 52.068800382716006 ], [ 4.903153008787204, 52.070557961917025 ], [ 4.906275585449369, 52.070570746967356 ], [ 4.908602377643397, 52.071996136263195 ], [ 4.917943696815522, 52.074582350788006 ], [ 4.924547577629944, 52.07772347165556 ], [ 4.930779306078755, 52.079163682771494 ], [ 4.936236322933529, 52.080034236452327 ], [ 4.938989023898173, 52.078062460020384 ], [ 4.945257627712648, 52.075820673580026 ], [ 4.95624253523372, 52.070197706255527 ], [ 4.95667371608309, 52.065951543446346 ], [ 4.970317853966051, 52.067699697524915 ], [ 4.982833048438397, 52.064911484259994 ], [ 4.996082657929708, 52.067221662162524 ], [ 4.999605138198503, 52.066100572383135 ], [ 5.001451636612209, 52.078283445260745 ], [ 5.003406033208472, 52.078006643936376 ], [ 5.004878074768659, 52.088489131580488 ], [ 4.994317640991201, 52.090436676333752 ], [ 4.989150430773436, 52.100613852925889 ], [ 4.975487687366615, 52.099717392881409 ], [ 4.973125854700089, 52.101691387733581 ], [ 4.975438144112773, 52.105097654002037 ], [ 4.976193366139309, 52.107932094336554 ], [ 4.979315995450995, 52.108226117468398 ], [ 4.980058620404685, 52.112476388507325 ], [ 4.978102572268884, 52.112752799240099 ], [ 4.970198883187422, 52.122353239972135 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0088\", \"naam\": \"Schiermonnikoog\", \"code\": \"0088\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.352337704578199, 53.539687477379672 ], [ 6.322173647443465, 53.526336924936246 ], [ 6.185946690735716, 53.514011138643305 ], [ 6.125998205507282, 53.523451898649597 ], [ 6.110610596897336, 53.496369408676507 ], [ 6.050060946129515, 53.492471344637842 ], [ 6.079281245607924, 53.429179118207422 ], [ 6.194133921500317, 53.413177212565273 ], [ 6.350237130117251, 53.44628437370384 ], [ 6.351375233210043, 53.496948890205381 ], [ 6.366697080676016, 53.496825374025619 ], [ 6.381563096622533, 53.494438938851061 ], [ 6.384008509592078, 53.495551109400139 ], [ 6.40211854626572, 53.49398453906386 ], [ 6.408992748724433, 53.494775745767726 ], [ 6.415108335818876, 53.497554681896382 ], [ 6.417595617936551, 53.50036437437938 ], [ 6.418531490886596, 53.505735123821246 ], [ 6.415885160903006, 53.513118107417675 ], [ 6.411146383799553, 53.517404798299665 ], [ 6.404369318587031, 53.520859229279836 ], [ 6.393093258938149, 53.521803072585513 ], [ 6.382193842347816, 53.521610396849937 ], [ 6.367318443581207, 53.52399690716544 ], [ 6.351935876619464, 53.521856230988114 ], [ 6.352337704578199, 53.539687477379672 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0880\", \"naam\": \"Wormerland\", \"code\": \"0880\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.906558744291157, 52.479756948758521 ], [ 4.908100717320695, 52.482877963087425 ], [ 4.915158715916897, 52.48602103312718 ], [ 4.920626716736455, 52.490573238661128 ], [ 4.923752218302869, 52.493133934465725 ], [ 4.924107701879018, 52.496816406560015 ], [ 4.926042663225602, 52.500221863905125 ], [ 4.926395440045785, 52.504187471859836 ], [ 4.925198189804355, 52.505598614661864 ], [ 4.934611670696604, 52.510165441099524 ], [ 4.934202950840253, 52.511579677256783 ], [ 4.928298547338989, 52.510707514507935 ], [ 4.920002232703356, 52.512374098508204 ], [ 4.910492026684372, 52.516866826129394 ], [ 4.902594375847622, 52.517967477750823 ], [ 4.894317852219585, 52.517650234845817 ], [ 4.884445053034271, 52.519024620140947 ], [ 4.874574928680614, 52.520115037218801 ], [ 4.863487846687318, 52.524030867622081 ], [ 4.857165084943292, 52.525135439318682 ], [ 4.851647864095448, 52.524827513459961 ], [ 4.842944698975648, 52.527053203534123 ], [ 4.837377976914985, 52.530708625423827 ], [ 4.835324659860255, 52.537211766203008 ], [ 4.833725599432665, 52.538903277608618 ], [ 4.824602626260803, 52.542824624977598 ], [ 4.821110336456143, 52.538277473962353 ], [ 4.819130807236149, 52.538834337286282 ], [ 4.816804339630113, 52.535708425113924 ], [ 4.824323696792786, 52.533762199051488 ], [ 4.820412336910405, 52.53119514832958 ], [ 4.814105858702888, 52.530881707712211 ], [ 4.81057121747404, 52.529731948323061 ], [ 4.805496623411725, 52.525742939522061 ], [ 4.797632608115322, 52.524005171442973 ], [ 4.791778910049215, 52.519445368729464 ], [ 4.789811349049594, 52.519152319377042 ], [ 4.78873595717381, 52.51121837212547 ], [ 4.793531107743418, 52.50642870463826 ], [ 4.795240539994438, 52.49652655887791 ], [ 4.7917511026051, 52.492261650959662 ], [ 4.794134314939405, 52.490857774178416 ], [ 4.798858829303025, 52.491164463813988 ], [ 4.804401337045959, 52.489209682874694 ], [ 4.811541447975205, 52.4855634295116 ], [ 4.812351494100922, 52.483868379246921 ], [ 4.816703349030144, 52.482473575070031 ], [ 4.826967587683586, 52.480823523003657 ], [ 4.837224019007884, 52.479738874012341 ], [ 4.838054072357641, 52.476344764050808 ], [ 4.842439258916841, 52.472117540522191 ], [ 4.846395163495015, 52.4707198303295 ], [ 4.852700138810652, 52.470465252565909 ], [ 4.861782126425159, 52.46852369776024 ], [ 4.866488064423253, 52.470243432911211 ], [ 4.876304727894269, 52.472834594374092 ], [ 4.882583991150311, 52.47484361535107 ], [ 4.890417173262164, 52.478840954012497 ], [ 4.895150533940198, 52.478294361456129 ], [ 4.906558744291157, 52.479756948758521 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0335\", \"naam\": \"Montfoort\", \"code\": \"0335\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.920178808789324, 52.010025203522993 ], [ 4.954802443942758, 52.017237082213583 ], [ 4.959478060016985, 52.017537344159869 ], [ 4.97621620898277, 52.020428799691842 ], [ 4.984788673783361, 52.0210247751235 ], [ 4.992196661557055, 52.021049857240243 ], [ 4.995310865297023, 52.021626630227878 ], [ 4.994069134504438, 52.029834823196161 ], [ 4.98316783323847, 52.027815642868582 ], [ 4.978379891807152, 52.0396928369574 ], [ 4.983445519100213, 52.040276676159159 ], [ 4.989971097463259, 52.052192550215345 ], [ 5.000103169776481, 52.053642188720403 ], [ 5.004378188479195, 52.055638433898437 ], [ 5.010247819679148, 52.053675082028668 ], [ 5.017210214313931, 52.061059887466584 ], [ 5.017981360536056, 52.062195034076808 ], [ 4.999605138198503, 52.066100572383135 ], [ 4.996082657929708, 52.067221662162524 ], [ 4.982833048438397, 52.064911484259994 ], [ 4.970317853966051, 52.067699697524915 ], [ 4.95667371608309, 52.065951543446346 ], [ 4.95624253523372, 52.070197706255527 ], [ 4.945257627712648, 52.075820673580026 ], [ 4.938989023898173, 52.078062460020384 ], [ 4.936236322933529, 52.080034236452327 ], [ 4.930779306078755, 52.079163682771494 ], [ 4.924547577629944, 52.07772347165556 ], [ 4.917943696815522, 52.074582350788006 ], [ 4.908602377643397, 52.071996136263195 ], [ 4.906275585449369, 52.070570746967356 ], [ 4.903153008787204, 52.070557961917025 ], [ 4.889120349121063, 52.068800382716006 ], [ 4.873117833099283, 52.068731654842608 ], [ 4.868106280014215, 52.063329183285347 ], [ 4.871277296136067, 52.059095344972008 ], [ 4.875540594329873, 52.061662596161945 ], [ 4.895592299418775, 52.048155124357372 ], [ 4.895567428926832, 52.050420496317642 ], [ 4.906458088110252, 52.053580469035637 ], [ 4.917096853412882, 52.043711958018804 ], [ 4.91128163641225, 52.040290392109725 ], [ 4.926601674072665, 52.029873469314055 ], [ 4.923907030963487, 52.02646468099892 ], [ 4.920016502826036, 52.025599755548456 ], [ 4.912610819526669, 52.025286956914158 ], [ 4.904800074695471, 52.026387959992107 ], [ 4.917807423360797, 52.013130815149331 ], [ 4.920178808789324, 52.010025203522993 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0209\", \"naam\": \"Beuningen\", \"code\": \"0209\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.764564294864346, 51.832220546385166 ], [ 5.775152207176681, 51.844363224776139 ], [ 5.779426676876321, 51.844632205132854 ], [ 5.782513710733935, 51.842356317859085 ], [ 5.787161286323083, 51.840924612160386 ], [ 5.803938258738079, 51.849361960616648 ], [ 5.807846135802117, 51.851896737502472 ], [ 5.812485859440111, 51.849614485891536 ], [ 5.81753515872763, 51.849596078353514 ], [ 5.821476609714037, 51.855528574628671 ], [ 5.825405312167479, 51.860045029393923 ], [ 5.823898044450206, 51.864864892875467 ], [ 5.82585454379412, 51.866273551879985 ], [ 5.816955734565946, 51.870271137742513 ], [ 5.810373746165243, 51.872843763108968 ], [ 5.800293325482497, 51.875428379178189 ], [ 5.789035662043255, 51.876883402305211 ], [ 5.780104261988116, 51.877763202635208 ], [ 5.770011352052594, 51.87921249503669 ], [ 5.752942314376863, 51.883231561002532 ], [ 5.747896023415747, 51.884096739957492 ], [ 5.730807999757588, 51.886130316139138 ], [ 5.721108769217509, 51.888706998674571 ], [ 5.706757261588756, 51.893277948675824 ], [ 5.6978268593047, 51.895001042081169 ], [ 5.685000074682171, 51.895600650497947 ], [ 5.678287605210366, 51.879758953124281 ], [ 5.675928292414767, 51.875516954186736 ], [ 5.670842084113283, 51.870148773664859 ], [ 5.667706871773807, 51.865908479086187 ], [ 5.670419612428691, 51.864769208757899 ], [ 5.672344378322901, 51.861932659316324 ], [ 5.679717027064826, 51.860498568582074 ], [ 5.678150181828691, 51.858520140336616 ], [ 5.681635465155501, 51.856812312239839 ], [ 5.680070507479508, 51.855117093287035 ], [ 5.681215532604123, 51.851999147524005 ], [ 5.684690835175869, 51.848875303857795 ], [ 5.681193331553813, 51.848600930144087 ], [ 5.681566917059945, 51.846334477288785 ], [ 5.677294691335748, 51.846345118437149 ], [ 5.678051329517329, 51.843228159811034 ], [ 5.719966593191452, 51.83943528981878 ], [ 5.728503262097321, 51.838561194931799 ], [ 5.751767760424667, 51.83424334760717 ], [ 5.764564294864346, 51.832220546385166 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0532\", \"naam\": \"Stede Broec\", \"code\": \"0532\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.257658234951435, 52.716240462050571 ], [ 5.227553477201528, 52.71733649830751 ], [ 5.221611347577739, 52.717611529912503 ], [ 5.210919644979753, 52.717029906560562 ], [ 5.196281139227075, 52.713326499144976 ], [ 5.185206507278982, 52.710193667456664 ], [ 5.187199424715946, 52.70736560416951 ], [ 5.195976295196058, 52.692373428823522 ], [ 5.195581684114135, 52.69208965073495 ], [ 5.204745995795379, 52.677663690119424 ], [ 5.205916795789197, 52.681629502576044 ], [ 5.209469379716832, 52.683900013142932 ], [ 5.233208610338598, 52.685915086811853 ], [ 5.245872002163583, 52.686497074911173 ], [ 5.247460572248713, 52.684800085938797 ], [ 5.262126899377694, 52.676888353068811 ], [ 5.268844777210808, 52.680292949387201 ], [ 5.259329796779257, 52.686229138851523 ], [ 5.259719022973885, 52.688494705703569 ], [ 5.257658234951435, 52.716240462050571 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0762\", \"naam\": \"Deurne\", \"code\": \"0762\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.931171494253361, 51.384676437284504 ], [ 5.915619391900068, 51.402873093960046 ], [ 5.874934274069863, 51.446663753945025 ], [ 5.871505728612339, 51.45007647527725 ], [ 5.860776846211756, 51.492034460483893 ], [ 5.852423719358964, 51.504245723029037 ], [ 5.801062806170367, 51.493960695144843 ], [ 5.799909271518473, 51.494247980798221 ], [ 5.793335204134637, 51.491722236621293 ], [ 5.78638896541515, 51.490613400597596 ], [ 5.778291940680558, 51.490074415419123 ], [ 5.773270548881949, 51.488675133032928 ], [ 5.768649028387012, 51.488973531521886 ], [ 5.764401033238622, 51.487854538246097 ], [ 5.757852934028141, 51.488158720973061 ], [ 5.749362343535593, 51.486486179607461 ], [ 5.738564993234515, 51.485386391049147 ], [ 5.734705522688015, 51.484548348728232 ], [ 5.732402374017716, 51.485687985299769 ], [ 5.728551492168719, 51.485982514192941 ], [ 5.725841718026029, 51.484291210261773 ], [ 5.721609783984202, 51.485153015425148 ], [ 5.722751048681403, 51.483167339554115 ], [ 5.730792715741327, 51.476630333602166 ], [ 5.736146753037253, 51.471516837911565 ], [ 5.734973895901983, 51.469254737440558 ], [ 5.723810489374496, 51.470137084231261 ], [ 5.723019251060417, 51.467307362424997 ], [ 5.71724823010637, 51.468173434026177 ], [ 5.718354229158154, 51.461373493777174 ], [ 5.721770126539957, 51.454566935866119 ], [ 5.730164147080808, 51.44434733010425 ], [ 5.718232713808815, 51.444665011847498 ], [ 5.718189487421516, 51.438717920711326 ], [ 5.723191146363365, 51.438420414608011 ], [ 5.73281796673345, 51.438958678839619 ], [ 5.743966904238627, 51.437225893579701 ], [ 5.755875573564789, 51.43435683604477 ], [ 5.76276813113082, 51.43008681745706 ], [ 5.765811464492279, 51.425828951640888 ], [ 5.77041231131384, 51.423831507975194 ], [ 5.773848865241596, 51.420704942048353 ], [ 5.776909911037668, 51.41871233654264 ], [ 5.783433132321332, 51.416707932942131 ], [ 5.787630171723304, 51.412728762466635 ], [ 5.815244775761736, 51.40385134807488 ], [ 5.831741397258511, 51.399541551002073 ], [ 5.832875730404983, 51.39755479759252 ], [ 5.837091835114753, 51.396122582549786 ], [ 5.842800523272782, 51.390153136014952 ], [ 5.854196034733557, 51.376514251693251 ], [ 5.853389675897659, 51.372835832584833 ], [ 5.856653598256246, 51.353848061040352 ], [ 5.866267083242623, 51.354658526833205 ], [ 5.870472186700188, 51.352658723801703 ], [ 5.874704130259687, 51.353207495256406 ], [ 5.878570277898357, 51.355456883886724 ], [ 5.931171494253361, 51.384676437284504 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1734\", \"naam\": \"Overbetuwe\", \"code\": \"1734\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.857237373161494, 51.894754356259497 ], [ 5.856872247217185, 51.897021339244688 ], [ 5.871261442718374, 51.897246103071041 ], [ 5.874763862591609, 51.897514805542286 ], [ 5.875590729975099, 51.902042417250705 ], [ 5.872091007607405, 51.902056917739628 ], [ 5.873716946404381, 51.908563568929495 ], [ 5.885770135167448, 51.908229837866607 ], [ 5.891205356650596, 51.907357071259838 ], [ 5.892018156226835, 51.910468675543953 ], [ 5.894402880368053, 51.914989448199577 ], [ 5.893248731801926, 51.916127186307214 ], [ 5.896804148132142, 51.920926049831301 ], [ 5.889460252199378, 51.925205522076773 ], [ 5.897733462856838, 51.934231936790958 ], [ 5.892690638499007, 51.935669684409596 ], [ 5.88763802179727, 51.936257688313731 ], [ 5.884926503019864, 51.93740196089913 ], [ 5.877937029643191, 51.938847301147234 ], [ 5.87600656293067, 51.940271291284859 ], [ 5.868633226621284, 51.942284049058507 ], [ 5.862019704514908, 51.942594143429382 ], [ 5.85036385429349, 51.944622975363522 ], [ 5.84956789730697, 51.942926979526959 ], [ 5.839073386396977, 51.944383739474212 ], [ 5.837135770761551, 51.945240737565115 ], [ 5.829740325630935, 51.945268817134945 ], [ 5.828619966413271, 51.950087223235144 ], [ 5.83139815196145, 51.9554573221412 ], [ 5.831428989880967, 51.958572268000516 ], [ 5.829504574330113, 51.960845023429691 ], [ 5.834196753395395, 51.962809586915625 ], [ 5.835788276460386, 51.966201771905546 ], [ 5.835034888996387, 51.968753328328297 ], [ 5.836225880328614, 51.971014282198915 ], [ 5.835472437781789, 51.97356583974274 ], [ 5.82456147836491, 51.973040558119557 ], [ 5.81636623081229, 51.971371637094549 ], [ 5.786666213486346, 51.960148839944956 ], [ 5.778869019211152, 51.959042332006888 ], [ 5.772259690047595, 51.960196914465953 ], [ 5.764880803583428, 51.962486344654586 ], [ 5.747804701153906, 51.96961961512018 ], [ 5.745083079555473, 51.970194303109309 ], [ 5.740017951759241, 51.969926427508703 ], [ 5.727531852747735, 51.966848196233151 ], [ 5.722448156546275, 51.964030948421154 ], [ 5.717379688706061, 51.963195737675484 ], [ 5.709589771445052, 51.962934175478779 ], [ 5.701017201976, 51.962107818729244 ], [ 5.68191684854979, 51.959042224320932 ], [ 5.674893856057788, 51.956794142527649 ], [ 5.669814600058151, 51.95397461274672 ], [ 5.665914409330522, 51.952851185713769 ], [ 5.654976660957292, 51.946646538431693 ], [ 5.651870994569733, 51.948069502371574 ], [ 5.647569365037141, 51.9446808868719 ], [ 5.647155523569277, 51.940434018620223 ], [ 5.653008593504057, 51.942969594070391 ], [ 5.654167831582192, 51.941551037235222 ], [ 5.661185674134201, 51.943517182336791 ], [ 5.663114388190041, 51.940680810948905 ], [ 5.665844063614455, 51.941523926744487 ], [ 5.667774168107045, 51.938970660201122 ], [ 5.659589243262667, 51.937007619491773 ], [ 5.660322781011351, 51.929643077165899 ], [ 5.670444855844692, 51.930468666795868 ], [ 5.688765413078013, 51.935237236707046 ], [ 5.693042229092125, 51.934659808611556 ], [ 5.696132021630563, 51.931253486451091 ], [ 5.689524646808461, 51.93240342127045 ], [ 5.684449109623083, 51.92986769437988 ], [ 5.678607004162776, 51.929032771646391 ], [ 5.675865105026318, 51.926207675988827 ], [ 5.677797648499665, 51.924220604806727 ], [ 5.675846901216793, 51.92337585451569 ], [ 5.677386631532545, 51.92082338019793 ], [ 5.681260220982975, 51.918265064764789 ], [ 5.692947729220116, 51.920783906409234 ], [ 5.696059944930703, 51.920775764411012 ], [ 5.692154292149641, 51.918520472989051 ], [ 5.700676875961916, 51.913400667009448 ], [ 5.706084160789755, 51.908005548205907 ], [ 5.705278261160363, 51.90404310631736 ], [ 5.707980217105405, 51.901203878674615 ], [ 5.706789478174927, 51.897808870187696 ], [ 5.709511272520198, 51.897801430877216 ], [ 5.711058420518556, 51.896664421791336 ], [ 5.706757261588756, 51.893277948675824 ], [ 5.721108769217509, 51.888706998674571 ], [ 5.730807999757588, 51.886130316139138 ], [ 5.747896023415747, 51.884096739957492 ], [ 5.752942314376863, 51.883231561002532 ], [ 5.770011352052594, 51.87921249503669 ], [ 5.780104261988116, 51.877763202635208 ], [ 5.789035662043255, 51.876883402305211 ], [ 5.800293325482497, 51.875428379178189 ], [ 5.810373746165243, 51.872843763108968 ], [ 5.816955734565946, 51.870271137742513 ], [ 5.823975022859764, 51.872793946078318 ], [ 5.828255256045085, 51.873344324340678 ], [ 5.831741567896201, 51.872198411769475 ], [ 5.835292583366026, 51.877565533969552 ], [ 5.832969114358812, 51.878423950463016 ], [ 5.837684038381003, 51.883503382800271 ], [ 5.836520769860488, 51.8837910305026 ], [ 5.836168824990953, 51.887473850585458 ], [ 5.833867368150607, 51.890597719182438 ], [ 5.830379685826118, 51.891743693706985 ], [ 5.830399228213721, 51.893725949499782 ], [ 5.838174982420386, 51.893696345991664 ], [ 5.857237373161494, 51.894754356259497 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0147\", \"naam\": \"Borne\", \"code\": \"0147\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.802079389353709, 52.313693738475216 ], [ 6.802106448975601, 52.314543028543653 ], [ 6.796238730890735, 52.315179513797389 ], [ 6.785314317763176, 52.317291629409112 ], [ 6.785733471885042, 52.318136282887231 ], [ 6.779053577327636, 52.317931903298465 ], [ 6.773978748119883, 52.318841143584578 ], [ 6.76325416755286, 52.327462506656801 ], [ 6.762181902920936, 52.330873399826295 ], [ 6.759076676938689, 52.332042268618302 ], [ 6.753912645076728, 52.33011965197727 ], [ 6.750755069801338, 52.329589699742407 ], [ 6.743496172689572, 52.336186787501475 ], [ 6.734561415746876, 52.339404109958643 ], [ 6.720871166914163, 52.341258465936534 ], [ 6.718806090927688, 52.337883345602393 ], [ 6.715221894265418, 52.336224451344279 ], [ 6.709557036898957, 52.330623948456186 ], [ 6.706859808900531, 52.332353270193799 ], [ 6.696970886014642, 52.329914419083437 ], [ 6.694916498521038, 52.326821972610325 ], [ 6.706915658108257, 52.321024685194431 ], [ 6.704518969428681, 52.319635414364321 ], [ 6.706038259139375, 52.317919281398062 ], [ 6.694958724988174, 52.314927157353182 ], [ 6.690241662336732, 52.314696040250233 ], [ 6.690935024209959, 52.311573207618622 ], [ 6.689307454050916, 52.309608751358454 ], [ 6.690843612378883, 52.308459024949805 ], [ 6.697521717243934, 52.308668393527967 ], [ 6.704541841739103, 52.307174375042244 ], [ 6.711894702427447, 52.303693804049836 ], [ 6.717677357918187, 52.300230448947516 ], [ 6.728029192348612, 52.292183827123274 ], [ 6.737286922438815, 52.286980789574926 ], [ 6.743056789815525, 52.283233091979703 ], [ 6.750567645111323, 52.285129100183376 ], [ 6.752998693685893, 52.287649860082055 ], [ 6.754157720341741, 52.287070052317944 ], [ 6.763220791774548, 52.28838089203343 ], [ 6.766419510648202, 52.290326033102218 ], [ 6.767265391910565, 52.29229858662319 ], [ 6.769993076120715, 52.291700295796723 ], [ 6.775527823495232, 52.293051430666345 ], [ 6.779975033985699, 52.297247173902171 ], [ 6.785154164753257, 52.299734872772 ], [ 6.792633760434541, 52.300495789834351 ], [ 6.788069521746558, 52.30508124288675 ], [ 6.797538542630718, 52.306667878786399 ], [ 6.801132405011505, 52.308607382343965 ], [ 6.802079389353709, 52.313693738475216 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0096\", \"naam\": \"Vlieland\", \"code\": \"0096\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.147397503800093, 53.251451576361013 ], [ 5.152905023288135, 53.27099611946548 ], [ 5.162354062271269, 53.30526855433007 ], [ 5.132995944543867, 53.313985948595068 ], [ 5.102017617279881, 53.322975425733709 ], [ 5.087157626245992, 53.322939278751242 ], [ 5.026988042383195, 53.313998266073078 ], [ 4.907531404876992, 53.259509437973058 ], [ 4.840500225365924, 53.232328315599489 ], [ 4.818291951362585, 53.214389498860264 ], [ 5.050804646189787, 53.143357377577836 ], [ 5.095578577338109, 53.087135559264134 ], [ 5.163378228524081, 53.107665423194469 ], [ 5.132880186485607, 53.197349541009473 ], [ 5.147397503800093, 53.251451576361013 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0556\", \"naam\": \"Maassluis\", \"code\": \"0556\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.292784081855014, 51.921185265790669 ], [ 4.27873204988585, 51.923036037642348 ], [ 4.270549161759904, 51.923524998790441 ], [ 4.264275713878388, 51.925447691644067 ], [ 4.257966148331547, 51.928785749184847 ], [ 4.240487118277912, 51.942776992254906 ], [ 4.23617734748994, 51.943867715270336 ], [ 4.231918358646576, 51.942976316158486 ], [ 4.228284399562496, 51.94803831966761 ], [ 4.219502101506334, 51.941437607980873 ], [ 4.21269743046919, 51.933723149727598 ], [ 4.220970983337351, 51.929840578166441 ], [ 4.225720045826025, 51.926772288220043 ], [ 4.234885341840106, 51.918366199536315 ], [ 4.242376323607277, 51.91447446975203 ], [ 4.252962771117151, 51.911178606234692 ], [ 4.267499738566242, 51.905370625233623 ], [ 4.286275526561274, 51.916876363839137 ], [ 4.292784081855014, 51.921185265790669 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0307\", \"naam\": \"Amersfoort\", \"code\": \"0307\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.310989515184272, 52.108340386287026 ], [ 5.318404718465658, 52.113158950845794 ], [ 5.32855601100518, 52.118544787362161 ], [ 5.334024191169576, 52.120529610956076 ], [ 5.355504933974048, 52.136961542488336 ], [ 5.370361660212618, 52.131584233613424 ], [ 5.372315712798209, 52.132434022376103 ], [ 5.374661349058912, 52.131018410868364 ], [ 5.392250352054432, 52.13300117864933 ], [ 5.3985047059214, 52.134133440846391 ], [ 5.398895820345827, 52.13498293039379 ], [ 5.404369906977013, 52.138946716415454 ], [ 5.413366495671722, 52.147723496818919 ], [ 5.417672440227038, 52.154801839393912 ], [ 5.423540803587734, 52.157631920050704 ], [ 5.432928529534172, 52.159044516519465 ], [ 5.43879776123346, 52.161307486531229 ], [ 5.4423182527826, 52.161589064259282 ], [ 5.452089876407582, 52.157053281295632 ], [ 5.454433419094295, 52.155069739755554 ], [ 5.459513675754183, 52.152801325859116 ], [ 5.469681028400481, 52.152794640592816 ], [ 5.477109871557438, 52.152222851117699 ], [ 5.481407794428587, 52.150520438258653 ], [ 5.483761349814876, 52.153916636648809 ], [ 5.484161655414508, 52.158163936078253 ], [ 5.48142456204199, 52.158449332916611 ], [ 5.482209784605546, 52.159864577368843 ], [ 5.47830270050691, 52.161849889481942 ], [ 5.4728268625043, 52.161853998520499 ], [ 5.472830673916111, 52.163836219734556 ], [ 5.478699067342527, 52.164398155935856 ], [ 5.479875474258106, 52.165813109928244 ], [ 5.475572648157244, 52.165816417293307 ], [ 5.446629372519382, 52.168099983165192 ], [ 5.439982902188851, 52.171218071718897 ], [ 5.439985255047104, 52.173200290854595 ], [ 5.439215712358018, 52.184244419332316 ], [ 5.43804205242517, 52.184528106108971 ], [ 5.439612048539241, 52.188491847664309 ], [ 5.440007787439536, 52.192172925167853 ], [ 5.439234939440768, 52.200668462898612 ], [ 5.441196773566287, 52.204348825701359 ], [ 5.436499662623024, 52.20520040518975 ], [ 5.429455411626672, 52.208318044707845 ], [ 5.420845196740013, 52.213134754433142 ], [ 5.409492036557495, 52.218517729122944 ], [ 5.407139961795019, 52.213421055417371 ], [ 5.395393494116492, 52.219085912225324 ], [ 5.392650342961146, 52.205493805743451 ], [ 5.380904669084972, 52.207192815147273 ], [ 5.378555491538024, 52.207192669715525 ], [ 5.369158327093466, 52.20832431046469 ], [ 5.364459135442595, 52.209739367433031 ], [ 5.35819430450435, 52.209738003056422 ], [ 5.330387643811791, 52.214825036727355 ], [ 5.328045564316609, 52.209160442870058 ], [ 5.330010908832526, 52.203214783256414 ], [ 5.314351594592441, 52.202923007097262 ], [ 5.309277024200076, 52.19442458153889 ], [ 5.311631275504685, 52.191028028820739 ], [ 5.314761456198662, 52.191596334011216 ], [ 5.321025831054815, 52.190184136797313 ], [ 5.324551426449379, 52.187920668014961 ], [ 5.324945941579247, 52.185655487319416 ], [ 5.323776340288538, 52.182539954904861 ], [ 5.325733683565152, 52.181974640271683 ], [ 5.333558485324875, 52.183111140970802 ], [ 5.337472609691845, 52.1822633284674 ], [ 5.34139035358308, 52.177734126272824 ], [ 5.350000194271388, 52.175471750258275 ], [ 5.350001605171196, 52.173772705695434 ], [ 5.347263709895096, 52.172922291840408 ], [ 5.347656938693683, 52.170657029262763 ], [ 5.34336390022519, 52.160178057054992 ], [ 5.33867049765304, 52.160176226100454 ], [ 5.336340204714242, 52.145733310295462 ], [ 5.330877028482066, 52.137235561308216 ], [ 5.330487905838098, 52.13581949515482 ], [ 5.334011417597543, 52.131290313455793 ], [ 5.331281027611706, 52.126758231706212 ], [ 5.325424525142001, 52.122507667592615 ], [ 5.311761300782666, 52.114004427174706 ], [ 5.306297978808807, 52.110319507678639 ], [ 5.310989515184272, 52.108340386287026 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1930\", \"naam\": \"Nissewaard\", \"code\": \"1930\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.432297012217547, 51.837157177153379 ], [ 4.422129341765382, 51.840472491850235 ], [ 4.414314568666365, 51.842673632613469 ], [ 4.403817824212017, 51.84315258632607 ], [ 4.393740408400176, 51.842218119854081 ], [ 4.383644490657345, 51.842132247890454 ], [ 4.374306118991688, 51.842901667438191 ], [ 4.367672821846901, 51.844260283985051 ], [ 4.35984829617195, 51.846740939807219 ], [ 4.352404766333653, 51.849507644939443 ], [ 4.342544601424628, 51.855934109182698 ], [ 4.335743110539212, 51.864369640029096 ], [ 4.269291124449586, 51.864605469300749 ], [ 4.265010724829693, 51.864847853701434 ], [ 4.258370942224057, 51.866200269882775 ], [ 4.239542603404224, 51.873098062373572 ], [ 4.18536944513138, 51.849615832878719 ], [ 4.191217222914973, 51.848825907656988 ], [ 4.194674804439514, 51.850277151503484 ], [ 4.198177470171543, 51.850029463887864 ], [ 4.197863901804149, 51.847194146134299 ], [ 4.193316568837072, 51.8428997720642 ], [ 4.198349400704419, 51.843517278471609 ], [ 4.198058289103328, 51.839832542894847 ], [ 4.195728704517209, 51.83980892006025 ], [ 4.195422847268351, 51.836690454309363 ], [ 4.197020680651376, 51.835007379076167 ], [ 4.207099660932048, 51.835675575745505 ], [ 4.220109332363816, 51.828158882844967 ], [ 4.222086771817342, 51.826762461391368 ], [ 4.219816529968745, 51.824474189384233 ], [ 4.213306764812504, 51.821010681347417 ], [ 4.213424753496777, 51.816480429865891 ], [ 4.212326981554082, 51.813920511772771 ], [ 4.207692700861874, 51.813024373068316 ], [ 4.19999913889935, 51.810397843346678 ], [ 4.194656871251346, 51.806945078170017 ], [ 4.192749035290253, 51.79106557219005 ], [ 4.197828341818384, 51.789701106221806 ], [ 4.208351650664176, 51.787824833417574 ], [ 4.213071795070576, 51.785323239836181 ], [ 4.222700961738747, 51.787968177512838 ], [ 4.237575298430083, 51.782733836527683 ], [ 4.242602043269614, 51.783349431412923 ], [ 4.246817564302163, 51.785372995614473 ], [ 4.252851521137623, 51.792228639568648 ], [ 4.261193620031212, 51.799955772010605 ], [ 4.26306973637082, 51.80252268103466 ], [ 4.268444846640008, 51.804839762994327 ], [ 4.274652388027341, 51.804898792473736 ], [ 4.296835376792223, 51.802274937547431 ], [ 4.305996873794753, 51.808590370343254 ], [ 4.310231135901978, 51.810045366654464 ], [ 4.321436887831032, 51.812130157934824 ], [ 4.330729937710153, 51.813063827407426 ], [ 4.337247623810951, 51.816520842789238 ], [ 4.353495030089999, 51.818930761922189 ], [ 4.360487305834685, 51.818708937955428 ], [ 4.369063889903094, 51.817084413057856 ], [ 4.380567391659481, 51.823414224694979 ], [ 4.39708959226064, 51.831201361618852 ], [ 4.418477808240416, 51.829680596780747 ], [ 4.424270553874623, 51.831144292312494 ], [ 4.432297012217547, 51.837157177153379 ] ], [ [ 4.220160667263496, 51.82617689596519 ], [ 4.2197798537126, 51.825889894502822 ], [ 4.220160667263496, 51.82617689596519 ], [ 4.220160667263496, 51.82617689596519 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1701\", \"naam\": \"Westerveld\", \"code\": \"1701\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.231285232986113, 52.741631966952433 ], [ 6.235275173323314, 52.743019375908744 ], [ 6.238098499932245, 52.745547608005474 ], [ 6.242573694036027, 52.751461751320434 ], [ 6.246179624742027, 52.753417861213194 ], [ 6.252220024139596, 52.758187728818164 ], [ 6.254587243278734, 52.757604203959254 ], [ 6.262118811467052, 52.757549104579255 ], [ 6.268478245672293, 52.758351668727052 ], [ 6.280456904812359, 52.762509715775636 ], [ 6.286840637815748, 52.764443734982734 ], [ 6.298379100623436, 52.766338087798793 ], [ 6.299219190397891, 52.768596885289185 ], [ 6.293074293367021, 52.778270977685835 ], [ 6.297093044898865, 52.780788720745889 ], [ 6.300768782369292, 52.785857330405356 ], [ 6.299602424917587, 52.786998877151539 ], [ 6.302011961227622, 52.788396159732585 ], [ 6.300875106333253, 52.79095325065704 ], [ 6.305250637500914, 52.79148591961011 ], [ 6.30688501457747, 52.793738529986541 ], [ 6.310491326113811, 52.795409550267436 ], [ 6.321203178538095, 52.79532606450217 ], [ 6.340723245571964, 52.798852438787272 ], [ 6.353822690694622, 52.799030048922937 ], [ 6.354528637675062, 52.795060174525531 ], [ 6.352532507773025, 52.794510056552127 ], [ 6.35049282539497, 52.791978183536585 ], [ 6.34290605177164, 52.789774054508776 ], [ 6.345651840458927, 52.788336229594613 ], [ 6.350418088860744, 52.788580944353086 ], [ 6.353522728986734, 52.78544110976145 ], [ 6.349512759987965, 52.783491490113775 ], [ 6.353844382998905, 52.782040649528511 ], [ 6.355374502248259, 52.779479833073196 ], [ 6.361008549620406, 52.783114919330643 ], [ 6.363363028381846, 52.781963030865782 ], [ 6.372043857372562, 52.779909495055414 ], [ 6.374461683835917, 52.781588412520101 ], [ 6.373290990770882, 52.78244757420152 ], [ 6.378114393967031, 52.785239101623276 ], [ 6.38672410053667, 52.780070377460042 ], [ 6.387491418568509, 52.778931313411192 ], [ 6.391470193313153, 52.779464147990261 ], [ 6.394200719238381, 52.777459003638505 ], [ 6.400624359381775, 52.780802402267263 ], [ 6.407478581628223, 52.785557551549068 ], [ 6.413097822288533, 52.788340857469002 ], [ 6.416224548965872, 52.78633179800763 ], [ 6.416514726066198, 52.781798785702691 ], [ 6.421657181725205, 52.781187927146995 ], [ 6.422483834124, 52.782596530777923 ], [ 6.427639748915656, 52.782551611567811 ], [ 6.428063269952011, 52.783680540360749 ], [ 6.432049714206516, 52.784495114895634 ], [ 6.432493640186223, 52.786473320469348 ], [ 6.429771055018836, 52.788762432164894 ], [ 6.436992448195621, 52.792096903455409 ], [ 6.446759055065718, 52.785780986227202 ], [ 6.449707223564143, 52.792833667570257 ], [ 6.455447504411721, 52.800427584970947 ], [ 6.457535175879522, 52.804656204431993 ], [ 6.459727327550419, 52.813131189639165 ], [ 6.459385940580468, 52.81539950961114 ], [ 6.461370453153395, 52.815381641460114 ], [ 6.46788869971197, 52.822118465548513 ], [ 6.47526639100098, 52.831395492667596 ], [ 6.480172444018624, 52.837013725512385 ], [ 6.476229677332367, 52.838182422070354 ], [ 6.462734937501795, 52.838588065255429 ], [ 6.461306442966294, 52.845113484606053 ], [ 6.462985699537566, 52.848779345586138 ], [ 6.460706758700707, 52.853047181142507 ], [ 6.453090060845272, 52.850283966425131 ], [ 6.440769380761139, 52.850110293913787 ], [ 6.436420346561807, 52.850998092115468 ], [ 6.430845624303117, 52.850480702086998 ], [ 6.429398487265378, 52.856439545870273 ], [ 6.43417938812921, 52.856963978094015 ], [ 6.430860772544112, 52.867752808730941 ], [ 6.432052915599397, 52.867742373148026 ], [ 6.430962232889015, 52.871999180495507 ], [ 6.427796361227181, 52.872593136929346 ], [ 6.420372496193057, 52.87803750458707 ], [ 6.422413559170344, 52.880285009553326 ], [ 6.420075453373417, 52.882287317258488 ], [ 6.381279821319568, 52.889695516042558 ], [ 6.376425395873374, 52.886054942542984 ], [ 6.372347660429281, 52.88155832048173 ], [ 6.37261740459186, 52.8758931397156 ], [ 6.368661876683827, 52.876775187155012 ], [ 6.36638496397535, 52.881607401127717 ], [ 6.373340881453227, 52.890327677042443 ], [ 6.359513383530115, 52.894405183466262 ], [ 6.366463634445945, 52.902842733494595 ], [ 6.370447079254999, 52.903093132151803 ], [ 6.376508973704164, 52.907290229683582 ], [ 6.381398035555084, 52.912346230545623 ], [ 6.383374067033986, 52.911763467112657 ], [ 6.385408340247992, 52.913728492946454 ], [ 6.385447207708836, 52.915427039854379 ], [ 6.368885245510202, 52.922076692066454 ], [ 6.334322880352945, 52.906499821709204 ], [ 6.333123512892064, 52.90622618786557 ], [ 6.30288345035273, 52.924866232560731 ], [ 6.256775843597796, 52.927759171646592 ], [ 6.247135841339357, 52.923298750893004 ], [ 6.244676055044533, 52.919635624179811 ], [ 6.232221360015481, 52.91349534800311 ], [ 6.206728070301549, 52.890738728012195 ], [ 6.165888678478083, 52.875156337431036 ], [ 6.121421504045761, 52.854769025181838 ], [ 6.119822850204541, 52.854212573582004 ], [ 6.128854698002036, 52.847927631670316 ], [ 6.130376217774334, 52.843954168494434 ], [ 6.136643908206735, 52.838818372078691 ], [ 6.151959177073377, 52.828811093620878 ], [ 6.149169945216047, 52.828262665527362 ], [ 6.15745308393517, 52.825094846229014 ], [ 6.171568013712842, 52.815092719735759 ], [ 6.172372027377498, 52.815653717470632 ], [ 6.177104531044667, 52.813923572165756 ], [ 6.1786665857762, 52.812497478873468 ], [ 6.201735909108998, 52.793654307805625 ], [ 6.193665718368409, 52.786347348390869 ], [ 6.180009967593903, 52.777095105699871 ], [ 6.172800408253631, 52.773178789712318 ], [ 6.177472139262663, 52.768334346978534 ], [ 6.201730701981885, 52.729379135903315 ], [ 6.218728481391635, 52.748232842685532 ], [ 6.221090228119844, 52.747366867580297 ], [ 6.231285232986113, 52.741631966952433 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0160\", \"naam\": \"Hardenberg\", \"code\": \"0160\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.697661771804368, 52.486229830771478 ], [ 6.704054171298725, 52.515610629134713 ], [ 6.705397319603742, 52.52097627642199 ], [ 6.680710159507815, 52.55324798629325 ], [ 6.716088265318379, 52.548609338319899 ], [ 6.716139449279692, 52.550307882936295 ], [ 6.720127079121761, 52.551679094756302 ], [ 6.726002421195242, 52.563223599320722 ], [ 6.733456565577308, 52.561723360504821 ], [ 6.740567770618366, 52.561925680508693 ], [ 6.750353605941629, 52.55926501629726 ], [ 6.754299208510488, 52.559219637030111 ], [ 6.763848172645702, 52.561657961594172 ], [ 6.766610232611592, 52.561625895459279 ], [ 6.76667224098234, 52.563607491176583 ], [ 6.718871594622764, 52.588507251882433 ], [ 6.719806841577425, 52.593310884758303 ], [ 6.721437774985772, 52.594991674765794 ], [ 6.721145784933467, 52.59839315647892 ], [ 6.723652737930173, 52.602895906968385 ], [ 6.724202425088628, 52.607987015749856 ], [ 6.727182845629752, 52.615033002646484 ], [ 6.723000382296248, 52.620460564973328 ], [ 6.718696962697267, 52.621924778872753 ], [ 6.718344652600189, 52.623344634545809 ], [ 6.714100552524174, 52.626790281232452 ], [ 6.710174376719626, 52.627683602279177 ], [ 6.706987465029326, 52.626869499515557 ], [ 6.701858675385155, 52.627209534906278 ], [ 6.700740758051673, 52.629487340758068 ], [ 6.704819893943863, 52.633689884868332 ], [ 6.703298243998373, 52.635689006766924 ], [ 6.706579132981706, 52.639617147615176 ], [ 6.704645095381437, 52.64105450081292 ], [ 6.701104305513478, 52.641660055834329 ], [ 6.705512065371362, 52.643593504159284 ], [ 6.705579958396461, 52.645858186855584 ], [ 6.708432413522167, 52.648658308251669 ], [ 6.682488045077768, 52.654041055916196 ], [ 6.629529604211592, 52.669614544441806 ], [ 6.614616634026132, 52.674017015279247 ], [ 6.552660524682505, 52.665578906439926 ], [ 6.546279625717473, 52.663659086499806 ], [ 6.529424825390456, 52.654477584933936 ], [ 6.513792153552095, 52.646414825643561 ], [ 6.51849714712677, 52.614088561223852 ], [ 6.512161381902112, 52.613582379970268 ], [ 6.504346061307947, 52.617054194250066 ], [ 6.500021338239926, 52.617944296347765 ], [ 6.494489694176, 52.617995979548709 ], [ 6.492535433943416, 52.618863691265332 ], [ 6.484237771992449, 52.618940597307102 ], [ 6.478303831434812, 52.618712069170968 ], [ 6.475996109336207, 52.621281775512642 ], [ 6.472460706554449, 52.622163631565066 ], [ 6.472523547983823, 52.62471158984102 ], [ 6.470159430626195, 52.625016330272722 ], [ 6.463399753565884, 52.62337872724374 ], [ 6.459656933734841, 52.615766979030866 ], [ 6.455303940516274, 52.615523023848617 ], [ 6.453287296529107, 52.613842116910376 ], [ 6.450555896166525, 52.61528244604942 ], [ 6.442265602478035, 52.61563952862182 ], [ 6.436393048717015, 52.617956889534845 ], [ 6.434478060686063, 52.620522306116165 ], [ 6.435308810564216, 52.6222139939253 ], [ 6.432630110112464, 52.62591878471796 ], [ 6.433072411294382, 52.627897071417571 ], [ 6.428336545367422, 52.628221828106234 ], [ 6.425905091044731, 52.625694593581635 ], [ 6.427063911175625, 52.624551784853615 ], [ 6.421096232513404, 52.622904851874203 ], [ 6.418632312105498, 52.618961910509491 ], [ 6.416254883524015, 52.618699357538198 ], [ 6.411934790044158, 52.619869369031939 ], [ 6.410782283532154, 52.62129514340004 ], [ 6.406422445747594, 52.620766287346378 ], [ 6.406752008108773, 52.617931780861234 ], [ 6.403551766412129, 52.616260192864424 ], [ 6.396077076433189, 52.617739739807114 ], [ 6.393693371051663, 52.617193622341368 ], [ 6.391653152392354, 52.61437921323774 ], [ 6.388887477660514, 52.614402564353895 ], [ 6.383699939500187, 52.612180850718694 ], [ 6.382986640520259, 52.615584840088907 ], [ 6.380208109475065, 52.615041762159763 ], [ 6.376696730654713, 52.617053228570363 ], [ 6.376403420805636, 52.621586338868241 ], [ 6.373669015036732, 52.623024904856024 ], [ 6.375338721435636, 52.62697535913766 ], [ 6.372234076891536, 52.629549629995324 ], [ 6.371494279896821, 52.631821086393735 ], [ 6.369129069555564, 52.632123819045312 ], [ 6.369600194393602, 52.635517911275592 ], [ 6.362955648882188, 52.638970632019522 ], [ 6.364593549134211, 52.64150565744864 ], [ 6.362679631095061, 52.644353027245643 ], [ 6.359937101616754, 52.645508160976185 ], [ 6.353221871678719, 52.64584609104741 ], [ 6.353265409293592, 52.647827885235095 ], [ 6.346969893716479, 52.649294702361239 ], [ 6.34345426442689, 52.651305179947208 ], [ 6.341538553128968, 52.654152206802507 ], [ 6.334827958268221, 52.654772214513777 ], [ 6.332497783520933, 52.656772904638991 ], [ 6.327794390575736, 52.658792346635991 ], [ 6.326182147097213, 52.657389279932588 ], [ 6.304865781847975, 52.602622029343983 ], [ 6.303173883715376, 52.597254946262616 ], [ 6.319803734281035, 52.59910769133139 ], [ 6.323220016123495, 52.592567991142822 ], [ 6.325589457174448, 52.592549292510803 ], [ 6.392703247205628, 52.591150516003971 ], [ 6.402581945165494, 52.591349633215472 ], [ 6.415117733304134, 52.570003980513256 ], [ 6.423038255730082, 52.571067823094879 ], [ 6.431721743826368, 52.570991741006509 ], [ 6.437996486076052, 52.569237333899103 ], [ 6.471544607622828, 52.568935645742201 ], [ 6.488522881319849, 52.569062526055312 ], [ 6.496875294773943, 52.571533319826536 ], [ 6.504884180833691, 52.575988989074276 ], [ 6.521859054501696, 52.560536473492775 ], [ 6.529778794646488, 52.546301638210991 ], [ 6.531077676753285, 52.535528355396721 ], [ 6.534048701078496, 52.5284202039891 ], [ 6.541101878599056, 52.526652735482287 ], [ 6.542932483619217, 52.52125450050989 ], [ 6.541296276420145, 52.519004991222495 ], [ 6.546808003964506, 52.518668056898214 ], [ 6.545945239937895, 52.515844685046645 ], [ 6.55025903524947, 52.514952922728625 ], [ 6.553352720377823, 52.51265710001266 ], [ 6.556930238385459, 52.513754595765811 ], [ 6.55499679178694, 52.515189552200134 ], [ 6.560635864219484, 52.519664793514053 ], [ 6.566117273892054, 52.518194537168817 ], [ 6.567262081219992, 52.51676724741202 ], [ 6.565632362504567, 52.514801180914766 ], [ 6.560121268105621, 52.515138988201727 ], [ 6.56124360477903, 52.51286243486981 ], [ 6.56829320029527, 52.511093354490455 ], [ 6.572552870611151, 52.508219039185782 ], [ 6.592421413856519, 52.49952329751126 ], [ 6.609571351884614, 52.492551322751275 ], [ 6.60030759739003, 52.485283667663666 ], [ 6.59504734216167, 52.480240052835534 ], [ 6.600932125900009, 52.479330391573939 ], [ 6.611985446314519, 52.465906959210585 ], [ 6.613158830240802, 52.465611640847442 ], [ 6.616411094469099, 52.469259379646921 ], [ 6.620782107913172, 52.47062990026965 ], [ 6.626784156644885, 52.473965522048282 ], [ 6.631060346687721, 52.471938417039439 ], [ 6.635777900415024, 52.471605629041541 ], [ 6.640543545106108, 52.472971268773321 ], [ 6.641676749082526, 52.471260155962547 ], [ 6.649609110089031, 52.473158250299491 ], [ 6.651241002792574, 52.475123173298272 ], [ 6.64739964119036, 52.478562324512779 ], [ 6.654610775256122, 52.48273325781193 ], [ 6.65357514936295, 52.487841695529383 ], [ 6.664366865019673, 52.493106494803413 ], [ 6.669152139770048, 52.49503716558344 ], [ 6.693328696837101, 52.486277647673312 ], [ 6.697661771804368, 52.486229830771478 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0274\", \"naam\": \"Renkum\", \"code\": \"0274\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.722448156546275, 51.964030948421154 ], [ 5.727531852747735, 51.966848196233151 ], [ 5.740017951759241, 51.969926427508703 ], [ 5.745083079555473, 51.970194303109309 ], [ 5.747804701153906, 51.96961961512018 ], [ 5.764880803583428, 51.962486344654586 ], [ 5.772259690047595, 51.960196914465953 ], [ 5.778869019211152, 51.959042332006888 ], [ 5.786666213486346, 51.960148839944956 ], [ 5.81636623081229, 51.971371637094549 ], [ 5.82456147836491, 51.973040558119557 ], [ 5.835472437781789, 51.97356583974274 ], [ 5.845584422426223, 51.972110917733374 ], [ 5.854129091356674, 51.969811796956606 ], [ 5.85957835075931, 51.969506842369611 ], [ 5.863089346629996, 51.970059058902926 ], [ 5.867786990479557, 51.972305451733796 ], [ 5.870933267480753, 51.975124424909858 ], [ 5.867041381735395, 51.975423558641999 ], [ 5.863563004006513, 51.977986386955926 ], [ 5.867092895206853, 51.98023753202623 ], [ 5.866356186771458, 51.984205155268242 ], [ 5.863251648817685, 51.985350511068049 ], [ 5.864870311858512, 51.991007683903881 ], [ 5.862535536287115, 51.991300329659659 ], [ 5.863752601073679, 51.995826389744245 ], [ 5.856351800046343, 51.996139327788136 ], [ 5.849747784416712, 51.998147786426038 ], [ 5.840400886121527, 51.998750542322306 ], [ 5.836111369644498, 51.998483805207883 ], [ 5.826380063586456, 51.999653284465815 ], [ 5.803037040248253, 52.003985902110216 ], [ 5.807395936344318, 52.01161640840558 ], [ 5.808242097667902, 52.01869300160385 ], [ 5.81336163610616, 52.024055076832276 ], [ 5.80242813175802, 52.022395060409913 ], [ 5.804367106391526, 52.021255464518333 ], [ 5.798136573862556, 52.022126942142286 ], [ 5.777469204559898, 52.021914122495559 ], [ 5.762645786410289, 52.021112804544707 ], [ 5.754068076987609, 52.021139862964233 ], [ 5.745089143751854, 52.019751599446074 ], [ 5.741163440959828, 52.016365271677408 ], [ 5.741150013845616, 52.014666209573782 ], [ 5.738006894330631, 52.011560602169645 ], [ 5.738759851929576, 52.008160146912921 ], [ 5.734067097095808, 52.006191790173027 ], [ 5.735985067249422, 52.002221540562957 ], [ 5.732856286018863, 52.000814855669404 ], [ 5.724282438370222, 52.000839740109853 ], [ 5.716734051311707, 51.981321403743834 ], [ 5.72140233193416, 51.980458672796019 ], [ 5.717858846395067, 51.975371361150771 ], [ 5.718631566271804, 51.974519629947757 ], [ 5.714703552990527, 51.969999674535899 ], [ 5.713520770596096, 51.968020666464831 ], [ 5.71779621455657, 51.966875978803742 ], [ 5.720911620286315, 51.966867176061612 ], [ 5.722448156546275, 51.964030948421154 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0755\", \"naam\": \"Boekel\", \"code\": \"0755\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.758718404376897, 51.59407246535747 ], [ 5.750450722477336, 51.622701401887021 ], [ 5.74001397626152, 51.622450160909857 ], [ 5.686719409871802, 51.62826275190907 ], [ 5.674350964859656, 51.628293779634049 ], [ 5.672420176930185, 51.628581701332678 ], [ 5.665074618499335, 51.628316192353914 ], [ 5.664691573959111, 51.628883494010644 ], [ 5.651150176964863, 51.626649279411204 ], [ 5.651145225998893, 51.625799702826903 ], [ 5.635295873817555, 51.625268017508667 ], [ 5.626396144070185, 51.623304194386101 ], [ 5.633695974804908, 51.615359544897423 ], [ 5.642918542127857, 51.606277454437432 ], [ 5.648639936762519, 51.593520952011559 ], [ 5.6505315522705, 51.586719981313848 ], [ 5.651279134923867, 51.582470339889554 ], [ 5.660549530576382, 51.583015414095989 ], [ 5.699556251250391, 51.58405044390566 ], [ 5.706142477103986, 51.587147826022651 ], [ 5.709225745439658, 51.586289777869695 ], [ 5.732813553338104, 51.590470366000112 ], [ 5.758718404376897, 51.59407246535747 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0189\", \"naam\": \"Wierden\", \"code\": \"0189\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.625961921457527, 52.289899323249912 ], [ 6.631785504826599, 52.301732416414715 ], [ 6.618565408926021, 52.306118810750668 ], [ 6.608011445273425, 52.307644250192368 ], [ 6.611150179555603, 52.307611795381142 ], [ 6.616705647212278, 52.309819712449929 ], [ 6.613951303312552, 52.309565130046451 ], [ 6.614021685901361, 52.312113158682273 ], [ 6.610129057228718, 52.313286268737144 ], [ 6.609320900399698, 52.312445040034909 ], [ 6.604604521300107, 52.312210504701838 ], [ 6.619122934314086, 52.326219874867043 ], [ 6.616453794184616, 52.329079597541195 ], [ 6.607919319764524, 52.332849525493515 ], [ 6.601754483432893, 52.337160900918413 ], [ 6.598698669121537, 52.340307367107748 ], [ 6.597590275825963, 52.342867451913861 ], [ 6.604712426260445, 52.344776709607906 ], [ 6.608363343943653, 52.348986973179116 ], [ 6.611284157643077, 52.355187032779639 ], [ 6.614465419324578, 52.356570039530112 ], [ 6.615384243935571, 52.361374783289541 ], [ 6.61352193817704, 52.365075602814635 ], [ 6.60848506852458, 52.367676426447062 ], [ 6.606252374198276, 52.372230517933801 ], [ 6.598703569776929, 52.383635680328993 ], [ 6.590773164927593, 52.395610566839494 ], [ 6.576026348856506, 52.417565076381464 ], [ 6.515937747380762, 52.406259247147936 ], [ 6.508501285435391, 52.392170613659346 ], [ 6.514131370394561, 52.381639239828161 ], [ 6.512566528524707, 52.381937315940434 ], [ 6.495518335287562, 52.376151269134425 ], [ 6.496098869084656, 52.367933412214931 ], [ 6.49913546930135, 52.363657106955642 ], [ 6.512470766526764, 52.362681474299777 ], [ 6.512449214281649, 52.361832114966347 ], [ 6.520691437433371, 52.36147025428447 ], [ 6.518961168675793, 52.355256668336068 ], [ 6.506785160458267, 52.355372520099571 ], [ 6.505928200198521, 52.352548743766938 ], [ 6.501222296317381, 52.352876339550541 ], [ 6.496045712987507, 52.350093092191166 ], [ 6.49091908356124, 52.349291470825392 ], [ 6.489263789538313, 52.345908647921597 ], [ 6.486493886429097, 52.345084857696556 ], [ 6.48842218396548, 52.343650981278557 ], [ 6.48683043788772, 52.342816225159517 ], [ 6.468367587475066, 52.326561531261021 ], [ 6.499305897020639, 52.323442725723552 ], [ 6.517803502099907, 52.325249644352134 ], [ 6.518174371904125, 52.324396526609853 ], [ 6.524054619027289, 52.324056949304307 ], [ 6.524883144072569, 52.325748125137643 ], [ 6.527950483447244, 52.322886666346761 ], [ 6.532899369497979, 52.316891802061711 ], [ 6.536009528053877, 52.31572885717037 ], [ 6.539541321237061, 52.315694487877046 ], [ 6.545109033706212, 52.31847201202369 ], [ 6.548877936102521, 52.312488005617723 ], [ 6.5511284057656, 52.308501174695635 ], [ 6.553252134472482, 52.299701261425632 ], [ 6.553518062241104, 52.294884349256257 ], [ 6.552333930600523, 52.294612834605438 ], [ 6.549802746391821, 52.28784111305152 ], [ 6.553997730664481, 52.283268664981236 ], [ 6.564300402747268, 52.272405081829049 ], [ 6.56816060408378, 52.270100997252136 ], [ 6.575194179099578, 52.26918089497704 ], [ 6.595247944899179, 52.271243118998207 ], [ 6.60542498837648, 52.270572228364721 ], [ 6.625961921457527, 52.289899323249912 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1891\", \"naam\": \"Dantumadiel\", \"code\": \"1891\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.019740272885929, 53.240964504243124 ], [ 6.022976184435058, 53.24292914538988 ], [ 6.027765526367184, 53.241488154819187 ], [ 6.031385818914745, 53.242318096589855 ], [ 6.039006330141721, 53.242560062796223 ], [ 6.043829519855792, 53.243383092259158 ], [ 6.045946095535784, 53.250732237682293 ], [ 6.04674795999832, 53.250727834938047 ], [ 6.050194468862397, 53.266279598207227 ], [ 6.051798773949556, 53.26627072974177 ], [ 6.054184756072391, 53.290887434861361 ], [ 6.066651939856958, 53.292516178670368 ], [ 6.07387567686731, 53.29247510566649 ], [ 6.069934191032129, 53.297027194957209 ], [ 6.071535142008667, 53.296734985238487 ], [ 6.072634839609543, 53.315413351142809 ], [ 6.075080174370898, 53.317664176224412 ], [ 6.074335744177133, 53.321348725143771 ], [ 6.077562044434753, 53.322179534636639 ], [ 6.075982815014973, 53.323887188706387 ], [ 6.071578584009549, 53.32476164225109 ], [ 6.067544512038513, 53.323652148817551 ], [ 6.056709848856634, 53.324279184093051 ], [ 6.05230081404824, 53.324869858202426 ], [ 6.04666077995862, 53.323768541758014 ], [ 6.038248315113909, 53.325229891721854 ], [ 6.035022539869743, 53.324398027356708 ], [ 6.032629792192182, 53.325543290234009 ], [ 6.022564008302286, 53.323898333914293 ], [ 6.022940562400761, 53.322197757218355 ], [ 6.021305008464163, 53.3202247129108 ], [ 6.021138438165408, 53.308901656187373 ], [ 6.020327173449752, 53.308339735417469 ], [ 6.01149483446221, 53.308385946991031 ], [ 6.009102346760743, 53.309530747515787 ], [ 5.998274375850119, 53.310435592962364 ], [ 5.990240599914086, 53.310193079508913 ], [ 5.980569790639932, 53.30769334024582 ], [ 5.975740602595414, 53.306867796164831 ], [ 5.97061358684822, 53.313687141431991 ], [ 5.973845029195824, 53.31508689651141 ], [ 5.974277413142625, 53.317349561953101 ], [ 5.971921848239156, 53.32132440027307 ], [ 5.968724381532804, 53.322472299244033 ], [ 5.963908916691855, 53.322778597882944 ], [ 5.959070840067042, 53.321386233852309 ], [ 5.953846383397796, 53.321127882760237 ], [ 5.949384543869121, 53.317751681184198 ], [ 5.946975175040158, 53.317762927664788 ], [ 5.937308776647765, 53.315542793012902 ], [ 5.934899527257409, 53.315553797321805 ], [ 5.922416560840942, 53.312779078479124 ], [ 5.921194474819701, 53.311369033455748 ], [ 5.907076957689582, 53.306052108235782 ], [ 5.896588948310229, 53.301850579675239 ], [ 5.903716084522483, 53.293610326310095 ], [ 5.906457287267061, 53.287936546261605 ], [ 5.897588785861721, 53.284577375986579 ], [ 5.897979985169044, 53.283726417238171 ], [ 5.891516997990291, 53.28007344530706 ], [ 5.882250090790836, 53.276714814538288 ], [ 5.893403494729741, 53.269873931105558 ], [ 5.900576483850011, 53.265880076122194 ], [ 5.908159439188915, 53.262733307898735 ], [ 5.914524389786468, 53.258459004679345 ], [ 5.922931577275047, 53.257289377812107 ], [ 5.925713862298605, 53.255295217451469 ], [ 5.925675025867842, 53.252181269003877 ], [ 5.942894106704009, 53.25040418162304 ], [ 5.947205274603745, 53.242740361232912 ], [ 5.948786646524392, 53.24103435077761 ], [ 5.95506623679462, 53.230813047716232 ], [ 5.955830487655858, 53.227978378850644 ], [ 5.966653890509905, 53.228209708546849 ], [ 5.967848467145129, 53.227637723486815 ], [ 5.983507879577643, 53.229825775577488 ], [ 6.017339341791367, 53.241260238236684 ], [ 6.019740272885929, 53.240964504243124 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0542\", \"naam\": \"Krimpen aan den IJssel\", \"code\": \"0542\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.617865943716205, 51.931125593801809 ], [ 4.615589745339235, 51.92771232492953 ], [ 4.610571085438647, 51.925413707568246 ], [ 4.603937624986075, 51.926502482054488 ], [ 4.599269009869835, 51.926471283038104 ], [ 4.588840117737407, 51.922152965502804 ], [ 4.58264126752757, 51.920694714554486 ], [ 4.580721676544753, 51.919265573087145 ], [ 4.577307538181694, 51.914427739624472 ], [ 4.567666531395182, 51.909829741516042 ], [ 4.549835000528411, 51.906588857442046 ], [ 4.549088921612443, 51.904884345764508 ], [ 4.554906105886715, 51.90577528578612 ], [ 4.569320027930313, 51.904460494663091 ], [ 4.576345015804074, 51.903093186664933 ], [ 4.581773660716952, 51.903980113547995 ], [ 4.589192067645822, 51.902331537540725 ], [ 4.588768030365136, 51.904311041394493 ], [ 4.59224773228692, 51.905467422247511 ], [ 4.593439333329141, 51.904059489077447 ], [ 4.596909182463713, 51.905782059732523 ], [ 4.596874340324029, 51.907764207046725 ], [ 4.60155585489593, 51.906946004910537 ], [ 4.621369616979084, 51.908209578586913 ], [ 4.635725617664831, 51.910284623731243 ], [ 4.643077487415685, 51.912596968458622 ], [ 4.619057428029482, 51.929717405483323 ], [ 4.617865943716205, 51.931125593801809 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0114\", \"naam\": \"Emmen\", \"code\": \"0114\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 7.092719584336533, 52.838320299892658 ], [ 7.072471209715256, 52.838608226661457 ], [ 7.072325095461881, 52.845123576877491 ], [ 7.076438174662912, 52.848746800144433 ], [ 7.076095737645633, 52.850167580368478 ], [ 7.068860177969569, 52.848004350069388 ], [ 7.065824560526691, 52.851728529191618 ], [ 7.062636504586478, 52.851490176618348 ], [ 7.052290891714836, 52.861546512489319 ], [ 7.051485626612727, 52.861274567962454 ], [ 7.046493495993148, 52.865875049038252 ], [ 7.043293776984347, 52.865353150844754 ], [ 7.04040475788737, 52.873039145277978 ], [ 7.014963698441735, 52.873105810364642 ], [ 7.007403475163146, 52.872925546874256 ], [ 6.966524973077711, 52.863845679094823 ], [ 6.964579468578094, 52.865004133945916 ], [ 6.961370571113638, 52.864196991905494 ], [ 6.957703469308505, 52.861696732864353 ], [ 6.954352808986928, 52.856926784094703 ], [ 6.951908703516717, 52.855259807897774 ], [ 6.951013012606297, 52.852439777315354 ], [ 6.952163994672931, 52.851291966880879 ], [ 6.948895649086912, 52.848786209578797 ], [ 6.908271538597643, 52.834586129196992 ], [ 6.8836753731535, 52.823853535567956 ], [ 6.868826058797388, 52.81922504389361 ], [ 6.865139329199526, 52.815872706725663 ], [ 6.858316620852452, 52.813691709684669 ], [ 6.854631163398879, 52.810339037960603 ], [ 6.849680264366678, 52.80473638566145 ], [ 6.843380437853025, 52.794336032042217 ], [ 6.83466677471721, 52.782831991109951 ], [ 6.83135427155117, 52.778624548018108 ], [ 6.831242284687736, 52.775227784953849 ], [ 6.834302010505936, 52.771792524914289 ], [ 6.830999714844137, 52.767868120704954 ], [ 6.83403091231105, 52.763583669244191 ], [ 6.839495887720141, 52.760968543603525 ], [ 6.834976918825497, 52.756209539444654 ], [ 6.838138106386261, 52.755887882737028 ], [ 6.838403212644367, 52.751920148752014 ], [ 6.833489065471737, 52.747165902402521 ], [ 6.8321790641878, 52.743500481097541 ], [ 6.830556967637039, 52.74238744201319 ], [ 6.835926005132744, 52.736941810476985 ], [ 6.837426342146648, 52.734374920481713 ], [ 6.82621413194275, 52.730829662308906 ], [ 6.828432568056692, 52.725988758851074 ], [ 6.830016759842745, 52.725969564146084 ], [ 6.832565264218873, 52.719142303486301 ], [ 6.84102580120693, 52.699499674295453 ], [ 6.849337735616515, 52.699397804904059 ], [ 6.854508566303641, 52.676396202794933 ], [ 6.8619230020151, 52.649684951767497 ], [ 6.864304646350881, 52.649938567405577 ], [ 6.871526193355016, 52.652963675432723 ], [ 6.873898496500123, 52.65293402945602 ], [ 6.880543082137454, 52.650585235003362 ], [ 6.891256537717823, 52.651582914045939 ], [ 6.896791691596406, 52.651512748677177 ], [ 6.902239037138508, 52.648894737245364 ], [ 6.913635154589475, 52.646766602111057 ], [ 6.915186933959273, 52.645897091351806 ], [ 6.915829961734177, 52.641640959170715 ], [ 6.919723531505173, 52.639891668594977 ], [ 6.92803387577159, 52.640067407850012 ], [ 6.935088762585059, 52.638276578131247 ], [ 6.939821675297605, 52.63793164651036 ], [ 6.945405150275038, 52.63927453465535 ], [ 6.953300051866774, 52.638887566538607 ], [ 6.959329901935003, 52.641639890624397 ], [ 6.967640704161201, 52.641812858955682 ], [ 6.970438159074351, 52.642625208605587 ], [ 6.974513520210083, 52.645969182316293 ], [ 6.981213180886925, 52.6453131312078 ], [ 6.984313884402272, 52.643572336355447 ], [ 6.992147203409336, 52.641484446308013 ], [ 6.998897773760944, 52.642242681455919 ], [ 7.002444789091348, 52.641911331698431 ], [ 7.007062849669238, 52.638450119152118 ], [ 7.01213812542172, 52.636681649799897 ], [ 7.028278539533032, 52.634760667047388 ], [ 7.034612271237815, 52.634956229205336 ], [ 7.038489856964697, 52.632920017466958 ], [ 7.042046457894855, 52.632870541028637 ], [ 7.05589045307152, 52.643438534647252 ], [ 7.054736842239324, 52.644304324171436 ], [ 7.064707575229001, 52.729406328389324 ], [ 7.071381010911091, 52.810304875679883 ], [ 7.092719584336533, 52.838320299892658 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0946\", \"naam\": \"Nederweert\", \"code\": \"0946\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.877769306394512, 51.316661216956504 ], [ 5.85209028194767, 51.320731470607519 ], [ 5.831911363363168, 51.338085753720414 ], [ 5.840063476357199, 51.346833655359703 ], [ 5.823903122684132, 51.344063342833401 ], [ 5.770424714491426, 51.333773116345895 ], [ 5.671997085037396, 51.315080989481615 ], [ 5.656178640491841, 51.301524932906283 ], [ 5.643836610645295, 51.290507934591744 ], [ 5.648793394671937, 51.285116052597964 ], [ 5.654147452495759, 51.282271865742104 ], [ 5.656817555515836, 51.279716886317779 ], [ 5.667927115572314, 51.277424982941923 ], [ 5.674445658097568, 51.277125864042162 ], [ 5.684821650056381, 51.280215004198567 ], [ 5.695576910757528, 51.282452608476937 ], [ 5.709010509057745, 51.283549030644494 ], [ 5.723580992581597, 51.282658200528296 ], [ 5.730472871460276, 51.280938848464928 ], [ 5.736961187168951, 51.276671472207063 ], [ 5.74226042973841, 51.26759290949262 ], [ 5.746061761725467, 51.263333190103147 ], [ 5.750263746200134, 51.261337722858912 ], [ 5.764788975467317, 51.255910596272983 ], [ 5.768234548342292, 51.255332949346318 ], [ 5.769753793003595, 51.253628737788418 ], [ 5.778158384034128, 51.250202335297715 ], [ 5.782350433946164, 51.247356123325297 ], [ 5.787283764709748, 51.241675167691305 ], [ 5.791845182482704, 51.237411315946304 ], [ 5.793756203362936, 51.236838239809927 ], [ 5.803346600756121, 51.237937123869564 ], [ 5.807965968507536, 51.240186133913618 ], [ 5.817562724974821, 51.241850234647487 ], [ 5.828668648348597, 51.240958980621436 ], [ 5.83480321499561, 51.241218730420016 ], [ 5.839821703408154, 51.244880968032938 ], [ 5.845962529261304, 51.245706516758766 ], [ 5.849409160395513, 51.245409661814826 ], [ 5.852071958991519, 51.243416609384091 ], [ 5.855579187479623, 51.249066640479477 ], [ 5.854858846344452, 51.253600823926085 ], [ 5.850287374537834, 51.256451169741133 ], [ 5.846828547976949, 51.255615276237087 ], [ 5.833979449847962, 51.274640070590699 ], [ 5.839379497257825, 51.277734457057768 ], [ 5.837864839391243, 51.279722767581717 ], [ 5.84134500087167, 51.282541281073385 ], [ 5.850642829555277, 51.291567168615451 ], [ 5.860817387385757, 51.310784127468672 ], [ 5.877769306394512, 51.316661216956504 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0384\", \"naam\": \"Diemen\", \"code\": \"0384\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.01619661484575, 52.324410105966116 ], [ 5.012613470877233, 52.330345361856679 ], [ 5.018472039848727, 52.334044951154731 ], [ 5.023948176040508, 52.336610399973459 ], [ 5.040012007375625, 52.341189297652647 ], [ 5.039122267724139, 52.354495547101941 ], [ 5.01599785173136, 52.348195615588125 ], [ 5.012110860712006, 52.343369510452632 ], [ 5.008588422940369, 52.341942455508381 ], [ 5.00426372162875, 52.342494878705693 ], [ 4.99916584618139, 52.341628770980307 ], [ 4.974697004463348, 52.354571757189802 ], [ 4.969577008341466, 52.355969644726422 ], [ 4.964887258922056, 52.353404495568988 ], [ 4.959843430892539, 52.346873522582989 ], [ 4.954007408316636, 52.341188932190221 ], [ 4.949712799030356, 52.338624613508188 ], [ 4.950503726924223, 52.338061196393156 ], [ 4.94583385729829, 52.333796332134533 ], [ 4.948997300186932, 52.331542732862751 ], [ 4.942738111254778, 52.329254030991869 ], [ 4.944723658458399, 52.326996114021924 ], [ 4.947853064537285, 52.328140454251596 ], [ 4.952616740677412, 52.32277781939343 ], [ 4.967487766885638, 52.327645389439454 ], [ 4.970249136708111, 52.32623930462389 ], [ 4.975313169722112, 52.330504580067334 ], [ 4.978056211819768, 52.331080434239887 ], [ 4.983950559681196, 52.330534328994112 ], [ 4.989472443563326, 52.327721326637217 ], [ 4.997421035595249, 52.316704173379961 ], [ 4.997838335307593, 52.313873850701093 ], [ 5.01619661484575, 52.324410105966116 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0858\", \"naam\": \"Valkenswaard\", \"code\": \"0858\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.485020813074946, 51.300095606159736 ], [ 5.485793187198787, 51.302360560722029 ], [ 5.488871468467329, 51.306039520164397 ], [ 5.490800062827477, 51.310285829851203 ], [ 5.491193564324837, 51.314533490320244 ], [ 5.489282481647106, 51.318216793643913 ], [ 5.482762808343288, 51.321337543076609 ], [ 5.48084960003284, 51.324454306880213 ], [ 5.477016268793311, 51.327572537996353 ], [ 5.476254956580378, 51.330971529963776 ], [ 5.473572847157365, 51.334088758832394 ], [ 5.478190210515415, 51.338616443724369 ], [ 5.482035572258825, 51.34087897426334 ], [ 5.487031765067081, 51.342290794497941 ], [ 5.495876090551081, 51.346530872524532 ], [ 5.496657264122643, 51.351910946305949 ], [ 5.494355529680412, 51.353329090646447 ], [ 5.493975981881643, 51.355311841365513 ], [ 5.496283246479342, 51.356159301512932 ], [ 5.52705321671797, 51.36688799852962 ], [ 5.516324819930254, 51.378228398379832 ], [ 5.508622524702512, 51.372855887885883 ], [ 5.501707727384257, 51.374278896802743 ], [ 5.496323905043092, 51.373151269822934 ], [ 5.492482965635404, 51.374287608186137 ], [ 5.466338741589566, 51.37006033186514 ], [ 5.441738571579879, 51.367525676500883 ], [ 5.436356721131691, 51.366112079007777 ], [ 5.435205922087295, 51.368094959652559 ], [ 5.424833208957662, 51.372629982840273 ], [ 5.423297601749123, 51.374896068971502 ], [ 5.418682993207696, 51.37178221577026 ], [ 5.420987165112515, 51.369232768890349 ], [ 5.419831144829251, 51.364985101848951 ], [ 5.419826467823638, 51.358471504302003 ], [ 5.421744402343818, 51.354222948336606 ], [ 5.42327984123858, 51.352523280379266 ], [ 5.422892324503622, 51.348275398560524 ], [ 5.424809780255178, 51.344309990198987 ], [ 5.421349994728829, 51.340629457779947 ], [ 5.42288365878423, 51.337230592654386 ], [ 5.422880105016234, 51.332699388555483 ], [ 5.424414547212826, 51.330716503649292 ], [ 5.434007832511867, 51.324199419710489 ], [ 5.425934639061436, 51.312024772601575 ], [ 5.424015885933364, 51.312591799023949 ], [ 5.419797423568314, 51.317973873239218 ], [ 5.416343301459541, 51.319390796415327 ], [ 5.413655478259967, 51.318541840273134 ], [ 5.412888805139402, 51.320524416591653 ], [ 5.410968940622054, 51.319958425968785 ], [ 5.400601468652326, 51.313446482713125 ], [ 5.397530829898137, 51.31429640165652 ], [ 5.395610673663328, 51.309765349351032 ], [ 5.394075249640368, 51.308915850406962 ], [ 5.395226140468052, 51.305800567977307 ], [ 5.393306336311225, 51.299570271623004 ], [ 5.394840707793914, 51.296171769707165 ], [ 5.39253817970416, 51.293906294915516 ], [ 5.397141712639073, 51.290507576359907 ], [ 5.387933724242962, 51.285127194811373 ], [ 5.397906009510282, 51.277763466029683 ], [ 5.400973328511754, 51.274081525963851 ], [ 5.403657791738105, 51.273514771434677 ], [ 5.417456962011705, 51.262183937866318 ], [ 5.425514823463049, 51.269261580635387 ], [ 5.433191633376889, 51.276338815872222 ], [ 5.438560915551085, 51.276053361425916 ], [ 5.441250058916613, 51.279733753273611 ], [ 5.441636332581524, 51.281999180775735 ], [ 5.464656067455572, 51.284534914081505 ], [ 5.470416945438094, 51.288212542814549 ], [ 5.476944982497048, 51.291322894329461 ], [ 5.477719614773998, 51.295003906004133 ], [ 5.485020813074946, 51.300095606159736 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0569\", \"naam\": \"Nieuwkoop\", \"code\": \"0569\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.792000166266685, 52.122154886546369 ], [ 4.793927682643877, 52.124146881655228 ], [ 4.798211382536959, 52.12530108571675 ], [ 4.802900922894477, 52.125324413024472 ], [ 4.807933536503707, 52.129030614527842 ], [ 4.809069374843151, 52.131868012947848 ], [ 4.807461862727988, 52.135258311570055 ], [ 4.809766889104877, 52.138384622519851 ], [ 4.813259607295851, 52.140383942415056 ], [ 4.816401506706999, 52.139266459511468 ], [ 4.820665686205234, 52.142118834117838 ], [ 4.826138895444161, 52.142144992101343 ], [ 4.833144270023939, 52.14472673468326 ], [ 4.833950762233902, 52.142748250001922 ], [ 4.836687409526084, 52.142761052529863 ], [ 4.83749370897384, 52.140782542695888 ], [ 4.840219832367845, 52.141644758688251 ], [ 4.842589646805468, 52.13967345363276 ], [ 4.848069409281718, 52.139132262442828 ], [ 4.85197520323693, 52.139433229711102 ], [ 4.855129563700642, 52.137182049844412 ], [ 4.864898809848234, 52.137508891277086 ], [ 4.874655203456944, 52.138967590337117 ], [ 4.873678004133724, 52.155954164377761 ], [ 4.887712087503636, 52.159978920637876 ], [ 4.891995374712556, 52.161696049441339 ], [ 4.855415687218663, 52.178810836594153 ], [ 4.843660450896508, 52.180173188547251 ], [ 4.836170206816813, 52.184669331558013 ], [ 4.833395827532668, 52.187488141808451 ], [ 4.82906626436962, 52.189450006786579 ], [ 4.823537138146494, 52.193388246976482 ], [ 4.821935669233651, 52.196212381665788 ], [ 4.814458727528516, 52.199291318757247 ], [ 4.813643051661066, 52.20183597057509 ], [ 4.803084598579986, 52.200934673560475 ], [ 4.801481561667873, 52.203758524552612 ], [ 4.801724270148104, 52.215086881965213 ], [ 4.802082388704566, 52.217637263122882 ], [ 4.79695401876928, 52.22044352968976 ], [ 4.79573778101579, 52.223552407190475 ], [ 4.794562811841345, 52.223546517788897 ], [ 4.794521372635075, 52.22666127016322 ], [ 4.783915247024831, 52.228873004446974 ], [ 4.781173330094242, 52.228858969353368 ], [ 4.776104512908521, 52.22713378500643 ], [ 4.774572815269511, 52.224577243398365 ], [ 4.767957826623179, 52.221427780841566 ], [ 4.763297849780717, 52.218571465465864 ], [ 4.759785316992194, 52.21770331996531 ], [ 4.753911278239447, 52.217671968684307 ], [ 4.747686289246346, 52.214806627874673 ], [ 4.743378948206488, 52.214783224574674 ], [ 4.734492987431759, 52.206522217438931 ], [ 4.728570233378096, 52.209887497708877 ], [ 4.723455013869459, 52.211557940638627 ], [ 4.720866605393814, 52.201348851547245 ], [ 4.707500972479259, 52.204954024278308 ], [ 4.707513926362027, 52.204104554860891 ], [ 4.695219561868796, 52.189024495544217 ], [ 4.688913676907442, 52.191819187662041 ], [ 4.681080507058603, 52.167418834393615 ], [ 4.698435666028943, 52.158176347729707 ], [ 4.705965529519162, 52.151706835639324 ], [ 4.704062425852002, 52.148297622281937 ], [ 4.704900662251019, 52.14462107828863 ], [ 4.7242762540258, 52.15634207899658 ], [ 4.726231565154714, 52.156353048883609 ], [ 4.726975994346636, 52.158905865097623 ], [ 4.741784014741625, 52.162669167594039 ], [ 4.758992744213583, 52.135010124549176 ], [ 4.760221025167718, 52.131052090935306 ], [ 4.75679934683898, 52.124237439529345 ], [ 4.752959852547149, 52.119402721243191 ], [ 4.751795684218268, 52.118830085246088 ], [ 4.739464558738618, 52.106869226634906 ], [ 4.738687406735345, 52.106581769067859 ], [ 4.75311253801527, 52.108642528992071 ], [ 4.759335043847737, 52.110658122689237 ], [ 4.762416820040924, 52.113789522157326 ], [ 4.769066423047236, 52.113258201021253 ], [ 4.770992533092167, 52.115250571697139 ], [ 4.774907347274415, 52.114704597162486 ], [ 4.778408226380521, 52.115855460026225 ], [ 4.78033486513526, 52.117847678025939 ], [ 4.783468346139775, 52.117297395296596 ], [ 4.784203942958622, 52.120699362532918 ], [ 4.789295111810093, 52.119875735463239 ], [ 4.792022797307085, 52.120455900793317 ], [ 4.792000166266685, 52.122154886546369 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0603\", \"naam\": \"Rijswijk\", \"code\": \"0603\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.357670673771493, 52.026839793817111 ], [ 4.357644645295322, 52.027972369011408 ], [ 4.353680214265149, 52.030769641912656 ], [ 4.350357559773945, 52.039519648856071 ], [ 4.346378485246604, 52.042882952116408 ], [ 4.347092795611316, 52.045721267241646 ], [ 4.352501359736149, 52.048034511795812 ], [ 4.352475184414501, 52.049167081815554 ], [ 4.344554600450084, 52.054194830046093 ], [ 4.34647237696183, 52.055627791036052 ], [ 4.34643287588028, 52.057326641353292 ], [ 4.340084250230528, 52.061801574088612 ], [ 4.328888883733236, 52.056603915067406 ], [ 4.321523091767007, 52.05455509621067 ], [ 4.321946921355816, 52.053142925365975 ], [ 4.313041968526284, 52.050230033485221 ], [ 4.303768659280454, 52.046463465320564 ], [ 4.298328392242298, 52.045563683131512 ], [ 4.297582728281208, 52.04414077451348 ], [ 4.291014347139078, 52.041530991455893 ], [ 4.298713837452122, 52.029707900740092 ], [ 4.29794088239383, 52.029417549081401 ], [ 4.307571877201753, 52.018178146334066 ], [ 4.309972062469418, 52.015651308282912 ], [ 4.319226040732056, 52.019983672093979 ], [ 4.326027631820616, 52.012681919388029 ], [ 4.357670673771493, 52.026839793817111 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1706\", \"naam\": \"Cranendonck\", \"code\": \"1706\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.643836610645295, 51.290507934591744 ], [ 5.656178640491841, 51.301524932906283 ], [ 5.671997085037396, 51.315080989481615 ], [ 5.67048795967129, 51.319332702982749 ], [ 5.67205003837823, 51.323576919606019 ], [ 5.670142636806998, 51.32556398554479 ], [ 5.666693996220709, 51.326705125436696 ], [ 5.654566327463924, 51.353920964202985 ], [ 5.647639578623684, 51.351954254643836 ], [ 5.648782366131488, 51.350252484768021 ], [ 5.64262470984487, 51.348283747413916 ], [ 5.639927864782954, 51.346873626365543 ], [ 5.64027118589205, 51.339509645053994 ], [ 5.63682229434851, 51.340933098801962 ], [ 5.636805267173429, 51.337817920071338 ], [ 5.642946988733725, 51.337238185441002 ], [ 5.644078434719475, 51.333554074509699 ], [ 5.641393446720941, 51.334126372057149 ], [ 5.638692797935636, 51.331866626591818 ], [ 5.634476397567925, 51.333291667969981 ], [ 5.633313661854488, 51.331311722222651 ], [ 5.634843525803522, 51.330175671281729 ], [ 5.631373974818835, 51.327634188551798 ], [ 5.621024160259021, 51.331053859170282 ], [ 5.619092660650816, 51.328792112767282 ], [ 5.605284225690513, 51.33193402127803 ], [ 5.581830794836847, 51.325178782417197 ], [ 5.566071051701965, 51.32067286005433 ], [ 5.53339033422188, 51.305708867346731 ], [ 5.515706589987518, 51.295251315873699 ], [ 5.519143543802651, 51.28958344313638 ], [ 5.528710323757812, 51.281642556247569 ], [ 5.544402314843428, 51.271427143706667 ], [ 5.556273038000865, 51.266596057350121 ], [ 5.557793150292442, 51.262912214857536 ], [ 5.555844689421569, 51.254419006879012 ], [ 5.5565956823436, 51.250169888056121 ], [ 5.555435305218802, 51.247339555616023 ], [ 5.555041622159264, 51.244508106601877 ], [ 5.560323944122774, 51.222410602913037 ], [ 5.566064770657444, 51.220985895118119 ], [ 5.594435599823676, 51.226036392804623 ], [ 5.594426632358252, 51.224053992793316 ], [ 5.618972452157673, 51.229388470590273 ], [ 5.623287786926357, 51.248920748961545 ], [ 5.625322180950294, 51.271572776153469 ], [ 5.626099532411317, 51.273553596352798 ], [ 5.633811084333654, 51.281183955189455 ], [ 5.643836610645295, 51.290507934591744 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1598\", \"naam\": \"Koggenland\", \"code\": \"1598\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.027205376340154, 52.612701182192481 ], [ 5.02034440927968, 52.629952390436522 ], [ 5.013619867381404, 52.630497754180112 ], [ 5.015941424339485, 52.63645117035324 ], [ 5.022629325291599, 52.640435951556576 ], [ 5.032088587450668, 52.644145507769821 ], [ 5.037201854685518, 52.647558447724172 ], [ 5.039114086931616, 52.655775356930079 ], [ 5.034677238651359, 52.666521900979767 ], [ 5.021243069250566, 52.664499307268315 ], [ 5.012110710002077, 52.668434932543825 ], [ 5.003389676960527, 52.670389152552453 ], [ 5.004168628421129, 52.671807399316428 ], [ 5.002163081409975, 52.674915545748931 ], [ 4.983167749551765, 52.675135712386222 ], [ 4.979168867170596, 52.679652423581025 ], [ 4.976815668718155, 52.677379153840079 ], [ 4.970462939941955, 52.67962225413703 ], [ 4.966516543691339, 52.678475779029313 ], [ 4.966134390922611, 52.677058690168906 ], [ 4.961814565722852, 52.673645553646857 ], [ 4.955492198601008, 52.672773339067895 ], [ 4.952733761618628, 52.671630706554154 ], [ 4.949540370256355, 52.67445048352721 ], [ 4.945973602314866, 52.675003606793581 ], [ 4.924142596833112, 52.681433057724483 ], [ 4.920176193380716, 52.682267001028393 ], [ 4.905487091179378, 52.686455666083098 ], [ 4.905081990227489, 52.687303469203911 ], [ 4.917290941567239, 52.693015250763061 ], [ 4.918043322830024, 52.696699130616672 ], [ 4.916036618177417, 52.699239525955377 ], [ 4.910883806485008, 52.699785311829871 ], [ 4.899823673700346, 52.697475363172366 ], [ 4.891535728459317, 52.695175958736371 ], [ 4.888816096514859, 52.690634238104252 ], [ 4.876199290833904, 52.68633351018282 ], [ 4.879434230257002, 52.680401236630026 ], [ 4.874336040269819, 52.676415285859136 ], [ 4.872041532501601, 52.669609786570206 ], [ 4.868145409744058, 52.664496152936643 ], [ 4.866610005863117, 52.66052533948406 ], [ 4.863097322652568, 52.656545805537093 ], [ 4.862745700017782, 52.65286329371304 ], [ 4.865158889378803, 52.649476096702166 ], [ 4.875522863033509, 52.642442354928988 ], [ 4.877140504384774, 52.639334636699161 ], [ 4.876389228627009, 52.63593358989511 ], [ 4.873243150985652, 52.634504272749417 ], [ 4.880763885215096, 52.633687086965118 ], [ 4.884746040845765, 52.631155613024326 ], [ 4.889158236169638, 52.625511132307153 ], [ 4.889180656449619, 52.623529158866802 ], [ 4.887214225043165, 52.622671447125349 ], [ 4.8868544106531, 52.61955525298297 ], [ 4.884162547816566, 52.61303137042961 ], [ 4.898778912148242, 52.613375481962052 ], [ 4.916580745249437, 52.611465227212847 ], [ 4.923300578261215, 52.611208490537315 ], [ 4.926090038859766, 52.608954122216559 ], [ 4.926903882078195, 52.606692053315427 ], [ 4.928893942614352, 52.60528397860751 ], [ 4.934811028716015, 52.606156106886388 ], [ 4.948172600523161, 52.613285023614182 ], [ 4.951723139654129, 52.61386438817091 ], [ 4.956495179845793, 52.610767101083169 ], [ 4.959321418754509, 52.604547955687032 ], [ 4.956973249251424, 52.602274257299342 ], [ 4.949100851450093, 52.599413968790969 ], [ 4.949933003599804, 52.595169734916283 ], [ 4.996126390690717, 52.597312794840221 ], [ 5.004813610261264, 52.597624215963414 ], [ 5.00788577201542, 52.607827531963238 ], [ 5.006678520941549, 52.610372037453409 ], [ 5.018517390046568, 52.612108252816135 ], [ 5.027205376340154, 52.612701182192481 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0373\", \"naam\": \"Bergen (NH)\", \"code\": \"0373\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.672723182882214, 52.590994637633017 ], [ 4.674491656944959, 52.603747425781449 ], [ 4.678014977506574, 52.605750615665229 ], [ 4.68032162436452, 52.609728576345098 ], [ 4.683832121912163, 52.612580985516864 ], [ 4.685699400909612, 52.619387806397995 ], [ 4.689978979771349, 52.623660344566431 ], [ 4.705822279511569, 52.621486961204582 ], [ 4.70781568989019, 52.62036574405353 ], [ 4.714468806791333, 52.624650931659787 ], [ 4.715241950973721, 52.625787929710789 ], [ 4.709665214541157, 52.628587839050404 ], [ 4.711224476863797, 52.63001249605999 ], [ 4.708444534360484, 52.630846125183375 ], [ 4.709999480290942, 52.632553928628404 ], [ 4.708769976830205, 52.635378477646981 ], [ 4.70984696268581, 52.6424635057869 ], [ 4.714191763570947, 52.642771331374156 ], [ 4.712953562149426, 52.646162177404747 ], [ 4.71768985359672, 52.646755247183229 ], [ 4.716855882297214, 52.649582095830418 ], [ 4.725126037481975, 52.651893659917484 ], [ 4.726652608405961, 52.655583151320883 ], [ 4.729412601433739, 52.656164755611123 ], [ 4.725836074458404, 52.657277536928341 ], [ 4.732917345113018, 52.659865084136911 ], [ 4.73091432678061, 52.661552969853254 ], [ 4.735269559316567, 52.661293766757858 ], [ 4.734057688667203, 52.66298603817549 ], [ 4.739199991779403, 52.663014163019973 ], [ 4.742789096864156, 52.661051589619049 ], [ 4.748656490511443, 52.665613677996383 ], [ 4.752526527282125, 52.67158058918379 ], [ 4.747700594241017, 52.676934635542707 ], [ 4.744114550205824, 52.678614218231324 ], [ 4.741707068790061, 52.680866396401534 ], [ 4.738891066661266, 52.683965755410043 ], [ 4.728887034599829, 52.691272770887849 ], [ 4.719680039529946, 52.698017115482763 ], [ 4.716378990536845, 52.706776233128139 ], [ 4.715931101315538, 52.710171513877263 ], [ 4.709512316257379, 52.715515001213177 ], [ 4.707092258192596, 52.718332701443479 ], [ 4.702286552069308, 52.72170295155604 ], [ 4.692632595597531, 52.730990967859562 ], [ 4.689827899021573, 52.732956621711196 ], [ 4.683479795629306, 52.733485575652701 ], [ 4.681038844172376, 52.737435218104693 ], [ 4.678629462660227, 52.73940295209924 ], [ 4.671077676144633, 52.740773528916307 ], [ 4.662658058239579, 52.746668740716132 ], [ 4.659077159081088, 52.747496351543752 ], [ 4.65904425673263, 52.749478194095587 ], [ 4.651008230294732, 52.755941224772485 ], [ 4.634315967212349, 52.758385239260313 ], [ 4.629793733465807, 52.744765387589382 ], [ 4.623783198450406, 52.725755891663276 ], [ 4.622742780904117, 52.71725465348846 ], [ 4.619871350743132, 52.700246994912078 ], [ 4.617278790550206, 52.690036702824379 ], [ 4.617016996759818, 52.68238982982961 ], [ 4.61103037820919, 52.662813169323456 ], [ 4.611555780437288, 52.65545451922695 ], [ 4.608562322969156, 52.645807603285178 ], [ 4.607126318056062, 52.637586604802856 ], [ 4.604540333222395, 52.627375890547683 ], [ 4.604286103489878, 52.619445750673101 ], [ 4.601686670998578, 52.610084314881981 ], [ 4.600258137875476, 52.601580040044603 ], [ 4.598055512283641, 52.592221104001474 ], [ 4.596623162322373, 52.583999880727866 ], [ 4.594012126735458, 52.57548759337439 ], [ 4.610232512546792, 52.573612669255965 ], [ 4.655083955139675, 52.582958756595552 ], [ 4.65543648592138, 52.585509374542134 ], [ 4.659770607644426, 52.586102313762446 ], [ 4.672723182882214, 52.590994637633017 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1676\", \"naam\": \"Schouwen-Duiveland\", \"code\": \"1676\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.202760961399342, 51.660886908872605 ], [ 4.193769182330406, 51.664477441756588 ], [ 4.151806894515769, 51.685283746011564 ], [ 4.12315041483452, 51.685827585962443 ], [ 4.109954765877545, 51.687100517667027 ], [ 4.098249726123479, 51.690370949582615 ], [ 4.073796856956219, 51.692648279102592 ], [ 4.060622791609148, 51.693066242211238 ], [ 4.047810334274383, 51.694336539182693 ], [ 4.040204456167453, 51.702746093809317 ], [ 4.03686272628874, 51.710921175011457 ], [ 4.036575129712917, 51.720547541366095 ], [ 4.035125485905463, 51.73016049597976 ], [ 4.026357572988259, 51.738272550030779 ], [ 4.01886033437073, 51.742716870018008 ], [ 4.01332452532439, 51.759079220490548 ], [ 3.974410794744916, 51.763714809306776 ], [ 3.959026443204098, 51.772025259033647 ], [ 3.940355768835813, 51.773778959853125 ], [ 3.921452335641239, 51.7707118757967 ], [ 3.904979409625114, 51.764556927934031 ], [ 3.895136341963828, 51.75735126682585 ], [ 3.886099552558011, 51.749305375910367 ], [ 3.876073368502433, 51.747760372560194 ], [ 3.847588476590997, 51.753337588290648 ], [ 3.826224533384833, 51.765800644226005 ], [ 3.773702934784319, 51.781517398219066 ], [ 3.685519764468013, 51.73353548072599 ], [ 3.611292389269427, 51.650291099744166 ], [ 3.748984940196396, 51.650316953242914 ], [ 3.707964667602142, 51.598751103510857 ], [ 3.72270010399233, 51.597262310179168 ], [ 3.743133918483755, 51.598401137999055 ], [ 3.745023589863652, 51.599560672018285 ], [ 3.751953797518393, 51.600224281391959 ], [ 3.759300857605596, 51.600043549273806 ], [ 3.769320623121283, 51.600749096189723 ], [ 3.790073640002535, 51.603866805508062 ], [ 3.801184029996017, 51.606567189921236 ], [ 3.814672095434706, 51.607599055153038 ], [ 3.828605416739788, 51.606935853790482 ], [ 3.838260956513088, 51.607064134888418 ], [ 3.842152130778407, 51.606265888959932 ], [ 3.848727433569292, 51.606069333534982 ], [ 3.851874679559613, 51.604411261491045 ], [ 3.862831136799564, 51.600306018125011 ], [ 3.867936697226303, 51.597823319493344 ], [ 3.874143419974163, 51.597054082204735 ], [ 3.878890118394273, 51.593716556995261 ], [ 3.924786482828157, 51.607894851006755 ], [ 3.948895412074617, 51.61527465491082 ], [ 3.948769642315674, 51.619238371171335 ], [ 3.955831102215809, 51.61592619930466 ], [ 3.957825167579462, 51.613967955329947 ], [ 3.965955210825691, 51.613500560250905 ], [ 3.968299570008182, 51.612679326473135 ], [ 3.977956825577272, 51.612796079915881 ], [ 3.979861917551658, 51.613668712276244 ], [ 3.986859041158823, 51.612336536040985 ], [ 3.986498993721522, 51.611482531239197 ], [ 3.99816554003642, 51.609072586872585 ], [ 4.009796454794951, 51.607793989187904 ], [ 4.014852026753572, 51.606720499760634 ], [ 4.023349427413115, 51.606819898815758 ], [ 4.02831124589054, 51.608860258662943 ], [ 4.031392898665444, 51.60917925099757 ], [ 4.043560531618576, 51.615833916039961 ], [ 4.053068722008851, 51.621040846170729 ], [ 4.055636468786537, 51.612573273826811 ], [ 4.059449719298294, 51.614315986902206 ], [ 4.069428098668764, 51.616694642750296 ], [ 4.076621167895232, 51.621873531573769 ], [ 4.082729946487616, 51.624490843727301 ], [ 4.089901456139861, 51.630518327518089 ], [ 4.085682963500891, 51.629338573682098 ], [ 4.083356141024223, 51.629595892376614 ], [ 4.085947456935321, 51.63358990220302 ], [ 4.095013122133976, 51.641054227053594 ], [ 4.102986158544285, 51.646240040871277 ], [ 4.111315751468956, 51.652562078770075 ], [ 4.114385061529838, 51.65344516917375 ], [ 4.116262716229081, 51.655448139393791 ], [ 4.123932999098907, 51.657796961567847 ], [ 4.127018672305031, 51.658113446025261 ], [ 4.136014430526857, 51.654528052796628 ], [ 4.143028909560293, 51.652620267853983 ], [ 4.151573897113651, 51.651294679037399 ], [ 4.157411972252932, 51.649940057902839 ], [ 4.169898346351134, 51.645822271756174 ], [ 4.172983535176077, 51.646137543146288 ], [ 4.177326893827759, 51.642783870990179 ], [ 4.188642391771497, 51.638935218219899 ], [ 4.191749659843242, 51.638400561439369 ], [ 4.195979229057334, 51.639293355486188 ], [ 4.202760961399342, 51.660886908872605 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0439\", \"naam\": \"Purmerend\", \"code\": \"0439\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.997821741989849, 52.494815946694644 ], [ 5.024397648820553, 52.521800185092104 ], [ 5.014107319281576, 52.526298800533262 ], [ 5.008968644427468, 52.527698323731286 ], [ 5.001480710308298, 52.527107916140253 ], [ 4.99835826909704, 52.523416686021903 ], [ 4.992082025029947, 52.51971491287965 ], [ 4.979425531453054, 52.523919471829636 ], [ 4.96440044300597, 52.528114270058779 ], [ 4.956896487872915, 52.529219936614155 ], [ 4.955776997287853, 52.522703243757867 ], [ 4.954260801689846, 52.516468241933396 ], [ 4.949940762371633, 52.514753453214055 ], [ 4.9464179927196, 52.512191993059751 ], [ 4.942078706003016, 52.512458955739831 ], [ 4.934202950840253, 52.511579677256783 ], [ 4.934611670696604, 52.510165441099524 ], [ 4.925198189804355, 52.505598614661864 ], [ 4.926395440045785, 52.504187471859836 ], [ 4.926042663225602, 52.500221863905125 ], [ 4.924107701879018, 52.496816406560015 ], [ 4.923752218302869, 52.493133934465725 ], [ 4.920626716736455, 52.490573238661128 ], [ 4.930494963939828, 52.488912676287583 ], [ 4.930109734352806, 52.488061710775561 ], [ 4.941564447559443, 52.485273688933745 ], [ 4.943508778122344, 52.487829421752153 ], [ 4.94903606190037, 52.486717324432554 ], [ 4.948276185493973, 52.483882910356058 ], [ 4.953800080585629, 52.483053739615258 ], [ 4.953475557629148, 52.475973534276477 ], [ 4.957855177066933, 52.471175730746175 ], [ 4.963760311468506, 52.471480122242063 ], [ 4.968891193768004, 52.470365685903161 ], [ 4.974405087707266, 52.470385005746778 ], [ 4.997821741989849, 52.494815946694644 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1655\", \"naam\": \"Halderberge\", \"code\": \"1655\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.591721786475628, 51.561088839103647 ], [ 4.590479583586981, 51.565894912694368 ], [ 4.594710282453533, 51.56677329228657 ], [ 4.596101192592526, 51.575562145817543 ], [ 4.598650974916517, 51.584358794445563 ], [ 4.596616810695939, 51.590292409111804 ], [ 4.602326015228423, 51.595145381062345 ], [ 4.608770061830475, 51.602268610968117 ], [ 4.610686856791934, 51.603130970595167 ], [ 4.613694964015806, 51.607965406557213 ], [ 4.610575339936382, 51.609643974182916 ], [ 4.610918044993106, 51.612195104076967 ], [ 4.608937684797318, 51.615014007636496 ], [ 4.603479480222116, 51.617809632901704 ], [ 4.60419359415044, 51.621212887737002 ], [ 4.601419880239886, 51.625159178050758 ], [ 4.59447842919645, 51.624262737844518 ], [ 4.588270220905653, 51.625636545012362 ], [ 4.576600333694488, 51.629804383104336 ], [ 4.570792642551329, 51.630330421560465 ], [ 4.561537202821305, 51.629132653621767 ], [ 4.557316894370644, 51.627403555072426 ], [ 4.553154221916502, 51.622559430496906 ], [ 4.549336967080818, 51.619983287775781 ], [ 4.543196526335208, 51.617673489076246 ], [ 4.532398881189997, 51.616462262012853 ], [ 4.528948242232643, 51.61502095639085 ], [ 4.519038187211344, 51.607867611355644 ], [ 4.515577743498532, 51.606992250190771 ], [ 4.510175019893602, 51.606668657915684 ], [ 4.503966699292529, 51.608037992529866 ], [ 4.499672977629873, 51.610271170198573 ], [ 4.496140395705687, 51.61307641136834 ], [ 4.492971411102931, 51.617017165815881 ], [ 4.489449102310234, 51.619255867365247 ], [ 4.48131768484009, 51.620042818490148 ], [ 4.475942120080981, 51.61830181176456 ], [ 4.472885238785178, 51.616578699910669 ], [ 4.461720750263151, 51.614508437139413 ], [ 4.453226682247293, 51.614157720158957 ], [ 4.443544227068975, 51.615212862176641 ], [ 4.437707262065184, 51.617148113664626 ], [ 4.435816955861124, 51.615150275306632 ], [ 4.433867280353724, 51.61598403830736 ], [ 4.431977191980756, 51.61398613823966 ], [ 4.431650513598187, 51.611151352011802 ], [ 4.426616251608776, 51.611676544601977 ], [ 4.427919015480132, 51.60489014560661 ], [ 4.429329007442906, 51.59300678682537 ], [ 4.431004994049772, 51.586789829703356 ], [ 4.433814928041275, 51.581714949617911 ], [ 4.438958188731189, 51.575809313709939 ], [ 4.44411775393484, 51.569053950461125 ], [ 4.449205588538014, 51.565696337076069 ], [ 4.453433497704004, 51.566579822310338 ], [ 4.45311162615265, 51.563461916593404 ], [ 4.456596556277472, 51.562923288327468 ], [ 4.457397387556533, 51.561513600579154 ], [ 4.465512971876883, 51.561011450633906 ], [ 4.470103804062663, 51.56303004160408 ], [ 4.472822368210498, 51.562201704012324 ], [ 4.473622683541145, 51.560791903779936 ], [ 4.480954864399065, 51.560848980302886 ], [ 4.499131217729267, 51.559006012570286 ], [ 4.500299949981269, 51.558448464856944 ], [ 4.501749639204189, 51.563274037013663 ], [ 4.50407071054109, 51.563008385016026 ], [ 4.504782031305387, 51.566129072135844 ], [ 4.508652509357523, 51.565591803670841 ], [ 4.509369659588059, 51.568429293941556 ], [ 4.530646265701392, 51.566038236217182 ], [ 4.536440873967941, 51.565797341303764 ], [ 4.530763766625281, 51.559808484019953 ], [ 4.528528676164957, 51.555543938276244 ], [ 4.528212431220454, 51.551859884908801 ], [ 4.530189675698267, 51.549325510340104 ], [ 4.533661977307007, 51.549350921025137 ], [ 4.545194359538945, 51.551700251756507 ], [ 4.545538217703135, 51.553968404096651 ], [ 4.548270561235693, 51.552288791857265 ], [ 4.591721786475628, 51.561088839103647 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0518\", \"naam\": \"'s-Gravenhage\", \"code\": \"0518\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.379901516999054, 52.026748896333004 ], [ 4.39379992068402, 52.033097371042437 ], [ 4.387830507083159, 52.03842764114534 ], [ 4.386270487594048, 52.038414391059781 ], [ 4.37969774472559, 52.035809543071764 ], [ 4.372562627662074, 52.040845870295939 ], [ 4.387936200457131, 52.05117248466474 ], [ 4.389521905404353, 52.050053133595924 ], [ 4.394505396560509, 52.054060018810603 ], [ 4.398469357866494, 52.051261380087062 ], [ 4.401540429596499, 52.05355270503096 ], [ 4.405064099486715, 52.053015744367556 ], [ 4.422260563906613, 52.051741896869082 ], [ 4.415121518767894, 52.057063942748854 ], [ 4.422534760088851, 52.057124888353755 ], [ 4.420857927980203, 52.062491885763428 ], [ 4.411666906337024, 52.072328024245259 ], [ 4.403736381611371, 52.077926030465832 ], [ 4.397169357932942, 52.074755866956849 ], [ 4.394802299570824, 52.075868742199596 ], [ 4.388620197556849, 52.072984534799296 ], [ 4.384640997231597, 52.076349113075288 ], [ 4.37999522848674, 52.074610304262414 ], [ 4.362274113195627, 52.064262326283945 ], [ 4.356089195162992, 52.061659558968415 ], [ 4.360062723707162, 52.05857908237747 ], [ 4.357767243665688, 52.056576647493017 ], [ 4.352239537849726, 52.059360202677901 ], [ 4.348013260207338, 52.056490995524726 ], [ 4.342048495770213, 52.061252618689068 ], [ 4.355548867572723, 52.068168408966642 ], [ 4.335088941427949, 52.075067454844522 ], [ 4.345535282883977, 52.079125061626939 ], [ 4.345522095359285, 52.079691342881716 ], [ 4.373345841963001, 52.092394726632236 ], [ 4.372903984158636, 52.094656502534356 ], [ 4.370138323745002, 52.096048654812414 ], [ 4.360174062761177, 52.104741367792677 ], [ 4.356658838193667, 52.104710688043902 ], [ 4.342372879009334, 52.097504973774377 ], [ 4.338467724406976, 52.097470290499196 ], [ 4.337262931305525, 52.098875556126764 ], [ 4.327573594179867, 52.095673657834496 ], [ 4.323190517364985, 52.099315756265952 ], [ 4.332085841722781, 52.103077302022776 ], [ 4.330490120455732, 52.104478999429581 ], [ 4.333197444006577, 52.105636031673811 ], [ 4.330005786842945, 52.108439432920925 ], [ 4.30136607529699, 52.129419021427488 ], [ 4.289894054665888, 52.134976801044502 ], [ 4.286823165729732, 52.132682596832261 ], [ 4.272177145707629, 52.124332232990561 ], [ 4.25527149391104, 52.112843117207198 ], [ 4.247863772510812, 52.112205354253625 ], [ 4.243212408016571, 52.110744299945345 ], [ 4.238626839415964, 52.106734882609807 ], [ 4.237520632209873, 52.104175278944332 ], [ 4.238801439124829, 52.099939730409943 ], [ 4.218488565466803, 52.085013473315435 ], [ 4.19126293976816, 52.066331935239049 ], [ 4.185148613059536, 52.061455193927884 ], [ 4.196232030219939, 52.055620451649197 ], [ 4.199870922453812, 52.050842687001825 ], [ 4.198723193122555, 52.049981491395542 ], [ 4.202308906320012, 52.047185560030925 ], [ 4.212409643799009, 52.033976068080499 ], [ 4.209687454529289, 52.033665668471095 ], [ 4.212108836825037, 52.030574588366143 ], [ 4.219826046767186, 52.033766628029127 ], [ 4.228382919734911, 52.034700774298429 ], [ 4.234895626637977, 52.039295977116808 ], [ 4.243728604849947, 52.029469908931119 ], [ 4.248125639271654, 52.025264455608934 ], [ 4.255064712257666, 52.028446645098093 ], [ 4.256241574320677, 52.028174751490404 ], [ 4.272817258109487, 52.035979320708037 ], [ 4.276049429541549, 52.031478607459377 ], [ 4.277971049476933, 52.032629541878748 ], [ 4.281606340278181, 52.027566068731815 ], [ 4.285122405803523, 52.027315831613421 ], [ 4.285164197396303, 52.025617001044893 ], [ 4.288331878630191, 52.023664185890787 ], [ 4.286786322145018, 52.023083341635136 ], [ 4.294283485720911, 52.019471537691871 ], [ 4.289647136219392, 52.01772917815822 ], [ 4.295563344107893, 52.014952155953658 ], [ 4.300951799311649, 52.017834039889379 ], [ 4.302545335585466, 52.016432717592423 ], [ 4.307571877201753, 52.018178146334066 ], [ 4.29794088239383, 52.029417549081401 ], [ 4.298713837452122, 52.029707900740092 ], [ 4.291014347139078, 52.041530991455893 ], [ 4.297582728281208, 52.04414077451348 ], [ 4.298328392242298, 52.045563683131512 ], [ 4.303768659280454, 52.046463465320564 ], [ 4.313041968526284, 52.050230033485221 ], [ 4.321946921355816, 52.053142925365975 ], [ 4.321523091767007, 52.05455509621067 ], [ 4.328888883733236, 52.056603915067406 ], [ 4.340084250230528, 52.061801574088612 ], [ 4.34643287588028, 52.057326641353292 ], [ 4.34647237696183, 52.055627791036052 ], [ 4.344554600450084, 52.054194830046093 ], [ 4.352475184414501, 52.049167081815554 ], [ 4.352501359736149, 52.048034511795812 ], [ 4.347092795611316, 52.045721267241646 ], [ 4.346378485246604, 52.042882952116408 ], [ 4.350357559773945, 52.039519648856071 ], [ 4.353680214265149, 52.030769641912656 ], [ 4.357644645295322, 52.027972369011408 ], [ 4.357670673771493, 52.026839793817111 ], [ 4.359626675022693, 52.026573681564187 ], [ 4.373528541841694, 52.032641397643083 ], [ 4.379901516999054, 52.026748896333004 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0622\", \"naam\": \"Vlaardingen\", \"code\": \"0622\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.370704350261802, 51.899228584707437 ], [ 4.369441832389345, 51.903465734116097 ], [ 4.369766589196743, 51.906300597412475 ], [ 4.368471694970522, 51.911953478416542 ], [ 4.366028909195934, 51.916746760706175 ], [ 4.365135110516469, 51.921836676532735 ], [ 4.362360518339989, 51.92407815472388 ], [ 4.361913361293461, 51.926623096780325 ], [ 4.363832723259872, 51.927772640317308 ], [ 4.363321079964861, 51.933149068055265 ], [ 4.361674230573378, 51.937099572998768 ], [ 4.350834751859874, 51.951447941695854 ], [ 4.335364482693708, 51.947062510216632 ], [ 4.336545351105698, 51.946506658053686 ], [ 4.323815732810841, 51.941577732382662 ], [ 4.323010580907558, 51.942703269481051 ], [ 4.315738016555369, 51.937539514090304 ], [ 4.313853306091231, 51.934973467460274 ], [ 4.30771618726918, 51.931235590631232 ], [ 4.292784081855014, 51.921185265790669 ], [ 4.286275526561274, 51.916876363839137 ], [ 4.267499738566242, 51.905370625233623 ], [ 4.274964725527706, 51.90232622368169 ], [ 4.284761425929966, 51.899303254572715 ], [ 4.292189768597149, 51.897673468646111 ], [ 4.306622083084788, 51.895824634211387 ], [ 4.322212752904902, 51.894267747048005 ], [ 4.333875214134626, 51.894372885153999 ], [ 4.343561125578971, 51.895875356346579 ], [ 4.351673018533835, 51.898212780699289 ], [ 4.358256452942945, 51.899403441426188 ], [ 4.370704350261802, 51.899228584707437 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0981\", \"naam\": \"Vaals\", \"code\": \"0981\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.976730052940484, 50.803312073199436 ], [ 5.969112965185333, 50.801368241823148 ], [ 5.964951523365681, 50.802521959204725 ], [ 5.955008994426419, 50.79662390823723 ], [ 5.951558532491073, 50.793808748322412 ], [ 5.94627234605149, 50.796100110992128 ], [ 5.944360976330923, 50.794976519086426 ], [ 5.942029529512077, 50.790456433365939 ], [ 5.944960073061306, 50.781662908825204 ], [ 5.943719908262157, 50.773172692548719 ], [ 5.941050831874276, 50.772052699593431 ], [ 5.936112491176871, 50.771509868549593 ], [ 5.931224038325278, 50.775214686970287 ], [ 5.924015747967439, 50.775248422667268 ], [ 5.921716619262639, 50.773276644993068 ], [ 5.920532970990965, 50.769317232473412 ], [ 5.925431506350049, 50.766462439622494 ], [ 5.926160549106983, 50.763910183201567 ], [ 5.929940221939351, 50.762759651964224 ], [ 5.932189325733605, 50.760483406921473 ], [ 5.930276453222462, 50.759076390266145 ], [ 5.932927886482533, 50.758780680625449 ], [ 5.935941803665281, 50.757067156198374 ], [ 5.94392270151056, 50.758444975820538 ], [ 5.946594474618416, 50.759848092897812 ], [ 5.953424549303093, 50.760098002440508 ], [ 5.958000014807512, 50.76205791812383 ], [ 5.969360486240537, 50.760585156928911 ], [ 5.972763130859851, 50.75971832748295 ], [ 5.975017154023319, 50.758007630287317 ], [ 5.974222882955342, 50.755179601385535 ], [ 5.979145490245674, 50.754588050224967 ], [ 5.983295021079113, 50.752867454564218 ], [ 5.984439896921443, 50.753427951360642 ], [ 5.993533357738147, 50.752814131388163 ], [ 5.997340204873555, 50.753926903073946 ], [ 5.999225041570837, 50.753067302917252 ], [ 6.014419731052426, 50.754968199067761 ], [ 6.020858629512996, 50.754366619294188 ], [ 6.018327292775283, 50.763443143363688 ], [ 6.022569135965812, 50.768517625621875 ], [ 6.027950002213138, 50.773585641848634 ], [ 6.026080455925644, 50.775578459399014 ], [ 6.022290516621979, 50.775882573630462 ], [ 6.014373181891864, 50.779607551499751 ], [ 6.010586638595612, 50.780194469903932 ], [ 6.002291929987598, 50.784203858442474 ], [ 5.998534698234709, 50.787055886961134 ], [ 5.995885789908955, 50.78763629344445 ], [ 5.995919219627654, 50.790184988017749 ], [ 5.988380529090585, 50.794189381454729 ], [ 5.98004159558938, 50.795082105214611 ], [ 5.974767435142093, 50.798224336754629 ], [ 5.976730052940484, 50.803312073199436 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0772\", \"naam\": \"Eindhoven\", \"code\": \"0772\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.504849159496127, 51.400046945759328 ], [ 5.505242547544387, 51.403444942510973 ], [ 5.507553204546029, 51.404575375260599 ], [ 5.525631205410153, 51.404838487885897 ], [ 5.525316132092517, 51.427778015966787 ], [ 5.530316955696437, 51.427205581584445 ], [ 5.531871496571791, 51.432018048694538 ], [ 5.539180836499515, 51.43115914626302 ], [ 5.543418007843637, 51.432286339686627 ], [ 5.548813998781857, 51.434544574973316 ], [ 5.546887649209539, 51.433980832136101 ], [ 5.543828193025093, 51.439648968162871 ], [ 5.538452546769501, 51.443620856117114 ], [ 5.539620673091511, 51.447584120242773 ], [ 5.538473255829794, 51.449851206679988 ], [ 5.534628740552336, 51.451555326427005 ], [ 5.531560289513054, 51.455240752024523 ], [ 5.532336709107248, 51.457222179185138 ], [ 5.530030768300074, 51.458641021302817 ], [ 5.525027347994611, 51.459496641152171 ], [ 5.518105620051851, 51.462903003961898 ], [ 5.5092647510767, 51.46914296476254 ], [ 5.508122812282608, 51.474241725552389 ], [ 5.509677380890682, 51.479337671342982 ], [ 5.505448452098152, 51.482740415784363 ], [ 5.508151445909474, 51.485003227710031 ], [ 5.508543551205995, 51.487551602964302 ], [ 5.510469389673005, 51.48726638463107 ], [ 5.512406127541881, 51.490945895406462 ], [ 5.51549612387293, 51.493491318367823 ], [ 5.511266315692227, 51.496894270512833 ], [ 5.478506681182592, 51.49664133187062 ], [ 5.4773510474467, 51.496925429210101 ], [ 5.470796621380321, 51.495514326323367 ], [ 5.468101420283365, 51.49693221731669 ], [ 5.463862006805232, 51.49693508365015 ], [ 5.448828661708854, 51.494961623425979 ], [ 5.442661122047978, 51.493831933734889 ], [ 5.429940804303319, 51.490722125949702 ], [ 5.415294205854662, 51.48534583159401 ], [ 5.407202207917032, 51.483931520549994 ], [ 5.403350004628275, 51.485914507267381 ], [ 5.400652847348296, 51.485914852988294 ], [ 5.395258123387396, 51.483649774817884 ], [ 5.399110262209489, 51.48081746110703 ], [ 5.394871079484079, 51.473454674920355 ], [ 5.391018903640448, 51.471755681455448 ], [ 5.38716701291159, 51.469206966276886 ], [ 5.3875521668882, 51.468074172623162 ], [ 5.384085807168241, 51.467224541934208 ], [ 5.379079451018753, 51.463825929451417 ], [ 5.369450872790871, 51.465240866824757 ], [ 5.367142671985698, 51.459293332400449 ], [ 5.36329139989992, 51.46014220723761 ], [ 5.361367545839112, 51.457309816446141 ], [ 5.356749200801244, 51.453627129768144 ], [ 5.360987177234002, 51.449096977174882 ], [ 5.360990253860501, 51.443716205013757 ], [ 5.357528077325767, 51.440033798150054 ], [ 5.356759366198078, 51.438334408945515 ], [ 5.363689121189414, 51.435504014342932 ], [ 5.366767924262918, 51.436070987453959 ], [ 5.367921633894467, 51.438336772048849 ], [ 5.371385591627949, 51.438903685637214 ], [ 5.373310571191809, 51.437487934483286 ], [ 5.379084199196417, 51.436638874807677 ], [ 5.379854205353709, 51.435222931034005 ], [ 5.387551824559377, 51.437771939678157 ], [ 5.389091428760494, 51.437771922729212 ], [ 5.394864312135764, 51.434090094544715 ], [ 5.400637023293904, 51.432956769209127 ], [ 5.404872149741574, 51.437204180052582 ], [ 5.409104636905306, 51.434371468626054 ], [ 5.410644419520678, 51.434937564731648 ], [ 5.41218189655335, 51.431255658974997 ], [ 5.414490290129665, 51.430122343123742 ], [ 5.419880040414985, 51.432952938492768 ], [ 5.42526642153685, 51.430968905684793 ], [ 5.426804560152481, 51.429552397068086 ], [ 5.427950666235847, 51.420206434772417 ], [ 5.427563144539111, 51.417091380278329 ], [ 5.429480713289438, 51.410577117567165 ], [ 5.429861129839483, 51.406045790520174 ], [ 5.425244345100305, 51.404631398280905 ], [ 5.427165707463425, 51.402648357616712 ], [ 5.431780684219412, 51.402363478595213 ], [ 5.435627912180752, 51.403494736110559 ], [ 5.436014044252405, 51.40491057117773 ], [ 5.453322514227706, 51.405185215473843 ], [ 5.472938425012479, 51.405172413984879 ], [ 5.481014393761286, 51.404599785670371 ], [ 5.487553568421307, 51.404877531217089 ], [ 5.49793700866429, 51.404301718573954 ], [ 5.501395730228991, 51.403165579442849 ], [ 5.504849159496127, 51.400046945759328 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0225\", \"naam\": \"Druten\", \"code\": \"0225\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.60966516455612, 51.83629805082866 ], [ 5.62327790865884, 51.840519280241097 ], [ 5.643108753681305, 51.84500872200249 ], [ 5.635743727198215, 51.847573258936571 ], [ 5.637692011877267, 51.848701871387966 ], [ 5.634597221655248, 51.850973950105278 ], [ 5.640063819373917, 51.856059695357168 ], [ 5.63853841987541, 51.861160369254172 ], [ 5.639320207548141, 51.862008257891944 ], [ 5.636613125900984, 51.864279551103117 ], [ 5.636241833391619, 51.867395412194575 ], [ 5.638961801798118, 51.86738960846855 ], [ 5.667706871773807, 51.865908479086187 ], [ 5.670842084113283, 51.870148773664859 ], [ 5.675928292414767, 51.875516954186736 ], [ 5.678287605210366, 51.879758953124281 ], [ 5.685000074682171, 51.895600650497947 ], [ 5.672556366223495, 51.895348364387388 ], [ 5.662839645194614, 51.895937952824724 ], [ 5.644967226959445, 51.898244049895936 ], [ 5.628253455715774, 51.899412303198289 ], [ 5.605310268795337, 51.899173981032753 ], [ 5.595200365109728, 51.89919232860229 ], [ 5.57343572282486, 51.901777554590048 ], [ 5.565269546710159, 51.901790226184268 ], [ 5.553988231640182, 51.900674052023888 ], [ 5.544260882019482, 51.898988352802085 ], [ 5.531415458922984, 51.894757042853058 ], [ 5.531015773478895, 51.89135929358622 ], [ 5.539570763827093, 51.891914870389584 ], [ 5.541117154558461, 51.889364171173717 ], [ 5.54538851335372, 51.88794255651888 ], [ 5.551219705866597, 51.887934551084349 ], [ 5.574563341936322, 51.892430596923688 ], [ 5.576896049056348, 51.892426850064204 ], [ 5.571418235034054, 51.88393996308772 ], [ 5.569478124361995, 51.884792554131522 ], [ 5.566364988061436, 51.883947786643532 ], [ 5.567132206989648, 51.881397927573765 ], [ 5.569456304661285, 51.879412029594931 ], [ 5.568278879942534, 51.876581978126474 ], [ 5.560111828733231, 51.875178360171475 ], [ 5.559705805454211, 51.870647956932714 ], [ 5.553875805177374, 51.870373196599303 ], [ 5.554253876819046, 51.867540782234258 ], [ 5.553069362202606, 51.862445082596004 ], [ 5.571335864291438, 51.863833772998426 ], [ 5.577167515279114, 51.86467403922331 ], [ 5.577926589208655, 51.860424986934582 ], [ 5.578697576515528, 51.859007790190418 ], [ 5.584904794283312, 51.857015175970041 ], [ 5.581388926763602, 51.852490034828463 ], [ 5.58099194797541, 51.850508372071026 ], [ 5.584068347980505, 51.843423533062015 ], [ 5.584826415268081, 51.839174425445165 ], [ 5.598419096896992, 51.839433922942696 ], [ 5.598411123163435, 51.837734803011415 ], [ 5.60966516455612, 51.83629805082866 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1783\", \"naam\": \"Westland\", \"code\": \"1783\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.309972062469418, 52.015651308282912 ], [ 4.307571877201753, 52.018178146334066 ], [ 4.302545335585466, 52.016432717592423 ], [ 4.300951799311649, 52.017834039889379 ], [ 4.295563344107893, 52.014952155953658 ], [ 4.289647136219392, 52.01772917815822 ], [ 4.294283485720911, 52.019471537691871 ], [ 4.286786322145018, 52.023083341635136 ], [ 4.288331878630191, 52.023664185890787 ], [ 4.285164197396303, 52.025617001044893 ], [ 4.285122405803523, 52.027315831613421 ], [ 4.281606340278181, 52.027566068731815 ], [ 4.277971049476933, 52.032629541878748 ], [ 4.276049429541549, 52.031478607459377 ], [ 4.272817258109487, 52.035979320708037 ], [ 4.256241574320677, 52.028174751490404 ], [ 4.255064712257666, 52.028446645098093 ], [ 4.248125639271654, 52.025264455608934 ], [ 4.243728604849947, 52.029469908931119 ], [ 4.234895626637977, 52.039295977116808 ], [ 4.228382919734911, 52.034700774298429 ], [ 4.219826046767186, 52.033766628029127 ], [ 4.212108836825037, 52.030574588366143 ], [ 4.209687454529289, 52.033665668471095 ], [ 4.212409643799009, 52.033976068080499 ], [ 4.202308906320012, 52.047185560030925 ], [ 4.198723193122555, 52.049981491395542 ], [ 4.199870922453812, 52.050842687001825 ], [ 4.196232030219939, 52.055620451649197 ], [ 4.185148613059536, 52.061455193927884 ], [ 4.143819354035745, 52.031855647003752 ], [ 4.122885257590529, 52.013507198588535 ], [ 4.119847255230801, 52.010642409869114 ], [ 4.110281396712539, 52.004308345244112 ], [ 4.118464646733226, 52.004396853868329 ], [ 4.132659560926085, 51.998601594329102 ], [ 4.131140698933877, 51.997169333426967 ], [ 4.136340023320296, 51.992410123532046 ], [ 4.150887147228785, 51.98774928862661 ], [ 4.149796649503803, 51.984905712476603 ], [ 4.1471639873982, 51.981479455573535 ], [ 4.155397591250219, 51.979583478398602 ], [ 4.155054783723126, 51.977880620764054 ], [ 4.169572206163519, 51.974066835286216 ], [ 4.187682516950319, 51.966889446962789 ], [ 4.188506618250009, 51.965198587338953 ], [ 4.186628051337203, 51.962630532454682 ], [ 4.192289669256703, 51.954758301478279 ], [ 4.217938150823804, 51.941705274363756 ], [ 4.219502101506334, 51.941437607980873 ], [ 4.228284399562496, 51.94803831966761 ], [ 4.231918358646576, 51.942976316158486 ], [ 4.23617734748994, 51.943867715270336 ], [ 4.240487118277912, 51.942776992254906 ], [ 4.240458197885009, 51.943909545598281 ], [ 4.234482582884171, 51.949232082528873 ], [ 4.233991556569413, 51.953192191393711 ], [ 4.253707494351183, 51.958764837741704 ], [ 4.259539872867361, 51.959104114831291 ], [ 4.263411634925807, 51.959990797839069 ], [ 4.276529130056633, 51.964929923428286 ], [ 4.271340803597481, 51.96997853303936 ], [ 4.273196413919387, 51.973677804624209 ], [ 4.278342984070346, 51.970327958112833 ], [ 4.280262055334441, 51.97147885808063 ], [ 4.282250950560517, 51.969798321729954 ], [ 4.284976736067781, 51.969823895924272 ], [ 4.289211623252092, 51.971845943786818 ], [ 4.287619266046976, 51.973247097951301 ], [ 4.296083419982267, 51.977573993215628 ], [ 4.298420221042546, 51.977595644171771 ], [ 4.303039091093038, 51.979903941227455 ], [ 4.301836376155219, 51.981308875423721 ], [ 4.296369617493566, 51.98182472376282 ], [ 4.29554926704465, 51.98351634456597 ], [ 4.29205743227618, 51.982917482335679 ], [ 4.289999055846209, 51.987429585819058 ], [ 4.287620097201692, 51.989106607530495 ], [ 4.284197570176285, 51.985676109376691 ], [ 4.280232335940227, 51.98847092291205 ], [ 4.280183413433466, 51.99045290015804 ], [ 4.273908020608824, 51.992092924276925 ], [ 4.267646309045081, 51.993166335021293 ], [ 4.265237873567491, 51.995975452741362 ], [ 4.279896767232096, 52.00206161191786 ], [ 4.300713012054966, 52.011601359471655 ], [ 4.309972062469418, 52.015651308282912 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1658\", \"naam\": \"Heeze-Leende\", \"code\": \"1658\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.654566327463924, 51.353920964202985 ], [ 5.639008219343548, 51.389072568383398 ], [ 5.63905670648686, 51.397851682738185 ], [ 5.637952867485345, 51.406916478576463 ], [ 5.637984032008455, 51.412580418448798 ], [ 5.639192898532716, 51.422489818723278 ], [ 5.60531689478064, 51.419159741387851 ], [ 5.594150375693752, 51.417197707937227 ], [ 5.56910927742148, 51.408743499336701 ], [ 5.566026484076932, 51.407332273165309 ], [ 5.566789072474209, 51.405631901042959 ], [ 5.561401027749825, 51.404790483403026 ], [ 5.560637174555436, 51.406207622256872 ], [ 5.557556932075533, 51.405362568210592 ], [ 5.543707465578092, 51.40453240065586 ], [ 5.536395059238105, 51.403125998445887 ], [ 5.536015076369003, 51.404542483056893 ], [ 5.525631205410153, 51.404838487885897 ], [ 5.507553204546029, 51.404575375260599 ], [ 5.505242547544387, 51.403444942510973 ], [ 5.504849159496127, 51.400046945759328 ], [ 5.511346154304886, 51.385030612844346 ], [ 5.516324819930254, 51.378228398379832 ], [ 5.52705321671797, 51.36688799852962 ], [ 5.496283246479342, 51.356159301512932 ], [ 5.493975981881643, 51.355311841365513 ], [ 5.494355529680412, 51.353329090646447 ], [ 5.496657264122643, 51.351910946305949 ], [ 5.495876090551081, 51.346530872524532 ], [ 5.487031765067081, 51.342290794497941 ], [ 5.482035572258825, 51.34087897426334 ], [ 5.478190210515415, 51.338616443724369 ], [ 5.473572847157365, 51.334088758832394 ], [ 5.476254956580378, 51.330971529963776 ], [ 5.477016268793311, 51.327572537996353 ], [ 5.48084960003284, 51.324454306880213 ], [ 5.482762808343288, 51.321337543076609 ], [ 5.489282481647106, 51.318216793643913 ], [ 5.491193564324837, 51.314533490320244 ], [ 5.490800062827477, 51.310285829851203 ], [ 5.488871468467329, 51.306039520164397 ], [ 5.485793187198787, 51.302360560722029 ], [ 5.485020813074946, 51.300095606159736 ], [ 5.487706381938574, 51.299810113849766 ], [ 5.515706589987518, 51.295251315873699 ], [ 5.53339033422188, 51.305708867346731 ], [ 5.566071051701965, 51.32067286005433 ], [ 5.581830794836847, 51.325178782417197 ], [ 5.605284225690513, 51.33193402127803 ], [ 5.619092660650816, 51.328792112767282 ], [ 5.621024160259021, 51.331053859170282 ], [ 5.631373974818835, 51.327634188551798 ], [ 5.634843525803522, 51.330175671281729 ], [ 5.633313661854488, 51.331311722222651 ], [ 5.634476397567925, 51.333291667969981 ], [ 5.638692797935636, 51.331866626591818 ], [ 5.641393446720941, 51.334126372057149 ], [ 5.644078434719475, 51.333554074509699 ], [ 5.642946988733725, 51.337238185441002 ], [ 5.636805267173429, 51.337817920071338 ], [ 5.63682229434851, 51.340933098801962 ], [ 5.64027118589205, 51.339509645053994 ], [ 5.639927864782954, 51.346873626365543 ], [ 5.64262470984487, 51.348283747413916 ], [ 5.648782366131488, 51.350252484768021 ], [ 5.647639578623684, 51.351954254643836 ], [ 5.654566327463924, 51.353920964202985 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1774\", \"naam\": \"Dinkelland\", \"code\": \"1774\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.912192961671898, 52.285419551983559 ], [ 6.894424819501155, 52.293577420195476 ], [ 6.889288191907688, 52.292509972911333 ], [ 6.879942621521976, 52.294610851549116 ], [ 6.872193390258118, 52.297540565028832 ], [ 6.865506827632579, 52.297057967165841 ], [ 6.859670503880413, 52.298546863547053 ], [ 6.861502463036833, 52.306453865131502 ], [ 6.865042563632279, 52.306692869617983 ], [ 6.867060653849593, 52.308366874296965 ], [ 6.867126683436508, 52.310348506785644 ], [ 6.871910370730118, 52.312554194252179 ], [ 6.877393772592327, 52.312201994815105 ], [ 6.879976233353388, 52.318966426611389 ], [ 6.884273606265833, 52.318345674358959 ], [ 6.88636942134713, 52.322284043755609 ], [ 6.88792958993863, 52.321981043356146 ], [ 6.894323804079903, 52.325298224636796 ], [ 6.898354402431578, 52.328362085601476 ], [ 6.900490554450888, 52.33343253328286 ], [ 6.907134484479077, 52.332497702200527 ], [ 6.913739185774039, 52.330430161931929 ], [ 6.918458975813486, 52.330652351449785 ], [ 6.930989508807269, 52.329639801490792 ], [ 6.931882861979516, 52.332743456092615 ], [ 6.937388024174033, 52.33295463227639 ], [ 6.945238431082736, 52.332851466686002 ], [ 6.953521274530898, 52.33387490139831 ], [ 6.951305783631058, 52.33786918941847 ], [ 6.952965929090995, 52.34039612834605 ], [ 6.958642563343683, 52.345418656482359 ], [ 6.961451227542893, 52.34708058026726 ], [ 6.970149944250843, 52.348663765013626 ], [ 6.962819667663967, 52.363488624531421 ], [ 6.970869028066245, 52.379807398107424 ], [ 6.985534915788946, 52.37224673558579 ], [ 7.008020581999894, 52.363727693416358 ], [ 7.011183575516658, 52.364250749324128 ], [ 7.031744830310966, 52.367648543074829 ], [ 7.039632733106981, 52.368388295350307 ], [ 7.072026386079137, 52.37274617126409 ], [ 7.072058662292138, 52.373595363270475 ], [ 7.06404751789339, 52.390418909671112 ], [ 7.059141332581733, 52.39586940114247 ], [ 7.05887645624714, 52.399271721582679 ], [ 7.0554026093128, 52.401020011847699 ], [ 7.051822099860248, 52.399937553522967 ], [ 7.041696708621679, 52.402628417281285 ], [ 7.03619298659065, 52.402705203380449 ], [ 7.034662607747245, 52.403859361725438 ], [ 7.021996088471859, 52.423010128367835 ], [ 7.010808207933427, 52.42911145360609 ], [ 7.005104290989877, 52.445332437863172 ], [ 6.999935757994891, 52.45474878102204 ], [ 6.99469299672506, 52.462183415918098 ], [ 6.994029131251956, 52.465590904123722 ], [ 6.987479852362905, 52.469644411582571 ], [ 6.977494081613634, 52.465813940100496 ], [ 6.974514622601424, 52.459623352516779 ], [ 6.970416055154771, 52.455146885644886 ], [ 6.967075107257207, 52.449810561976427 ], [ 6.960960283770728, 52.443944613457084 ], [ 6.94732159619929, 52.436761656830384 ], [ 6.949148897043027, 52.432772691019522 ], [ 6.938910420529298, 52.432624053626313 ], [ 6.928337750468764, 52.434178110402009 ], [ 6.92440354482148, 52.434229231386659 ], [ 6.897199283051596, 52.432879926442936 ], [ 6.872300049625825, 52.429796299125151 ], [ 6.853323463425086, 52.427200702327333 ], [ 6.851328595476923, 52.414481319641922 ], [ 6.856702639684223, 52.41044992218405 ], [ 6.862516042370498, 52.407828808981641 ], [ 6.863428304118554, 52.387993206130076 ], [ 6.863312107966356, 52.372701622180031 ], [ 6.863403344835159, 52.363637923831661 ], [ 6.85582754512119, 52.360333740453527 ], [ 6.851955886276586, 52.362080964451323 ], [ 6.835467796426522, 52.362567139766092 ], [ 6.81786484321282, 52.365046919286186 ], [ 6.806775138086381, 52.362348464973891 ], [ 6.783519525101956, 52.360076387918134 ], [ 6.778495277023453, 52.350223536404499 ], [ 6.77406054945783, 52.346593994072272 ], [ 6.762567899765246, 52.343329768671261 ], [ 6.760560895261345, 52.341937084120701 ], [ 6.759688076344364, 52.339115205574188 ], [ 6.759076676938689, 52.332042268618302 ], [ 6.762181902920936, 52.330873399826295 ], [ 6.76325416755286, 52.327462506656801 ], [ 6.773978748119883, 52.318841143584578 ], [ 6.779053577327636, 52.317931903298465 ], [ 6.785733471885042, 52.318136282887231 ], [ 6.785314317763176, 52.317291629409112 ], [ 6.796238730890735, 52.315179513797389 ], [ 6.802106448975601, 52.314543028543653 ], [ 6.802079389353709, 52.313693738475216 ], [ 6.80794682485865, 52.313056964243287 ], [ 6.809434684435637, 52.310490228475942 ], [ 6.812199238396823, 52.311023348306861 ], [ 6.823503980262172, 52.308620896160946 ], [ 6.825784561597915, 52.306327515539152 ], [ 6.819325162473206, 52.300741823993533 ], [ 6.820428859256859, 52.298462795370121 ], [ 6.831273342351941, 52.294082693378066 ], [ 6.843384906606838, 52.292518049816543 ], [ 6.846475843482026, 52.291063884453209 ], [ 6.852545099179796, 52.28475819508995 ], [ 6.850173811421453, 52.284221157992903 ], [ 6.852059688948048, 52.281932123413505 ], [ 6.845712029741812, 52.279744972165751 ], [ 6.847635150728374, 52.27858838299187 ], [ 6.840504113308867, 52.276410636778692 ], [ 6.868234707152545, 52.272950984365707 ], [ 6.876533105110259, 52.274829145702206 ], [ 6.880605423220477, 52.279309117643926 ], [ 6.879887852851551, 52.281300659522401 ], [ 6.883091128933238, 52.283242626795143 ], [ 6.887805764949337, 52.283466061059826 ], [ 6.890120024886228, 52.282303805350267 ], [ 6.907095582613525, 52.285485223114875 ], [ 6.912192961671898, 52.285419551983559 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0687\", \"naam\": \"Middelburg\", \"code\": \"0687\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 3.703786924212343, 51.48227574978182 ], [ 3.699904010215248, 51.483069435198438 ], [ 3.70018420201944, 51.485905987062097 ], [ 3.699172287486687, 51.492406111943701 ], [ 3.70535484346846, 51.502409082808818 ], [ 3.705698288308791, 51.503547027471384 ], [ 3.710717935425303, 51.503335959620841 ], [ 3.710978041527508, 51.506738683711532 ], [ 3.745080465183968, 51.51260494364552 ], [ 3.746854285161851, 51.516878574854438 ], [ 3.741396602427644, 51.518501272111124 ], [ 3.739022283566804, 51.520167271536828 ], [ 3.713581326970056, 51.530285669447913 ], [ 3.712007814502434, 51.531112859469815 ], [ 3.709434340606969, 51.527676939301898 ], [ 3.704944239302436, 51.523930118766145 ], [ 3.700370830649919, 51.522447909917922 ], [ 3.697598789741997, 51.524390588370089 ], [ 3.695407845752524, 51.531440114992236 ], [ 3.696427581155087, 51.535137123040855 ], [ 3.681004087127752, 51.534912868323289 ], [ 3.658836239254143, 51.519291374691072 ], [ 3.656415755146267, 51.522088050791758 ], [ 3.651833328709901, 51.520887041887022 ], [ 3.64146940173911, 51.519599571948568 ], [ 3.634487678971693, 51.520628015011134 ], [ 3.63389474380773, 51.526000934485054 ], [ 3.621944242487009, 51.52582092846724 ], [ 3.616954828181634, 51.525178903151286 ], [ 3.613098618522308, 51.535034312554934 ], [ 3.603492621648333, 51.534038260062438 ], [ 3.602688137010725, 51.534875739230671 ], [ 3.593149478319976, 51.532180325209147 ], [ 3.589690755611748, 51.531843894973278 ], [ 3.590540196328533, 51.529874169279815 ], [ 3.593669111379425, 51.528789231363845 ], [ 3.596624291526056, 51.522319682733865 ], [ 3.583619670665175, 51.519570263785589 ], [ 3.584117401895902, 51.516745379302485 ], [ 3.582190328781609, 51.516715609324983 ], [ 3.583084739780069, 51.513613601797076 ], [ 3.578890516288479, 51.512415697401316 ], [ 3.583286922881356, 51.508518095480845 ], [ 3.575262387288162, 51.506694300893123 ], [ 3.578038528362079, 51.504754545157603 ], [ 3.578128622287958, 51.502489879570099 ], [ 3.581674937620603, 51.500561972300865 ], [ 3.585003944479404, 51.494381745409427 ], [ 3.585138521121715, 51.490984733727167 ], [ 3.57981325703977, 51.489202857236499 ], [ 3.583152889615974, 51.482739591606034 ], [ 3.584693397548806, 51.482763391984641 ], [ 3.587149742932576, 51.479118952081961 ], [ 3.589426775928535, 51.480003820417984 ], [ 3.59064914574529, 51.47832309852658 ], [ 3.596866294739216, 51.477002349206359 ], [ 3.599628575897634, 51.475345149510197 ], [ 3.60178350492829, 51.479343728666073 ], [ 3.604908666214475, 51.478258468082842 ], [ 3.60887021707528, 51.47548633553162 ], [ 3.617638797644238, 51.477885661928141 ], [ 3.621588563597093, 51.475396182679191 ], [ 3.629082230901832, 51.480891151308128 ], [ 3.634978931494165, 51.477864025776398 ], [ 3.646032379955812, 51.470948104358904 ], [ 3.651894293639128, 51.468769388630392 ], [ 3.656921085338985, 51.468277523284364 ], [ 3.662685625500831, 51.468646105673955 ], [ 3.666888766703865, 51.469557900352136 ], [ 3.675969866468562, 51.473940194378812 ], [ 3.681307774894966, 51.47543459769674 ], [ 3.695741041031864, 51.481026429774708 ], [ 3.703786924212343, 51.48227574978182 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0340\", \"naam\": \"Rhenen\", \"code\": \"0340\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.606161587193565, 51.994039403977141 ], [ 5.60460292846394, 51.994042296375305 ], [ 5.596443772119058, 51.999154394662725 ], [ 5.592167334560108, 52.001427389889137 ], [ 5.590616133805155, 52.003129180107535 ], [ 5.591025207607736, 52.007376210949303 ], [ 5.589475036958725, 52.009361164983602 ], [ 5.570323956634627, 51.996932516013622 ], [ 5.557879752727707, 52.003747623982235 ], [ 5.553184909451341, 51.99894024329614 ], [ 5.551239479687308, 51.999792521850175 ], [ 5.540351647945652, 52.006886770058351 ], [ 5.535291095960836, 52.008875528802804 ], [ 5.535684647635306, 52.010007760688779 ], [ 5.532179155901819, 52.010861682033401 ], [ 5.53374396659965, 52.012558833691649 ], [ 5.528678900554564, 52.013414583876425 ], [ 5.512709974750429, 52.018529988307925 ], [ 5.498238058479981, 51.999854544236541 ], [ 5.494328690288974, 51.994760890718858 ], [ 5.490825568845326, 51.996463127511525 ], [ 5.485358144399228, 51.991087355604272 ], [ 5.48457147165661, 51.987689818276444 ], [ 5.479904931287717, 51.991941333929475 ], [ 5.480677723106335, 51.988825712625911 ], [ 5.477948078036942, 51.98769512269957 ], [ 5.477549893784484, 51.983447687622906 ], [ 5.486121157948334, 51.983723963736502 ], [ 5.500912132927082, 51.978613281084499 ], [ 5.512583041600331, 51.97322092072892 ], [ 5.519199286886239, 51.971514571730594 ], [ 5.53593711184048, 51.968662736791288 ], [ 5.5413825296364, 51.966673430138108 ], [ 5.545650224177252, 51.962136808414826 ], [ 5.551087174165084, 51.958164771309754 ], [ 5.555751972830199, 51.956175880953033 ], [ 5.561196095700114, 51.954468837396973 ], [ 5.575593863754476, 51.952747524130992 ], [ 5.586485642207725, 51.95074726074575 ], [ 5.591153249735438, 51.94988969615595 ], [ 5.605912812675376, 51.943066704911722 ], [ 5.616453637596884, 51.949276683392007 ], [ 5.620340509513893, 51.948136294637301 ], [ 5.619968873364607, 51.951535252701774 ], [ 5.627370030665197, 51.952369913431234 ], [ 5.627383675522601, 51.954918550700484 ], [ 5.625074757719204, 51.960020574530802 ], [ 5.619660285293549, 51.967111023397322 ], [ 5.624740881392195, 51.970499077518284 ], [ 5.625928861041936, 51.974178065986351 ], [ 5.620102665852079, 51.977304779175356 ], [ 5.615066267423887, 51.982695143273553 ], [ 5.613936248667371, 51.990343284747951 ], [ 5.610056824507374, 51.993748902079645 ], [ 5.606161587193565, 51.994039403977141 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0888\", \"naam\": \"Beek\", \"code\": \"0888\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.801571682275243, 50.914239872231157 ], [ 5.819094500095081, 50.916158226288651 ], [ 5.819469748755069, 50.915590413968545 ], [ 5.831663325873077, 50.917243449878775 ], [ 5.831304535253008, 50.919510473102804 ], [ 5.833974005462377, 50.920066608147764 ], [ 5.841579943713771, 50.919470579089122 ], [ 5.847736770211797, 50.926243181927099 ], [ 5.851960668701582, 50.929907974199381 ], [ 5.855449690261956, 50.93612444539739 ], [ 5.857053142626334, 50.944047721108589 ], [ 5.85327113336916, 50.946611866257207 ], [ 5.849443363792375, 50.944644771838483 ], [ 5.846405589523113, 50.945506480915938 ], [ 5.839976658552287, 50.950063101415914 ], [ 5.837655823023082, 50.946390478600151 ], [ 5.830815157511532, 50.947832925387594 ], [ 5.811842595925619, 50.955267422229916 ], [ 5.802249669186934, 50.947372461468426 ], [ 5.793531081849068, 50.95193467833495 ], [ 5.788169823148535, 50.948554910691826 ], [ 5.783961430474231, 50.946303771142162 ], [ 5.77976548010164, 50.945468462573693 ], [ 5.77899189731356, 50.944055058567592 ], [ 5.783551479298232, 50.942906714729546 ], [ 5.780100503871007, 50.940086430510469 ], [ 5.776985279341602, 50.931884020305574 ], [ 5.770861560727375, 50.92793961644756 ], [ 5.775415000062385, 50.926225200679866 ], [ 5.771171623424936, 50.919442443529334 ], [ 5.76618702878224, 50.914927602495283 ], [ 5.758893097409804, 50.907021537162294 ], [ 5.754656159478575, 50.900521369863746 ], [ 5.758064023990136, 50.898528061980819 ], [ 5.773762225913277, 50.910654468200327 ], [ 5.786709013602536, 50.911743303588786 ], [ 5.787094420781874, 50.912308382033302 ], [ 5.801571682275243, 50.914239872231157 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0899\", \"naam\": \"Brunssum\", \"code\": \"0899\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.011794958229601, 50.926323655237212 ], [ 6.016043392653004, 50.930831998137009 ], [ 6.018381462005001, 50.934784202813887 ], [ 6.015132273448251, 50.947829505858302 ], [ 6.016721053987175, 50.95263543764127 ], [ 6.005349055919536, 50.956661641190827 ], [ 6.006122177083586, 50.957507138681763 ], [ 5.998889289692409, 50.957828784717123 ], [ 5.980262567976091, 50.960757777134205 ], [ 5.974901083478039, 50.958519445674646 ], [ 5.969219917539913, 50.961097018282771 ], [ 5.969618682165186, 50.962511055337139 ], [ 5.965809494075176, 50.962530152345863 ], [ 5.96271626006736, 50.958863860176685 ], [ 5.958498454907085, 50.956619082605684 ], [ 5.952733378471132, 50.952399264726139 ], [ 5.935518399045971, 50.945968299852943 ], [ 5.931276412508125, 50.94145699329502 ], [ 5.934288858192982, 50.938610718485393 ], [ 5.928554777996581, 50.936655225938246 ], [ 5.930047669301895, 50.934099366144899 ], [ 5.938735861324629, 50.92839413736192 ], [ 5.941763985726287, 50.926963628232173 ], [ 5.945206722240426, 50.928363118895419 ], [ 5.946365766770619, 50.929773563900689 ], [ 5.954788746742451, 50.933697474673494 ], [ 5.961267370647968, 50.934231939190227 ], [ 5.971125838007556, 50.931067331258809 ], [ 5.975668510434822, 50.929061864278168 ], [ 6.011794958229601, 50.926323655237212 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0627\", \"naam\": \"Waddinxveen\", \"code\": \"0627\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.666751239065298, 52.012994869443247 ], [ 4.674094504886621, 52.017004254631097 ], [ 4.681855704991915, 52.019316535336479 ], [ 4.680269452970824, 52.021006164423177 ], [ 4.670490830566829, 52.022929377878505 ], [ 4.667335291659211, 52.025175652436538 ], [ 4.678987939379974, 52.028078222368585 ], [ 4.680547695205536, 52.028087593472961 ], [ 4.686751309649978, 52.03039018044101 ], [ 4.706102969048374, 52.040132137041319 ], [ 4.687332156797779, 52.043137168339719 ], [ 4.686933230646163, 52.043701175832304 ], [ 4.677176869311067, 52.043925952521924 ], [ 4.679777682678067, 52.052154094421169 ], [ 4.668848996280406, 52.05237114225605 ], [ 4.669579368977505, 52.055490677296802 ], [ 4.666811677326383, 52.057739298685554 ], [ 4.664080303549441, 52.057722563900128 ], [ 4.660072551600122, 52.064211248707437 ], [ 4.653833159609168, 52.063889385322277 ], [ 4.638204278064761, 52.064923819452098 ], [ 4.636886336226581, 52.073694310825772 ], [ 4.625161886920364, 52.074468637626488 ], [ 4.625128125291758, 52.076450746880035 ], [ 4.606766600506518, 52.077180136108922 ], [ 4.607359326979473, 52.065573255920576 ], [ 4.608574447192487, 52.06303257724413 ], [ 4.607512254228669, 52.056795353405981 ], [ 4.605670093930479, 52.050552939957583 ], [ 4.610776153038497, 52.048604370563744 ], [ 4.609645153542235, 52.0463313788688 ], [ 4.607324324045348, 52.045183268238127 ], [ 4.591117082390769, 52.035163106058768 ], [ 4.62461866869649, 52.014711818169935 ], [ 4.636755225186414, 52.011674699917002 ], [ 4.648327679753407, 52.019110888154664 ], [ 4.648694206554551, 52.020529144955496 ], [ 4.655312771960593, 52.021136858039455 ], [ 4.66267465673828, 52.024014301947332 ], [ 4.665046017276893, 52.022046534837244 ], [ 4.667376233173344, 52.022627186211857 ], [ 4.667807037790078, 52.020081101902377 ], [ 4.664738306850696, 52.016947209336458 ], [ 4.664779386251154, 52.014398741141399 ], [ 4.666751239065298, 52.012994869443247 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0770\", \"naam\": \"Eersel\", \"code\": \"0770\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.389088675637642, 51.376600890040962 ], [ 5.374094281929405, 51.388494573646064 ], [ 5.370246093934445, 51.397556465707062 ], [ 5.371015117870305, 51.397839773319689 ], [ 5.354470978859919, 51.408881099057027 ], [ 5.33523973282932, 51.407458145817124 ], [ 5.331779299811426, 51.406323760093237 ], [ 5.323701955446419, 51.406319652397706 ], [ 5.317150135518272, 51.41481188747165 ], [ 5.315988954278192, 51.41934237237372 ], [ 5.319835571803162, 51.419911050554404 ], [ 5.319444943677602, 51.423875611803766 ], [ 5.339836715160705, 51.425584840834034 ], [ 5.343297995437607, 51.427568582809158 ], [ 5.342525047159778, 51.430966677158992 ], [ 5.345603795124284, 51.430967811401572 ], [ 5.345605339764751, 51.429268618684141 ], [ 5.355992448764288, 51.434086226009711 ], [ 5.356759366198078, 51.438334408945515 ], [ 5.357528077325767, 51.440033798150054 ], [ 5.360990253860501, 51.443716205013757 ], [ 5.360987177234002, 51.449096977174882 ], [ 5.356749200801244, 51.453627129768144 ], [ 5.361367545839112, 51.457309816446141 ], [ 5.36329139989992, 51.46014220723761 ], [ 5.367142671985698, 51.459293332400449 ], [ 5.369450872790871, 51.465240866824757 ], [ 5.358280936890369, 51.46693783832449 ], [ 5.355973143117432, 51.462406075031694 ], [ 5.333629505505939, 51.468628350111679 ], [ 5.334788240815945, 51.46579689235972 ], [ 5.332477753390435, 51.465512636827029 ], [ 5.334791490385408, 51.462964911034653 ], [ 5.331710579669783, 51.46296349107206 ], [ 5.330168709655179, 51.464095543113224 ], [ 5.325932732613847, 51.463810203764396 ], [ 5.3205451750639, 51.460975275052398 ], [ 5.318618839400841, 51.461540558304272 ], [ 5.303218944754838, 51.459264926014072 ], [ 5.298221711421311, 51.454730053474485 ], [ 5.297454965511961, 51.453030275927787 ], [ 5.294370119563841, 51.455293455391661 ], [ 5.285131486952696, 51.454152958406389 ], [ 5.279365275550786, 51.450182998736004 ], [ 5.270898047401262, 51.449042082852145 ], [ 5.265123113777597, 51.449036191574706 ], [ 5.260505528014645, 51.448181678875386 ], [ 5.25896875974079, 51.447047206802729 ], [ 5.24857864327933, 51.445619344635624 ], [ 5.248971333869709, 51.443071019494305 ], [ 5.252450896156986, 51.437977503511 ], [ 5.238993135056893, 51.433713213824966 ], [ 5.23900233396957, 51.430881233395958 ], [ 5.237855224127197, 51.428614177850321 ], [ 5.243252569123965, 51.425505764101906 ], [ 5.244789103965867, 51.426357246060554 ], [ 5.249417008944436, 51.422964406953476 ], [ 5.248648318406442, 51.422680298062772 ], [ 5.27292233271127, 51.409396206579622 ], [ 5.278694938492592, 51.408268915299658 ], [ 5.281781300679801, 51.404306949845385 ], [ 5.283318485175768, 51.404874726323079 ], [ 5.290627518653976, 51.404314600039889 ], [ 5.296005392201285, 51.407717315617163 ], [ 5.302929561195029, 51.407439316368944 ], [ 5.307162637125205, 51.406309495517213 ], [ 5.313712363028247, 51.399517012710774 ], [ 5.310256881123952, 51.396116394385231 ], [ 5.311034943266207, 51.39073611260244 ], [ 5.302575857496967, 51.390730290600636 ], [ 5.298733011562855, 51.389594644390549 ], [ 5.289121872759239, 51.389020568210178 ], [ 5.290281345452859, 51.386189539215145 ], [ 5.286055985458756, 51.384486756736834 ], [ 5.279926037159496, 51.375418889108317 ], [ 5.275344721017684, 51.362670586267058 ], [ 5.286162380812406, 51.336342826486728 ], [ 5.263549587445499, 51.319329007330516 ], [ 5.292344669903573, 51.318223180442878 ], [ 5.308077966791505, 51.321916519660313 ], [ 5.316522134773682, 51.323337941769715 ], [ 5.323041532868158, 51.32872251624363 ], [ 5.32112039630509, 51.329571046122936 ], [ 5.324187639047782, 51.332971146785361 ], [ 5.332251678328671, 51.333258419475747 ], [ 5.347224778109025, 51.337512504887648 ], [ 5.341841268648722, 51.344307346605859 ], [ 5.346831752115557, 51.347707578080424 ], [ 5.342601232518411, 51.352803643554751 ], [ 5.346054322340096, 51.357902510348232 ], [ 5.352583202771608, 51.361869423592395 ], [ 5.355656902474913, 51.362436691789831 ], [ 5.364108477353708, 51.366969859702337 ], [ 5.371409382324035, 51.369519866092432 ], [ 5.375637175379504, 51.368670756888704 ], [ 5.378327242066725, 51.369520588474025 ], [ 5.382554489454196, 51.372919225264717 ], [ 5.388319873489546, 51.375468102155175 ], [ 5.389088675637642, 51.376600890040962 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0158\", \"naam\": \"Haaksbergen\", \"code\": \"0158\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.760727826055754, 52.118768232945001 ], [ 6.822851200724897, 52.118311105976389 ], [ 6.84320182671643, 52.119194325532206 ], [ 6.855358636231612, 52.120459605918249 ], [ 6.866941143054262, 52.127961636713181 ], [ 6.873268170788701, 52.130147784730504 ], [ 6.872933947132061, 52.131851303480573 ], [ 6.881955119604968, 52.156093971592327 ], [ 6.880391226464178, 52.156113783431891 ], [ 6.88955518862607, 52.161095307623434 ], [ 6.870051327783022, 52.162758221653291 ], [ 6.828066090722163, 52.170925374208068 ], [ 6.814368096417281, 52.17080868697964 ], [ 6.805628550733781, 52.166665918695692 ], [ 6.788323516168672, 52.176218719690752 ], [ 6.766873811537949, 52.191198418790904 ], [ 6.738914860580608, 52.198602199046441 ], [ 6.712520731997215, 52.206264916715703 ], [ 6.703283494178244, 52.198438531408058 ], [ 6.697346360126835, 52.196238951552871 ], [ 6.671957385968041, 52.198217317274164 ], [ 6.653034766902191, 52.193607350143481 ], [ 6.624325795082745, 52.188814183856884 ], [ 6.629740764564905, 52.186491665750466 ], [ 6.634420191618215, 52.185875888859357 ], [ 6.639004083375857, 52.181862501350835 ], [ 6.642908417619251, 52.181537807654955 ], [ 6.647475095160617, 52.176957854643767 ], [ 6.645048101861362, 52.174151718670466 ], [ 6.664435850998499, 52.167996095056118 ], [ 6.665185613642323, 52.166855153504834 ], [ 6.671410539061152, 52.165654722049823 ], [ 6.673300655986601, 52.163368482411087 ], [ 6.672852470254396, 52.161390928224186 ], [ 6.674334969895145, 52.158542699156897 ], [ 6.670734308953645, 52.155749881511646 ], [ 6.673446809816593, 52.154870710028121 ], [ 6.673756162242444, 52.152035273205861 ], [ 6.671361479605442, 52.150362137273376 ], [ 6.673650050725847, 52.148354747808298 ], [ 6.674268608921804, 52.142683865226815 ], [ 6.672607230721884, 52.139303507690542 ], [ 6.669024498530969, 52.13707685964382 ], [ 6.662568911882248, 52.130066704469399 ], [ 6.677694497614807, 52.125937186763295 ], [ 6.697946202449166, 52.123448064530777 ], [ 6.702992088209118, 52.122259009500851 ], [ 6.716157934037078, 52.118146364168183 ], [ 6.760727826055754, 52.118768232945001 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0252\", \"naam\": \"Heumen\", \"code\": \"0252\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.790649037390472, 51.753406148236806 ], [ 5.799969098358144, 51.755356046204611 ], [ 5.818980293209479, 51.757269896875044 ], [ 5.852338241956103, 51.759407797185887 ], [ 5.864336787682951, 51.757660389348885 ], [ 5.86943023456536, 51.762737052741059 ], [ 5.867543190722285, 51.767559116046897 ], [ 5.867191642677974, 51.77095889386716 ], [ 5.868015388376998, 51.775486632719286 ], [ 5.869572513337814, 51.776046624641459 ], [ 5.879666939562592, 51.777137430313445 ], [ 5.887438252387639, 51.778520499527296 ], [ 5.893248780098864, 51.777929170647148 ], [ 5.887876338774453, 51.78304974624281 ], [ 5.887122649381607, 51.785035325420978 ], [ 5.887626769034733, 51.795511371140613 ], [ 5.88109696054678, 51.801486133079621 ], [ 5.879243565442685, 51.809423351966892 ], [ 5.86877202497939, 51.810033203405993 ], [ 5.857500414949631, 51.808379783753161 ], [ 5.84430093294664, 51.807865585859069 ], [ 5.840802810458686, 51.807312781780581 ], [ 5.839222238517801, 51.804486953208894 ], [ 5.837299117037577, 51.806193508819113 ], [ 5.825597522677136, 51.800007590196138 ], [ 5.827143914347678, 51.799435412359223 ], [ 5.810378552870431, 51.79071813173146 ], [ 5.801110525524581, 51.795282304613735 ], [ 5.797205366471733, 51.792464096813823 ], [ 5.780841160740926, 51.784307589912686 ], [ 5.775018586862133, 51.78376061126928 ], [ 5.769600800748628, 51.785194373393004 ], [ 5.768803523060023, 51.782648236584073 ], [ 5.740841741019841, 51.777921655520622 ], [ 5.736194794797318, 51.778785161311781 ], [ 5.733876697017216, 51.779924810149332 ], [ 5.732312451698665, 51.778230271645427 ], [ 5.729557034661397, 51.772857694742889 ], [ 5.735732587916356, 51.769157987215927 ], [ 5.73957437649566, 51.764615412514445 ], [ 5.745346848595386, 51.759217243386217 ], [ 5.7522967343119, 51.755797475175008 ], [ 5.759257238660632, 51.75379322565373 ], [ 5.765063903399683, 51.752925062632407 ], [ 5.775133612713359, 51.752042574486659 ], [ 5.780949626186469, 51.752306368016342 ], [ 5.790649037390472, 51.753406148236806 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0228\", \"naam\": \"Ede\", \"code\": \"0228\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.724282438370222, 52.000839740109853 ], [ 5.732856286018863, 52.000814855669404 ], [ 5.735985067249422, 52.002221540562957 ], [ 5.734067097095808, 52.006191790173027 ], [ 5.738759851929576, 52.008160146912921 ], [ 5.738006894330631, 52.011560602169645 ], [ 5.741150013845616, 52.014666209573782 ], [ 5.741163440959828, 52.016365271677408 ], [ 5.745089143751854, 52.019751599446074 ], [ 5.754068076987609, 52.021139862964233 ], [ 5.762645786410289, 52.021112804544707 ], [ 5.777469204559898, 52.021914122495559 ], [ 5.798136573862556, 52.022126942142286 ], [ 5.804367106391526, 52.021255464518333 ], [ 5.80242813175802, 52.022395060409913 ], [ 5.81336163610616, 52.024055076832276 ], [ 5.820846878414437, 52.031956893042086 ], [ 5.837764516489819, 52.04661891775104 ], [ 5.849910759021333, 52.051669111914535 ], [ 5.859667694339372, 52.051913542800513 ], [ 5.881878582773957, 52.04927364965377 ], [ 5.899444386226293, 52.050048081693539 ], [ 5.898035752207015, 52.063363874661839 ], [ 5.909730243070533, 52.062179822041543 ], [ 5.945050080933663, 52.077876141170144 ], [ 5.946221227039332, 52.077870588362245 ], [ 5.945834382742511, 52.078155608340268 ], [ 5.948336606415227, 52.090887006663536 ], [ 5.951574985395316, 52.099933420448792 ], [ 5.946099857427976, 52.099393152541737 ], [ 5.922285195427736, 52.100353264485186 ], [ 5.911736209812011, 52.100117518061737 ], [ 5.900061103266999, 52.10385029053225 ], [ 5.883293085151318, 52.10647072260133 ], [ 5.876348463165867, 52.114428843992719 ], [ 5.864745381537812, 52.125520495678437 ], [ 5.862500041708837, 52.13487452879793 ], [ 5.86141763902354, 52.143374290444534 ], [ 5.85951978783932, 52.148762323502645 ], [ 5.845863661475518, 52.151648030616364 ], [ 5.809885902888571, 52.151499315659073 ], [ 5.785248287159543, 52.151301887770863 ], [ 5.774697804614918, 52.152186568921842 ], [ 5.76214644267204, 52.147696304002324 ], [ 5.743385156993992, 52.148604012756572 ], [ 5.720296532217124, 52.1461229112194 ], [ 5.721407987104945, 52.137907608788467 ], [ 5.717496725286099, 52.137635455892131 ], [ 5.717097438090422, 52.136503862121003 ], [ 5.701844166551557, 52.135412856447957 ], [ 5.692476233106931, 52.137419737031479 ], [ 5.688563276406307, 52.13686345161878 ], [ 5.68581554857676, 52.135171379222697 ], [ 5.683842258306544, 52.132344584755764 ], [ 5.679146272801582, 52.131506777895865 ], [ 5.675639496373011, 52.133214479381735 ], [ 5.669003528316901, 52.134646421852914 ], [ 5.665864034581245, 52.132671643962823 ], [ 5.661168350751987, 52.131833120982748 ], [ 5.65687396674676, 52.132692558932355 ], [ 5.654523641615723, 52.131848381263794 ], [ 5.643180416792188, 52.130457679654427 ], [ 5.638100911618892, 52.130751781792867 ], [ 5.622448738040069, 52.127385940949289 ], [ 5.61541529524226, 52.127682951201265 ], [ 5.61071399047198, 52.12542654428978 ], [ 5.606803100816475, 52.124867543884157 ], [ 5.601725351072205, 52.125443253893394 ], [ 5.59741976503046, 52.124035128277747 ], [ 5.589212996743089, 52.124049486581562 ], [ 5.584122618061908, 52.121792686701582 ], [ 5.577474544603206, 52.12067090299184 ], [ 5.570837290149892, 52.122097323877107 ], [ 5.567701872576997, 52.119836751569139 ], [ 5.567696146870299, 52.11842087329164 ], [ 5.565366342389741, 52.122105725908753 ], [ 5.561847087022286, 52.121544641950578 ], [ 5.561060016902712, 52.120129919892442 ], [ 5.553610142295385, 52.113344422748675 ], [ 5.550870011129022, 52.111932374778739 ], [ 5.546570361807538, 52.111371916850686 ], [ 5.550455498964174, 52.105419861104643 ], [ 5.554341721892384, 52.10003402542921 ], [ 5.550422373020489, 52.096358206457751 ], [ 5.554324765719781, 52.095503196536725 ], [ 5.555873061791091, 52.091819667972203 ], [ 5.554700447370032, 52.091538163570128 ], [ 5.555071806315391, 52.086440417759718 ], [ 5.560921155059633, 52.084449678797554 ], [ 5.560520815317221, 52.081901657793445 ], [ 5.562848928663217, 52.078216877720656 ], [ 5.561268582349427, 52.073405176434584 ], [ 5.559308075079125, 52.071142623619622 ], [ 5.560859520548136, 52.068591728154836 ], [ 5.559653616519526, 52.059531745798068 ], [ 5.5576678893903, 52.050472871261974 ], [ 5.558051555187211, 52.048773231824931 ], [ 5.570922741594324, 52.04790429519101 ], [ 5.57012394396025, 52.043374647954195 ], [ 5.56738187517973, 52.040547070663287 ], [ 5.582967320600232, 52.036557632347289 ], [ 5.589977682816253, 52.034280307209627 ], [ 5.589573581011385, 52.031166007221721 ], [ 5.586843665076551, 52.031170671945112 ], [ 5.587603352571105, 52.026638474770188 ], [ 5.587185569177803, 52.020409185877291 ], [ 5.590304723598633, 52.020403840927969 ], [ 5.589503181130294, 52.01559112718536 ], [ 5.586774214082839, 52.015595789806071 ], [ 5.585978165576639, 52.011915769122538 ], [ 5.589475036958725, 52.009361164983602 ], [ 5.591025207607736, 52.007376210949303 ], [ 5.590616133805155, 52.003129180107535 ], [ 5.592167334560108, 52.001427389889137 ], [ 5.596443772119058, 51.999154394662725 ], [ 5.60460292846394, 51.994042296375305 ], [ 5.606161587193565, 51.994039403977141 ], [ 5.60695758367601, 51.997436116533613 ], [ 5.614373257246604, 51.99968748772384 ], [ 5.619402839300844, 51.992598082730858 ], [ 5.624871481574963, 51.995135805917371 ], [ 5.627587043652888, 51.992864818515251 ], [ 5.633056181024708, 51.99540216088468 ], [ 5.637323645988785, 51.991994958986616 ], [ 5.64512797557925, 51.993960383645003 ], [ 5.645514373806147, 51.993393168311471 ], [ 5.654096968158811, 51.995073102779642 ], [ 5.655255821693141, 51.993371364992541 ], [ 5.663059431257157, 51.995052419433748 ], [ 5.664223195594005, 51.994200132503522 ], [ 5.669682069191342, 51.994753513504826 ], [ 5.672402544930608, 51.993614211764601 ], [ 5.675503423071201, 51.991057994912829 ], [ 5.682915865962274, 51.992455507938523 ], [ 5.682925209045765, 51.993871404321879 ], [ 5.689557090411355, 51.994987275913338 ], [ 5.724282438370222, 52.000839740109853 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0654\", \"naam\": \"Borsele\", \"code\": \"0654\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 3.912742263791155, 51.479154196356099 ], [ 3.891512761552585, 51.480300289393732 ], [ 3.880700359581647, 51.481010960343255 ], [ 3.875336360934465, 51.480091888140628 ], [ 3.872245736717717, 51.480335056367728 ], [ 3.869474140377666, 51.482564973474268 ], [ 3.855156180882047, 51.484360617790479 ], [ 3.850543545886834, 51.484016746798524 ], [ 3.847818555829561, 51.484830567212732 ], [ 3.841251163008454, 51.485310259798091 ], [ 3.832786688043167, 51.484914611315865 ], [ 3.822820578699694, 51.483365261510897 ], [ 3.815512137920362, 51.482983842726753 ], [ 3.810495178215206, 51.48319942730452 ], [ 3.803512921525587, 51.484521125347129 ], [ 3.79687587088937, 51.486980090155811 ], [ 3.783114564970692, 51.494722663344959 ], [ 3.777265531499381, 51.496624869469322 ], [ 3.767563106615936, 51.498473395372855 ], [ 3.757900467707659, 51.499188691863928 ], [ 3.73898012781452, 51.500056116228961 ], [ 3.726973908868121, 51.501585497907548 ], [ 3.70535484346846, 51.502409082808818 ], [ 3.699172287486687, 51.492406111943701 ], [ 3.70018420201944, 51.485905987062097 ], [ 3.699904010215248, 51.483069435198438 ], [ 3.703786924212343, 51.48227574978182 ], [ 3.706223275366108, 51.478911863559112 ], [ 3.705900913123866, 51.477207720683175 ], [ 3.701020480862779, 51.473738310755444 ], [ 3.695724193390748, 51.47111241398229 ], [ 3.699242110585301, 51.46974709677356 ], [ 3.709575524841538, 51.471595600968278 ], [ 3.717349311573258, 51.469724344768508 ], [ 3.715892307885849, 51.467437491651857 ], [ 3.714529057822776, 51.462602715463689 ], [ 3.711241407723323, 51.457740293261537 ], [ 3.709868504223508, 51.453188563495182 ], [ 3.703055515703217, 51.449974660604347 ], [ 3.696275017319228, 51.445911067272235 ], [ 3.702599885878301, 51.441470561085588 ], [ 3.709433371529307, 51.433638034555358 ], [ 3.718125635127204, 51.427531244913993 ], [ 3.710556978586994, 51.424023675083788 ], [ 3.71446583515754, 51.422380305234398 ], [ 3.71845731686895, 51.418471988193907 ], [ 3.72437098215611, 51.414590967699283 ], [ 3.733723995937499, 51.411324979644206 ], [ 3.736426085127738, 51.411080017473793 ], [ 3.738173501430129, 51.394676290617625 ], [ 3.775571644150594, 51.39208361749062 ], [ 3.808365645769376, 51.355710501589648 ], [ 3.924462931693014, 51.378185647648571 ], [ 3.963078586843509, 51.421999092492008 ], [ 3.935340203753214, 51.447148447024922 ], [ 3.933764550258237, 51.44826177778117 ], [ 3.925572877929609, 51.451558294026313 ], [ 3.925857873946111, 51.454677478324058 ], [ 3.928425514621074, 51.458674932411036 ], [ 3.919443319768312, 51.462527626543242 ], [ 3.916335821615047, 51.46333821396653 ], [ 3.909258537523468, 51.46778060940354 ], [ 3.907663128286991, 51.46945982453235 ], [ 3.91280646703974, 51.477172341788744 ], [ 3.912742263791155, 51.479154196356099 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0820\", \"naam\": \"Nuenen, Gerwen en Nederwetten\", \"code\": \"0820\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.548813998781857, 51.434544574973316 ], [ 5.56616108116176, 51.441599209766402 ], [ 5.57119037604524, 51.447821762088502 ], [ 5.584720124279505, 51.460543583984006 ], [ 5.587813343179158, 51.463370293257462 ], [ 5.582816581663581, 51.465644374276941 ], [ 5.594764799300816, 51.467606111794247 ], [ 5.605180159218915, 51.470985497140134 ], [ 5.603647525697657, 51.472687545305021 ], [ 5.596339253771313, 51.474966470336966 ], [ 5.585957049892586, 51.479232606303114 ], [ 5.570232476508282, 51.496816643644166 ], [ 5.576794888548383, 51.499354947080114 ], [ 5.566397468739265, 51.501636966080895 ], [ 5.55756101642704, 51.509296549486301 ], [ 5.548025662419195, 51.538196229935217 ], [ 5.547252164763162, 51.537630898775255 ], [ 5.531010468607865, 51.524908165502282 ], [ 5.53679596621137, 51.525184088867704 ], [ 5.540269589645199, 51.526029176153216 ], [ 5.543346974873242, 51.523759519077338 ], [ 5.545647895317607, 51.520074849377217 ], [ 5.540637053731023, 51.520647941388688 ], [ 5.541402486781689, 51.518947746948548 ], [ 5.546393278428503, 51.512710695606401 ], [ 5.540599746302285, 51.509603281901043 ], [ 5.538665597343087, 51.507623424692113 ], [ 5.531720450602587, 51.50564985130341 ], [ 5.525925361226627, 51.501408920214331 ], [ 5.518603665990593, 51.50198379488301 ], [ 5.514742869674354, 51.499722498527575 ], [ 5.50972929665354, 51.498595082848531 ], [ 5.511266315692227, 51.496894270512833 ], [ 5.51549612387293, 51.493491318367823 ], [ 5.512406127541881, 51.490945895406462 ], [ 5.510469389673005, 51.48726638463107 ], [ 5.508543551205995, 51.487551602964302 ], [ 5.508151445909474, 51.485003227710031 ], [ 5.505448452098152, 51.482740415784363 ], [ 5.509677380890682, 51.479337671342982 ], [ 5.508122812282608, 51.474241725552389 ], [ 5.5092647510767, 51.46914296476254 ], [ 5.518105620051851, 51.462903003961898 ], [ 5.525027347994611, 51.459496641152171 ], [ 5.530030768300074, 51.458641021302817 ], [ 5.532336709107248, 51.457222179185138 ], [ 5.531560289513054, 51.455240752024523 ], [ 5.534628740552336, 51.451555326427005 ], [ 5.538473255829794, 51.449851206679988 ], [ 5.539620673091511, 51.447584120242773 ], [ 5.538452546769501, 51.443620856117114 ], [ 5.543828193025093, 51.439648968162871 ], [ 5.546887649209539, 51.433980832136101 ], [ 5.548813998781857, 51.434544574973316 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0296\", \"naam\": \"Wijchen\", \"code\": \"0296\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.729557034661397, 51.772857694742889 ], [ 5.732312451698665, 51.778230271645427 ], [ 5.733876697017216, 51.779924810149332 ], [ 5.736194794797318, 51.778785161311781 ], [ 5.740841741019841, 51.777921655520622 ], [ 5.768803523060023, 51.782648236584073 ], [ 5.769600800748628, 51.785194373393004 ], [ 5.775018586862133, 51.78376061126928 ], [ 5.780841160740926, 51.784307589912686 ], [ 5.797205366471733, 51.792464096813823 ], [ 5.801110525524581, 51.795282304613735 ], [ 5.796092985444296, 51.798131837286945 ], [ 5.794533448456969, 51.797287687281319 ], [ 5.791462800818047, 51.800979818061393 ], [ 5.781456805983713, 51.810359231194639 ], [ 5.774564039461946, 51.82114348871643 ], [ 5.77147563808321, 51.823135988170968 ], [ 5.757508084354766, 51.824030489294621 ], [ 5.764564294864346, 51.832220546385166 ], [ 5.751767760424667, 51.83424334760717 ], [ 5.728503262097321, 51.838561194931799 ], [ 5.719966593191452, 51.83943528981878 ], [ 5.678051329517329, 51.843228159811034 ], [ 5.677294691335748, 51.846345118437149 ], [ 5.681566917059945, 51.846334477288785 ], [ 5.681193331553813, 51.848600930144087 ], [ 5.684690835175869, 51.848875303857795 ], [ 5.681215532604123, 51.851999147524005 ], [ 5.680070507479508, 51.855117093287035 ], [ 5.681635465155501, 51.856812312239839 ], [ 5.678150181828691, 51.858520140336616 ], [ 5.679717027064826, 51.860498568582074 ], [ 5.672344378322901, 51.861932659316324 ], [ 5.670419612428691, 51.864769208757899 ], [ 5.667706871773807, 51.865908479086187 ], [ 5.638961801798118, 51.86738960846855 ], [ 5.636241833391619, 51.867395412194575 ], [ 5.636613125900984, 51.864279551103117 ], [ 5.639320207548141, 51.862008257891944 ], [ 5.63853841987541, 51.861160369254172 ], [ 5.640063819373917, 51.856059695357168 ], [ 5.634597221655248, 51.850973950105278 ], [ 5.637692011877267, 51.848701871387966 ], [ 5.635743727198215, 51.847573258936571 ], [ 5.643108753681305, 51.84500872200249 ], [ 5.62327790865884, 51.840519280241097 ], [ 5.60966516455612, 51.83629805082866 ], [ 5.606556009631642, 51.835737528563321 ], [ 5.610042248221896, 51.834031820899419 ], [ 5.607708407845122, 51.833186664198706 ], [ 5.608862070075709, 51.830918974569606 ], [ 5.603024697959556, 51.828097968491413 ], [ 5.599535980914331, 51.829237094929788 ], [ 5.597977722829523, 51.828107148510149 ], [ 5.60766680189665, 51.824691058756429 ], [ 5.619286502567324, 51.819571221443503 ], [ 5.625107329294657, 51.81927636628307 ], [ 5.630931144394427, 51.819547596017806 ], [ 5.638302919085223, 51.818965662215675 ], [ 5.642949453389379, 51.816973289464975 ], [ 5.64642145445586, 51.813284192156857 ], [ 5.651796640031044, 51.803360516742082 ], [ 5.657584572783914, 51.797966684921505 ], [ 5.665705649266286, 51.793699806726899 ], [ 5.671129548376499, 51.792554030248276 ], [ 5.682761603982858, 51.79167570546354 ], [ 5.687410904087669, 51.790814316630673 ], [ 5.694368120196469, 51.787114801783993 ], [ 5.699755161630915, 51.780870340665423 ], [ 5.703223709541762, 51.777745927446865 ], [ 5.71134903773082, 51.775175007191457 ], [ 5.720265663935638, 51.774866814806508 ], [ 5.729557034661397, 51.772857694742889 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1916\", \"naam\": \"Leidschendam-Voorburg\", \"code\": \"1916\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.420857927980203, 52.062491885763428 ], [ 4.42122981119623, 52.063344526235866 ], [ 4.4568129166729, 52.078923469981667 ], [ 4.475504314975008, 52.081335125304406 ], [ 4.474252243579438, 52.085290147979691 ], [ 4.492947257598185, 52.087699042222489 ], [ 4.492121031700695, 52.089958315320089 ], [ 4.490015325961221, 52.097588515885874 ], [ 4.490400176696051, 52.097874637504589 ], [ 4.47085205825126, 52.117830990269091 ], [ 4.472782408363928, 52.118978747017849 ], [ 4.473074641178438, 52.123795282899025 ], [ 4.468286536834814, 52.128572335379069 ], [ 4.464401944621672, 52.127409231733118 ], [ 4.452080480978912, 52.118533183195375 ], [ 4.447866010498111, 52.114534974132013 ], [ 4.443628380115356, 52.111669197607746 ], [ 4.438976639746062, 52.109932710543035 ], [ 4.435905814627303, 52.107359222627011 ], [ 4.434013145577072, 52.104511989810021 ], [ 4.427830628216196, 52.101346691998188 ], [ 4.421111606940729, 52.104973349044144 ], [ 4.401035488064566, 52.111886990300654 ], [ 4.391414437005541, 52.105292612101238 ], [ 4.381008790788367, 52.098973926191142 ], [ 4.372903984158636, 52.094656502534356 ], [ 4.373345841963001, 52.092394726632236 ], [ 4.345522095359285, 52.079691342881716 ], [ 4.345535282883977, 52.079125061626939 ], [ 4.335088941427949, 52.075067454844522 ], [ 4.355548867572723, 52.068168408966642 ], [ 4.342048495770213, 52.061252618689068 ], [ 4.348013260207338, 52.056490995524726 ], [ 4.352239537849726, 52.059360202677901 ], [ 4.357767243665688, 52.056576647493017 ], [ 4.360062723707162, 52.05857908237747 ], [ 4.356089195162992, 52.061659558968415 ], [ 4.362274113195627, 52.064262326283945 ], [ 4.37999522848674, 52.074610304262414 ], [ 4.384640997231597, 52.076349113075288 ], [ 4.388620197556849, 52.072984534799296 ], [ 4.394802299570824, 52.075868742199596 ], [ 4.397169357932942, 52.074755866956849 ], [ 4.403736381611371, 52.077926030465832 ], [ 4.411666906337024, 52.072328024245259 ], [ 4.420857927980203, 52.062491885763428 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1966\", \"naam\": \"Het Hogeland\", \"code\": \"1966\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.653929114593813, 53.308710284648889 ], [ 6.650332982744408, 53.309314382376051 ], [ 6.643066200715669, 53.307974935877645 ], [ 6.637635318643807, 53.31454335911107 ], [ 6.619962496498677, 53.314442816747253 ], [ 6.612985558338898, 53.323290878869827 ], [ 6.614246638670961, 53.325259843864828 ], [ 6.61036751206228, 53.330112391389179 ], [ 6.601523927472943, 53.329918931443707 ], [ 6.598068481235383, 53.335616131942899 ], [ 6.592460927899649, 53.33623871216227 ], [ 6.605354564640787, 53.337524348460491 ], [ 6.604647194646353, 53.340928916769265 ], [ 6.601417479636674, 53.340395342653856 ], [ 6.595984130696874, 53.347244875920481 ], [ 6.602082678651329, 53.3497314594306 ], [ 6.605674858599776, 53.348845767018886 ], [ 6.617326812405383, 53.348727136274761 ], [ 6.618974458498171, 53.350125853270356 ], [ 6.625419576282729, 53.350625896116405 ], [ 6.627879353364798, 53.352299244669354 ], [ 6.625663829898032, 53.359116873223563 ], [ 6.625720838278593, 53.361098097472592 ], [ 6.630994666396943, 53.362742371395413 ], [ 6.638237427391002, 53.362950372961265 ], [ 6.642281388241857, 53.363757592593593 ], [ 6.641928971238315, 53.365459966823096 ], [ 6.645177609185196, 53.366558500397581 ], [ 6.646735717633503, 53.364843497189774 ], [ 6.651952573075339, 53.364505639539189 ], [ 6.656834214145435, 53.366436029024648 ], [ 6.659220817950477, 53.365561463697894 ], [ 6.665291968292405, 53.366912693707135 ], [ 6.670458282075995, 53.364875866371015 ], [ 6.678564892299954, 53.367054050010644 ], [ 6.681746460798691, 53.365887379617483 ], [ 6.684594185446244, 53.366989170504532 ], [ 6.691786408419907, 53.36549578882606 ], [ 6.696934062271223, 53.362891776701154 ], [ 6.700646282787496, 53.365965607584307 ], [ 6.706334171153494, 53.367885199134854 ], [ 6.713717717262254, 53.37261702953564 ], [ 6.723925988767322, 53.377600178786849 ], [ 6.733367871040429, 53.383723525091497 ], [ 6.748201723908243, 53.394881414730136 ], [ 6.753922539879166, 53.397647768090017 ], [ 6.766939158264099, 53.402029148894478 ], [ 6.773091796192284, 53.405639007629624 ], [ 6.77848660818982, 53.410672910955789 ], [ 6.783680336801852, 53.409480293949329 ], [ 6.784411401008134, 53.407206856585958 ], [ 6.788059902197596, 53.408013808494154 ], [ 6.792346644057074, 53.403717044300045 ], [ 6.843685350450241, 53.422359038486412 ], [ 6.856302334715033, 53.414561445600889 ], [ 6.862240772802955, 53.411657597024906 ], [ 6.872976853097907, 53.407844948963699 ], [ 6.891090500340891, 53.407903121873538 ], [ 6.91183626420023, 53.459453810241968 ], [ 6.907475800211231, 53.461490761703431 ], [ 6.891079715822833, 53.46509398158765 ], [ 6.87413084705346, 53.46445498895352 ], [ 6.857750191223918, 53.468619679010615 ], [ 6.832528257171149, 53.485628638030882 ], [ 6.820298725422993, 53.493701831678663 ], [ 6.790875271979527, 53.506504890930472 ], [ 6.749127660119308, 53.525668695849205 ], [ 6.707693865656559, 53.543115573614635 ], [ 6.665839382843355, 53.56111849813734 ], [ 6.64633743376604, 53.570948797010161 ], [ 6.63720552092939, 53.576422505640977 ], [ 6.612613008189373, 53.56421853649455 ], [ 6.428465621472629, 53.565947725719198 ], [ 6.352337704578199, 53.539687477379672 ], [ 6.351935876619464, 53.521856230988114 ], [ 6.367318443581207, 53.52399690716544 ], [ 6.382193842347816, 53.521610396849937 ], [ 6.393093258938149, 53.521803072585513 ], [ 6.404369318587031, 53.520859229279836 ], [ 6.411146383799553, 53.517404798299665 ], [ 6.415885160903006, 53.513118107417675 ], [ 6.418531490886596, 53.505735123821246 ], [ 6.417595617936551, 53.50036437437938 ], [ 6.415108335818876, 53.497554681896382 ], [ 6.408992748724433, 53.494775745767726 ], [ 6.40211854626572, 53.49398453906386 ], [ 6.384008509592078, 53.495551109400139 ], [ 6.381563096622533, 53.494438938851061 ], [ 6.366697080676016, 53.496825374025619 ], [ 6.351375233210043, 53.496948890205381 ], [ 6.350237130117251, 53.44628437370384 ], [ 6.194133921500317, 53.413177212565273 ], [ 6.167966509637289, 53.390702272523569 ], [ 6.1678585974785, 53.384757973729293 ], [ 6.169725256472882, 53.376819162057892 ], [ 6.173616870074001, 53.369716366293879 ], [ 6.17875474670328, 53.364870009032686 ], [ 6.187545767221293, 53.361980853929573 ], [ 6.196362211969453, 53.360506371124757 ], [ 6.215215356630901, 53.358396360062549 ], [ 6.22399709276542, 53.355221480236125 ], [ 6.226358780268758, 53.352657120906656 ], [ 6.227883338281794, 53.348399961299769 ], [ 6.232610782544604, 53.343554094778575 ], [ 6.237817168832678, 53.342668070484727 ], [ 6.241862986634477, 53.344054890435899 ], [ 6.246339100837543, 53.346854010356651 ], [ 6.251596740095859, 53.348514941915958 ], [ 6.255615002866167, 53.348485990383104 ], [ 6.264409024686709, 53.346157342536685 ], [ 6.273633006847494, 53.345240390423761 ], [ 6.280008885638688, 53.342645290220609 ], [ 6.286815302858303, 53.341462143646957 ], [ 6.300324989820075, 53.334282692465074 ], [ 6.304719453773937, 53.333116814671335 ], [ 6.313854524504063, 53.328233952183488 ], [ 6.315789473844148, 53.324821746999504 ], [ 6.316476685660729, 53.319437410702484 ], [ 6.318843147837312, 53.317437341582071 ], [ 6.324427639685466, 53.315695278932189 ], [ 6.329233430294734, 53.315091490840238 ], [ 6.333260933388993, 53.315626070442576 ], [ 6.341360103482724, 53.318676231226313 ], [ 6.345381796009026, 53.318927344954403 ], [ 6.349371936112137, 53.317763036123019 ], [ 6.354114096869051, 53.314327676325881 ], [ 6.357721207200034, 53.314015492680461 ], [ 6.360563633586483, 53.315408049984299 ], [ 6.364286291780108, 53.320190692415146 ], [ 6.367530902580096, 53.321579815543679 ], [ 6.374733110379737, 53.320388422776325 ], [ 6.38958393757702, 53.319982379596787 ], [ 6.400405734562131, 53.319042311469211 ], [ 6.408490140510071, 53.321238771148231 ], [ 6.414267105340541, 53.32770107847584 ], [ 6.416690333684106, 53.328246569738795 ], [ 6.424293883490583, 53.32704877127469 ], [ 6.43035229066269, 53.328411901896551 ], [ 6.432727677174797, 53.326975712979049 ], [ 6.437422784437437, 53.321838786295828 ], [ 6.438115458398485, 53.317302947628747 ], [ 6.441313752041486, 53.316708715704841 ], [ 6.450279651592922, 53.322008873940241 ], [ 6.44713679000867, 53.324867744791199 ], [ 6.447178569041903, 53.326566044193278 ], [ 6.452857011663625, 53.328780728722521 ], [ 6.459275928756172, 53.328440543128281 ], [ 6.462044893012093, 53.326717146388148 ], [ 6.46116407872405, 53.323610787757133 ], [ 6.462720920189127, 53.321615081990139 ], [ 6.467116743942933, 53.320726330157754 ], [ 6.47194242201191, 53.320965988899779 ], [ 6.474824697247616, 53.323771070203364 ], [ 6.477234140404027, 53.323749244571395 ], [ 6.482404231763657, 53.321720457453857 ], [ 6.483565685628705, 53.320011189219315 ], [ 6.48188763287714, 53.317195349669944 ], [ 6.501108090362036, 53.299465603575925 ], [ 6.504208867219484, 53.295190069992387 ], [ 6.503259761704692, 53.289536552502156 ], [ 6.504353556828326, 53.285279624655161 ], [ 6.501880457034554, 53.282754540418566 ], [ 6.502193864820205, 53.279354216496074 ], [ 6.506787420652128, 53.270817925842074 ], [ 6.506320286337862, 53.268274206999031 ], [ 6.508046251364516, 53.257499553671536 ], [ 6.510838195215973, 53.256907216932099 ], [ 6.51890165884535, 53.258530209683911 ], [ 6.524462934065074, 53.256495815808378 ], [ 6.525703080306576, 53.257899668815405 ], [ 6.531739918354398, 53.258691639138767 ], [ 6.539403513466223, 53.260317072679456 ], [ 6.537897683709178, 53.264012089709674 ], [ 6.540697196285321, 53.26370210889656 ], [ 6.548740187460794, 53.264473942692412 ], [ 6.551493844413375, 53.262465422726066 ], [ 6.566770273194954, 53.263731940094026 ], [ 6.567109386114489, 53.261463627888887 ], [ 6.585562422142357, 53.261564005976304 ], [ 6.588801795265842, 53.262664127512068 ], [ 6.586207165320499, 53.255895093372743 ], [ 6.606197628567918, 53.253711919945957 ], [ 6.606534595422739, 53.251443495385544 ], [ 6.618168331397241, 53.251607899720618 ], [ 6.619306384350773, 53.249331216246588 ], [ 6.636208132960646, 53.251421575263898 ], [ 6.635512734684015, 53.255109454596727 ], [ 6.633638880991986, 53.259658941857495 ], [ 6.625806450656388, 53.266251874970997 ], [ 6.64381667870634, 53.292395346935564 ], [ 6.65057679903976, 53.303932495280783 ], [ 6.653929114593813, 53.308710284648889 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0928\", \"naam\": \"Kerkrade\", \"code\": \"0928\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.08000426026261, 50.905827472487786 ], [ 6.066283256927096, 50.904209557471198 ], [ 6.063971656744167, 50.902240630044332 ], [ 6.05939019216584, 50.901134498801078 ], [ 6.056355119174571, 50.901718513750083 ], [ 6.056710941443479, 50.900017194263775 ], [ 6.048714454565493, 50.899496775078539 ], [ 6.043020564997656, 50.900378822686413 ], [ 6.043360801955713, 50.897544795281313 ], [ 6.041815242690026, 50.895854292772718 ], [ 6.042531853116725, 50.892734927939088 ], [ 6.040241818897123, 50.892181459456751 ], [ 6.045534281944179, 50.889885781262194 ], [ 6.043212237827833, 50.887066876190602 ], [ 6.04056617501252, 50.888214692060075 ], [ 6.037115607265889, 50.886251664364814 ], [ 6.034382316278452, 50.881169219072817 ], [ 6.034734830263444, 50.879184779449531 ], [ 6.032798137663355, 50.876646721746631 ], [ 6.031206392177056, 50.871557827790227 ], [ 6.022466431024948, 50.871889380346246 ], [ 6.017124782036372, 50.870502556157113 ], [ 6.020142825149452, 50.868786821649756 ], [ 6.01095448892634, 50.864022199804985 ], [ 6.007111726388404, 50.860927569865112 ], [ 6.008232982272925, 50.859505508904668 ], [ 6.000609085962641, 50.857846957260286 ], [ 6.006606663504904, 50.851584389873395 ], [ 6.008863887718406, 50.849873021470813 ], [ 6.011105691082824, 50.84702885679058 ], [ 6.015623038259537, 50.843889090338855 ], [ 6.017902682051155, 50.843876674415156 ], [ 6.01907339793396, 50.846135951827009 ], [ 6.02783593721708, 50.847786976290891 ], [ 6.034335010144255, 50.850582869218144 ], [ 6.041942896888208, 50.851106449897564 ], [ 6.049967418628002, 50.854176029934195 ], [ 6.053808399191474, 50.856986044540378 ], [ 6.056092762938954, 50.857256060773494 ], [ 6.057208328583581, 50.855550342085508 ], [ 6.056762801045743, 50.851021565774154 ], [ 6.063210342622141, 50.850134413209581 ], [ 6.074179617372975, 50.846671225780874 ], [ 6.077426018844554, 50.86052919446233 ], [ 6.080876367667066, 50.862491018980009 ], [ 6.080906060556075, 50.864473314387631 ], [ 6.083571056608847, 50.864740505839507 ], [ 6.086684632811637, 50.869536294134853 ], [ 6.085954254199867, 50.871523184621516 ], [ 6.088248095242659, 50.872358933727497 ], [ 6.084886309070131, 50.876344214231281 ], [ 6.087201780707927, 50.878595908413971 ], [ 6.086462727310271, 50.880016433015555 ], [ 6.082305679316533, 50.881740756116834 ], [ 6.078173687199134, 50.885164042413969 ], [ 6.07521146723492, 50.890562700681954 ], [ 6.077239754042776, 50.899046937391795 ], [ 6.079961848034486, 50.902995619053584 ], [ 6.08000426026261, 50.905827472487786 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0847\", \"naam\": \"Someren\", \"code\": \"0847\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.770424714491426, 51.333773116345895 ], [ 5.7639804908788, 51.343989453105394 ], [ 5.745372597231902, 51.371235604203562 ], [ 5.740365296249541, 51.369834882845034 ], [ 5.737047517861828, 51.388253019876601 ], [ 5.733615180648427, 51.391944897621819 ], [ 5.72749050823909, 51.395644565983297 ], [ 5.705666627035311, 51.409299912162396 ], [ 5.702995617346564, 51.412422391296914 ], [ 5.700738176348838, 51.419791709217968 ], [ 5.693944319037239, 51.439350626251269 ], [ 5.672119596899964, 51.457814002384353 ], [ 5.668646992464321, 51.456689635169724 ], [ 5.656323479853473, 51.456435525395321 ], [ 5.65630171401134, 51.452753978959962 ], [ 5.653183461344804, 51.446247537668498 ], [ 5.648151265758464, 51.441444510851795 ], [ 5.643913854303433, 51.440887518347445 ], [ 5.642722531420176, 51.434376537349145 ], [ 5.639192898532716, 51.422489818723278 ], [ 5.637984032008455, 51.412580418448798 ], [ 5.637952867485345, 51.406916478576463 ], [ 5.63905670648686, 51.397851682738185 ], [ 5.639008219343548, 51.389072568383398 ], [ 5.654566327463924, 51.353920964202985 ], [ 5.666693996220709, 51.326705125436696 ], [ 5.670142636806998, 51.32556398554479 ], [ 5.67205003837823, 51.323576919606019 ], [ 5.67048795967129, 51.319332702982749 ], [ 5.671997085037396, 51.315080989481615 ], [ 5.770424714491426, 51.333773116345895 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0109\", \"naam\": \"Coevorden\", \"code\": \"0109\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.710174376719626, 52.627683602279177 ], [ 6.7149934097947, 52.630178479948142 ], [ 6.726549000547308, 52.633163793411157 ], [ 6.730639583726916, 52.6376485219104 ], [ 6.737076770549049, 52.641256939260494 ], [ 6.741951137390527, 52.645449199175417 ], [ 6.751887185119128, 52.64703462415887 ], [ 6.753433393266957, 52.645884134580513 ], [ 6.758669884467564, 52.648938830808355 ], [ 6.767701013251779, 52.646852010033143 ], [ 6.772147864060659, 52.649915288890625 ], [ 6.777341376064235, 52.65155376163689 ], [ 6.783703485799446, 52.652611921488194 ], [ 6.79120690332783, 52.652240352131862 ], [ 6.794324713067009, 52.650787568531278 ], [ 6.802268647516692, 52.65182600231828 ], [ 6.805808830187446, 52.651217438039787 ], [ 6.808898622429878, 52.648915047955967 ], [ 6.822312976086289, 52.647904291476728 ], [ 6.829098817656925, 52.649804467710197 ], [ 6.832317532527064, 52.651464494365747 ], [ 6.839048263190556, 52.651665663503806 ], [ 6.850419951914175, 52.648694361086953 ], [ 6.853611061124341, 52.649504596787395 ], [ 6.8619230020151, 52.649684951767497 ], [ 6.854508566303641, 52.676396202794933 ], [ 6.849337735616515, 52.699397804904059 ], [ 6.84102580120693, 52.699499674295453 ], [ 6.832565264218873, 52.719142303486301 ], [ 6.830016759842745, 52.725969564146084 ], [ 6.828432568056692, 52.725988758851074 ], [ 6.82621413194275, 52.730829662308906 ], [ 6.837426342146648, 52.734374920481713 ], [ 6.835926005132744, 52.736941810476985 ], [ 6.830556967637039, 52.74238744201319 ], [ 6.8321790641878, 52.743500481097541 ], [ 6.833489065471737, 52.747165902402521 ], [ 6.838403212644367, 52.751920148752014 ], [ 6.838138106386261, 52.755887882737028 ], [ 6.834976918825497, 52.756209539444654 ], [ 6.839495887720141, 52.760968543603525 ], [ 6.83403091231105, 52.763583669244191 ], [ 6.830999714844137, 52.767868120704954 ], [ 6.834302010505936, 52.771792524914289 ], [ 6.831242284687736, 52.775227784953849 ], [ 6.83135427155117, 52.778624548018108 ], [ 6.83466677471721, 52.782831991109951 ], [ 6.843380437853025, 52.794336032042217 ], [ 6.849680264366678, 52.80473638566145 ], [ 6.840733441382382, 52.810226174389271 ], [ 6.839211956009731, 52.812226943559864 ], [ 6.824042387503205, 52.821755511378292 ], [ 6.823626882227805, 52.821194173167967 ], [ 6.816233525012927, 52.825813797030527 ], [ 6.765766330077242, 52.849911087431472 ], [ 6.768997453115378, 52.851572699821467 ], [ 6.752942427070603, 52.859119971308481 ], [ 6.753419347632684, 52.86166300569613 ], [ 6.747327100184192, 52.870227595158987 ], [ 6.744995696074562, 52.871953143129957 ], [ 6.740589403944064, 52.870870552400518 ], [ 6.73753293096417, 52.87486949014783 ], [ 6.736454385961868, 52.87856282584643 ], [ 6.714665343143619, 52.86804703425183 ], [ 6.721765751763097, 52.866268826378523 ], [ 6.720029603799508, 52.861474444814903 ], [ 6.72586752807356, 52.857444760476689 ], [ 6.728544027129459, 52.854016706422158 ], [ 6.719641159462191, 52.848736363554274 ], [ 6.704091586976843, 52.846926932907216 ], [ 6.706337865706229, 52.84237146546257 ], [ 6.707746779705075, 52.836409394999379 ], [ 6.695935350552447, 52.826628834656894 ], [ 6.693984295784183, 52.82778290079866 ], [ 6.69114630479555, 52.825831816595986 ], [ 6.689077197339683, 52.823022773763043 ], [ 6.690259599297451, 52.822726688599779 ], [ 6.693586915538072, 52.814478445119789 ], [ 6.689880264113893, 52.809988348147904 ], [ 6.681083096363411, 52.80781884802802 ], [ 6.678948655891923, 52.802745002637756 ], [ 6.675699554088797, 52.800231677415084 ], [ 6.678046601232829, 52.799073607235904 ], [ 6.675211189511322, 52.797122120527128 ], [ 6.66774817271267, 52.799751058326741 ], [ 6.661044825785719, 52.801238737736078 ], [ 6.64030797758867, 52.783902334231541 ], [ 6.61631279627615, 52.762914869811112 ], [ 6.587415485055459, 52.735742469066324 ], [ 6.576434917727313, 52.725375487693441 ], [ 6.576404222754633, 52.724243123604438 ], [ 6.596587822027637, 52.723473396778964 ], [ 6.595911005723435, 52.713286186746778 ], [ 6.610545827456191, 52.712570287579283 ], [ 6.624800174659313, 52.712422884659468 ], [ 6.629955566873551, 52.712652323674142 ], [ 6.628707217821966, 52.696524575924535 ], [ 6.629378706636768, 52.692269981402355 ], [ 6.632392354551808, 52.686858189337627 ], [ 6.632047354148814, 52.674685344648509 ], [ 6.629529604211592, 52.669614544441806 ], [ 6.682488045077768, 52.654041055916196 ], [ 6.708432413522167, 52.648658308251669 ], [ 6.705579958396461, 52.645858186855584 ], [ 6.705512065371362, 52.643593504159284 ], [ 6.701104305513478, 52.641660055834329 ], [ 6.704645095381437, 52.64105450081292 ], [ 6.706579132981706, 52.639617147615176 ], [ 6.703298243998373, 52.635689006766924 ], [ 6.704819893943863, 52.633689884868332 ], [ 6.700740758051673, 52.629487340758068 ], [ 6.701858675385155, 52.627209534906278 ], [ 6.706987465029326, 52.626869499515557 ], [ 6.710174376719626, 52.627683602279177 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0164\", \"naam\": \"Hengelo (O)\", \"code\": \"0164\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.766873811537949, 52.191198418790904 ], [ 6.766459204037912, 52.203098034425444 ], [ 6.762302328937067, 52.207961079809365 ], [ 6.759623268759986, 52.209974716832669 ], [ 6.755934820829866, 52.217380939396953 ], [ 6.769162693563493, 52.227139091158875 ], [ 6.765038945572749, 52.233134636475157 ], [ 6.774606548226767, 52.238403541764988 ], [ 6.813896611686111, 52.229439093607439 ], [ 6.819443161551978, 52.243532421740348 ], [ 6.82743389963406, 52.24824980297177 ], [ 6.842516308581306, 52.254012326920986 ], [ 6.840396472627889, 52.26111866907506 ], [ 6.843223190566405, 52.263632747396642 ], [ 6.843315880219432, 52.26646369949448 ], [ 6.840263543604527, 52.269050164347128 ], [ 6.831778103002116, 52.273402351838399 ], [ 6.837769093549222, 52.276727454070702 ], [ 6.840504113308867, 52.276410636778692 ], [ 6.847635150728374, 52.27858838299187 ], [ 6.845712029741812, 52.279744972165751 ], [ 6.852059688948048, 52.281932123413505 ], [ 6.850173811421453, 52.284221157992903 ], [ 6.852545099179796, 52.28475819508995 ], [ 6.846475843482026, 52.291063884453209 ], [ 6.843384906606838, 52.292518049816543 ], [ 6.831273342351941, 52.294082693378066 ], [ 6.820428859256859, 52.298462795370121 ], [ 6.819325162473206, 52.300741823993533 ], [ 6.825784561597915, 52.306327515539152 ], [ 6.823503980262172, 52.308620896160946 ], [ 6.812199238396823, 52.311023348306861 ], [ 6.809434684435637, 52.310490228475942 ], [ 6.80794682485865, 52.313056964243287 ], [ 6.802079389353709, 52.313693738475216 ], [ 6.801132405011505, 52.308607382343965 ], [ 6.797538542630718, 52.306667878786399 ], [ 6.788069521746558, 52.30508124288675 ], [ 6.792633760434541, 52.300495789834351 ], [ 6.785154164753257, 52.299734872772 ], [ 6.779975033985699, 52.297247173902171 ], [ 6.775527823495232, 52.293051430666345 ], [ 6.769993076120715, 52.291700295796723 ], [ 6.767265391910565, 52.29229858662319 ], [ 6.766419510648202, 52.290326033102218 ], [ 6.763220791774548, 52.28838089203343 ], [ 6.754157720341741, 52.287070052317944 ], [ 6.752998693685893, 52.287649860082055 ], [ 6.750567645111323, 52.285129100183376 ], [ 6.743056789815525, 52.283233091979703 ], [ 6.747580147515062, 52.277233830098012 ], [ 6.749288889483398, 52.269001227364264 ], [ 6.748836223240326, 52.267024015307918 ], [ 6.750988332200209, 52.26048548494213 ], [ 6.753087663987097, 52.252248281118561 ], [ 6.750719296279891, 52.251709235572392 ], [ 6.72409159247897, 52.252580041271187 ], [ 6.719662615167877, 52.24866523682622 ], [ 6.717942971682173, 52.243586955904462 ], [ 6.719910268086358, 52.243847975492663 ], [ 6.720915867204402, 52.238172537841017 ], [ 6.718557102414501, 52.237915950934813 ], [ 6.717083298958347, 52.241047803791538 ], [ 6.71232738182948, 52.226091443554289 ], [ 6.703119497816738, 52.219397529268868 ], [ 6.701869617684356, 52.2168626149099 ], [ 6.712520731997215, 52.206264916715703 ], [ 6.738914860580608, 52.198602199046441 ], [ 6.766873811537949, 52.191198418790904 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0080\", \"naam\": \"Leeuwarden\", \"code\": \"0080\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.796333816781052, 53.05876230468882 ], [ 5.808385867657815, 53.06664776930608 ], [ 5.814030954537444, 53.072290102103011 ], [ 5.819258434835618, 53.075951857689923 ], [ 5.830077879510505, 53.079592823191284 ], [ 5.832462438327898, 53.078451511636082 ], [ 5.842866390173946, 53.080394170984334 ], [ 5.844454920436579, 53.079538764224495 ], [ 5.855670647752668, 53.082609674181143 ], [ 5.859655294286207, 53.081744664331588 ], [ 5.872872875114068, 53.085089164416814 ], [ 5.874470520456486, 53.08508267195603 ], [ 5.877269595557834, 53.08535436224426 ], [ 5.883302870377627, 53.089010024624656 ], [ 5.88292606390314, 53.090993398595316 ], [ 5.878132478456465, 53.091013151195561 ], [ 5.886160852711682, 53.094377352602912 ], [ 5.884224995472967, 53.09976460013565 ], [ 5.884647267754755, 53.101744653292059 ], [ 5.881908439597638, 53.106852067620828 ], [ 5.899910994364033, 53.108475034765505 ], [ 5.900303920479744, 53.107907122131515 ], [ 5.91071111848006, 53.109277655174232 ], [ 5.927492110827444, 53.108920009095826 ], [ 5.931509709083443, 53.110600508887387 ], [ 5.9330940266355, 53.109460836325361 ], [ 5.945809320764571, 53.10373988353323 ], [ 5.949819800824371, 53.104853573535131 ], [ 5.948258065220304, 53.107692061162282 ], [ 5.945584690493478, 53.117330480855138 ], [ 5.943640669033067, 53.121586249525549 ], [ 5.938490799164708, 53.125290547521303 ], [ 5.931733684616979, 53.128435705826107 ], [ 5.92734638261426, 53.129304908235632 ], [ 5.923369235573145, 53.131021454383522 ], [ 5.913869593243086, 53.138990749890347 ], [ 5.908738969001612, 53.144675432906581 ], [ 5.918793510326429, 53.149161039600394 ], [ 5.924453196790481, 53.153948695913556 ], [ 5.932146636876903, 53.161274850453005 ], [ 5.933843583171166, 53.168911106148791 ], [ 5.932660875461876, 53.170332043492557 ], [ 5.92543272946688, 53.16838294392921 ], [ 5.907831724383485, 53.1690268963238 ], [ 5.86583102473037, 53.170900600195147 ], [ 5.861835201092251, 53.171482704249321 ], [ 5.857919321702852, 53.179425168905915 ], [ 5.852831411513202, 53.190203105255783 ], [ 5.850844671466915, 53.191626335564692 ], [ 5.862080593868031, 53.193847220371225 ], [ 5.856970506844855, 53.202643629702997 ], [ 5.857786905068487, 53.20405595669019 ], [ 5.897894588625753, 53.208704698332234 ], [ 5.90713449276732, 53.210929852152468 ], [ 5.905148593382172, 53.212353970805928 ], [ 5.905980337465864, 53.214898325713122 ], [ 5.897964821082462, 53.214649613675213 ], [ 5.893968712486874, 53.215515875475674 ], [ 5.894395900417756, 53.217778909542631 ], [ 5.889187636059096, 53.217800814344194 ], [ 5.888823139771794, 53.220916488931572 ], [ 5.897237093566606, 53.220881016736456 ], [ 5.896859797830431, 53.222864351315579 ], [ 5.889246824045111, 53.222896447084509 ], [ 5.890071248914404, 53.2248747237497 ], [ 5.880855105828534, 53.224912994243425 ], [ 5.8797498017349, 53.233410640314112 ], [ 5.876129955188076, 53.23229303072312 ], [ 5.868505840080444, 53.231474542434874 ], [ 5.860086696158318, 53.231224912004869 ], [ 5.860481255807216, 53.23065715064925 ], [ 5.852463070356734, 53.230405403968788 ], [ 5.856976025056661, 53.240013305196555 ], [ 5.859418224637889, 53.243400943866426 ], [ 5.832152831283331, 53.24293891644902 ], [ 5.830967668721811, 53.244641911503301 ], [ 5.833013019356893, 53.248597745360847 ], [ 5.829875276985839, 53.255403767846019 ], [ 5.829901403052999, 53.257951571141319 ], [ 5.831932706430379, 53.260491961134285 ], [ 5.832822452088703, 53.268981639217337 ], [ 5.838500208299164, 53.274905505351889 ], [ 5.817653535584011, 53.27639753043092 ], [ 5.813652895802966, 53.277544195064507 ], [ 5.810443343562515, 53.277555549690192 ], [ 5.813268476158505, 53.279244145213163 ], [ 5.810875118017325, 53.280668099658925 ], [ 5.801259341769234, 53.282117123082955 ], [ 5.797664370502501, 53.283828045119371 ], [ 5.794457018397403, 53.284122060734298 ], [ 5.763247829837174, 53.294415284136136 ], [ 5.74919571145284, 53.293892264563709 ], [ 5.735556709804277, 53.294781879629731 ], [ 5.730738165619352, 53.29451266292314 ], [ 5.727906311570068, 53.291689779737801 ], [ 5.726269832733139, 53.287731077557417 ], [ 5.720985113887925, 53.278969912487746 ], [ 5.721364394917561, 53.276137894275131 ], [ 5.720147732940291, 53.274442694828529 ], [ 5.721732651501498, 53.271890418701965 ], [ 5.727321898363576, 53.268477550351207 ], [ 5.735314463925613, 53.264774373812578 ], [ 5.729670161330948, 53.261110335722734 ], [ 5.736013660171754, 53.252032918337989 ], [ 5.735986215849198, 53.24863580862953 ], [ 5.733580644989989, 53.248642775163567 ], [ 5.743941628757422, 53.240968733135155 ], [ 5.735894770467625, 53.237312081678738 ], [ 5.735099964484875, 53.238163689499601 ], [ 5.729866696013887, 53.235347744225031 ], [ 5.738251392400707, 53.231360096737795 ], [ 5.732631582536075, 53.230244003552428 ], [ 5.733401337837008, 53.226278368634119 ], [ 5.734118679621711, 53.215801527966718 ], [ 5.745736764882866, 53.215767365454262 ], [ 5.746933922069688, 53.21519757624467 ], [ 5.744096869341799, 53.211242612595669 ], [ 5.73488349035147, 53.211269672624219 ], [ 5.736044113202866, 53.206170448265631 ], [ 5.744387510232396, 53.197935881759456 ], [ 5.73992705037639, 53.19115457891639 ], [ 5.742331747839632, 53.191430585727097 ], [ 5.740281226862828, 53.185491437060136 ], [ 5.745483341427426, 53.18519289924388 ], [ 5.743465320152659, 53.183217174913196 ], [ 5.737377997031611, 53.173043297956504 ], [ 5.733346277170315, 53.169374624206654 ], [ 5.728145978045267, 53.169672635698824 ], [ 5.727730188588813, 53.167692071441344 ], [ 5.724915681197998, 53.166001394300061 ], [ 5.723746007328612, 53.169968177037759 ], [ 5.718545569974727, 53.17026577226261 ], [ 5.713379200205401, 53.175092745766719 ], [ 5.707769435120385, 53.174258561822107 ], [ 5.706162213177491, 53.173413531745858 ], [ 5.698960061717602, 53.173715586090644 ], [ 5.697387529832272, 53.177683143957559 ], [ 5.692600245842125, 53.179960278052199 ], [ 5.686996133533635, 53.179974424267186 ], [ 5.685808929714499, 53.1819591222037 ], [ 5.678980705052541, 53.178578676962275 ], [ 5.67736439077599, 53.176317758855831 ], [ 5.674571969229395, 53.177740012043806 ], [ 5.672954046828426, 53.175195932854152 ], [ 5.668938641108851, 53.173223700630643 ], [ 5.666151617183159, 53.175495062221309 ], [ 5.661727277572246, 53.172108013024555 ], [ 5.662518715159344, 53.17069066970874 ], [ 5.658502427523265, 53.168434982878694 ], [ 5.652885889007667, 53.166182719006173 ], [ 5.660476552461847, 53.164183907316151 ], [ 5.660869541045485, 53.16305058541144 ], [ 5.658447422103738, 53.159658814900702 ], [ 5.656815255569946, 53.154566575606438 ], [ 5.662017830236072, 53.154837862932908 ], [ 5.661992674387699, 53.150874418938777 ], [ 5.663185533647334, 53.149739247108521 ], [ 5.658383576883382, 53.149467104867114 ], [ 5.655572958960015, 53.147774788231153 ], [ 5.652779922851271, 53.148913442678392 ], [ 5.649166149568169, 53.146656538360808 ], [ 5.654334545858339, 53.141549181670385 ], [ 5.648316671379508, 53.138448259357439 ], [ 5.639505423841921, 53.136202275688888 ], [ 5.638307392286135, 53.136487901832837 ], [ 5.63188990225407, 53.133103880972534 ], [ 5.636273739058173, 53.130546864360788 ], [ 5.637458537329734, 53.127996412212966 ], [ 5.637435646549595, 53.124032928001675 ], [ 5.643025861065492, 53.122888677290902 ], [ 5.64579213889131, 53.117503645065405 ], [ 5.65655285822763, 53.112383931991367 ], [ 5.659373661438273, 53.116057992272971 ], [ 5.664987667769811, 53.118876204828055 ], [ 5.667804109346791, 53.121700740816834 ], [ 5.671809109066389, 53.122823730048758 ], [ 5.673425003764779, 53.125367868712573 ], [ 5.679842672377689, 53.12846656691702 ], [ 5.685038364337595, 53.128170649668448 ], [ 5.685849702837554, 53.129867287407386 ], [ 5.692239026780118, 53.128718746921649 ], [ 5.691429447519186, 53.127305256855216 ], [ 5.695423492885767, 53.126728825137619 ], [ 5.693398477550785, 53.123053587554963 ], [ 5.695397317879766, 53.123048460450164 ], [ 5.696168598012725, 53.119082926057295 ], [ 5.700541083435151, 53.115674234636643 ], [ 5.708964195717135, 53.119615451956449 ], [ 5.720167666898003, 53.121000381519394 ], [ 5.720962803444008, 53.120431946549857 ], [ 5.724584730633647, 53.123536016589497 ], [ 5.727774003728046, 53.122394547202092 ], [ 5.729757145337209, 53.120407115196038 ], [ 5.736957076154819, 53.120952527322139 ], [ 5.736164419334639, 53.121804172478207 ], [ 5.743778396399371, 53.124046633604294 ], [ 5.746593258327869, 53.126019996045613 ], [ 5.75139553919148, 53.126571712121994 ], [ 5.754577128188545, 53.124580220055478 ], [ 5.756144919051128, 53.120894956212638 ], [ 5.757274063324331, 53.112681233585036 ], [ 5.7612805364009, 53.113801233590465 ], [ 5.762859634144651, 53.111531393460886 ], [ 5.760858896142351, 53.111254540840136 ], [ 5.762435473669017, 53.108701599724881 ], [ 5.770405621575277, 53.106128344869425 ], [ 5.767598420737591, 53.1050048444392 ], [ 5.770775181738764, 53.102729805800081 ], [ 5.774381494103256, 53.103850651106001 ], [ 5.777972686554753, 53.10327275850765 ], [ 5.784726668338671, 53.099003823525145 ], [ 5.787518245376961, 53.098428294863844 ], [ 5.788301613818855, 53.096726989937075 ], [ 5.785502357944775, 53.096453221371057 ], [ 5.782282992177129, 53.093915862647762 ], [ 5.778277816162092, 53.092796556844092 ], [ 5.771453944457665, 53.089138169716769 ], [ 5.771441408424412, 53.087722637933396 ], [ 5.774624288406665, 53.086296806019483 ], [ 5.772988825142991, 53.082055366112009 ], [ 5.770984374613835, 53.081212464950724 ], [ 5.764187530409904, 53.080384720753315 ], [ 5.773716999800335, 53.074125787258126 ], [ 5.775243396133004, 53.066193598174713 ], [ 5.767228816947559, 53.062821922458816 ], [ 5.766018833731964, 53.061410176186357 ], [ 5.762019518537596, 53.060573421232533 ], [ 5.7667232063395, 53.050649492032051 ], [ 5.769506934428232, 53.049508157555159 ], [ 5.771080772370868, 53.046955056511166 ], [ 5.769873600968168, 53.04582645216135 ], [ 5.773864149375493, 53.045813619731838 ], [ 5.793529011338614, 53.057639393101041 ], [ 5.796333816781052, 53.05876230468882 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0392\", \"naam\": \"Haarlem\", \"code\": \"0392\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.68266370423372, 52.413792635740869 ], [ 4.681393482132149, 52.419448483660638 ], [ 4.674326309931213, 52.418556661009021 ], [ 4.67190205762041, 52.422506436099184 ], [ 4.665954841659459, 52.425302087619038 ], [ 4.661617818049823, 52.42584194988104 ], [ 4.650947983512204, 52.428607838921806 ], [ 4.645174203680627, 52.420926208435809 ], [ 4.636294239705772, 52.410959251820373 ], [ 4.631560129562676, 52.411778664995794 ], [ 4.624331053973075, 52.397573696192886 ], [ 4.62403538617203, 52.391908325181305 ], [ 4.621745048621602, 52.387929112279792 ], [ 4.610703646125287, 52.389839443607052 ], [ 4.608419586668036, 52.385576832181414 ], [ 4.602145438963357, 52.384685878290668 ], [ 4.600608338931455, 52.382693454988292 ], [ 4.599519736784271, 52.37758907057303 ], [ 4.601106808402317, 52.376750093539748 ], [ 4.601580063053627, 52.372222432654638 ], [ 4.604738697826451, 52.371393825741876 ], [ 4.604415711054043, 52.36742723578304 ], [ 4.60717108664751, 52.367162248479865 ], [ 4.605664294306679, 52.36347102816439 ], [ 4.615913616067078, 52.361556027169655 ], [ 4.625725473765201, 52.362185905084445 ], [ 4.630468880640747, 52.360517274369748 ], [ 4.636740188157117, 52.361406726182963 ], [ 4.637559403663853, 52.359429692971318 ], [ 4.634867102465241, 52.356014509645235 ], [ 4.636481475692471, 52.353476183091807 ], [ 4.640064281461338, 52.350667101809996 ], [ 4.640964080862698, 52.343876565969694 ], [ 4.639479101776433, 52.338770025764347 ], [ 4.649660119856566, 52.340532977710339 ], [ 4.67266874092016, 52.350585267916045 ], [ 4.676537493634271, 52.354289827657517 ], [ 4.676099317029478, 52.357118936820449 ], [ 4.671577278319696, 52.369551329291284 ], [ 4.672683109894025, 52.374088781101705 ], [ 4.67735352400841, 52.376948604662701 ], [ 4.680059396585514, 52.379796523391086 ], [ 4.685896615051979, 52.383512481232394 ], [ 4.687013198827443, 52.387483498459815 ], [ 4.682675631696537, 52.388307288293284 ], [ 4.681071643566115, 52.390279939106854 ], [ 4.6775426158288, 52.389692499880084 ], [ 4.674379474839945, 52.390806191055155 ], [ 4.673154486365815, 52.393630532191125 ], [ 4.675454284384842, 52.397325609686462 ], [ 4.678563537547596, 52.399609626344528 ], [ 4.668701309470562, 52.401532412309194 ], [ 4.668659988265315, 52.404080705959572 ], [ 4.674522210596836, 52.406381492384178 ], [ 4.672112358309027, 52.409481852296523 ], [ 4.676429482634975, 52.410074175829507 ], [ 4.68266370423372, 52.413792635740869 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0396\", \"naam\": \"Heemskerk\", \"code\": \"0396\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.720384329875825, 52.49499675545281 ], [ 4.711290745172625, 52.496927444135302 ], [ 4.705331604572904, 52.500008154364579 ], [ 4.703312900925205, 52.503111345996324 ], [ 4.706019405010685, 52.506524889328908 ], [ 4.707994547060186, 52.506253048354438 ], [ 4.709120514867537, 52.509940622370245 ], [ 4.706352469221405, 52.510491099469284 ], [ 4.704022345027574, 52.50821239277289 ], [ 4.700465990304725, 52.508758190954367 ], [ 4.696936094909236, 52.507605050214906 ], [ 4.69456665622655, 52.507874406381006 ], [ 4.695323951514951, 52.509860975846607 ], [ 4.692551287700836, 52.510694269065503 ], [ 4.69050886348391, 52.515212923243013 ], [ 4.690455261146082, 52.51861057719848 ], [ 4.69584641707823, 52.526853850574611 ], [ 4.686359834113296, 52.528214028605575 ], [ 4.659877852753281, 52.531735832130991 ], [ 4.653187530818563, 52.530845154400467 ], [ 4.598754684372625, 52.531062374405955 ], [ 4.583322770465686, 52.533790518515076 ], [ 4.579196955173414, 52.522152676191247 ], [ 4.576981892842811, 52.513925724128114 ], [ 4.571682472880273, 52.501996362442448 ], [ 4.587109106078245, 52.498986558649392 ], [ 4.591858477717566, 52.497885824054478 ], [ 4.595400057215595, 52.49819268415775 ], [ 4.59859308790412, 52.495948610765922 ], [ 4.604139975696083, 52.494286350073459 ], [ 4.60728730982535, 52.494590253144352 ], [ 4.611587011680137, 52.49660061847203 ], [ 4.613168221316179, 52.496327779065282 ], [ 4.621418960543346, 52.497797165220128 ], [ 4.635192300429177, 52.499017944683963 ], [ 4.645039703378704, 52.499363126232282 ], [ 4.655309497461939, 52.498011099277548 ], [ 4.66588953988425, 52.50175705720531 ], [ 4.666302131612359, 52.50062690227373 ], [ 4.675851769229934, 52.49502123473416 ], [ 4.679824027145354, 52.493062828116408 ], [ 4.686930138370428, 52.492255494529481 ], [ 4.690498719390992, 52.490860679787041 ], [ 4.694824036588845, 52.491452337019325 ], [ 4.694478830648185, 52.488335499427556 ], [ 4.697644040810997, 52.487504445682511 ], [ 4.699578740523815, 52.489781002224412 ], [ 4.703536340020396, 52.488671216921773 ], [ 4.703159869446692, 52.487536384290955 ], [ 4.707905135283672, 52.486430993822566 ], [ 4.708264322115676, 52.488698373871244 ], [ 4.714499359064459, 52.493264539873742 ], [ 4.720384329875825, 52.49499675545281 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0718\", \"naam\": \"Vlissingen\", \"code\": \"0718\", \"ligtInProvincieCode\": \"29\", \"ligtInProvincieNaam\": \"Zeeland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 3.703786924212343, 51.48227574978182 ], [ 3.695741041031864, 51.481026429774708 ], [ 3.681307774894966, 51.47543459769674 ], [ 3.675969866468562, 51.473940194378812 ], [ 3.666888766703865, 51.469557900352136 ], [ 3.662685625500831, 51.468646105673955 ], [ 3.656921085338985, 51.468277523284364 ], [ 3.651894293639128, 51.468769388630392 ], [ 3.646032379955812, 51.470948104358904 ], [ 3.634978931494165, 51.477864025776398 ], [ 3.629082230901832, 51.480891151308128 ], [ 3.621588563597093, 51.475396182679191 ], [ 3.617638797644238, 51.477885661928141 ], [ 3.60887021707528, 51.47548633553162 ], [ 3.604908666214475, 51.478258468082842 ], [ 3.60178350492829, 51.479343728666073 ], [ 3.599628575897634, 51.475345149510197 ], [ 3.596866294739216, 51.477002349206359 ], [ 3.59064914574529, 51.47832309852658 ], [ 3.589426775928535, 51.480003820417984 ], [ 3.587149742932576, 51.479118952081961 ], [ 3.584091405043984, 51.478505228069537 ], [ 3.582266998361981, 51.47592770700124 ], [ 3.575777177844039, 51.474410866235864 ], [ 3.574112910841083, 51.477500865526537 ], [ 3.57066978638556, 51.476880808286602 ], [ 3.565992252904521, 51.47822420493987 ], [ 3.566196143215994, 51.473128724432769 ], [ 3.564372965079023, 51.470550928736891 ], [ 3.560115022179973, 51.471050860082705 ], [ 3.557148647001269, 51.468171781962766 ], [ 3.555235045557747, 51.467858495954566 ], [ 3.552799589344142, 51.470936095910766 ], [ 3.548621529526845, 51.469454043369169 ], [ 3.546391614603949, 51.467436065409295 ], [ 3.54145560816932, 51.465658529910662 ], [ 3.528050916341134, 51.463746154953547 ], [ 3.525414104363165, 51.462287802201352 ], [ 3.514624800748557, 51.4717460762866 ], [ 3.502464651844449, 51.486280005641227 ], [ 3.496884486138584, 51.490721984452925 ], [ 3.496043520064342, 51.492407943959947 ], [ 3.493311813459402, 51.493213447496792 ], [ 3.486200787964405, 51.49734682409283 ], [ 3.476042026312831, 51.500580135465889 ], [ 3.450445912871218, 51.513188572379221 ], [ 3.443676963371501, 51.51817490600061 ], [ 3.443616444905522, 51.519590232297134 ], [ 3.434954994500776, 51.523694765803334 ], [ 3.432544916949574, 51.525920592310591 ], [ 3.432350090083973, 51.530449608800268 ], [ 3.434537692651113, 51.542383416706265 ], [ 3.454673879084143, 51.549799893113232 ], [ 3.456602242293351, 51.54983177384684 ], [ 3.464159897135378, 51.553638853555142 ], [ 3.470561600857894, 51.557426473751462 ], [ 3.472490302418889, 51.557458093951475 ], [ 3.475095119782891, 51.559766857578616 ], [ 3.478157403615973, 51.560383453662894 ], [ 3.47962910680725, 51.562107067448039 ], [ 3.482703486704834, 51.562440476196457 ], [ 3.484561228678271, 51.564170315593664 ], [ 3.486099006374961, 51.573543011018529 ], [ 3.452610804682595, 51.616332964510846 ], [ 3.387178900565342, 51.592570767676214 ], [ 3.307936490880532, 51.433403025137075 ], [ 3.352726545855662, 51.378671042860326 ], [ 3.362979615290705, 51.372900831156592 ], [ 3.372099519061516, 51.375325106019638 ], [ 3.372037029790278, 51.376740396269078 ], [ 3.37512306541173, 51.37651045141714 ], [ 3.379968190658662, 51.37999329713017 ], [ 3.394420423678407, 51.383640610330872 ], [ 3.40850297308877, 51.386996555818619 ], [ 3.422538853231468, 51.391483069161346 ], [ 3.429420328507438, 51.39244867335757 ], [ 3.43441672118235, 51.392532491861857 ], [ 3.4402422203258, 51.391213603442502 ], [ 3.448289088972418, 51.39191428250853 ], [ 3.455087270748477, 51.394859853961911 ], [ 3.465429316504594, 51.395880629064621 ], [ 3.474174945571483, 51.398290624452805 ], [ 3.482584373106291, 51.399561396551498 ], [ 3.491308093536419, 51.402536260276811 ], [ 3.498157563172117, 51.404347043648542 ], [ 3.503399554032997, 51.407831040650322 ], [ 3.514887520812625, 51.409149155241138 ], [ 3.529532950961302, 51.408533644574909 ], [ 3.550794123455657, 51.406037866584263 ], [ 3.557455127373607, 51.403026732682882 ], [ 3.557161549768937, 51.400756038246811 ], [ 3.559252566708294, 51.40617079723048 ], [ 3.691524048719108, 51.397689304636259 ], [ 3.738173501430129, 51.394676290617625 ], [ 3.736426085127738, 51.411080017473793 ], [ 3.733723995937499, 51.411324979644206 ], [ 3.72437098215611, 51.414590967699283 ], [ 3.71845731686895, 51.418471988193907 ], [ 3.71446583515754, 51.422380305234398 ], [ 3.710556978586994, 51.424023675083788 ], [ 3.718125635127204, 51.427531244913993 ], [ 3.709433371529307, 51.433638034555358 ], [ 3.702599885878301, 51.441470561085588 ], [ 3.696275017319228, 51.445911067272235 ], [ 3.703055515703217, 51.449974660604347 ], [ 3.709868504223508, 51.453188563495182 ], [ 3.711241407723323, 51.457740293261537 ], [ 3.714529057822776, 51.462602715463689 ], [ 3.715892307885849, 51.467437491651857 ], [ 3.717349311573258, 51.469724344768508 ], [ 3.709575524841538, 51.471595600968278 ], [ 3.699242110585301, 51.46974709677356 ], [ 3.695724193390748, 51.47111241398229 ], [ 3.701020480862779, 51.473738310755444 ], [ 3.705900913123866, 51.477207720683175 ], [ 3.706223275366108, 51.478911863559112 ], [ 3.703786924212343, 51.48227574978182 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0498\", \"naam\": \"Drechterland\", \"code\": \"0498\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.135126948960358, 52.603918183430167 ], [ 5.257078161586261, 52.644604346847629 ], [ 5.262126899377694, 52.676888353068811 ], [ 5.247460572248713, 52.684800085938797 ], [ 5.245872002163583, 52.686497074911173 ], [ 5.233208610338598, 52.685915086811853 ], [ 5.209469379716832, 52.683900013142932 ], [ 5.205916795789197, 52.681629502576044 ], [ 5.204745995795379, 52.677663690119424 ], [ 5.195581684114135, 52.69208965073495 ], [ 5.195976295196058, 52.692373428823522 ], [ 5.187199424715946, 52.70736560416951 ], [ 5.15990904594364, 52.701087499115445 ], [ 5.145679169357878, 52.696812332309612 ], [ 5.125126984633713, 52.691105983856509 ], [ 5.091563205467224, 52.678852118499741 ], [ 5.095942396671117, 52.674898875098833 ], [ 5.098736342528927, 52.67122478205097 ], [ 5.096371790536946, 52.66980329599091 ], [ 5.100749646521775, 52.665849865758375 ], [ 5.107498326979517, 52.662185015116869 ], [ 5.107514529126998, 52.659636732492082 ], [ 5.111485985265786, 52.657097679542751 ], [ 5.114671238101091, 52.653707253411113 ], [ 5.116249732325671, 52.654277152956219 ], [ 5.119432690511773, 52.651169739929642 ], [ 5.117066807851815, 52.650031802092521 ], [ 5.102057600859073, 52.647165297880179 ], [ 5.104484785244779, 52.638676650259072 ], [ 5.106082498848616, 52.636132101615274 ], [ 5.101345809587041, 52.634988217624525 ], [ 5.095037497230448, 52.63242454977167 ], [ 5.125183393690064, 52.615222687380587 ], [ 5.135126948960358, 52.603918183430167 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1509\", \"naam\": \"Oude IJsselstreek\", \"code\": \"1509\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.464411766190489, 51.855353761936051 ], [ 6.468023044688483, 51.860135122978029 ], [ 6.468506741933094, 51.864095596554222 ], [ 6.471239779908863, 51.864636809703256 ], [ 6.47173063660199, 51.868880412844142 ], [ 6.474464003810136, 51.869421549692916 ], [ 6.48198387288514, 51.875015855959603 ], [ 6.484002703917822, 51.878112316957996 ], [ 6.479920653067295, 51.886080224551279 ], [ 6.47973147501545, 51.894295034089716 ], [ 6.478640851743265, 51.897420465870468 ], [ 6.473771593073735, 51.905112226171596 ], [ 6.472666620341911, 51.907671311138934 ], [ 6.479332300774137, 51.90987519476456 ], [ 6.482839119311633, 51.91012574976947 ], [ 6.488741741012162, 51.912902634447342 ], [ 6.487213846459336, 51.914049782270602 ], [ 6.491144732666718, 51.915712161197327 ], [ 6.490797531522145, 51.917414671498854 ], [ 6.493145132670951, 51.917959013646744 ], [ 6.492548359156631, 51.925328036468144 ], [ 6.496932417949012, 51.929534834527857 ], [ 6.495397184233862, 51.930398945442718 ], [ 6.503014343286201, 51.939389520726138 ], [ 6.500679545093591, 51.939411663118314 ], [ 6.503063600737419, 51.941371506898832 ], [ 6.504732964333623, 51.945886968717907 ], [ 6.517633198358804, 51.948029279506741 ], [ 6.519772117101235, 51.95565530531843 ], [ 6.527643883809346, 51.958977704192158 ], [ 6.532791516656502, 51.962326156435047 ], [ 6.527434449868593, 51.966059931881759 ], [ 6.524751992649882, 51.967785159301329 ], [ 6.506090073304762, 51.969097044818128 ], [ 6.494832684750306, 51.970619654560046 ], [ 6.483629891488795, 51.974406317170271 ], [ 6.481279446072145, 51.973861797213438 ], [ 6.473538752887052, 51.975915994822941 ], [ 6.46775152539967, 51.978234950379253 ], [ 6.462640837931755, 51.976299364015816 ], [ 6.459840150270201, 51.973209692007778 ], [ 6.451628495858709, 51.971868285438205 ], [ 6.446901941160844, 51.969645340355868 ], [ 6.441476937130269, 51.970826920829985 ], [ 6.441107481933958, 51.971679844549456 ], [ 6.4348569256902, 51.970886086746376 ], [ 6.434883377566738, 51.972018665957826 ], [ 6.430593135874201, 51.971773607408764 ], [ 6.416203991690117, 51.972750009233344 ], [ 6.407417539231237, 51.963197670835086 ], [ 6.403389379731691, 51.957285292133605 ], [ 6.397473408318612, 51.953937843190687 ], [ 6.385926231251083, 51.94242519510518 ], [ 6.379950916549728, 51.93624535172308 ], [ 6.381444694729314, 51.9334006932337 ], [ 6.377089768310054, 51.930039018448966 ], [ 6.360984586480678, 51.923093508369284 ], [ 6.355550704700778, 51.923704819923202 ], [ 6.349326508632188, 51.923755948296048 ], [ 6.348566662876541, 51.924611774393178 ], [ 6.336925961011276, 51.926122444189197 ], [ 6.333017726862728, 51.925304360959402 ], [ 6.326876206797076, 51.929318453513382 ], [ 6.32078656848035, 51.935880613232207 ], [ 6.314572330244723, 51.936496213623052 ], [ 6.308410202405804, 51.939659879389971 ], [ 6.30566874455252, 51.938831733762214 ], [ 6.305633993183805, 51.937132803590309 ], [ 6.298669831607604, 51.939169419103067 ], [ 6.299030230796697, 51.937750623421586 ], [ 6.295476432850529, 51.935229340961392 ], [ 6.296208811789725, 51.932958077677796 ], [ 6.293061762041027, 51.931283176915997 ], [ 6.289852347547251, 51.926493470351211 ], [ 6.290939712365715, 51.922520308433661 ], [ 6.294795457341599, 51.920791386409306 ], [ 6.302168993404483, 51.919884597318934 ], [ 6.311905218590251, 51.920374779022374 ], [ 6.315748264354133, 51.918078860851267 ], [ 6.316880008521958, 51.916370702518329 ], [ 6.316026008627117, 51.912695836918068 ], [ 6.310923476115384, 51.910470454676556 ], [ 6.30900801127187, 51.911901507061167 ], [ 6.30702286866268, 51.909934656792636 ], [ 6.306175589621823, 51.906542870431309 ], [ 6.307290020552305, 51.903985332865403 ], [ 6.311096986827264, 51.899990626825499 ], [ 6.315715918895376, 51.897688588671194 ], [ 6.31805452270767, 51.897953280591757 ], [ 6.322295895322805, 51.89622037657152 ], [ 6.329652967271151, 51.894745560275247 ], [ 6.33234454748608, 51.893307917383574 ], [ 6.331154514708937, 51.89218467637982 ], [ 6.324086358565132, 51.888842839953455 ], [ 6.329350355791378, 51.88030463514265 ], [ 6.326606226265272, 51.879193807594156 ], [ 6.331569228459416, 51.874905945987223 ], [ 6.327265126418629, 51.873524467842493 ], [ 6.329160596235457, 51.871243648176119 ], [ 6.324450673361257, 51.869015713397204 ], [ 6.320164966952882, 51.868483441601747 ], [ 6.312394203570043, 51.868544935906996 ], [ 6.312017305350103, 51.869114311567706 ], [ 6.299178110465133, 51.868365138132056 ], [ 6.299166631687503, 51.867798821985261 ], [ 6.298349425671753, 51.865822748384815 ], [ 6.300651782253065, 51.864388842791371 ], [ 6.302438803574661, 51.856728442570748 ], [ 6.306167081172905, 51.849052821028309 ], [ 6.319036045932897, 51.85150018991235 ], [ 6.333024035054877, 51.851671508352702 ], [ 6.339997088548427, 51.850765496427982 ], [ 6.347376351661086, 51.850705361089567 ], [ 6.358177723972589, 51.847218036798701 ], [ 6.362357579788965, 51.842935296597503 ], [ 6.364200842206823, 51.838388671493497 ], [ 6.3629685305376, 51.835283658927608 ], [ 6.369137262807402, 51.833249756559027 ], [ 6.373438781564531, 51.834629713478748 ], [ 6.378880378928655, 51.834867058311133 ], [ 6.388172999067285, 51.833655328926781 ], [ 6.392392978000712, 51.831353596735809 ], [ 6.400099868810075, 51.828738452077857 ], [ 6.402008909139673, 51.827305917518544 ], [ 6.407462589025802, 51.82810824423504 ], [ 6.402995972033392, 51.83664322786894 ], [ 6.408030446530499, 51.836033123934079 ], [ 6.407298843922438, 51.838021939533157 ], [ 6.40236626984914, 51.843162445942603 ], [ 6.404824129185448, 51.848805303722983 ], [ 6.408784830193905, 51.852169382758255 ], [ 6.407671017395629, 51.85444472833813 ], [ 6.401864035878805, 51.855344690188147 ], [ 6.396871781536639, 51.85793659738404 ], [ 6.39150944653655, 51.861381073394561 ], [ 6.388025811745711, 51.861977237172916 ], [ 6.386916999665608, 51.864535538651531 ], [ 6.390991467461623, 51.872996948116217 ], [ 6.392953307371665, 51.873829776813778 ], [ 6.396762821016054, 51.87039861106485 ], [ 6.398329735654165, 51.870951539250321 ], [ 6.402565456557299, 51.869215746737254 ], [ 6.406871436526896, 51.870594460329627 ], [ 6.409176993492618, 51.869441588035329 ], [ 6.412324000634734, 51.871113392163913 ], [ 6.414992111392898, 51.86882441175576 ], [ 6.420386032040179, 51.866794618567781 ], [ 6.421946597164701, 51.867064081589056 ], [ 6.428505484030668, 51.865023637915471 ], [ 6.429572588921697, 51.86076605420913 ], [ 6.432258934801834, 51.859326130906801 ], [ 6.438540238073603, 51.86210212259018 ], [ 6.441648005449751, 51.862074248945284 ], [ 6.446771454096882, 51.865143407494372 ], [ 6.451044912624996, 51.865104759697054 ], [ 6.458278048094471, 51.85880839859297 ], [ 6.464411766190489, 51.855353761936051 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1942\", \"naam\": \"Gooise Meren\", \"code\": \"1942\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.200937545487834, 52.268211360951902 ], [ 5.193469829360811, 52.272446913909441 ], [ 5.188362382967766, 52.27470379652091 ], [ 5.18481783435111, 52.27809582108334 ], [ 5.189910786991576, 52.279237103453234 ], [ 5.195001555300008, 52.280944501057618 ], [ 5.19577007361396, 52.284626947795431 ], [ 5.195360771676255, 52.288590651811838 ], [ 5.193402016098868, 52.288021121454577 ], [ 5.192215369449051, 52.290284523341775 ], [ 5.18710580865791, 52.29254134300534 ], [ 5.195726204679437, 52.294820957322273 ], [ 5.19570669994119, 52.29935162184497 ], [ 5.197664777593059, 52.300204279429131 ], [ 5.203552323841499, 52.29964722644435 ], [ 5.208650501077634, 52.300221365093407 ], [ 5.21060549269538, 52.301923307739735 ], [ 5.214149976526523, 52.298530525281656 ], [ 5.219640500810542, 52.299104763230517 ], [ 5.229439910244301, 52.301666744783262 ], [ 5.23021163913542, 52.305348954020559 ], [ 5.2282243692812, 52.312425492748034 ], [ 5.224643613350474, 52.325729483779547 ], [ 5.220324247103171, 52.326006641292672 ], [ 5.205020777752351, 52.324285079834112 ], [ 5.151270256391081, 52.318526798323276 ], [ 5.14616151091356, 52.319649174293644 ], [ 5.134727021783588, 52.328686693846755 ], [ 5.095270109329895, 52.358611634059756 ], [ 5.079473219310662, 52.370464598245484 ], [ 5.079347469074563, 52.388586830450123 ], [ 5.067189169584985, 52.384590303228528 ], [ 5.037778832989304, 52.37544589841908 ], [ 5.039122267724139, 52.354495547101941 ], [ 5.040012007375625, 52.341189297652647 ], [ 5.023948176040508, 52.336610399973459 ], [ 5.018472039848727, 52.334044951154731 ], [ 5.012613470877233, 52.330345361856679 ], [ 5.01619661484575, 52.324410105966116 ], [ 5.017776257804159, 52.323282372533072 ], [ 5.018138223484298, 52.326964697021616 ], [ 5.017327130843658, 52.330077019893338 ], [ 5.021246194656567, 52.330938709677547 ], [ 5.028315536875999, 52.330677191056488 ], [ 5.04089458180559, 52.328732491658087 ], [ 5.046013544069466, 52.32676518257 ], [ 5.049544593416064, 52.327058478828512 ], [ 5.061346944463501, 52.32369354660544 ], [ 5.060580577283284, 52.32114291786997 ], [ 5.056665824617241, 52.31971620434372 ], [ 5.059039741771993, 52.317174293821772 ], [ 5.065305282245213, 52.319173685419628 ], [ 5.064499694944932, 52.322003176048099 ], [ 5.069604693430932, 52.321733819313962 ], [ 5.077481039710261, 52.318073507844694 ], [ 5.093207363541198, 52.314149268177331 ], [ 5.092037482544336, 52.31301368139809 ], [ 5.100689811149008, 52.310203263386761 ], [ 5.096395278503159, 52.306794760536945 ], [ 5.095630902582759, 52.303678020536189 ], [ 5.096828372906669, 52.300566105335136 ], [ 5.101947064523055, 52.297746866453828 ], [ 5.106259042618444, 52.298323524215789 ], [ 5.107837251551833, 52.296911415502414 ], [ 5.105890002825827, 52.294641445821583 ], [ 5.103143932090263, 52.294634883317102 ], [ 5.099231977531924, 52.292926407116362 ], [ 5.098460285878283, 52.290942338234096 ], [ 5.104772459904555, 52.285294182700916 ], [ 5.107516173551682, 52.285583872688406 ], [ 5.11184457345806, 52.283328669638728 ], [ 5.122837853874567, 52.281371563665886 ], [ 5.125598094357422, 52.278829171180277 ], [ 5.134231989991846, 52.277715273994453 ], [ 5.136972244075062, 52.278570613673018 ], [ 5.141657789434288, 52.282261642429866 ], [ 5.142820353422381, 52.284812577248751 ], [ 5.146753168432395, 52.28283845008675 ], [ 5.146757759485142, 52.281988950336824 ], [ 5.141292208804553, 52.277446994928724 ], [ 5.14325759166228, 52.276601555111604 ], [ 5.141696852540846, 52.275182475067588 ], [ 5.144054245296933, 52.274337834941001 ], [ 5.143686919629254, 52.269806354758167 ], [ 5.140186508717529, 52.264702024532269 ], [ 5.137067750888737, 52.261580589230228 ], [ 5.137470875551421, 52.259599244796448 ], [ 5.141392316627146, 52.25932429164515 ], [ 5.162186166889084, 52.255684471361342 ], [ 5.174306955897643, 52.261936672903992 ], [ 5.180176560258949, 52.264212458139937 ], [ 5.183314091712526, 52.263934738797907 ], [ 5.200937545487834, 52.268211360951902 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0450\", \"naam\": \"Uitgeest\", \"code\": \"0450\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.782312363365422, 52.519680657477238 ], [ 4.777807270462504, 52.531833547065766 ], [ 4.777779908828942, 52.533815532754438 ], [ 4.774612875016396, 52.534648713633757 ], [ 4.767907857535288, 52.534613922372074 ], [ 4.763529317670122, 52.537422608435676 ], [ 4.759190510250868, 52.537399734095096 ], [ 4.755270467308716, 52.535679964046885 ], [ 4.743359378610441, 52.540996023189848 ], [ 4.735428211677872, 52.543784357034774 ], [ 4.725523460300025, 52.546561180234598 ], [ 4.723550877917868, 52.54655017026176 ], [ 4.719644268541086, 52.543979815354334 ], [ 4.718739474349202, 52.55162008065102 ], [ 4.713640439256538, 52.549609135046495 ], [ 4.705771452021638, 52.548148425114618 ], [ 4.706591083915727, 52.546170994639503 ], [ 4.703842656891491, 52.545305721205501 ], [ 4.694392357817591, 52.544118300513738 ], [ 4.695704503300875, 52.535914239727511 ], [ 4.697782739066028, 52.529130419284904 ], [ 4.69584641707823, 52.526853850574611 ], [ 4.690455261146082, 52.51861057719848 ], [ 4.69050886348391, 52.515212923243013 ], [ 4.692551287700836, 52.510694269065503 ], [ 4.695323951514951, 52.509860975846607 ], [ 4.69456665622655, 52.507874406381006 ], [ 4.696936094909236, 52.507605050214906 ], [ 4.700465990304725, 52.508758190954367 ], [ 4.704022345027574, 52.50821239277289 ], [ 4.706352469221405, 52.510491099469284 ], [ 4.709120514867537, 52.509940622370245 ], [ 4.707994547060186, 52.506253048354438 ], [ 4.706019405010685, 52.506524889328908 ], [ 4.703312900925205, 52.503111345996324 ], [ 4.705331604572904, 52.500008154364579 ], [ 4.711290745172625, 52.496927444135302 ], [ 4.720384329875825, 52.49499675545281 ], [ 4.731401101349258, 52.496190828109683 ], [ 4.736859707433978, 52.500185175196748 ], [ 4.742725830196671, 52.503331987380939 ], [ 4.75287163310799, 52.510465743614155 ], [ 4.748465878009304, 52.515255877518094 ], [ 4.74997338251343, 52.520077744807814 ], [ 4.752322789291878, 52.52122298567479 ], [ 4.761037369285303, 52.518437663955346 ], [ 4.763781254765439, 52.519584758317656 ], [ 4.782312363365422, 52.519680657477238 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0779\", \"naam\": \"Geertruidenberg\", \"code\": \"0779\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.925206521153799, 51.673046708984323 ], [ 4.925186292295725, 51.675029010271544 ], [ 4.933294311046825, 51.67675989665274 ], [ 4.918142290553961, 51.720029295423721 ], [ 4.910018134267606, 51.719146910543579 ], [ 4.900342144022297, 51.718540721387711 ], [ 4.891422330751072, 51.71963611338775 ], [ 4.880571953383634, 51.720156104286126 ], [ 4.873213426394198, 51.720124063245812 ], [ 4.862008330357716, 51.717808808053626 ], [ 4.850417136072165, 51.715490709125042 ], [ 4.836897881137388, 51.712596024686164 ], [ 4.829938319961988, 51.711713540375214 ], [ 4.823746392134932, 51.711400731721177 ], [ 4.825731682239173, 51.707445486793127 ], [ 4.829352517810978, 51.696418047071475 ], [ 4.832117706808377, 51.691900005954977 ], [ 4.839567567056289, 51.68400551207926 ], [ 4.842327564854547, 51.679770404505106 ], [ 4.843413547586232, 51.686005820288798 ], [ 4.84652982377945, 51.684321055400879 ], [ 4.850403011629361, 51.684055671537529 ], [ 4.856624585056585, 51.681535234458153 ], [ 4.856641182520599, 51.680119317803943 ], [ 4.866360495153296, 51.676198166624353 ], [ 4.871006697952196, 51.675935538721859 ], [ 4.875662447193988, 51.67482317382516 ], [ 4.876452227655043, 51.673410629921179 ], [ 4.880340161277806, 51.671728332457967 ], [ 4.880311626786277, 51.674276992128959 ], [ 4.896555255783424, 51.674912565608672 ], [ 4.898885848387766, 51.674072712856962 ], [ 4.907001695297997, 51.674955863415342 ], [ 4.906602764642231, 51.676087017393193 ], [ 4.912787477227934, 51.676678627665716 ], [ 4.913966001015027, 51.674984210807558 ], [ 4.917832128074522, 51.675282965989318 ], [ 4.925206521153799, 51.673046708984323 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0370\", \"naam\": \"Beemster\", \"code\": \"0370\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.934202950840253, 52.511579677256783 ], [ 4.942078706003016, 52.512458955739831 ], [ 4.9464179927196, 52.512191993059751 ], [ 4.949940762371633, 52.514753453214055 ], [ 4.954260801689846, 52.516468241933396 ], [ 4.955776997287853, 52.522703243757867 ], [ 4.956896487872915, 52.529219936614155 ], [ 4.962346887378089, 52.536601656959824 ], [ 4.965869824711024, 52.539445780174105 ], [ 4.973327509798766, 52.543436201959366 ], [ 4.976449267157056, 52.547128073099088 ], [ 4.97524980412265, 52.548822854489643 ], [ 4.977572421914311, 52.553644538261743 ], [ 4.976320085672046, 52.56100225387528 ], [ 4.980237942486073, 52.564130448172563 ], [ 4.989664506473669, 52.569259154818106 ], [ 4.997111851875045, 52.57523008146844 ], [ 4.996694496743262, 52.57777709532396 ], [ 4.99191616407156, 52.582291752960643 ], [ 4.982411168675013, 52.585374440441861 ], [ 4.980423717519836, 52.586783420574847 ], [ 4.977659488194742, 52.586773925358514 ], [ 4.968598541395433, 52.584477119930476 ], [ 4.962705504228229, 52.581341518164017 ], [ 4.95561223926442, 52.579900191616382 ], [ 4.954019019936188, 52.581310164654226 ], [ 4.953966151282733, 52.5866898989783 ], [ 4.949961097221275, 52.592338303540956 ], [ 4.949933003599804, 52.595169734916283 ], [ 4.949100851450093, 52.599413968790969 ], [ 4.956973249251424, 52.602274257299342 ], [ 4.959321418754509, 52.604547955687032 ], [ 4.956495179845793, 52.610767101083169 ], [ 4.951723139654129, 52.61386438817091 ], [ 4.948172600523161, 52.613285023614182 ], [ 4.934811028716015, 52.606156106886388 ], [ 4.928893942614352, 52.60528397860751 ], [ 4.926903882078195, 52.606692053315427 ], [ 4.921354992053526, 52.608369352480686 ], [ 4.915425747518083, 52.608629118797495 ], [ 4.907558006408334, 52.605482942776753 ], [ 4.898907615098156, 52.601766719489945 ], [ 4.893813569117379, 52.598064677519154 ], [ 4.889908436131805, 52.594084238391616 ], [ 4.886440746506934, 52.586424494837374 ], [ 4.880194281071312, 52.580168584242749 ], [ 4.87470292484095, 52.577030307391375 ], [ 4.868794278082608, 52.575872044950977 ], [ 4.866054196059259, 52.573877961749758 ], [ 4.862953273567733, 52.569050655555365 ], [ 4.863000393265055, 52.565086667930281 ], [ 4.858726656418634, 52.559404583883875 ], [ 4.854021789745454, 52.556835135664826 ], [ 4.848576681482496, 52.550297929232975 ], [ 4.843887322103381, 52.546595505327936 ], [ 4.842347683247946, 52.543473704547338 ], [ 4.835676644020457, 52.540611312562056 ], [ 4.833725599432665, 52.538903277608618 ], [ 4.835324659860255, 52.537211766203008 ], [ 4.837377976914985, 52.530708625423827 ], [ 4.842944698975648, 52.527053203534123 ], [ 4.851647864095448, 52.524827513459961 ], [ 4.857165084943292, 52.525135439318682 ], [ 4.863487846687318, 52.524030867622081 ], [ 4.874574928680614, 52.520115037218801 ], [ 4.884445053034271, 52.519024620140947 ], [ 4.894317852219585, 52.517650234845817 ], [ 4.902594375847622, 52.517967477750823 ], [ 4.910492026684372, 52.516866826129394 ], [ 4.920002232703356, 52.512374098508204 ], [ 4.928298547338989, 52.510707514507935 ], [ 4.934202950840253, 52.511579677256783 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0736\", \"naam\": \"De Ronde Venen\", \"code\": \"0736\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.891995374712556, 52.161696049441339 ], [ 4.909595737483751, 52.161768593403899 ], [ 4.913880040883943, 52.163484928288469 ], [ 4.928705382117812, 52.16722477768532 ], [ 4.93371863867646, 52.174323601300912 ], [ 4.934083988069035, 52.176873605852286 ], [ 4.946123273150473, 52.185980884500026 ], [ 4.948474062372576, 52.185706466572682 ], [ 4.94993389647735, 52.196472605256595 ], [ 4.950694572243247, 52.198740832325939 ], [ 4.960880303750578, 52.197928516041053 ], [ 4.961258217793633, 52.199345761606622 ], [ 4.966733206024412, 52.199931735605283 ], [ 4.968224526286905, 52.207865963694701 ], [ 4.973587664626581, 52.220627759750982 ], [ 4.982971605057851, 52.222359293093106 ], [ 4.98058032850929, 52.226881882146046 ], [ 4.994651413570978, 52.230327566281531 ], [ 4.994631450198119, 52.232592893383867 ], [ 4.997388537160215, 52.23090297705879 ], [ 5.007566304372163, 52.231785640062313 ], [ 5.020874260397072, 52.280816494014566 ], [ 5.022036826762858, 52.282519116840291 ], [ 5.021481654793531, 52.302339341980094 ], [ 5.014407284064282, 52.303733108422485 ], [ 5.008148632193408, 52.301447856539177 ], [ 5.005428912404533, 52.298324235164401 ], [ 5.003857170377835, 52.29860232200685 ], [ 5.001920072179189, 52.295764321874053 ], [ 5.001944607846381, 52.292932694231673 ], [ 4.997661805896268, 52.289237442402445 ], [ 4.983530733317322, 52.290322735938155 ], [ 4.975330129469704, 52.286330058582642 ], [ 4.969868307273915, 52.283196019412408 ], [ 4.967549898359366, 52.279506578372313 ], [ 4.966360030322033, 52.280918209551793 ], [ 4.962054281223817, 52.280053289698344 ], [ 4.960896791590518, 52.278066916614698 ], [ 4.955404020302359, 52.278330156559356 ], [ 4.947947644638202, 52.278869035067245 ], [ 4.942855338825402, 52.278283661769059 ], [ 4.933810016727318, 52.280797874751215 ], [ 4.926367639274827, 52.279919583557223 ], [ 4.925996032447791, 52.277935925016173 ], [ 4.927605559977136, 52.27397777173713 ], [ 4.926838927008263, 52.272275750397576 ], [ 4.929232287872579, 52.268320621464973 ], [ 4.924542323277003, 52.266886491769625 ], [ 4.923404558759687, 52.263200776691811 ], [ 4.919104342768082, 52.262051130291965 ], [ 4.917590120916454, 52.256947992448211 ], [ 4.910972308120214, 52.252673897075873 ], [ 4.902735858982614, 52.253206769065947 ], [ 4.900014092658028, 52.251213357584554 ], [ 4.896486946078478, 52.251198764234793 ], [ 4.890586261534631, 52.253156338973689 ], [ 4.886297426591653, 52.251156014152201 ], [ 4.882741410418442, 52.253689462834579 ], [ 4.877264177417155, 52.252816430870475 ], [ 4.873759776839697, 52.250819031198937 ], [ 4.870203075226354, 52.253352101720068 ], [ 4.868655176840921, 52.251646268490674 ], [ 4.863198472934144, 52.249073619623374 ], [ 4.857337058250223, 52.247631604472851 ], [ 4.855401377535773, 52.245640678273283 ], [ 4.855043368837413, 52.242807307031676 ], [ 4.851918949722606, 52.241943665671833 ], [ 4.850784420934826, 52.238540405610351 ], [ 4.846852765730435, 52.239655195363937 ], [ 4.846481595306477, 52.237954438889808 ], [ 4.842969365744894, 52.236805606326627 ], [ 4.842986667534793, 52.235389802975227 ], [ 4.838285512025605, 52.235368053983017 ], [ 4.83479125974764, 52.232803175309151 ], [ 4.829723453119867, 52.230797129822626 ], [ 4.819168638332051, 52.229047784863965 ], [ 4.814490012503249, 52.227326129034374 ], [ 4.808618334318435, 52.227014337525503 ], [ 4.805865435610931, 52.227850355093061 ], [ 4.801959650285633, 52.226981535147928 ], [ 4.794521372635075, 52.22666127016322 ], [ 4.794562811841345, 52.223546517788897 ], [ 4.79573778101579, 52.223552407190475 ], [ 4.79695401876928, 52.22044352968976 ], [ 4.802082388704566, 52.217637263122882 ], [ 4.801724270148104, 52.215086881965213 ], [ 4.801481561667873, 52.203758524552612 ], [ 4.803084598579986, 52.200934673560475 ], [ 4.813643051661066, 52.20183597057509 ], [ 4.814458727528516, 52.199291318757247 ], [ 4.821935669233651, 52.196212381665788 ], [ 4.823537138146494, 52.193388246976482 ], [ 4.82906626436962, 52.189450006786579 ], [ 4.833395827532668, 52.187488141808451 ], [ 4.836170206816813, 52.184669331558013 ], [ 4.843660450896508, 52.180173188547251 ], [ 4.855415687218663, 52.178810836594153 ], [ 4.891995374712556, 52.161696049441339 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0173\", \"naam\": \"Oldenzaal\", \"code\": \"0173\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.939208448473376, 52.283934974754963 ], [ 6.935524241699653, 52.290780429450329 ], [ 6.941396567410103, 52.290420134928482 ], [ 6.946181751951555, 52.292622819217719 ], [ 6.941683750093616, 52.298629549183389 ], [ 6.944498730949518, 52.300574987472444 ], [ 6.950258930999667, 52.308145719409737 ], [ 6.94857608174425, 52.316097921544632 ], [ 6.949753193479198, 52.316082370273676 ], [ 6.950265141686212, 52.319474156187589 ], [ 6.944771527085845, 52.319546653952052 ], [ 6.945606010771364, 52.320951719706805 ], [ 6.940946568399777, 52.3224291004666 ], [ 6.934285144973224, 52.322799658877614 ], [ 6.936405359664028, 52.327303283627856 ], [ 6.937388024174033, 52.33295463227639 ], [ 6.931882861979516, 52.332743456092615 ], [ 6.930989508807269, 52.329639801490792 ], [ 6.918458975813486, 52.330652351449785 ], [ 6.913739185774039, 52.330430161931929 ], [ 6.907134484479077, 52.332497702200527 ], [ 6.900490554450888, 52.33343253328286 ], [ 6.898354402431578, 52.328362085601476 ], [ 6.894323804079903, 52.325298224636796 ], [ 6.88792958993863, 52.321981043356146 ], [ 6.88636942134713, 52.322284043755609 ], [ 6.884273606265833, 52.318345674358959 ], [ 6.879976233353388, 52.318966426611389 ], [ 6.877393772592327, 52.312201994815105 ], [ 6.871910370730118, 52.312554194252179 ], [ 6.867126683436508, 52.310348506785644 ], [ 6.867060653849593, 52.308366874296965 ], [ 6.865042563632279, 52.306692869617983 ], [ 6.861502463036833, 52.306453865131502 ], [ 6.859670503880413, 52.298546863547053 ], [ 6.865506827632579, 52.297057967165841 ], [ 6.872193390258118, 52.297540565028832 ], [ 6.879942621521976, 52.294610851549116 ], [ 6.889288191907688, 52.292509972911333 ], [ 6.894424819501155, 52.293577420195476 ], [ 6.912192961671898, 52.285419551983559 ], [ 6.913654434463187, 52.282285346064086 ], [ 6.918800206810621, 52.283634825223423 ], [ 6.939208448473376, 52.283934974754963 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0797\", \"naam\": \"Heusden\", \"code\": \"0797\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.160225118184078, 51.639471331185824 ], [ 5.154345949139518, 51.655035517324912 ], [ 5.157038772200159, 51.657872787994251 ], [ 5.157785065260124, 51.663254951264904 ], [ 5.161651796978364, 51.663545654751381 ], [ 5.1666542211902, 51.668935874389021 ], [ 5.204176546306199, 51.669850079522512 ], [ 5.202624445828166, 51.670980421228698 ], [ 5.208029580715444, 51.673820750545786 ], [ 5.208804506710081, 51.673538738865204 ], [ 5.223118898511196, 51.673842849211077 ], [ 5.224257207254837, 51.68007470018231 ], [ 5.22579192482782, 51.683758340724545 ], [ 5.226156761905346, 51.689989098965867 ], [ 5.22692784284783, 51.690839735838807 ], [ 5.245882760665786, 51.694262435245413 ], [ 5.248975949643738, 51.695398895007969 ], [ 5.248970762875976, 51.697098047377196 ], [ 5.251673718108099, 51.699366746647271 ], [ 5.247017702625567, 51.702759588424613 ], [ 5.241215879879397, 51.701053351353337 ], [ 5.23889026379882, 51.701900011851677 ], [ 5.236165124391068, 51.706427620054853 ], [ 5.241173860557224, 51.714080167568618 ], [ 5.229955411439643, 51.710667349759504 ], [ 5.228392614991136, 51.714629941788473 ], [ 5.231071155336092, 51.723978891106427 ], [ 5.227574148242454, 51.727089299699401 ], [ 5.224864649366618, 51.726519196345322 ], [ 5.221755437724235, 51.729346774839868 ], [ 5.219435353893783, 51.728210710170679 ], [ 5.216326756097808, 51.730754953189482 ], [ 5.210116273076514, 51.733860855779724 ], [ 5.21048819949908, 51.737826106620808 ], [ 5.206598960413422, 51.741501679632748 ], [ 5.194591759525669, 51.740349810163252 ], [ 5.185672267180573, 51.742033977305745 ], [ 5.180244827879195, 51.742590910950703 ], [ 5.165518685184431, 51.742847195031445 ], [ 5.141896845987277, 51.739968242921343 ], [ 5.127960913605432, 51.737672722896299 ], [ 5.111706996329141, 51.734520540880141 ], [ 5.099334717168763, 51.730526114423675 ], [ 5.090448953878655, 51.726822446689681 ], [ 5.081570390177883, 51.722268538827677 ], [ 5.083516485250173, 51.72085762797176 ], [ 5.093210164621862, 51.719183177643565 ], [ 5.097481251992411, 51.717494649564912 ], [ 5.101768104746602, 51.713257261089083 ], [ 5.106818030948169, 51.710720705834731 ], [ 5.109155269505129, 51.708460723245786 ], [ 5.111507805132718, 51.703651984922828 ], [ 5.102997438250136, 51.702498880585587 ], [ 5.104604397531528, 51.693157359244118 ], [ 5.106638042878822, 51.677303354311682 ], [ 5.101611488859216, 51.676724818950142 ], [ 5.103943685284865, 51.675031312479945 ], [ 5.101638277787481, 51.672476961589638 ], [ 5.102825626626004, 51.668231925789897 ], [ 5.101707901849792, 51.661432524194687 ], [ 5.106120799257375, 51.635955602805552 ], [ 5.110369718927869, 51.636532118058199 ], [ 5.111149786203015, 51.635401176769697 ], [ 5.115390228673646, 51.637393468347142 ], [ 5.126983127550462, 51.638269394099396 ], [ 5.128532759483875, 51.637706436665802 ], [ 5.138183646337406, 51.640276118435175 ], [ 5.144753115628024, 51.640856295620651 ], [ 5.149785142237843, 51.639733824931938 ], [ 5.160225118184078, 51.639471331185824 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0406\", \"naam\": \"Huizen\", \"code\": \"0406\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.305547117173344, 52.307690213687245 ], [ 5.301226728095488, 52.309669328536046 ], [ 5.287479551970095, 52.315038729547595 ], [ 5.281195834214826, 52.316732274538168 ], [ 5.229356502062193, 52.325169527104421 ], [ 5.224643613350474, 52.325729483779547 ], [ 5.2282243692812, 52.312425492748034 ], [ 5.23021163913542, 52.305348954020559 ], [ 5.229439910244301, 52.301666744783262 ], [ 5.219640500810542, 52.299104763230517 ], [ 5.214149976526523, 52.298530525281656 ], [ 5.21060549269538, 52.301923307739735 ], [ 5.208650501077634, 52.300221365093407 ], [ 5.203552323841499, 52.29964722644435 ], [ 5.197664777593059, 52.300204279429131 ], [ 5.19570669994119, 52.29935162184497 ], [ 5.195726204679437, 52.294820957322273 ], [ 5.18710580865791, 52.29254134300534 ], [ 5.192215369449051, 52.290284523341775 ], [ 5.193402016098868, 52.288021121454577 ], [ 5.195360771676255, 52.288590651811838 ], [ 5.19577007361396, 52.284626947795431 ], [ 5.195001555300008, 52.280944501057618 ], [ 5.189910786991576, 52.279237103453234 ], [ 5.18481783435111, 52.27809582108334 ], [ 5.188362382967766, 52.27470379652091 ], [ 5.193469829360811, 52.272446913909441 ], [ 5.200937545487834, 52.268211360951902 ], [ 5.203686669280021, 52.267082978292706 ], [ 5.206803603792677, 52.271901661870331 ], [ 5.207185395132369, 52.274450770917241 ], [ 5.210703247688523, 52.277287767517358 ], [ 5.227566513551088, 52.277028554827396 ], [ 5.23264962737669, 52.281282842663835 ], [ 5.241669786108621, 52.281294280703406 ], [ 5.246372374468252, 52.28243264688318 ], [ 5.24636968671259, 52.283282150553909 ], [ 5.271058266515387, 52.290954506309454 ], [ 5.277321950569993, 52.29605751394638 ], [ 5.280858167838089, 52.293795397651415 ], [ 5.305547117173344, 52.307690213687245 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0451\", \"naam\": \"Uithoorn\", \"code\": \"0451\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.728570233378096, 52.209887497708877 ], [ 4.734492987431759, 52.206522217438931 ], [ 4.743378948206488, 52.214783224574674 ], [ 4.747686289246346, 52.214806627874673 ], [ 4.753911278239447, 52.217671968684307 ], [ 4.759785316992194, 52.21770331996531 ], [ 4.763297849780717, 52.218571465465864 ], [ 4.767957826623179, 52.221427780841566 ], [ 4.774572815269511, 52.224577243398365 ], [ 4.776104512908521, 52.22713378500643 ], [ 4.781173330094242, 52.228858969353368 ], [ 4.783915247024831, 52.228873004446974 ], [ 4.794521372635075, 52.22666127016322 ], [ 4.801959650285633, 52.226981535147928 ], [ 4.805865435610931, 52.227850355093061 ], [ 4.808618334318435, 52.227014337525503 ], [ 4.814490012503249, 52.227326129034374 ], [ 4.819168638332051, 52.229047784863965 ], [ 4.829723453119867, 52.230797129822626 ], [ 4.83479125974764, 52.232803175309151 ], [ 4.838285512025605, 52.235368053983017 ], [ 4.842986667534793, 52.235389802975227 ], [ 4.842969365744894, 52.236805606326627 ], [ 4.846481595306477, 52.237954438889808 ], [ 4.846852765730435, 52.239655195363937 ], [ 4.850784420934826, 52.238540405610351 ], [ 4.851918949722606, 52.241943665671833 ], [ 4.834580441898625, 52.249792780204764 ], [ 4.834968818723829, 52.250077771873869 ], [ 4.795241056744579, 52.260929323781404 ], [ 4.794852840509273, 52.260644202350775 ], [ 4.795248590035928, 52.260363008806685 ], [ 4.770695120399862, 52.250043098940523 ], [ 4.768375283817838, 52.247765552237503 ], [ 4.768418578254533, 52.244650824075357 ], [ 4.773171435404271, 52.240994308105883 ], [ 4.723770680376478, 52.216656962319476 ], [ 4.724612813288709, 52.212697164597927 ], [ 4.729740653009385, 52.210177200369394 ], [ 4.728570233378096, 52.209887497708877 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0385\", \"naam\": \"Edam-Volendam\", \"code\": \"0385\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.112873175425388, 52.497969289111246 ], [ 5.100589978940344, 52.508133922207719 ], [ 5.060252926295052, 52.578818454549904 ], [ 5.027205376340154, 52.612701182192481 ], [ 5.018517390046568, 52.612108252816135 ], [ 5.006678520941549, 52.610372037453409 ], [ 5.00788577201542, 52.607827531963238 ], [ 5.004813610261264, 52.597624215963414 ], [ 4.996126390690717, 52.597312794840221 ], [ 4.949933003599804, 52.595169734916283 ], [ 4.949961097221275, 52.592338303540956 ], [ 4.953966151282733, 52.5866898989783 ], [ 4.954019019936188, 52.581310164654226 ], [ 4.95561223926442, 52.579900191616382 ], [ 4.962705504228229, 52.581341518164017 ], [ 4.968598541395433, 52.584477119930476 ], [ 4.977659488194742, 52.586773925358514 ], [ 4.980423717519836, 52.586783420574847 ], [ 4.982411168675013, 52.585374440441861 ], [ 4.99191616407156, 52.582291752960643 ], [ 4.996694496743262, 52.57777709532396 ], [ 4.997111851875045, 52.57523008146844 ], [ 4.989664506473669, 52.569259154818106 ], [ 4.980237942486073, 52.564130448172563 ], [ 4.976320085672046, 52.56100225387528 ], [ 4.977572421914311, 52.553644538261743 ], [ 4.97524980412265, 52.548822854489643 ], [ 4.976449267157056, 52.547128073099088 ], [ 4.973327509798766, 52.543436201959366 ], [ 4.965869824711024, 52.539445780174105 ], [ 4.962346887378089, 52.536601656959824 ], [ 4.956896487872915, 52.529219936614155 ], [ 4.96440044300597, 52.528114270058779 ], [ 4.979425531453054, 52.523919471829636 ], [ 4.992082025029947, 52.51971491287965 ], [ 4.99835826909704, 52.523416686021903 ], [ 5.001480710308298, 52.527107916140253 ], [ 5.008968644427468, 52.527698323731286 ], [ 5.014107319281576, 52.526298800533262 ], [ 5.024397648820553, 52.521800185092104 ], [ 4.997821741989849, 52.494815946694644 ], [ 5.024699728100835, 52.48499054186432 ], [ 5.03059347210676, 52.486990518961882 ], [ 5.03097606499421, 52.488407463857747 ], [ 5.038462306866338, 52.48842970523831 ], [ 5.058932090726698, 52.491036534923495 ], [ 5.058578044036546, 52.485655539508997 ], [ 5.060941977774779, 52.485662063795004 ], [ 5.112873175425388, 52.497969289111246 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0268\", \"naam\": \"Nijmegen\", \"code\": \"0268\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.886847247755564, 51.865180207093978 ], [ 5.884146241773316, 51.866890823866626 ], [ 5.881818032036555, 51.86718384869706 ], [ 5.879900059769455, 51.869457447921313 ], [ 5.876868510755041, 51.876549918846671 ], [ 5.875748737960277, 51.880802452357031 ], [ 5.872709659705227, 51.887328451126642 ], [ 5.871558719819416, 51.888749158312343 ], [ 5.867665234463106, 51.888198771991213 ], [ 5.861840131165818, 51.88878884305489 ], [ 5.857560983411887, 51.888522870941344 ], [ 5.857237373161494, 51.894754356259497 ], [ 5.838174982420386, 51.893696345991664 ], [ 5.830399228213721, 51.893725949499782 ], [ 5.830379685826118, 51.891743693706985 ], [ 5.833867368150607, 51.890597719182438 ], [ 5.836168824990953, 51.887473850585458 ], [ 5.836520769860488, 51.8837910305026 ], [ 5.837684038381003, 51.883503382800271 ], [ 5.832969114358812, 51.878423950463016 ], [ 5.835292583366026, 51.877565533969552 ], [ 5.831741567896201, 51.872198411769475 ], [ 5.828255256045085, 51.873344324340678 ], [ 5.823975022859764, 51.872793946078318 ], [ 5.816955734565946, 51.870271137742513 ], [ 5.82585454379412, 51.866273551879985 ], [ 5.823898044450206, 51.864864892875467 ], [ 5.825405312167479, 51.860045029393923 ], [ 5.821476609714037, 51.855528574628671 ], [ 5.81753515872763, 51.849596078353514 ], [ 5.812485859440111, 51.849614485891536 ], [ 5.807846135802117, 51.851896737502472 ], [ 5.803938258738079, 51.849361960616648 ], [ 5.787161286323083, 51.840924612160386 ], [ 5.782513710733935, 51.842356317859085 ], [ 5.779426676876321, 51.844632205132854 ], [ 5.775152207176681, 51.844363224776139 ], [ 5.764564294864346, 51.832220546385166 ], [ 5.757508084354766, 51.824030489294621 ], [ 5.77147563808321, 51.823135988170968 ], [ 5.774564039461946, 51.82114348871643 ], [ 5.781456805983713, 51.810359231194639 ], [ 5.791462800818047, 51.800979818061393 ], [ 5.794533448456969, 51.797287687281319 ], [ 5.796092985444296, 51.798131837286945 ], [ 5.801110525524581, 51.795282304613735 ], [ 5.810378552870431, 51.79071813173146 ], [ 5.827143914347678, 51.799435412359223 ], [ 5.825597522677136, 51.800007590196138 ], [ 5.837299117037577, 51.806193508819113 ], [ 5.839222238517801, 51.804486953208894 ], [ 5.840802810458686, 51.807312781780581 ], [ 5.84430093294664, 51.807865585859069 ], [ 5.857500414949631, 51.808379783753161 ], [ 5.86877202497939, 51.810033203405993 ], [ 5.879243565442685, 51.809423351966892 ], [ 5.885461891166147, 51.810246680560354 ], [ 5.886259974404326, 51.812225643821009 ], [ 5.88165891700578, 51.817342615354853 ], [ 5.880528645046364, 51.820462502080943 ], [ 5.888320059183315, 51.822978217166785 ], [ 5.899599663260309, 51.824911845845648 ], [ 5.901569720363448, 51.827451966560822 ], [ 5.905451846098619, 51.827434881445313 ], [ 5.908192260519599, 51.829405098955796 ], [ 5.906267431751163, 51.830829598416365 ], [ 5.896965649468325, 51.832286349435932 ], [ 5.895813677972625, 51.833424121857398 ], [ 5.898175395330445, 51.836245792154898 ], [ 5.892004041494626, 51.839954014251916 ], [ 5.894340345820409, 51.840510325926559 ], [ 5.880410234627948, 51.845100785999747 ], [ 5.885487198141224, 51.847628071008351 ], [ 5.887451163822979, 51.849602063155572 ], [ 5.885130134578462, 51.850461511237739 ], [ 5.887504671735066, 51.854416105965811 ], [ 5.887166559153469, 51.858948622544304 ], [ 5.881727765406688, 51.858971663684862 ], [ 5.886847247755564, 51.865180207093978 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0243\", \"naam\": \"Harderwijk\", \"code\": \"0243\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.70635122770213, 52.328241632608965 ], [ 5.712659687304679, 52.331905618507648 ], [ 5.712697075757446, 52.337002535273562 ], [ 5.711138804909475, 52.338705819933857 ], [ 5.706037981029736, 52.339286018816409 ], [ 5.704519884937786, 52.346652449294076 ], [ 5.699065122657397, 52.352896628339849 ], [ 5.698700159743437, 52.356861920362192 ], [ 5.700668388637468, 52.357423053044606 ], [ 5.697942252094673, 52.360828240936883 ], [ 5.695584970266292, 52.360834410225614 ], [ 5.679968851161569, 52.375881863048868 ], [ 5.678808442345427, 52.378716378279698 ], [ 5.677629324320419, 52.378719278573307 ], [ 5.652395112757349, 52.365469779376127 ], [ 5.644960867194415, 52.370866350850527 ], [ 5.620560868349439, 52.36412104639836 ], [ 5.613871234357393, 52.362151900936915 ], [ 5.611500972843321, 52.359607933171112 ], [ 5.607980641085399, 52.362729374727351 ], [ 5.604840226208169, 52.363301525849167 ], [ 5.598555101970654, 52.363596090463204 ], [ 5.591087255684858, 52.363042871474661 ], [ 5.585572677154834, 52.35993743594522 ], [ 5.575712255545428, 52.350892278880906 ], [ 5.565818215500792, 52.332501854131756 ], [ 5.577959379866155, 52.325403712886903 ], [ 5.581480107325378, 52.322566306948133 ], [ 5.587364442052923, 52.321706985169257 ], [ 5.593240660094038, 52.319148380178973 ], [ 5.597167140272735, 52.319424636530364 ], [ 5.601870488325349, 52.318000348979595 ], [ 5.601878706747737, 52.31969933903045 ], [ 5.608548699706319, 52.319120699563051 ], [ 5.619967229555662, 52.325894780642741 ], [ 5.623504911401963, 52.326737262799092 ], [ 5.630178778356651, 52.326723732263147 ], [ 5.658736603490798, 52.310237834842361 ], [ 5.670862244381898, 52.303979639279632 ], [ 5.678300722205789, 52.301413027733759 ], [ 5.686618455605703, 52.313002172159017 ], [ 5.694120168780618, 52.319495806527932 ], [ 5.70635122770213, 52.328241632608965 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0294\", \"naam\": \"Winterswijk\", \"code\": \"0294\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.687692189994463, 52.039731429722053 ], [ 6.683456257349235, 52.028166456548774 ], [ 6.678006050608441, 52.028509568866959 ], [ 6.67199529238844, 52.022911100071418 ], [ 6.662088130436142, 52.017354608845835 ], [ 6.661650010921734, 52.015660084201755 ], [ 6.655755248989113, 52.014024510353359 ], [ 6.658411288386062, 52.011446941021148 ], [ 6.654241665884519, 52.001862713668729 ], [ 6.652563130735532, 51.997632599440969 ], [ 6.655159536360777, 51.97919582634367 ], [ 6.657058737701393, 51.97747605650563 ], [ 6.655834340539294, 51.975506779508038 ], [ 6.645915855821343, 51.969099466072223 ], [ 6.642705774559299, 51.965735230876291 ], [ 6.63762060564446, 51.964939781266629 ], [ 6.638725440101998, 51.962662324355101 ], [ 6.6394250616752, 51.959822746148291 ], [ 6.634643331466043, 51.955908599097789 ], [ 6.629029145239523, 51.950020568689396 ], [ 6.633247579074776, 51.947710224425059 ], [ 6.634709917297408, 51.944296154758767 ], [ 6.633805805027467, 51.93977433276693 ], [ 6.632194363351823, 51.937808919260043 ], [ 6.634132021925615, 51.93750516408825 ], [ 6.634069124892457, 51.935240122471512 ], [ 6.643653553719469, 51.930040190975937 ], [ 6.651394404632313, 51.928541098757798 ], [ 6.653776440579106, 51.930214737623281 ], [ 6.658801836924116, 51.929027606630797 ], [ 6.658268584469252, 51.923935503464158 ], [ 6.663212735762916, 51.919916900008062 ], [ 6.66083089922476, 51.918243449431088 ], [ 6.661147575866472, 51.915691075684975 ], [ 6.664282991382431, 51.916506683543084 ], [ 6.6688772892671, 51.913907710722349 ], [ 6.674767468133002, 51.91582582017508 ], [ 6.684158467621426, 51.917705045543144 ], [ 6.684109430352981, 51.916006286513905 ], [ 6.692632510211421, 51.914779026257833 ], [ 6.695387764820813, 51.915881248804624 ], [ 6.697547807780436, 51.909909609886434 ], [ 6.699856124931805, 51.909034186995925 ], [ 6.703752885525258, 51.909273798744842 ], [ 6.703281120896228, 51.906446904958614 ], [ 6.722030688617215, 51.8960394595941 ], [ 6.732222394297422, 51.898755387906014 ], [ 6.737065978590937, 51.904647441012692 ], [ 6.745653881941747, 51.905681321099031 ], [ 6.75114879712322, 51.907316970307399 ], [ 6.754345527713487, 51.910112015358024 ], [ 6.754034182911523, 51.912664621766965 ], [ 6.760299373126919, 51.914007666295035 ], [ 6.765804522791772, 51.915925742071252 ], [ 6.770091110828825, 51.916158586143098 ], [ 6.788793243391839, 51.929531609707631 ], [ 6.786123063430871, 51.931262755044166 ], [ 6.794036644157118, 51.935416609110568 ], [ 6.797371426731435, 51.942457182410642 ], [ 6.796248484509479, 51.943886756755546 ], [ 6.799055226711006, 51.958863801055749 ], [ 6.812389114086289, 51.961818355519192 ], [ 6.81400028777584, 51.963498143515359 ], [ 6.828431745054255, 51.964171794977872 ], [ 6.832516343530278, 51.970069325791535 ], [ 6.832263789252759, 51.974320762555493 ], [ 6.830380578428978, 51.976326443088858 ], [ 6.829701915576936, 51.979450209809592 ], [ 6.830310007556824, 51.986240069322484 ], [ 6.82665133392297, 51.99364865356354 ], [ 6.807988057024318, 51.995008436663952 ], [ 6.811593216044228, 51.998080258926741 ], [ 6.776275699534002, 52.015495656885513 ], [ 6.772058343506115, 52.017811103689517 ], [ 6.766237761804389, 52.018729109446788 ], [ 6.764012145405691, 52.022436986191607 ], [ 6.752888539519512, 52.02851413073148 ], [ 6.714227613357635, 52.04000171137082 ], [ 6.687692189994463, 52.039731429722053 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1581\", \"naam\": \"Utrechtse Heuvelrug\", \"code\": \"1581\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.477549893784484, 51.983447687622906 ], [ 5.477948078036942, 51.98769512269957 ], [ 5.480677723106335, 51.988825712625911 ], [ 5.479904931287717, 51.991941333929475 ], [ 5.48457147165661, 51.987689818276444 ], [ 5.485358144399228, 51.991087355604272 ], [ 5.490825568845326, 51.996463127511525 ], [ 5.494328690288974, 51.994760890718858 ], [ 5.498238058479981, 51.999854544236541 ], [ 5.512709974750429, 52.018529988307925 ], [ 5.529154057576702, 52.040316234620263 ], [ 5.526037024351758, 52.041452678214185 ], [ 5.516303042624095, 52.047693736876077 ], [ 5.515541472191692, 52.054207714767514 ], [ 5.513982318907672, 52.054775765710303 ], [ 5.49798993936922, 52.057057356630771 ], [ 5.491747162293852, 52.057346251930078 ], [ 5.483939745359113, 52.055937035144076 ], [ 5.477299972676764, 52.05282733219272 ], [ 5.466762131904702, 52.051135857419865 ], [ 5.460905471997359, 52.048591056234343 ], [ 5.461293264911124, 52.047174911756166 ], [ 5.453494885542063, 52.050011371570356 ], [ 5.44841356694572, 52.04321780600754 ], [ 5.44568550036006, 52.045201458012663 ], [ 5.441785072644034, 52.04576969632889 ], [ 5.4351552139029, 52.047754852742258 ], [ 5.429698190500366, 52.052854195015762 ], [ 5.428140595745511, 52.056252905982632 ], [ 5.430484595065317, 52.059083860859566 ], [ 5.435558238984707, 52.059648239182764 ], [ 5.43673146847711, 52.061913186000972 ], [ 5.438301907225338, 52.070124711705276 ], [ 5.435572673725951, 52.072957657909043 ], [ 5.433229964372286, 52.07239224183985 ], [ 5.425813084350016, 52.072111737523635 ], [ 5.422690987360783, 52.072962260608705 ], [ 5.412540325200141, 52.070416284438849 ], [ 5.401999277612678, 52.064188153132463 ], [ 5.398877805387036, 52.067020300614999 ], [ 5.399659049176607, 52.069285652505677 ], [ 5.405514582997353, 52.070983953886049 ], [ 5.407076691850611, 52.072682772325649 ], [ 5.405906711450701, 52.075231575350045 ], [ 5.403564676529627, 52.075798284757504 ], [ 5.398489532322153, 52.074949350952039 ], [ 5.388339871293364, 52.074949900273324 ], [ 5.384435957765759, 52.078348023625601 ], [ 5.380141500485953, 52.078631029156618 ], [ 5.348125444011825, 52.082022948176984 ], [ 5.33211490129993, 52.084282000738028 ], [ 5.332512259500874, 52.078618613650995 ], [ 5.328222290146715, 52.075218404610297 ], [ 5.320421984901911, 52.070400209213219 ], [ 5.29072204095251, 52.086520863788962 ], [ 5.265386045994675, 52.070073051488976 ], [ 5.257982062465206, 52.065817481196547 ], [ 5.256428337523132, 52.063267152264018 ], [ 5.252138795606176, 52.062129598910339 ], [ 5.247466288573137, 52.058725996956163 ], [ 5.251380597294514, 52.054766050831823 ], [ 5.251389179422991, 52.051934259517928 ], [ 5.249055143099005, 52.049666106028191 ], [ 5.247891734347207, 52.047399294337168 ], [ 5.251017940040864, 52.045703864287034 ], [ 5.249078705635445, 52.042020261221282 ], [ 5.251037724605804, 52.039190733399153 ], [ 5.254941655649049, 52.038062454921501 ], [ 5.257671181742493, 52.038348666310505 ], [ 5.25768754105922, 52.032685066999761 ], [ 5.263929914712201, 52.031842216957607 ], [ 5.269397284422997, 52.029015996795728 ], [ 5.270961569637269, 52.027318462843354 ], [ 5.263170286269705, 52.024478710174677 ], [ 5.269815415223862, 52.018255523821516 ], [ 5.2717742697813, 52.014576097330803 ], [ 5.279970486445677, 52.010619294175932 ], [ 5.288157759315363, 52.010060093976179 ], [ 5.291279836048148, 52.008363584585751 ], [ 5.314637116192741, 52.027070244740308 ], [ 5.323612073939024, 52.022827706161458 ], [ 5.341550854069058, 52.020287374259738 ], [ 5.344280120022409, 52.020288397307716 ], [ 5.348571641158395, 52.017174883704783 ], [ 5.355981686464592, 52.013495713511055 ], [ 5.381712217692709, 52.002172421261555 ], [ 5.398860898669315, 52.003021493767065 ], [ 5.415226271661687, 51.996788706009767 ], [ 5.39963617102871, 51.988012754327748 ], [ 5.378207758288212, 51.986030819240817 ], [ 5.38755798390101, 51.976402933274088 ], [ 5.394179627737576, 51.975836351569505 ], [ 5.394958395458709, 51.974420386315273 ], [ 5.391842301752616, 51.973287822334541 ], [ 5.391063099682686, 51.970739202736901 ], [ 5.401969050525094, 51.9735701559609 ], [ 5.413654900806812, 51.975550373919241 ], [ 5.420667500358695, 51.977530859382476 ], [ 5.433139526834385, 51.984606204533122 ], [ 5.440543328555457, 51.986018983822916 ], [ 5.444828531990019, 51.985733774199112 ], [ 5.45300710285258, 51.983747193073413 ], [ 5.470926066326076, 51.98288623161978 ], [ 5.477549893784484, 51.983447687622906 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0882\", \"naam\": \"Landgraaf\", \"code\": \"0882\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.017124782036372, 50.870502556157113 ], [ 6.022466431024948, 50.871889380346246 ], [ 6.031206392177056, 50.871557827790227 ], [ 6.032798137663355, 50.876646721746631 ], [ 6.034734830263444, 50.879184779449531 ], [ 6.034382316278452, 50.881169219072817 ], [ 6.037115607265889, 50.886251664364814 ], [ 6.04056617501252, 50.888214692060075 ], [ 6.043212237827833, 50.887066876190602 ], [ 6.045534281944179, 50.889885781262194 ], [ 6.040241818897123, 50.892181459456751 ], [ 6.042531853116725, 50.892734927939088 ], [ 6.041815242690026, 50.895854292772718 ], [ 6.043360801955713, 50.897544795281313 ], [ 6.043020564997656, 50.900378822686413 ], [ 6.048714454565493, 50.899496775078539 ], [ 6.056710941443479, 50.900017194263775 ], [ 6.056355119174571, 50.901718513750083 ], [ 6.05939019216584, 50.901134498801078 ], [ 6.063971656744167, 50.902240630044332 ], [ 6.066283256927096, 50.904209557471198 ], [ 6.08000426026261, 50.905827472487786 ], [ 6.082350770366802, 50.91006156013453 ], [ 6.085805031138364, 50.912023232277271 ], [ 6.086980798608148, 50.914281815246589 ], [ 6.092359814119072, 50.917647693975901 ], [ 6.093557676821861, 50.921322133460414 ], [ 6.08932837928221, 50.918515759988971 ], [ 6.082144757940464, 50.921674442590067 ], [ 6.071890172533862, 50.923151620832911 ], [ 6.06804675397794, 50.92062540119538 ], [ 6.063120069050696, 50.922070333775572 ], [ 6.061965929871543, 50.921227437814842 ], [ 6.053986137423864, 50.922123321541406 ], [ 6.056343398773395, 50.927207500227254 ], [ 6.051051278525761, 50.929786867870426 ], [ 6.045698049284778, 50.928118188678091 ], [ 6.044948876113932, 50.928972078774592 ], [ 6.038505956878717, 50.93099098412592 ], [ 6.018381462005001, 50.934784202813887 ], [ 6.016043392653004, 50.930831998137009 ], [ 6.011794958229601, 50.926323655237212 ], [ 6.012556194366632, 50.926319544420181 ], [ 6.005983336332787, 50.918708229096708 ], [ 6.003300577866121, 50.917306498540306 ], [ 5.993309897829911, 50.909995832450193 ], [ 5.990978926761713, 50.906326306968424 ], [ 5.994365844461062, 50.90347649510197 ], [ 5.994642151734849, 50.895545200923905 ], [ 5.996502958517395, 50.892420118799841 ], [ 5.998792484878964, 50.892974453745381 ], [ 6.008202272823654, 50.88556088724242 ], [ 6.008943817106212, 50.884140858756453 ], [ 6.009628192702791, 50.878472999166462 ], [ 6.010745979248323, 50.87676772426353 ], [ 6.015266242917125, 50.873627964465491 ], [ 6.015980459171383, 50.870225575107405 ], [ 6.017124782036372, 50.870502556157113 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0085\", \"naam\": \"Ooststellingwerf\", \"code\": \"0085\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.368885245510202, 52.922076692066454 ], [ 6.393410646421243, 52.932915169785176 ], [ 6.427773078798546, 52.971694561758412 ], [ 6.413355039452905, 52.98541001901873 ], [ 6.362633689215307, 53.033967937399851 ], [ 6.365029434399281, 53.05178581510021 ], [ 6.367775284209815, 53.067335637591093 ], [ 6.332012223358566, 53.075267809676141 ], [ 6.281462288085734, 53.064047851385226 ], [ 6.280541622668117, 53.058109011423419 ], [ 6.273310973995456, 53.055897735210188 ], [ 6.261645412326205, 53.051453480698456 ], [ 6.222695220685235, 53.039274125743546 ], [ 6.217497821898074, 53.038744052925111 ], [ 6.213076948060334, 53.037075880136058 ], [ 6.212661870331877, 53.036229357521208 ], [ 6.205512914092625, 53.037977248174244 ], [ 6.204480779204211, 53.02552661357538 ], [ 6.20222744375113, 52.990433712818792 ], [ 6.200994826636467, 52.988460181424216 ], [ 6.196175949435352, 52.986510963008186 ], [ 6.158925784803664, 52.975998252319279 ], [ 6.145257184630768, 52.969007425777143 ], [ 6.142842644623527, 52.967607055474254 ], [ 6.128665356687876, 52.953822354904702 ], [ 6.124659472717075, 52.952431483863748 ], [ 6.115079493965879, 52.951074574027054 ], [ 6.093038008108602, 52.942429719537692 ], [ 6.084976472449431, 52.936248150913471 ], [ 6.086568611858873, 52.936238837731374 ], [ 6.11046821399574, 52.913162517490996 ], [ 6.11689019453695, 52.916521073720496 ], [ 6.122877078784948, 52.917616877415384 ], [ 6.126491426090045, 52.919576505600759 ], [ 6.130086808997726, 52.920403597621579 ], [ 6.140107279847117, 52.924587875320611 ], [ 6.145344278294965, 52.92823550970887 ], [ 6.157725958552706, 52.930704483296815 ], [ 6.161337926809145, 52.932379940519702 ], [ 6.172542933634591, 52.935704415530836 ], [ 6.188526276919332, 52.938995879760355 ], [ 6.200541774138381, 52.942878572632054 ], [ 6.2025057298994, 52.941449499076121 ], [ 6.200871157278692, 52.939195551256695 ], [ 6.209128841731403, 52.933759397405936 ], [ 6.210683422522715, 52.93176672361222 ], [ 6.21375459585195, 52.925799604531811 ], [ 6.247135841339357, 52.923298750893004 ], [ 6.256775843597796, 52.927759171646592 ], [ 6.30288345035273, 52.924866232560731 ], [ 6.333123512892064, 52.90622618786557 ], [ 6.334322880352945, 52.906499821709204 ], [ 6.368885245510202, 52.922076692066454 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0502\", \"naam\": \"Capelle aan den IJssel\", \"code\": \"0502\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.549835000528411, 51.906588857442046 ], [ 4.567666531395182, 51.909829741516042 ], [ 4.577307538181694, 51.914427739624472 ], [ 4.580721676544753, 51.919265573087145 ], [ 4.58264126752757, 51.920694714554486 ], [ 4.588840117737407, 51.922152965502804 ], [ 4.599269009869835, 51.926471283038104 ], [ 4.603937624986075, 51.926502482054488 ], [ 4.610571085438647, 51.925413707568246 ], [ 4.615589745339235, 51.92771232492953 ], [ 4.617865943716205, 51.931125593801809 ], [ 4.619383600858565, 51.933401081395481 ], [ 4.599674878255976, 51.947713713333471 ], [ 4.601980581492747, 51.949428305565746 ], [ 4.596830621466431, 51.954491327574637 ], [ 4.584175729073519, 51.965450233396155 ], [ 4.572591767185118, 51.959989857746557 ], [ 4.566787907546339, 51.957967143322541 ], [ 4.564415651847075, 51.959932946081068 ], [ 4.562100441726019, 51.95878394163708 ], [ 4.561363458144806, 51.956513197214811 ], [ 4.56419243434688, 51.950869096531143 ], [ 4.572889671817173, 51.94356653113848 ], [ 4.570575085471907, 51.942417692251063 ], [ 4.560482305728932, 51.940931178757651 ], [ 4.565354448993471, 51.929920641794112 ], [ 4.566205043623843, 51.925961820083536 ], [ 4.564690333188481, 51.923685650317296 ], [ 4.556977868751953, 51.91994985801216 ], [ 4.550764556646754, 51.919339411551462 ], [ 4.541039938610348, 51.919269807757793 ], [ 4.537528377996252, 51.919810873444476 ], [ 4.54033666837051, 51.915299961034634 ], [ 4.5383919210273, 51.915285932455724 ], [ 4.53725719954495, 51.913578538728835 ], [ 4.539239263893181, 51.911610463295325 ], [ 4.542062834282865, 51.906250021265627 ], [ 4.547880053891586, 51.907141309062034 ], [ 4.55007097334389, 51.91480329937265 ], [ 4.553928941113043, 51.916529904471957 ], [ 4.553960437083573, 51.914830937723806 ], [ 4.556683064976049, 51.91485020797942 ], [ 4.556766766433579, 51.910319625510041 ], [ 4.551332592003893, 51.909714704604262 ], [ 4.549835000528411, 51.906588857442046 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1621\", \"naam\": \"Lansingerland\", \"code\": \"1621\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.547819926298367, 51.972842721710904 ], [ 4.552445909586615, 51.975424403029145 ], [ 4.553966988527465, 51.977417557937649 ], [ 4.551993187948026, 51.978819541928701 ], [ 4.548371205959621, 51.985024083941425 ], [ 4.546685646533922, 51.99180875245235 ], [ 4.547032822978092, 51.994076795887601 ], [ 4.549728529652496, 51.995795183161867 ], [ 4.5523400902189, 52.00204403149931 ], [ 4.554989172299409, 52.006310715120641 ], [ 4.555679363773456, 52.011129901306653 ], [ 4.557180814395877, 52.014255636428686 ], [ 4.556722795101783, 52.017933931403448 ], [ 4.558077839144804, 52.028988045145951 ], [ 4.559949097337881, 52.033249110118618 ], [ 4.563412007676035, 52.035822126984669 ], [ 4.563354716824081, 52.038936850857496 ], [ 4.560957105794362, 52.042035177134188 ], [ 4.564946113581529, 52.058488263675713 ], [ 4.557859648254071, 52.061836893591988 ], [ 4.557089703922805, 52.061265086071721 ], [ 4.557875388674027, 52.060987427562523 ], [ 4.550545970959042, 52.05640451861656 ], [ 4.547536101448364, 52.050436049930461 ], [ 4.544837201413008, 52.048717619493935 ], [ 4.53467822240114, 52.049494104340837 ], [ 4.526556588245652, 52.045753517554189 ], [ 4.515371055793278, 52.039157773758795 ], [ 4.507302974489796, 52.032867475978911 ], [ 4.504589941781456, 52.031997585356237 ], [ 4.477292914310945, 52.031789805929748 ], [ 4.476518760097391, 52.031500624694253 ], [ 4.468422684892842, 52.026906582687936 ], [ 4.466123962872356, 52.024906243989236 ], [ 4.457209301224228, 52.02228738761611 ], [ 4.458508025007259, 52.01606729792806 ], [ 4.461696732727021, 52.012694041994791 ], [ 4.456327920781856, 52.008403739711 ], [ 4.455199881692782, 52.006412427160193 ], [ 4.458742665734135, 52.004741240214784 ], [ 4.458795441071786, 52.002192874517746 ], [ 4.449867961352558, 52.000422920366688 ], [ 4.453050298549748, 51.997333041277805 ], [ 4.447306399894051, 51.992472927145819 ], [ 4.424209542984869, 51.97925897738449 ], [ 4.427775544666521, 51.976456111329199 ], [ 4.446760981589371, 51.962732624697232 ], [ 4.450589515085571, 51.965878373069899 ], [ 4.458725507979449, 51.967925273513991 ], [ 4.460637425510718, 51.969639545543238 ], [ 4.460207067934999, 51.971618549861645 ], [ 4.462130873847726, 51.972766490985549 ], [ 4.461311093134861, 51.974742435364568 ], [ 4.465897382643293, 51.979026425179562 ], [ 4.46898437353985, 51.980466552100324 ], [ 4.495346134158564, 51.967359036950832 ], [ 4.495645528433038, 51.971892476556874 ], [ 4.506660893721476, 51.966311489997913 ], [ 4.505893236599592, 51.96573934500146 ], [ 4.512189629845453, 51.962387978783127 ], [ 4.513741541343115, 51.962682711608487 ], [ 4.518463164052535, 51.960168900975468 ], [ 4.521122962435211, 51.963586888053037 ], [ 4.527704244395563, 51.965617544523909 ], [ 4.528071948138434, 51.966753019588978 ], [ 4.535438209936824, 51.968505772064972 ], [ 4.536568871561625, 51.970496331299934 ], [ 4.540473836452251, 51.969958110475581 ], [ 4.547819926298367, 51.972842721710904 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0361\", \"naam\": \"Alkmaar\", \"code\": \"0361\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.789811349049594, 52.519152319377042 ], [ 4.791778910049215, 52.519445368729464 ], [ 4.797632608115322, 52.524005171442973 ], [ 4.805496623411725, 52.525742939522061 ], [ 4.81057121747404, 52.529731948323061 ], [ 4.814105858702888, 52.530881707712211 ], [ 4.820412336910405, 52.53119514832958 ], [ 4.824323696792786, 52.533762199051488 ], [ 4.816804339630113, 52.535708425113924 ], [ 4.819130807236149, 52.538834337286282 ], [ 4.821110336456143, 52.538277473962353 ], [ 4.824602626260803, 52.542824624977598 ], [ 4.833725599432665, 52.538903277608618 ], [ 4.835676644020457, 52.540611312562056 ], [ 4.842347683247946, 52.543473704547338 ], [ 4.843887322103381, 52.546595505327936 ], [ 4.848576681482496, 52.550297929232975 ], [ 4.854021789745454, 52.556835135664826 ], [ 4.858726656418634, 52.559404583883875 ], [ 4.863000393265055, 52.565086667930281 ], [ 4.862953273567733, 52.569050655555365 ], [ 4.866054196059259, 52.573877961749758 ], [ 4.868794278082608, 52.575872044950977 ], [ 4.87470292484095, 52.577030307391375 ], [ 4.880194281071312, 52.580168584242749 ], [ 4.886440746506934, 52.586424494837374 ], [ 4.889908436131805, 52.594084238391616 ], [ 4.893813569117379, 52.598064677519154 ], [ 4.898907615098156, 52.601766719489945 ], [ 4.907558006408334, 52.605482942776753 ], [ 4.915425747518083, 52.608629118797495 ], [ 4.921354992053526, 52.608369352480686 ], [ 4.926903882078195, 52.606692053315427 ], [ 4.926090038859766, 52.608954122216559 ], [ 4.923300578261215, 52.611208490537315 ], [ 4.916580745249437, 52.611465227212847 ], [ 4.898778912148242, 52.613375481962052 ], [ 4.884162547816566, 52.61303137042961 ], [ 4.8868544106531, 52.61955525298297 ], [ 4.887214225043165, 52.622671447125349 ], [ 4.889180656449619, 52.623529158866802 ], [ 4.889158236169638, 52.625511132307153 ], [ 4.884746040845765, 52.631155613024326 ], [ 4.880763885215096, 52.633687086965118 ], [ 4.873243150985652, 52.634504272749417 ], [ 4.863745537866986, 52.635312296980686 ], [ 4.860535542701065, 52.63926225256143 ], [ 4.851425140206092, 52.640637313987931 ], [ 4.847447157644238, 52.642601389265614 ], [ 4.842660494712555, 52.645977391324877 ], [ 4.838702817831877, 52.646242355605885 ], [ 4.835585630292847, 52.642546959244221 ], [ 4.83446349910857, 52.63744500347007 ], [ 4.830175709003757, 52.632611394231517 ], [ 4.823836511939383, 52.633714139240844 ], [ 4.808811279903794, 52.633925150563073 ], [ 4.806435716126725, 52.634196724209076 ], [ 4.791748091635212, 52.638654533314863 ], [ 4.785414813211438, 52.639188956363739 ], [ 4.791629297090578, 52.647431688821861 ], [ 4.798271934110117, 52.653410974096204 ], [ 4.799823604241943, 52.655683865462557 ], [ 4.800554180146363, 52.660217903294118 ], [ 4.773819418149237, 52.648473775225384 ], [ 4.77573755425227, 52.652730949318588 ], [ 4.772961344990589, 52.653282949597482 ], [ 4.774887489621, 52.656973868012386 ], [ 4.77794959262454, 52.664351553235669 ], [ 4.774373621806664, 52.66546579287445 ], [ 4.778239296360926, 52.67199813540617 ], [ 4.778967909278276, 52.676532284476764 ], [ 4.750788208195151, 52.682331072739963 ], [ 4.748013934458071, 52.682599353549286 ], [ 4.741707068790061, 52.680866396401534 ], [ 4.744114550205824, 52.678614218231324 ], [ 4.747700594241017, 52.676934635542707 ], [ 4.752526527282125, 52.67158058918379 ], [ 4.748656490511443, 52.665613677996383 ], [ 4.742789096864156, 52.661051589619049 ], [ 4.739199991779403, 52.663014163019973 ], [ 4.734057688667203, 52.66298603817549 ], [ 4.735269559316567, 52.661293766757858 ], [ 4.73091432678061, 52.661552969853254 ], [ 4.732917345113018, 52.659865084136911 ], [ 4.725836074458404, 52.657277536928341 ], [ 4.729412601433739, 52.656164755611123 ], [ 4.726652608405961, 52.655583151320883 ], [ 4.725126037481975, 52.651893659917484 ], [ 4.716855882297214, 52.649582095830418 ], [ 4.71768985359672, 52.646755247183229 ], [ 4.712953562149426, 52.646162177404747 ], [ 4.714191763570947, 52.642771331374156 ], [ 4.70984696268581, 52.6424635057869 ], [ 4.708769976830205, 52.635378477646981 ], [ 4.709999480290942, 52.632553928628404 ], [ 4.708444534360484, 52.630846125183375 ], [ 4.711224476863797, 52.63001249605999 ], [ 4.709665214541157, 52.628587839050404 ], [ 4.715241950973721, 52.625787929710789 ], [ 4.714468806791333, 52.624650931659787 ], [ 4.727578825607206, 52.620193901667378 ], [ 4.737924408579325, 52.615437205747199 ], [ 4.739529933010296, 52.613747026809612 ], [ 4.733300520352741, 52.607483467435074 ], [ 4.736490304637724, 52.60551887637817 ], [ 4.735317739542205, 52.604662978658922 ], [ 4.73657812838516, 52.599573054041223 ], [ 4.737804839785925, 52.596748188815738 ], [ 4.737451627345244, 52.593914680326584 ], [ 4.752093054705677, 52.592011741769213 ], [ 4.756445340343553, 52.591468611698907 ], [ 4.751442089028878, 52.582380889818801 ], [ 4.748422884235733, 52.572737298823562 ], [ 4.74454552052543, 52.567902676076798 ], [ 4.744956724156332, 52.566772262720633 ], [ 4.752911793020014, 52.562567623731155 ], [ 4.77189509661989, 52.5598359050189 ], [ 4.781799927303974, 52.557055221228119 ], [ 4.781026262782794, 52.55591863731695 ], [ 4.778029735672434, 52.544293752647881 ], [ 4.777779908828942, 52.533815532754438 ], [ 4.777807270462504, 52.531833547065766 ], [ 4.782312363365422, 52.519680657477238 ], [ 4.789811349049594, 52.519152319377042 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1911\", \"naam\": \"Hollands Kroon\", \"code\": \"1911\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.898532094979835, 52.706813915071457 ], [ 4.905195150519385, 52.713070296242854 ], [ 4.912246993903262, 52.720177276630288 ], [ 4.931431877878534, 52.741771215406565 ], [ 4.932943721141513, 52.748855569327773 ], [ 4.94045989607202, 52.750299705642973 ], [ 4.944400632606731, 52.752579557872608 ], [ 4.944389198755925, 52.753712084909424 ], [ 4.954285012104558, 52.7551641641274 ], [ 4.955890121566002, 52.753187990699736 ], [ 4.996728201476897, 52.75219626276111 ], [ 5.021707241516993, 52.751426083209573 ], [ 5.033197513533022, 52.752027058732693 ], [ 5.045870648995677, 52.753479741900989 ], [ 5.056149093249871, 52.757189569496056 ], [ 5.062859039378409, 52.761171984482516 ], [ 5.067577390160423, 52.766564388788545 ], [ 5.069549694722373, 52.767985359350533 ], [ 5.076282589818121, 52.769135670664163 ], [ 5.081830144802483, 52.769716291194783 ], [ 5.093331737260089, 52.769462063875409 ], [ 5.103214042649636, 52.774299377849957 ], [ 5.106384893707971, 52.774590028175666 ], [ 5.111908649564445, 52.779133125638793 ], [ 5.121419114923486, 52.845974692988676 ], [ 5.214891249995786, 52.916079189211011 ], [ 5.169126396907684, 52.997544060642525 ], [ 5.164325607923404, 53.000932657625889 ], [ 5.144252644901232, 53.026091193633945 ], [ 5.074504178475847, 53.018285093562696 ], [ 5.006876384212918, 53.044419372189822 ], [ 4.9322559986729, 53.04415905213655 ], [ 4.876251650281505, 53.021849639610103 ], [ 4.92593210902044, 52.963161693565397 ], [ 4.875005669933957, 52.890473007182976 ], [ 4.808283195303752, 52.91423449597572 ], [ 4.80435393032027, 52.910534659499255 ], [ 4.794779660271974, 52.912469485380107 ], [ 4.770988020408712, 52.878656043181806 ], [ 4.770208982090713, 52.877519473542101 ], [ 4.758699211875462, 52.848579366303362 ], [ 4.759497758065781, 52.848300431194055 ], [ 4.782494605628825, 52.851533723350528 ], [ 4.794470272040869, 52.847346743643783 ], [ 4.809703444980395, 52.836945331344673 ], [ 4.813745345550807, 52.831585192380857 ], [ 4.83429749272547, 52.807898510654475 ], [ 4.832406382780843, 52.800528068210916 ], [ 4.831427928689076, 52.783818154626907 ], [ 4.827464968076029, 52.78351646739533 ], [ 4.829156155248, 52.77531326106574 ], [ 4.819652892326152, 52.774135808910714 ], [ 4.820901131618496, 52.769611453089247 ], [ 4.816139100861462, 52.769871870600831 ], [ 4.813344853049144, 52.771274165066906 ], [ 4.807011406884727, 52.770394065607789 ], [ 4.810658425746329, 52.76446574427991 ], [ 4.831508770652969, 52.746160425146066 ], [ 4.835528916255368, 52.741648789693485 ], [ 4.839979780045756, 52.734307539443869 ], [ 4.844362616741861, 52.732345577289976 ], [ 4.845579151574511, 52.730085949546648 ], [ 4.850392100527616, 52.725294260264562 ], [ 4.84843577847807, 52.723303400991291 ], [ 4.847681833735979, 52.72018537596427 ], [ 4.851222389935075, 52.722183391438335 ], [ 4.857942471265437, 52.72334603571624 ], [ 4.861141911032292, 52.720811897834572 ], [ 4.871889527481679, 52.716328556802026 ], [ 4.877087522944978, 52.712103744182642 ], [ 4.89098956262691, 52.708481594671298 ], [ 4.898532094979835, 52.706813915071457 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0765\", \"naam\": \"Pekela\", \"code\": \"0765\", \"ligtInProvincieCode\": \"20\", \"ligtInProvincieNaam\": \"Groningen\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 7.015621856209711, 53.07188381641302 ], [ 7.037724612553515, 53.096499529691371 ], [ 7.042722520678734, 53.101810637691571 ], [ 7.033717983447501, 53.106748548072339 ], [ 7.030176195854781, 53.108213000154464 ], [ 7.028307202966841, 53.11163656506492 ], [ 7.025942084806589, 53.112518433163373 ], [ 7.02963443840023, 53.115016308223851 ], [ 7.028079020674864, 53.116170271415676 ], [ 6.987700414265323, 53.11615030669951 ], [ 6.982609982653552, 53.119049798618107 ], [ 6.979812714412364, 53.119087022878858 ], [ 6.967135960976147, 53.111326492266521 ], [ 6.965117659500103, 53.110786784551578 ], [ 6.961890536400829, 53.109979785362022 ], [ 6.960578082236649, 53.095839133324255 ], [ 6.956942524550654, 53.094754215977005 ], [ 6.943684799110684, 53.081618851538131 ], [ 6.944483340692361, 53.081608466167062 ], [ 6.937963536990461, 53.078012040522992 ], [ 6.930586027362328, 53.072727375694406 ], [ 6.92891890734014, 53.07076674911206 ], [ 6.924466216910711, 53.057798698715409 ], [ 6.933104372810183, 53.053723169846855 ], [ 6.933352282738127, 53.049472554626533 ], [ 6.919777013541066, 53.049364052207963 ], [ 6.920834074720085, 53.045386261570357 ], [ 6.905614874362822, 53.043881427275707 ], [ 6.907830170117463, 53.038756407314537 ], [ 6.911679997052667, 53.034743157167767 ], [ 6.934707857475358, 53.020289312513903 ], [ 6.941783419680422, 53.017365902950068 ], [ 6.955614707474583, 53.013787313177765 ], [ 6.988021547408104, 53.049036750344001 ], [ 6.990634693132201, 53.054948207636379 ], [ 6.993858242278445, 53.055754460091819 ], [ 7.010096941820789, 53.073657839418331 ], [ 7.013131441650343, 53.069369197044807 ], [ 7.015621856209711, 53.07188381641302 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1945\", \"naam\": \"Berg en Dal\", \"code\": \"1945\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.938176936701066, 51.741477468955388 ], [ 5.94399250069671, 51.741733173309797 ], [ 5.952552366730888, 51.744524154824035 ], [ 5.953369971797152, 51.74791857325431 ], [ 5.95183403309018, 51.749058772888247 ], [ 5.95690773435232, 51.751866186246559 ], [ 5.958454390100717, 51.751575459560115 ], [ 5.9740560500685, 51.759144693112624 ], [ 5.979106266662845, 51.759968887738978 ], [ 5.990430738179281, 51.766141491559971 ], [ 5.992038396166343, 51.770381166823682 ], [ 5.990867667717962, 51.769820807332124 ], [ 5.986632929322431, 51.772108116819595 ], [ 5.982390289427918, 51.773828917483094 ], [ 5.984381503683179, 51.777783547550399 ], [ 5.983617174098334, 51.778637029109703 ], [ 5.990270145994213, 51.783134144165714 ], [ 5.987939413936114, 51.782862913112567 ], [ 5.984866837844104, 51.785144190140166 ], [ 5.981749150477365, 51.784027255024021 ], [ 5.979836023784701, 51.78601931685067 ], [ 5.974395030815109, 51.785197103619453 ], [ 5.974051404524083, 51.788597180330427 ], [ 5.972510933014394, 51.789454469180932 ], [ 5.976840581197083, 51.794247112387943 ], [ 5.974531487371794, 51.795674681312697 ], [ 5.97921273739205, 51.797633514201713 ], [ 5.975739652740073, 51.799066976399907 ], [ 5.963038089714031, 51.807059510183983 ], [ 5.956092791923301, 51.810208552316269 ], [ 5.948345660641103, 51.811378652870481 ], [ 5.949524010583267, 51.812505789484 ], [ 5.946429899904252, 51.813370167145862 ], [ 5.946062883148356, 51.815071085559282 ], [ 5.948021024458144, 51.816477713894706 ], [ 5.952657089022782, 51.814756287208958 ], [ 5.958119199512116, 51.8169953891828 ], [ 5.945003741607717, 51.823571966961318 ], [ 5.948140892666597, 51.826105759254126 ], [ 5.963029981858011, 51.836795020166093 ], [ 5.971140000056121, 51.833356604209776 ], [ 5.976183672869113, 51.833048199509129 ], [ 5.98780115486976, 51.83072374549571 ], [ 5.99440498431003, 51.83097295002495 ], [ 6.001800821717709, 51.832350419056553 ], [ 6.009993211399894, 51.835139176032904 ], [ 6.01586078661995, 51.838223037773886 ], [ 6.017065294252598, 51.841048534081665 ], [ 6.020179843387175, 51.841598166544557 ], [ 6.029163866468762, 51.845230907228597 ], [ 6.03261849985968, 51.842380000884219 ], [ 6.035729250240192, 51.842646046729563 ], [ 6.041620143281119, 51.847144478995446 ], [ 6.055293075516696, 51.852448166314844 ], [ 6.051471563682269, 51.856717794938859 ], [ 6.059641835410813, 51.857520860790338 ], [ 6.060473832864505, 51.86119763851341 ], [ 6.061639316728971, 51.861190948034469 ], [ 6.063645639186197, 51.865427341562828 ], [ 6.053991101065954, 51.869447312522233 ], [ 6.046240506648071, 51.870907052972655 ], [ 6.040808618810182, 51.871503809120831 ], [ 6.035388826347009, 51.872949831148524 ], [ 6.029207629624184, 51.875532545770881 ], [ 6.023807016622413, 51.878393896278844 ], [ 6.016847069419859, 51.880980172684829 ], [ 6.007915505525277, 51.881594114663066 ], [ 6.002066032167277, 51.880208921816497 ], [ 5.997371345387846, 51.877967862140743 ], [ 5.989915017085196, 51.872625694072319 ], [ 5.98478048744315, 51.866421677811225 ], [ 5.981197602187432, 51.859926401453549 ], [ 5.97571061651869, 51.856272518032306 ], [ 5.967527444422092, 51.854330905806826 ], [ 5.958996122996206, 51.855505553223807 ], [ 5.955899243402405, 51.85637018022944 ], [ 5.950510432439345, 51.860360874543801 ], [ 5.945131200505806, 51.86520085009272 ], [ 5.937436660932738, 51.871467410617832 ], [ 5.93202039674636, 51.873475018796029 ], [ 5.923484512184547, 51.874647089392013 ], [ 5.914151016861613, 51.874122968000734 ], [ 5.903638899643789, 51.872470528177374 ], [ 5.895844459336419, 51.870522214006606 ], [ 5.886847247755564, 51.865180207093978 ], [ 5.881727765406688, 51.858971663684862 ], [ 5.887166559153469, 51.858948622544304 ], [ 5.887504671735066, 51.854416105965811 ], [ 5.885130134578462, 51.850461511237739 ], [ 5.887451163822979, 51.849602063155572 ], [ 5.885487198141224, 51.847628071008351 ], [ 5.880410234627948, 51.845100785999747 ], [ 5.894340345820409, 51.840510325926559 ], [ 5.892004041494626, 51.839954014251916 ], [ 5.898175395330445, 51.836245792154898 ], [ 5.895813677972625, 51.833424121857398 ], [ 5.896965649468325, 51.832286349435932 ], [ 5.906267431751163, 51.830829598416365 ], [ 5.908192260519599, 51.829405098955796 ], [ 5.905451846098619, 51.827434881445313 ], [ 5.901569720363448, 51.827451966560822 ], [ 5.899599663260309, 51.824911845845648 ], [ 5.888320059183315, 51.822978217166785 ], [ 5.880528645046364, 51.820462502080943 ], [ 5.88165891700578, 51.817342615354853 ], [ 5.886259974404326, 51.812225643821009 ], [ 5.885461891166147, 51.810246680560354 ], [ 5.879243565442685, 51.809423351966892 ], [ 5.88109696054678, 51.801486133079621 ], [ 5.887626769034733, 51.795511371140613 ], [ 5.887122649381607, 51.785035325420978 ], [ 5.887876338774453, 51.78304974624281 ], [ 5.893248780098864, 51.777929170647148 ], [ 5.89977036165743, 51.771670541748286 ], [ 5.905518031448837, 51.76569816091488 ], [ 5.9112937790052, 51.762274127058873 ], [ 5.913580051527219, 51.758865529712295 ], [ 5.913152828700381, 51.755469095368795 ], [ 5.915441931826912, 51.752343641184275 ], [ 5.933218559755591, 51.748014208350831 ], [ 5.930876339704932, 51.746609115884027 ], [ 5.930074067411511, 51.744347261786757 ], [ 5.93275917133241, 51.74206921530066 ], [ 5.938176936701066, 51.741477468955388 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0355\", \"naam\": \"Zeist\", \"code\": \"0355\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.247466288573137, 52.058725996956163 ], [ 5.252138795606176, 52.062129598910339 ], [ 5.256428337523132, 52.063267152264018 ], [ 5.257982062465206, 52.065817481196547 ], [ 5.265386045994675, 52.070073051488976 ], [ 5.29072204095251, 52.086520863788962 ], [ 5.320421984901911, 52.070400209213219 ], [ 5.328222290146715, 52.075218404610297 ], [ 5.332512259500874, 52.078618613650995 ], [ 5.33211490129993, 52.084282000738028 ], [ 5.327035594391468, 52.086828129310085 ], [ 5.309454392901864, 52.092481430395999 ], [ 5.298121304321316, 52.09643791732131 ], [ 5.322328173521736, 52.101834073244639 ], [ 5.310989515184272, 52.108340386287026 ], [ 5.306297978808807, 52.110319507678639 ], [ 5.298872262208056, 52.111730074090715 ], [ 5.291833765018488, 52.114556372076017 ], [ 5.282071825967488, 52.111999488565104 ], [ 5.271875083768495, 52.12699835033046 ], [ 5.264064027642609, 52.125008225033042 ], [ 5.255822947850043, 52.136609580988953 ], [ 5.255425360703887, 52.138874547892286 ], [ 5.256584911092856, 52.143406653542918 ], [ 5.254611584632639, 52.149634322600164 ], [ 5.243206194208964, 52.170009583906236 ], [ 5.238910493281434, 52.167738870381172 ], [ 5.237725573121192, 52.171135474529116 ], [ 5.23616072526331, 52.171133483879963 ], [ 5.236173175659531, 52.167452227019524 ], [ 5.224835147383875, 52.165738134080733 ], [ 5.229639006449249, 52.134595303831816 ], [ 5.229656970786359, 52.129498148017838 ], [ 5.230874067839897, 52.116756798218674 ], [ 5.218382291553168, 52.113624636154398 ], [ 5.219176473690866, 52.110227637801103 ], [ 5.222324863841299, 52.104002166232675 ], [ 5.211010156044497, 52.100587673193594 ], [ 5.212583584000321, 52.097758229790784 ], [ 5.208694837903633, 52.093504732062868 ], [ 5.210659786986772, 52.090392724415182 ], [ 5.205605056387143, 52.085004651906239 ], [ 5.192715034943441, 52.086116815054339 ], [ 5.195095517569537, 52.07734216152852 ], [ 5.200563349452197, 52.076784584000599 ], [ 5.206431716694276, 52.073678752652249 ], [ 5.225200715691608, 52.064927465017846 ], [ 5.218584031548902, 52.060104130024108 ], [ 5.218975335719687, 52.059821509005623 ], [ 5.245516038581622, 52.058440489817187 ], [ 5.247466288573137, 52.058725996956163 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0777\", \"naam\": \"Etten-Leur\", \"code\": \"0777\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.694250446713672, 51.544749262608626 ], [ 4.694450572422864, 51.556928276198235 ], [ 4.693197718000391, 51.56315135694927 ], [ 4.693896103380077, 51.567969985297331 ], [ 4.69071268965357, 51.574181572057427 ], [ 4.68867794559199, 51.580966349465143 ], [ 4.686708154525674, 51.583503408969186 ], [ 4.686677558741868, 51.585485658670805 ], [ 4.682223375858925, 51.598769510195822 ], [ 4.67486253751687, 51.600140936648927 ], [ 4.675577296347403, 51.603826946906359 ], [ 4.663984238037575, 51.604039050057558 ], [ 4.664289285837167, 51.609138621479765 ], [ 4.660798711225976, 51.609966613464309 ], [ 4.661144245286509, 51.612517601124679 ], [ 4.659589724275545, 51.613074352681359 ], [ 4.657925862360669, 51.62042731448097 ], [ 4.663645423290251, 51.62527729859864 ], [ 4.66475066843791, 51.628682578663437 ], [ 4.663168495049075, 51.630938433693466 ], [ 4.664714558261708, 51.630947989114183 ], [ 4.66504693008672, 51.634348489776464 ], [ 4.660399311453582, 51.634886126666089 ], [ 4.644974484775937, 51.632523678741236 ], [ 4.640359484817045, 51.631078293332536 ], [ 4.636536545035272, 51.628504988198387 ], [ 4.635801113719908, 51.62623462792066 ], [ 4.631578228895839, 51.624508203320239 ], [ 4.625786111186743, 51.624187450406588 ], [ 4.622684917359686, 51.624733639791977 ], [ 4.618395440038597, 51.626971179097339 ], [ 4.612574068774788, 51.628348814949696 ], [ 4.607941060754673, 51.628034847652543 ], [ 4.601419880239886, 51.625159178050758 ], [ 4.60419359415044, 51.621212887737002 ], [ 4.603479480222116, 51.617809632901704 ], [ 4.608937684797318, 51.615014007636496 ], [ 4.610918044993106, 51.612195104076967 ], [ 4.610575339936382, 51.609643974182916 ], [ 4.613694964015806, 51.607965406557213 ], [ 4.610686856791934, 51.603130970595167 ], [ 4.608770061830475, 51.602268610968117 ], [ 4.602326015228423, 51.595145381062345 ], [ 4.596616810695939, 51.590292409111804 ], [ 4.598650974916517, 51.584358794445563 ], [ 4.596101192592526, 51.575562145817543 ], [ 4.594710282453533, 51.56677329228657 ], [ 4.590479583586981, 51.565894912694368 ], [ 4.591721786475628, 51.561088839103647 ], [ 4.59212257524229, 51.560241942216955 ], [ 4.598692862949354, 51.559720031623726 ], [ 4.601799690693846, 51.558608117218313 ], [ 4.610376585035119, 51.553567697620053 ], [ 4.61113377758163, 51.554422350047084 ], [ 4.615783345354608, 51.553320299750673 ], [ 4.624676959709465, 51.552245830534751 ], [ 4.625915164926268, 51.547439380594952 ], [ 4.630163712760655, 51.547183770709658 ], [ 4.631763417238152, 51.543795636993494 ], [ 4.635258797457761, 51.542402144270568 ], [ 4.640259720405282, 51.543283835772115 ], [ 4.63864342428734, 51.524298615914951 ], [ 4.637988874389225, 51.517214234495 ], [ 4.643372637018247, 51.518098261089236 ], [ 4.652180898653484, 51.521835705455572 ], [ 4.654453346876178, 51.524398842870994 ], [ 4.659062514780553, 51.525560486821263 ], [ 4.680809658759882, 51.540703914489271 ], [ 4.694250446713672, 51.544749262608626 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1690\", \"naam\": \"De Wolden\", \"code\": \"1690\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.529424825390456, 52.654477584933936 ], [ 6.530686996474331, 52.672588329719034 ], [ 6.499448318438642, 52.673450954795427 ], [ 6.499901288632561, 52.675712060331691 ], [ 6.492391308840163, 52.67606525919124 ], [ 6.493382172703488, 52.683984729096309 ], [ 6.484683577448173, 52.684348479841901 ], [ 6.486104458574234, 52.693679848190769 ], [ 6.473452841954007, 52.694362381373878 ], [ 6.463134087637587, 52.693323499542259 ], [ 6.462786828847145, 52.69530879468418 ], [ 6.448496325600386, 52.693738160550708 ], [ 6.45140417365028, 52.699375468535635 ], [ 6.449964667145747, 52.70533477806795 ], [ 6.451193563936757, 52.707022776537144 ], [ 6.431759540416982, 52.705779164506673 ], [ 6.42379444278723, 52.7038666879806 ], [ 6.419782187878845, 52.701636276848056 ], [ 6.407232453056963, 52.706841454370384 ], [ 6.404804388860587, 52.704596950890874 ], [ 6.403636335054073, 52.705456421039834 ], [ 6.405377592679668, 52.712237411978663 ], [ 6.41420827905733, 52.717258430486375 ], [ 6.413099644827924, 52.720665927719452 ], [ 6.406940482349365, 52.728364198686165 ], [ 6.421274187245383, 52.731355297951851 ], [ 6.415551023415121, 52.740749163768918 ], [ 6.42313291457312, 52.742948707889518 ], [ 6.420485916640036, 52.748351743606158 ], [ 6.426107902766948, 52.751417574305322 ], [ 6.419477001654314, 52.756005790047645 ], [ 6.41628610667427, 52.755183933251658 ], [ 6.410168958021751, 52.76486401894433 ], [ 6.415356015966549, 52.766235140629668 ], [ 6.4276866372995, 52.767827001771771 ], [ 6.432074863679341, 52.768921217525531 ], [ 6.437673153166878, 52.770854081585057 ], [ 6.446129678020707, 52.776159209843009 ], [ 6.446759055065718, 52.785780986227202 ], [ 6.436992448195621, 52.792096903455409 ], [ 6.429771055018836, 52.788762432164894 ], [ 6.432493640186223, 52.786473320469348 ], [ 6.432049714206516, 52.784495114895634 ], [ 6.428063269952011, 52.783680540360749 ], [ 6.427639748915656, 52.782551611567811 ], [ 6.422483834124, 52.782596530777923 ], [ 6.421657181725205, 52.781187927146995 ], [ 6.416514726066198, 52.781798785702691 ], [ 6.416224548965872, 52.78633179800763 ], [ 6.413097822288533, 52.788340857469002 ], [ 6.407478581628223, 52.785557551549068 ], [ 6.400624359381775, 52.780802402267263 ], [ 6.394200719238381, 52.777459003638505 ], [ 6.391470193313153, 52.779464147990261 ], [ 6.387491418568509, 52.778931313411192 ], [ 6.38672410053667, 52.780070377460042 ], [ 6.378114393967031, 52.785239101623276 ], [ 6.373290990770882, 52.78244757420152 ], [ 6.374461683835917, 52.781588412520101 ], [ 6.372043857372562, 52.779909495055414 ], [ 6.363363028381846, 52.781963030865782 ], [ 6.361008549620406, 52.783114919330643 ], [ 6.355374502248259, 52.779479833073196 ], [ 6.353844382998905, 52.782040649528511 ], [ 6.349512759987965, 52.783491490113775 ], [ 6.353522728986734, 52.78544110976145 ], [ 6.350418088860744, 52.788580944353086 ], [ 6.345651840458927, 52.788336229594613 ], [ 6.34290605177164, 52.789774054508776 ], [ 6.35049282539497, 52.791978183536585 ], [ 6.352532507773025, 52.794510056552127 ], [ 6.354528637675062, 52.795060174525531 ], [ 6.353822690694622, 52.799030048922937 ], [ 6.340723245571964, 52.798852438787272 ], [ 6.321203178538095, 52.79532606450217 ], [ 6.310491326113811, 52.795409550267436 ], [ 6.30688501457747, 52.793738529986541 ], [ 6.305250637500914, 52.79148591961011 ], [ 6.300875106333253, 52.79095325065704 ], [ 6.302011961227622, 52.788396159732585 ], [ 6.299602424917587, 52.786998877151539 ], [ 6.300768782369292, 52.785857330405356 ], [ 6.297093044898865, 52.780788720745889 ], [ 6.293074293367021, 52.778270977685835 ], [ 6.299219190397891, 52.768596885289185 ], [ 6.298379100623436, 52.766338087798793 ], [ 6.286840637815748, 52.764443734982734 ], [ 6.280456904812359, 52.762509715775636 ], [ 6.268478245672293, 52.758351668727052 ], [ 6.262118811467052, 52.757549104579255 ], [ 6.254587243278734, 52.757604203959254 ], [ 6.252220024139596, 52.758187728818164 ], [ 6.246179624742027, 52.753417861213194 ], [ 6.242573694036027, 52.751461751320434 ], [ 6.238098499932245, 52.745547608005474 ], [ 6.235275173323314, 52.743019375908744 ], [ 6.231285232986113, 52.741631966952433 ], [ 6.234433402406111, 52.740476990776685 ], [ 6.219455258108977, 52.723876596327962 ], [ 6.216184838542413, 52.718519493757157 ], [ 6.217083854604197, 52.703222865337551 ], [ 6.224210243531052, 52.70317294232126 ], [ 6.231792439783117, 52.706234070980557 ], [ 6.238913802137324, 52.705900149574525 ], [ 6.24846062481158, 52.708096674021824 ], [ 6.252760268065032, 52.705233909981267 ], [ 6.256323601204902, 52.705207933260589 ], [ 6.269004565165369, 52.705680937128136 ], [ 6.274163075690905, 52.706208907153133 ], [ 6.273709965717792, 52.703380712677173 ], [ 6.277273132182771, 52.703354109005936 ], [ 6.276819852534348, 52.700525924715997 ], [ 6.279562250216306, 52.69908959748178 ], [ 6.276372365821021, 52.697980851432042 ], [ 6.275924931847125, 52.695435774722178 ], [ 6.286687872578726, 52.699035934524694 ], [ 6.284913379884604, 52.689705115351579 ], [ 6.275821802070746, 52.690339700045932 ], [ 6.275374480471025, 52.68779461614924 ], [ 6.281637557629724, 52.684349778653122 ], [ 6.284011969319213, 52.684331898706667 ], [ 6.283575791129026, 52.682353073813836 ], [ 6.274095706602138, 52.683273621805519 ], [ 6.269719959591156, 52.682173536994718 ], [ 6.272307433548415, 52.673093220364237 ], [ 6.269153717855545, 52.673682970697165 ], [ 6.266327586418043, 52.670872305547817 ], [ 6.265479768310847, 52.668046977029547 ], [ 6.269373149897135, 52.664903398567645 ], [ 6.273328761547188, 52.664873984046238 ], [ 6.276567726553046, 52.668530879623667 ], [ 6.279348374866043, 52.66907636877 ], [ 6.285631631775476, 52.666763778934452 ], [ 6.285207129438451, 52.665351184416977 ], [ 6.29187343286566, 52.662469043037895 ], [ 6.295427418476693, 52.662158786616295 ], [ 6.297888615611103, 52.666387372473203 ], [ 6.305800049309441, 52.666326514438822 ], [ 6.314142856115081, 52.667960734988988 ], [ 6.316558276068363, 52.669924008776221 ], [ 6.322899964052414, 52.670440597480066 ], [ 6.326831810700554, 52.669276947072099 ], [ 6.329126494946388, 52.665577689736665 ], [ 6.325901525812076, 52.662771575908799 ], [ 6.327794390575736, 52.658792346635991 ], [ 6.332497783520933, 52.656772904638991 ], [ 6.334827958268221, 52.654772214513777 ], [ 6.341538553128968, 52.654152206802507 ], [ 6.34345426442689, 52.651305179947208 ], [ 6.346969893716479, 52.649294702361239 ], [ 6.353265409293592, 52.647827885235095 ], [ 6.353221871678719, 52.64584609104741 ], [ 6.359937101616754, 52.645508160976185 ], [ 6.362679631095061, 52.644353027245643 ], [ 6.364593549134211, 52.64150565744864 ], [ 6.362955648882188, 52.638970632019522 ], [ 6.369600194393602, 52.635517911275592 ], [ 6.369129069555564, 52.632123819045312 ], [ 6.371494279896821, 52.631821086393735 ], [ 6.372234076891536, 52.629549629995324 ], [ 6.375338721435636, 52.62697535913766 ], [ 6.373669015036732, 52.623024904856024 ], [ 6.376403420805636, 52.621586338868241 ], [ 6.376696730654713, 52.617053228570363 ], [ 6.380208109475065, 52.615041762159763 ], [ 6.382986640520259, 52.615584840088907 ], [ 6.383699939500187, 52.612180850718694 ], [ 6.388887477660514, 52.614402564353895 ], [ 6.391653152392354, 52.61437921323774 ], [ 6.393693371051663, 52.617193622341368 ], [ 6.396077076433189, 52.617739739807114 ], [ 6.403551766412129, 52.616260192864424 ], [ 6.406752008108773, 52.617931780861234 ], [ 6.406422445747594, 52.620766287346378 ], [ 6.410782283532154, 52.62129514340004 ], [ 6.411934790044158, 52.619869369031939 ], [ 6.416254883524015, 52.618699357538198 ], [ 6.418632312105498, 52.618961910509491 ], [ 6.421096232513404, 52.622904851874203 ], [ 6.427063911175625, 52.624551784853615 ], [ 6.425905091044731, 52.625694593581635 ], [ 6.428336545367422, 52.628221828106234 ], [ 6.433072411294382, 52.627897071417571 ], [ 6.432630110112464, 52.62591878471796 ], [ 6.435308810564216, 52.6222139939253 ], [ 6.434478060686063, 52.620522306116165 ], [ 6.436393048717015, 52.617956889534845 ], [ 6.442265602478035, 52.61563952862182 ], [ 6.450555896166525, 52.61528244604942 ], [ 6.453287296529107, 52.613842116910376 ], [ 6.455303940516274, 52.615523023848617 ], [ 6.459656933734841, 52.615766979030866 ], [ 6.463399753565884, 52.62337872724374 ], [ 6.470159430626195, 52.625016330272722 ], [ 6.472523547983823, 52.62471158984102 ], [ 6.472460706554449, 52.622163631565066 ], [ 6.475996109336207, 52.621281775512642 ], [ 6.478303831434812, 52.618712069170968 ], [ 6.484237771992449, 52.618940597307102 ], [ 6.492535433943416, 52.618863691265332 ], [ 6.494489694176, 52.617995979548709 ], [ 6.500021338239926, 52.617944296347765 ], [ 6.504346061307947, 52.617054194250066 ], [ 6.512161381902112, 52.613582379970268 ], [ 6.51849714712677, 52.614088561223852 ], [ 6.513792153552095, 52.646414825643561 ], [ 6.529424825390456, 52.654477584933936 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0865\", \"naam\": \"Vught\", \"code\": \"0865\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.317584570099678, 51.634573035159995 ], [ 5.32106041461801, 51.636840602443399 ], [ 5.319511518787485, 51.638538885348794 ], [ 5.318733184530378, 51.641936765836249 ], [ 5.319888469868609, 51.645052571373391 ], [ 5.31910792801258, 51.649866421634862 ], [ 5.31678420164816, 51.652130602403027 ], [ 5.312527471600873, 51.6538271340481 ], [ 5.311359218603967, 51.658640681588402 ], [ 5.304389998269063, 51.662600682083152 ], [ 5.303997993235592, 51.665432342226836 ], [ 5.309409311287252, 51.667984798732178 ], [ 5.319077329472629, 51.670256359054569 ], [ 5.318689598015097, 51.670822520407945 ], [ 5.309793751738747, 51.669401021086244 ], [ 5.303221177492318, 51.667130950794025 ], [ 5.300511066717935, 51.668261753718106 ], [ 5.298965834666464, 51.667127826727516 ], [ 5.294313201537807, 51.672221719376189 ], [ 5.291217459678457, 51.672502420164143 ], [ 5.291987086911708, 51.67448540228704 ], [ 5.289270137204315, 51.678447873498314 ], [ 5.288876433830192, 51.681562671120112 ], [ 5.265649731375323, 51.684656023018547 ], [ 5.25829917218513, 51.683798592299908 ], [ 5.254814594543876, 51.684361096206509 ], [ 5.246691190269318, 51.68321886789554 ], [ 5.234299985165758, 51.685468908513691 ], [ 5.231965334411663, 51.689147354599143 ], [ 5.226156761905346, 51.689989098965867 ], [ 5.22579192482782, 51.683758340724545 ], [ 5.224257207254837, 51.68007470018231 ], [ 5.223118898511196, 51.673842849211077 ], [ 5.208804506710081, 51.673538738865204 ], [ 5.208029580715444, 51.673820750545786 ], [ 5.202624445828166, 51.670980421228698 ], [ 5.204176546306199, 51.669850079522512 ], [ 5.1666542211902, 51.668935874389021 ], [ 5.161651796978364, 51.663545654751381 ], [ 5.157785065260124, 51.663254951264904 ], [ 5.157038772200159, 51.657872787994251 ], [ 5.154345949139518, 51.655035517324912 ], [ 5.160225118184078, 51.639471331185824 ], [ 5.17221275343694, 51.638927562539038 ], [ 5.184189958592428, 51.640648108435492 ], [ 5.19192727157685, 51.639528485157989 ], [ 5.191165066804393, 51.636978456547929 ], [ 5.193511221192098, 51.630752067655983 ], [ 5.195841199127244, 51.628207141400914 ], [ 5.202821505879225, 51.622554434927849 ], [ 5.207854541627988, 51.620296689361645 ], [ 5.210578422027067, 51.615486507772381 ], [ 5.222534451023029, 51.621734230087867 ], [ 5.222154171052392, 51.620034523108075 ], [ 5.224099636572165, 51.616355709811209 ], [ 5.228352185762131, 51.615795165326269 ], [ 5.236845710756691, 51.618071941474703 ], [ 5.244186095933972, 51.618647526166832 ], [ 5.246497681630437, 51.620915887453307 ], [ 5.246105944340582, 51.622614586841955 ], [ 5.250740163837384, 51.623752858052541 ], [ 5.25074357018971, 51.622620081816486 ], [ 5.25537461623253, 51.624890945646598 ], [ 5.264282257451111, 51.618103950673635 ], [ 5.268934180467494, 51.612444836528908 ], [ 5.2716381363621, 51.612730730708293 ], [ 5.271244518795335, 51.615562293556657 ], [ 5.275880732409751, 51.615849986241912 ], [ 5.277804601443566, 51.619250139480485 ], [ 5.280891483369795, 51.621235346146484 ], [ 5.280888167382241, 51.622651317877747 ], [ 5.285525167496161, 51.622938628356152 ], [ 5.2909393784642, 51.621244031690061 ], [ 5.294803954649671, 51.621247142483497 ], [ 5.297115397013395, 51.624930475246288 ], [ 5.299819185750478, 51.625782106597804 ], [ 5.304458690478548, 51.624935889065355 ], [ 5.306772610330473, 51.627769446952911 ], [ 5.30599603862793, 51.629751274411539 ], [ 5.308309316283732, 51.633151189203979 ], [ 5.317584570099678, 51.634573035159995 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0489\", \"naam\": \"Barendrecht\", \"code\": \"0489\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.55359067814018, 51.829868337234934 ], [ 4.558916356796437, 51.83585326323778 ], [ 4.560790157354005, 51.839548081736709 ], [ 4.565791552335239, 51.842131988610014 ], [ 4.571140820327038, 51.846983699965286 ], [ 4.571477895491358, 51.849818044705188 ], [ 4.569872958695965, 51.85263888556868 ], [ 4.565605612306232, 51.852325903962509 ], [ 4.549275204339923, 51.874016933527841 ], [ 4.542727572566737, 51.870854838342588 ], [ 4.531885426512601, 51.868793978509657 ], [ 4.526040975760467, 51.869600873615113 ], [ 4.521777781126054, 51.869003135584784 ], [ 4.494185407834832, 51.869079779061792 ], [ 4.480277661159541, 51.865008371902029 ], [ 4.48032900343612, 51.86245994480754 ], [ 4.481185763357296, 51.858501720021174 ], [ 4.4804772879243, 51.855097817310202 ], [ 4.490266883262448, 51.851208166964781 ], [ 4.487210684075359, 51.8486359548629 ], [ 4.489580407205148, 51.846671675694843 ], [ 4.489631195767983, 51.84412323744921 ], [ 4.49240576383906, 51.841312387591529 ], [ 4.489698903543178, 51.840725318491636 ], [ 4.489029573857584, 51.83533933824986 ], [ 4.496406424332936, 51.835395550157521 ], [ 4.50497024686574, 51.834327413927561 ], [ 4.516677876586859, 51.83129959414579 ], [ 4.525634075691414, 51.829949663135054 ], [ 4.531451874953235, 51.830275424626066 ], [ 4.542683587813332, 51.831772781025066 ], [ 4.548507021175066, 51.83181453417577 ], [ 4.55359067814018, 51.829868337234934 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0331\", \"naam\": \"Lopik\", \"code\": \"0331\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.926244332102526, 51.950863063793925 ], [ 4.93471153350926, 51.960524322388771 ], [ 4.941686409102289, 51.963949191018948 ], [ 4.950650788474986, 51.963133234858596 ], [ 4.958852288661459, 51.960614698696432 ], [ 4.96548484597448, 51.959222726291742 ], [ 4.968597055731995, 51.959517028589069 ], [ 4.975958566955462, 51.963507607288001 ], [ 4.986001833272529, 51.972604247768906 ], [ 4.991816492222392, 51.975738975829934 ], [ 4.998031314693335, 51.977741994072609 ], [ 5.003092628540367, 51.978041808788994 ], [ 5.010125422350986, 51.975515882514941 ], [ 5.01599601807931, 51.972136318905889 ], [ 5.022248264025032, 51.969607204337649 ], [ 5.029652298250704, 51.969063563824619 ], [ 5.03392726868176, 51.97020921862422 ], [ 5.038959417077694, 51.974188814941002 ], [ 5.040874086044987, 51.978442244301348 ], [ 5.045132969705256, 51.98185292077337 ], [ 5.050173798272, 51.984982496914149 ], [ 5.05949277022436, 51.989256580781529 ], [ 5.062595391422097, 51.991247468592192 ], [ 5.053212472183638, 51.995468986642827 ], [ 5.054375191195521, 51.996321832551374 ], [ 5.042223205301197, 52.005631928648178 ], [ 5.034051588485478, 52.003908596539695 ], [ 5.020232025514156, 52.02567149629914 ], [ 4.995310865297023, 52.021626630227878 ], [ 4.992196661557055, 52.021049857240243 ], [ 4.984788673783361, 52.0210247751235 ], [ 4.97621620898277, 52.020428799691842 ], [ 4.959478060016985, 52.017537344159869 ], [ 4.954802443942758, 52.017237082213583 ], [ 4.920178808789324, 52.010025203522993 ], [ 4.913930128426636, 52.011132993047092 ], [ 4.908865690201798, 52.010829339647721 ], [ 4.892166774013163, 52.005096581945551 ], [ 4.878183969246476, 52.000789148749881 ], [ 4.861496047628961, 51.994768867601117 ], [ 4.835103820838376, 51.986152379984546 ], [ 4.833942054252798, 51.985580547077227 ], [ 4.845759297265341, 51.974874355016937 ], [ 4.848096216228672, 51.974885085772414 ], [ 4.861035614578357, 51.967580762826486 ], [ 4.864193899442153, 51.963913394341063 ], [ 4.865790936795269, 51.960522219643984 ], [ 4.871310351033736, 51.954599591103523 ], [ 4.877712834844651, 51.939335289629675 ], [ 4.877728891962092, 51.937919412381049 ], [ 4.885116750727724, 51.938517566367914 ], [ 4.913876858399823, 51.942318293909338 ], [ 4.918140399290929, 51.944034506707723 ], [ 4.921230678764765, 51.946312297631373 ], [ 4.926244332102526, 51.950863063793925 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0200\", \"naam\": \"Apeldoorn\", \"code\": \"0200\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.076074789482976, 52.144014608777184 ], [ 6.074576397243887, 52.148271119427363 ], [ 6.067620608370359, 52.153691957857511 ], [ 6.064539590907586, 52.156824715469376 ], [ 6.066568221456128, 52.161627167071806 ], [ 6.065842010517282, 52.165312731356991 ], [ 6.06013725913998, 52.17610636511165 ], [ 6.049308816497246, 52.184663101203199 ], [ 6.053765663804109, 52.194832548484001 ], [ 6.058088107043661, 52.195940779166918 ], [ 6.053471637725824, 52.201347379454234 ], [ 6.050079125680587, 52.21014509031334 ], [ 6.047771911927825, 52.212989830526233 ], [ 6.048213900241519, 52.216385520495606 ], [ 6.0467230238778, 52.221491101655268 ], [ 6.042427545071516, 52.222364560753157 ], [ 6.040885917883562, 52.224072185623299 ], [ 6.033444422166291, 52.224113155194125 ], [ 6.034677044327028, 52.228070913615099 ], [ 6.034330627324103, 52.231187784758845 ], [ 6.035909887093962, 52.232028655971341 ], [ 6.033992391868212, 52.23487096612098 ], [ 6.028569052823888, 52.23914823038313 ], [ 6.028213967787534, 52.241698765487087 ], [ 6.026662990235979, 52.242839888063564 ], [ 6.027866996243546, 52.244815610837612 ], [ 6.024789072589065, 52.248796762554782 ], [ 6.028315953281398, 52.248777669589224 ], [ 6.030704063684414, 52.251313284691157 ], [ 6.031594496047694, 52.258671054756114 ], [ 6.034329992346291, 52.258089744363204 ], [ 6.037507045642298, 52.260904073783536 ], [ 6.037548449782975, 52.263735622266232 ], [ 6.034825019405444, 52.265166471594988 ], [ 6.036442703436016, 52.268555720640585 ], [ 6.030178099963503, 52.269156336281355 ], [ 6.030986807336815, 52.270850994603371 ], [ 6.028634388103453, 52.270863789951839 ], [ 6.03144041833561, 52.275096175900345 ], [ 6.027931856742885, 52.276531138266662 ], [ 6.01617224325041, 52.276877500027368 ], [ 6.009498205310944, 52.276346487062142 ], [ 5.99338652110483, 52.273881663639649 ], [ 5.989077265813614, 52.274186870615132 ], [ 5.99236054553405, 52.284930774326455 ], [ 5.985700829617803, 52.285531042564735 ], [ 5.982148267685344, 52.283849931120159 ], [ 5.98132225778019, 52.280739159129787 ], [ 5.973770325907765, 52.273131154368528 ], [ 5.958075656561438, 52.272358507274284 ], [ 5.93614317973768, 52.274444674090191 ], [ 5.915314370132281, 52.270575173876558 ], [ 5.894894147071824, 52.267832952758674 ], [ 5.879572786945529, 52.265066065866563 ], [ 5.867361838059056, 52.259736026611861 ], [ 5.861047906328161, 52.255797087433272 ], [ 5.854429431833126, 52.260071065921885 ], [ 5.850990162527565, 52.268579829459249 ], [ 5.842742402573298, 52.267196056768299 ], [ 5.829452198211222, 52.271210983635875 ], [ 5.821232259536191, 52.27265733420721 ], [ 5.809837216976802, 52.270150097641128 ], [ 5.802782509049801, 52.270458299626867 ], [ 5.797285578377131, 52.269627992912753 ], [ 5.780041937875687, 52.270536113874421 ], [ 5.751410779278451, 52.269495174228268 ], [ 5.74904913107317, 52.268369745290393 ], [ 5.761425876834362, 52.248225932158164 ], [ 5.750826490277074, 52.245993664433108 ], [ 5.72650277221466, 52.242384820596463 ], [ 5.729611288715729, 52.23897777012526 ], [ 5.730729860080582, 52.231612014557392 ], [ 5.738172888709165, 52.231590119940854 ], [ 5.743199799460343, 52.223363024822888 ], [ 5.74160608544713, 52.219969731042504 ], [ 5.727500687917112, 52.219161721473832 ], [ 5.730944460844338, 52.208674288661207 ], [ 5.741070414611549, 52.201848158145474 ], [ 5.750398893084899, 52.193607723717847 ], [ 5.788392995790204, 52.196599580659338 ], [ 5.791918425537327, 52.196870716758021 ], [ 5.796218965676802, 52.196289534666889 ], [ 5.799726065511447, 52.194578267042758 ], [ 5.811768045920504, 52.184907538586721 ], [ 5.801913770845103, 52.177296811838417 ], [ 5.809639664333684, 52.16679182352599 ], [ 5.809885902888571, 52.151499315659073 ], [ 5.845863661475518, 52.151648030616364 ], [ 5.85951978783932, 52.148762323502645 ], [ 5.86141763902354, 52.143374290444534 ], [ 5.862500041708837, 52.13487452879793 ], [ 5.864745381537812, 52.125520495678437 ], [ 5.876348463165867, 52.114428843992719 ], [ 5.883293085151318, 52.10647072260133 ], [ 5.900061103266999, 52.10385029053225 ], [ 5.911736209812011, 52.100117518061737 ], [ 5.922285195427736, 52.100353264485186 ], [ 5.946099857427976, 52.099393152541737 ], [ 5.951574985395316, 52.099933420448792 ], [ 5.948336606415227, 52.090887006663536 ], [ 5.945834382742511, 52.078155608340268 ], [ 5.946221227039332, 52.077870588362245 ], [ 5.9559231407124, 52.073293182895512 ], [ 5.964550857684689, 52.076366239303859 ], [ 5.975897604022952, 52.07829236729026 ], [ 5.990353244292331, 52.079068784775856 ], [ 6.009021035739304, 52.073874363184231 ], [ 6.011000401508296, 52.075846198844246 ], [ 6.017345922756403, 52.082892071287908 ], [ 6.031584736896602, 52.095558406520411 ], [ 6.033932022418389, 52.095828730628838 ], [ 6.034359458790302, 52.098375054524219 ], [ 6.032451652615628, 52.101500558475813 ], [ 6.034815671042724, 52.102903516056266 ], [ 6.034054976104507, 52.104323621321072 ], [ 6.035691383563563, 52.109411961271476 ], [ 6.041206109493454, 52.112496521663246 ], [ 6.040453737987561, 52.114482990033828 ], [ 6.043226039533483, 52.117016255787874 ], [ 6.047557429760017, 52.119257546562189 ], [ 6.05114983850974, 52.124334693054934 ], [ 6.062946116264184, 52.129081801095587 ], [ 6.069624716060599, 52.131308806958621 ], [ 6.071240142938473, 52.134697663376876 ], [ 6.078341574468796, 52.138904018567366 ], [ 6.076074789482976, 52.144014608777184 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0784\", \"naam\": \"Gilze en Rijen\", \"code\": \"0784\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.962567820652939, 51.525924863571753 ], [ 4.974010893705239, 51.539842683967116 ], [ 4.975551358424237, 51.540131319285315 ], [ 4.976688175952122, 51.542400915564485 ], [ 4.979373383559679, 51.544109513285846 ], [ 4.97432976638123, 51.547207004146763 ], [ 4.96543226015257, 51.549724037739452 ], [ 4.953463095541922, 51.550529840180907 ], [ 4.951471396333254, 51.557036030410565 ], [ 4.951047428960825, 51.560999246181154 ], [ 4.964129708652008, 51.56529530833253 ], [ 4.966813173073641, 51.567287382400579 ], [ 4.969092614613797, 51.571260344581525 ], [ 4.966752872123185, 51.573800748341789 ], [ 4.969421319245969, 51.577491900018991 ], [ 4.970196074528187, 51.577211466078289 ], [ 4.972440085950097, 51.585149015567524 ], [ 4.973536574110737, 51.59194966794864 ], [ 4.97271503161707, 51.597327532970915 ], [ 4.96769121696112, 51.597592823989203 ], [ 4.96880818186438, 51.602128000407085 ], [ 4.961045211108184, 51.606064760297194 ], [ 4.948641918183776, 51.610266904763094 ], [ 4.947860978715771, 51.611113570806872 ], [ 4.943994588127949, 51.611382187983473 ], [ 4.943622071113526, 51.609964783086177 ], [ 4.925039672439366, 51.613574445020809 ], [ 4.918055498556311, 51.616378640328875 ], [ 4.911881910017168, 51.615504128350871 ], [ 4.917361901546223, 51.608729483102671 ], [ 4.918596988099445, 51.601371256786877 ], [ 4.91629401606719, 51.599946012495295 ], [ 4.911658826511493, 51.599927262181204 ], [ 4.913610846787274, 51.597952784756714 ], [ 4.899763709175383, 51.592515109356832 ], [ 4.868997005069, 51.581054827262946 ], [ 4.869026098278742, 51.578506149650565 ], [ 4.864386602883411, 51.579051901400227 ], [ 4.866015475120491, 51.571695949227149 ], [ 4.870271404138731, 51.570865238883023 ], [ 4.871857251177747, 51.567190627043793 ], [ 4.868386621296774, 51.566892077334003 ], [ 4.867637335931871, 51.564906342597581 ], [ 4.868827555805815, 51.562079614640503 ], [ 4.86731944570537, 51.558957704912451 ], [ 4.864225606088196, 51.559510308288331 ], [ 4.86309398826367, 51.557239629941918 ], [ 4.864679936000787, 51.553565111587815 ], [ 4.863927768941232, 51.551862538358932 ], [ 4.851663893497507, 51.544726951072263 ], [ 4.848597687630224, 51.543013650011453 ], [ 4.834761320561011, 51.538701034185443 ], [ 4.834806065245839, 51.535019614863224 ], [ 4.83674490410877, 51.534179156380247 ], [ 4.834854242467742, 51.531055008245325 ], [ 4.829492993897665, 51.52791431463487 ], [ 4.834892089190265, 51.527939959325771 ], [ 4.83644498109651, 51.527097681442868 ], [ 4.843386558132726, 51.527130194070338 ], [ 4.844912243136354, 51.528553296507873 ], [ 4.844854810684677, 51.533367468985489 ], [ 4.854490596381339, 51.533978195588801 ], [ 4.866401955304506, 51.537996710928809 ], [ 4.888933073509717, 51.523651668677886 ], [ 4.911055584233919, 51.51015024663122 ], [ 4.956467352145383, 51.518539323845381 ], [ 4.962567820652939, 51.525924863571753 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0397\", \"naam\": \"Heemstede\", \"code\": \"0397\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.611494466902922, 52.322165590212123 ], [ 4.612583121116637, 52.327269920943642 ], [ 4.616434997005399, 52.331542737893002 ], [ 4.620321847479416, 52.333833411402388 ], [ 4.629686711748257, 52.337291858553456 ], [ 4.639479101776433, 52.338770025764347 ], [ 4.640964080862698, 52.343876565969694 ], [ 4.640064281461338, 52.350667101809996 ], [ 4.636481475692471, 52.353476183091807 ], [ 4.634867102465241, 52.356014509645235 ], [ 4.637559403663853, 52.359429692971318 ], [ 4.636740188157117, 52.361406726182963 ], [ 4.630468880640747, 52.360517274369748 ], [ 4.625725473765201, 52.362185905084445 ], [ 4.615913616067078, 52.361556027169655 ], [ 4.605664294306679, 52.36347102816439 ], [ 4.604898509487025, 52.362333266846193 ], [ 4.596568255315485, 52.344720977232718 ], [ 4.590187028149966, 52.328253868265094 ], [ 4.593715063239445, 52.328560762070339 ], [ 4.597263294515769, 52.327734973811722 ], [ 4.607156929651302, 52.323269778740546 ], [ 4.611494466902922, 52.322165590212123 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0275\", \"naam\": \"Rheden\", \"code\": \"0275\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.990501681868465, 51.974288567974249 ], [ 5.999112682455802, 51.977359164343184 ], [ 6.001885784274705, 51.980742981595633 ], [ 6.004273639826147, 51.984411945116868 ], [ 6.005910048366234, 51.990067142590682 ], [ 6.009865182045687, 51.994294115605612 ], [ 6.015355998582546, 51.996813628415907 ], [ 6.020811403359668, 51.996784370334055 ], [ 6.025475361038656, 51.995909586844995 ], [ 6.03054504835977, 51.996165159262567 ], [ 6.042313628991258, 52.001480819485586 ], [ 6.044685128151575, 52.003733109725275 ], [ 6.04551034630536, 52.006843584306239 ], [ 6.04749668685984, 52.009381162059114 ], [ 6.058876677449317, 52.014414166941471 ], [ 6.061613958537148, 52.014964889845963 ], [ 6.068228096966297, 52.014077224786192 ], [ 6.074815895572146, 52.011490198502884 ], [ 6.078280380062957, 52.008637995480143 ], [ 6.077816415191038, 52.003826477642328 ], [ 6.078158119053392, 52.000709371540722 ], [ 6.082764225373201, 51.996151169374201 ], [ 6.087789995485122, 51.993572621959544 ], [ 6.092841929787063, 51.992692849737132 ], [ 6.106524432691844, 51.995441893487943 ], [ 6.109659920409489, 51.99655544622469 ], [ 6.11163569723548, 51.998242447224754 ], [ 6.114854258094307, 52.004452804592866 ], [ 6.122305606437238, 52.007238402026879 ], [ 6.125860083478827, 52.010048059126703 ], [ 6.12746130716657, 52.012586722405061 ], [ 6.127512775960163, 52.015701507410043 ], [ 6.131514566781954, 52.021906478449985 ], [ 6.132355573154415, 52.025582645026276 ], [ 6.130852337005518, 52.028990448191173 ], [ 6.127009027921411, 52.032412961035007 ], [ 6.121586535441227, 52.03471244463244 ], [ 6.113442564531007, 52.037594878214882 ], [ 6.110785646406586, 52.042142283138276 ], [ 6.111607008525482, 52.044685941896802 ], [ 6.114782900044681, 52.048064636372914 ], [ 6.118725667429693, 52.050588913564589 ], [ 6.12932498747592, 52.054487241539867 ], [ 6.137599198400507, 52.059249031939252 ], [ 6.135695531697209, 52.062093047483572 ], [ 6.12907096522402, 52.062701347964619 ], [ 6.127928381055485, 52.064407678238545 ], [ 6.122836460769297, 52.063306838954375 ], [ 6.120536772298868, 52.06586988669271 ], [ 6.120192905059678, 52.068703919727248 ], [ 6.115890473487127, 52.068164241279391 ], [ 6.114379964036734, 52.071288656375273 ], [ 6.109365314393369, 52.07500096461817 ], [ 6.102770188913363, 52.077589912771813 ], [ 6.103560000952204, 52.078151488449663 ], [ 6.081370105700191, 52.082248980815265 ], [ 6.080615630792223, 52.083952549371453 ], [ 6.077101786460814, 52.083973181416063 ], [ 6.075982853579871, 52.087377976085207 ], [ 6.068186641735651, 52.088272862744304 ], [ 6.058378224765021, 52.085214099685579 ], [ 6.050510610431889, 52.08129405064647 ], [ 6.045019930217134, 52.079625722119822 ], [ 6.038317295260814, 52.075131977966429 ], [ 6.030843529359568, 52.071208444937135 ], [ 6.028078835442115, 52.068958028267943 ], [ 6.023761358930392, 52.067282324233098 ], [ 6.009691363752518, 52.065941605694242 ], [ 6.006182811954746, 52.066243286267486 ], [ 6.005300526474637, 52.058885070856618 ], [ 6.003708458982856, 52.056627923860944 ], [ 5.998210945403236, 52.054107900649349 ], [ 5.988858233435297, 52.055005625231281 ], [ 5.977925696886507, 52.054494611313366 ], [ 5.98174092380966, 52.047962118256429 ], [ 5.98711149363651, 52.041138387824731 ], [ 5.990151871598314, 52.035175921671382 ], [ 5.995878789329835, 52.026084439157351 ], [ 5.994296045677711, 52.024393487201408 ], [ 5.988806826790469, 52.022156173816036 ], [ 5.984877654778045, 52.019910692405432 ], [ 5.980963890606494, 52.018797754264895 ], [ 5.979374480776477, 52.016540260562522 ], [ 5.980135431477015, 52.015120488721266 ], [ 5.978887390676411, 52.009179821203993 ], [ 5.974518130281433, 52.002971571663672 ], [ 5.963179607197014, 52.0001957496481 ], [ 5.957730950369745, 52.000788677620982 ], [ 5.951481324766251, 51.999686069593864 ], [ 5.953758674285074, 51.99486092456403 ], [ 5.960692819484355, 51.988597173410241 ], [ 5.967279440217344, 51.985732984006262 ], [ 5.977371197358685, 51.982850884485515 ], [ 5.984723642839265, 51.979132294972018 ], [ 5.990501681868465, 51.974288567974249 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0090\", \"naam\": \"Smallingerland\", \"code\": \"0090\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.185644321656452, 53.129277516375588 ], [ 6.17893564998371, 53.13413507386327 ], [ 6.175367945070263, 53.135857311761406 ], [ 6.176600877338706, 53.159631132657239 ], [ 6.152035940304016, 53.150730647408786 ], [ 6.148160283825693, 53.157833238807939 ], [ 6.121535074464414, 53.144975958693301 ], [ 6.118749777000853, 53.145842344111969 ], [ 6.119211919594868, 53.149520038222278 ], [ 6.112421556369964, 53.150127552603855 ], [ 6.108049860107892, 53.151852622500776 ], [ 6.104849757334415, 53.151871826661775 ], [ 6.104426305637832, 53.150458781977093 ], [ 6.094118693657854, 53.156182331527091 ], [ 6.08888129861743, 53.153948185382731 ], [ 6.085722122930091, 53.156514673762352 ], [ 6.086945165398021, 53.157923114287271 ], [ 6.085363140337898, 53.159064798232592 ], [ 6.079725785326261, 53.156832583594351 ], [ 6.050112500302269, 53.15643379426222 ], [ 6.046516277931916, 53.156736743825114 ], [ 6.019691349458611, 53.155465731636426 ], [ 6.011665809132544, 53.153809134965122 ], [ 5.997176726562231, 53.147655260781349 ], [ 5.974601125893768, 53.134744820231667 ], [ 5.955733214979849, 53.129173558169668 ], [ 5.943277240291211, 53.124419081799978 ], [ 5.943640669033067, 53.121586249525549 ], [ 5.945584690493478, 53.117330480855138 ], [ 5.948258065220304, 53.107692061162282 ], [ 5.949819800824371, 53.104853573535131 ], [ 5.945809320764571, 53.10373988353323 ], [ 5.9330940266355, 53.109460836325361 ], [ 5.931509709083443, 53.110600508887387 ], [ 5.927492110827444, 53.108920009095826 ], [ 5.91071111848006, 53.109277655174232 ], [ 5.900303920479744, 53.107907122131515 ], [ 5.899910994364033, 53.108475034765505 ], [ 5.881908439597638, 53.106852067620828 ], [ 5.884647267754755, 53.101744653292059 ], [ 5.884224995472967, 53.09976460013565 ], [ 5.886160852711682, 53.094377352602912 ], [ 5.878132478456465, 53.091013151195561 ], [ 5.88292606390314, 53.090993398595316 ], [ 5.883302870377627, 53.089010024624656 ], [ 5.877269595557834, 53.08535436224426 ], [ 5.874470520456486, 53.08508267195603 ], [ 5.872061399856124, 53.083959988169674 ], [ 5.870432271891396, 53.081135409946448 ], [ 5.871554572608529, 53.074336065558221 ], [ 5.89513714124199, 53.076220132505227 ], [ 5.895566309856113, 53.078766367975852 ], [ 5.903959437436726, 53.079296662743367 ], [ 5.906744766446091, 53.078435252943642 ], [ 5.921524120817501, 53.078653309686011 ], [ 5.927510838580419, 53.07834331803253 ], [ 5.930338145843108, 53.080878584651003 ], [ 5.935533525712922, 53.081138016856805 ], [ 5.981015180229863, 53.077523611114373 ], [ 5.982608640802403, 53.077232576248711 ], [ 5.985039730513081, 53.079768532767986 ], [ 5.987850894864458, 53.080886936951643 ], [ 5.993438068161472, 53.080575652768992 ], [ 5.998633776023382, 53.080832346626543 ], [ 6.008593579661753, 53.079082342036088 ], [ 6.01733814283136, 53.076205427628892 ], [ 6.019746447532073, 53.077042086188165 ], [ 6.0244843662623, 53.073336388368269 ], [ 6.03168007145038, 53.073864101866455 ], [ 6.039258244880398, 53.073256816421832 ], [ 6.069985872367951, 53.071952990208111 ], [ 6.07316668559343, 53.071085436706127 ], [ 6.089536754043369, 53.070990498124509 ], [ 6.097586970431654, 53.074906706519982 ], [ 6.104821237751179, 53.077694779741485 ], [ 6.112935608925329, 53.08529016243893 ], [ 6.116197371671281, 53.089234052131602 ], [ 6.124782782417704, 53.100789450034071 ], [ 6.145702373828638, 53.108869288382095 ], [ 6.150552542338029, 53.111952803000278 ], [ 6.159865340909852, 53.118687984804239 ], [ 6.164302661039176, 53.120924244092578 ], [ 6.185644321656452, 53.129277516375588 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0183\", \"naam\": \"Tubbergen\", \"code\": \"0183\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.759076676938689, 52.332042268618302 ], [ 6.759688076344364, 52.339115205574188 ], [ 6.760560895261345, 52.341937084120701 ], [ 6.762567899765246, 52.343329768671261 ], [ 6.77406054945783, 52.346593994072272 ], [ 6.778495277023453, 52.350223536404499 ], [ 6.783519525101956, 52.360076387918134 ], [ 6.806775138086381, 52.362348464973891 ], [ 6.81786484321282, 52.365046919286186 ], [ 6.835467796426522, 52.362567139766092 ], [ 6.851955886276586, 52.362080964451323 ], [ 6.85582754512119, 52.360333740453527 ], [ 6.863403344835159, 52.363637923831661 ], [ 6.863312107966356, 52.372701622180031 ], [ 6.863428304118554, 52.387993206130076 ], [ 6.862516042370498, 52.407828808981641 ], [ 6.856702639684223, 52.41044992218405 ], [ 6.851328595476923, 52.414481319641922 ], [ 6.853323463425086, 52.427200702327333 ], [ 6.872300049625825, 52.429796299125151 ], [ 6.897199283051596, 52.432879926442936 ], [ 6.92440354482148, 52.434229231386659 ], [ 6.928337750468764, 52.434178110402009 ], [ 6.938910420529298, 52.432624053626313 ], [ 6.949148897043027, 52.432772691019522 ], [ 6.94732159619929, 52.436761656830384 ], [ 6.941763695770312, 52.435418697929741 ], [ 6.906175015450371, 52.442110877906011 ], [ 6.889005334989213, 52.446577810241735 ], [ 6.862002117152886, 52.451448226579295 ], [ 6.852499814907392, 52.449866922793639 ], [ 6.854402776710394, 52.45975535540768 ], [ 6.844542625942695, 52.45931062819745 ], [ 6.831964088303371, 52.460031047884833 ], [ 6.804380148460935, 52.459514543417015 ], [ 6.774452582177723, 52.459585472917979 ], [ 6.752538149389202, 52.464087889693509 ], [ 6.723779868563198, 52.476876143419076 ], [ 6.717512683768915, 52.478079407633729 ], [ 6.710194729007664, 52.470515159154708 ], [ 6.702443470831226, 52.461539320698407 ], [ 6.698757457243452, 52.456765924428133 ], [ 6.699460754979883, 52.453926225172857 ], [ 6.697425519669781, 52.451683216159147 ], [ 6.694645156460688, 52.450864354179771 ], [ 6.692174964585224, 52.447210098465149 ], [ 6.684270367847962, 52.44616413343153 ], [ 6.676333140547926, 52.443985235540168 ], [ 6.673504259999408, 52.441467265990028 ], [ 6.672610291928681, 52.437795487043566 ], [ 6.674520071877724, 52.435792410901662 ], [ 6.673691978726088, 52.434385450846094 ], [ 6.676732383558653, 52.430670901637271 ], [ 6.67783009376197, 52.427827028160905 ], [ 6.675035116789666, 52.426441491830388 ], [ 6.674190721903587, 52.424468327229746 ], [ 6.676526194436192, 52.423593349968876 ], [ 6.672944828695797, 52.422216323846627 ], [ 6.669658605706536, 52.417437691269676 ], [ 6.675434637936008, 52.413127112422295 ], [ 6.698460503437085, 52.39361716396045 ], [ 6.698000404211311, 52.391356700140051 ], [ 6.705474376283997, 52.378246698862156 ], [ 6.708182870990099, 52.376800517111882 ], [ 6.713282633714782, 52.376460287390522 ], [ 6.712813499376371, 52.373916773370127 ], [ 6.715736231451825, 52.366520874190556 ], [ 6.71796587708599, 52.362247856912845 ], [ 6.719511605089708, 52.361380868463186 ], [ 6.720417667290785, 52.352308324528018 ], [ 6.709544056584925, 52.343368031085333 ], [ 6.713829291346201, 52.34218725302123 ], [ 6.720871166914163, 52.341258465936534 ], [ 6.734561415746876, 52.339404109958643 ], [ 6.743496172689572, 52.336186787501475 ], [ 6.750755069801338, 52.329589699742407 ], [ 6.753912645076728, 52.33011965197727 ], [ 6.759076676938689, 52.332042268618302 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0848\", \"naam\": \"Son en Breugel\", \"code\": \"0848\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.442661122047978, 51.493831933734889 ], [ 5.448828661708854, 51.494961623425979 ], [ 5.463862006805232, 51.49693508365015 ], [ 5.468101420283365, 51.49693221731669 ], [ 5.470796621380321, 51.495514326323367 ], [ 5.4773510474467, 51.496925429210101 ], [ 5.478506681182592, 51.49664133187062 ], [ 5.511266315692227, 51.496894270512833 ], [ 5.50972929665354, 51.498595082848531 ], [ 5.514742869674354, 51.499722498527575 ], [ 5.518603665990593, 51.50198379488301 ], [ 5.525925361226627, 51.501408920214331 ], [ 5.531720450602587, 51.50564985130341 ], [ 5.538665597343087, 51.507623424692113 ], [ 5.540599746302285, 51.509603281901043 ], [ 5.546393278428503, 51.512710695606401 ], [ 5.541402486781689, 51.518947746948548 ], [ 5.540637053731023, 51.520647941388688 ], [ 5.545647895317607, 51.520074849377217 ], [ 5.543346974873242, 51.523759519077338 ], [ 5.540269589645199, 51.526029176153216 ], [ 5.53679596621137, 51.525184088867704 ], [ 5.531010468607865, 51.524908165502282 ], [ 5.52521643205351, 51.521799991727185 ], [ 5.522522216237753, 51.523502332263391 ], [ 5.519048293072319, 51.522373520451318 ], [ 5.512883918367974, 51.524362705918257 ], [ 5.509023024829548, 51.522667617768803 ], [ 5.508254807605851, 51.523801206797302 ], [ 5.505549500410549, 51.52153840430541 ], [ 5.500150262871514, 51.521260560324762 ], [ 5.499774488380722, 51.525225685585575 ], [ 5.503246703199173, 51.525788677388611 ], [ 5.502479008484905, 51.527205424720613 ], [ 5.498240239418083, 51.528625522620011 ], [ 5.493607554865365, 51.526647460610057 ], [ 5.488994330851963, 51.533165111426328 ], [ 5.487855426813171, 51.54137881090039 ], [ 5.487085118053277, 51.541945866703692 ], [ 5.472423237092752, 51.540824714089688 ], [ 5.465863613826511, 51.539979733307391 ], [ 5.437310313857346, 51.534048375334528 ], [ 5.434610597296374, 51.5343327027269 ], [ 5.431524016965099, 51.533484328256989 ], [ 5.429982509599321, 51.534900889315679 ], [ 5.423810247241995, 51.534053404621332 ], [ 5.434213706895901, 51.523571378894957 ], [ 5.447695164864664, 51.511954069551379 ], [ 5.440736920692533, 51.496098416083463 ], [ 5.442661122047978, 51.493831933734889 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0166\", \"naam\": \"Kampen\", \"code\": \"0166\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.000824587708584, 52.500095932451977 ], [ 6.007982143874995, 52.504589286179346 ], [ 6.012337769944809, 52.505982220031292 ], [ 6.019416361714071, 52.504812041358107 ], [ 6.025353090861645, 52.506479222251713 ], [ 6.02776323382183, 52.50958102363014 ], [ 6.018757663169367, 52.513876764244721 ], [ 6.014871758690128, 52.517861666424366 ], [ 6.014916051326657, 52.52097621597963 ], [ 6.018537564220936, 52.526053911903922 ], [ 6.023684337115958, 52.527442218539818 ], [ 6.024851013141169, 52.526303305470513 ], [ 6.029985639375285, 52.526841918733915 ], [ 6.030545102218488, 52.538165354778322 ], [ 6.019553454183841, 52.541905537047292 ], [ 6.00736844394571, 52.545084613364182 ], [ 6.003498557203817, 52.550484817156416 ], [ 6.018552405009533, 52.554653086263947 ], [ 6.018165917699276, 52.555221461581311 ], [ 6.033222762135908, 52.559387861086698 ], [ 6.022381100475656, 52.57388750060791 ], [ 6.012680815410713, 52.585831648499592 ], [ 6.007922419099222, 52.584440829743343 ], [ 5.982950542283672, 52.577489812337717 ], [ 5.972475293995816, 52.591416606372022 ], [ 5.971328077269052, 52.59425381899019 ], [ 5.976131823528327, 52.599043749736971 ], [ 5.980161801878506, 52.604969973159442 ], [ 5.991355124523961, 52.614540860453438 ], [ 5.992195978398707, 52.61821759990886 ], [ 5.991847498067925, 52.62161723448758 ], [ 5.980869947118677, 52.628185147026628 ], [ 5.955134604349626, 52.624913097364548 ], [ 5.955504229324498, 52.622929252271682 ], [ 5.940425836812539, 52.618186804449437 ], [ 5.932875570075576, 52.614823876708712 ], [ 5.91547260188374, 52.613486773610198 ], [ 5.910781636704456, 52.617754846152785 ], [ 5.905661200451616, 52.619193069793994 ], [ 5.840363451700747, 52.610399223209008 ], [ 5.837170812059541, 52.607296681328954 ], [ 5.777909662371546, 52.607506413652914 ], [ 5.777691145875872, 52.582872851687334 ], [ 5.778068414102618, 52.580889535373309 ], [ 5.802943141355075, 52.58080503079546 ], [ 5.810434140264346, 52.579645944931436 ], [ 5.815544843571893, 52.577362380097618 ], [ 5.855140319696674, 52.550879402983369 ], [ 5.859316840738114, 52.53557236008961 ], [ 5.861240302873906, 52.531034160768073 ], [ 5.860421156791743, 52.52820584826533 ], [ 5.862735457920073, 52.523382897265222 ], [ 5.861928542560531, 52.521687176860844 ], [ 5.864257641243507, 52.518279924129502 ], [ 5.876126626105446, 52.521912659591351 ], [ 5.878883612758242, 52.52161810389704 ], [ 5.882798026792055, 52.519053379012043 ], [ 5.886721599195813, 52.517337962385248 ], [ 5.903131755735449, 52.504525499737838 ], [ 5.909755223102889, 52.49798379295855 ], [ 5.919066771178559, 52.485766431786303 ], [ 5.925622976041232, 52.47412716555516 ], [ 5.935512050532965, 52.477479787168434 ], [ 5.937474531595059, 52.476904366467146 ], [ 5.949775570252713, 52.483925699460784 ], [ 5.952934526214579, 52.484476991800072 ], [ 5.958052448900925, 52.4841692938409 ], [ 5.965437728314331, 52.476488085453347 ], [ 5.982141429882196, 52.488298298495316 ], [ 5.991674912925353, 52.493913341309089 ], [ 6.000824587708584, 52.500095932451977 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1931\", \"naam\": \"Krimpenerwaard\", \"code\": \"1931\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.877728891962092, 51.937919412381049 ], [ 4.877712834844651, 51.939335289629675 ], [ 4.871310351033736, 51.954599591103523 ], [ 4.865790936795269, 51.960522219643984 ], [ 4.864193899442153, 51.963913394341063 ], [ 4.861035614578357, 51.967580762826486 ], [ 4.848096216228672, 51.974885085772414 ], [ 4.845759297265341, 51.974874355016937 ], [ 4.833942054252798, 51.985580547077227 ], [ 4.835103820838376, 51.986152379984546 ], [ 4.817789638903981, 51.999662918807218 ], [ 4.853195186922457, 52.004643056860139 ], [ 4.85707590259149, 52.006076532878232 ], [ 4.846795435524593, 52.018206828123738 ], [ 4.842130856586638, 52.017052578527021 ], [ 4.833171253195901, 52.01644438426591 ], [ 4.824973818273725, 52.017255085587657 ], [ 4.815657062881399, 52.014095163836174 ], [ 4.803572487296894, 52.014035876122215 ], [ 4.798786793641297, 52.022224499185597 ], [ 4.78327496327474, 52.015915820283112 ], [ 4.772000724927575, 52.013591938499012 ], [ 4.76420829408279, 52.013267770801988 ], [ 4.750946553841411, 52.01376322122087 ], [ 4.75694513907789, 52.003034301750795 ], [ 4.757358731565109, 52.00133737940682 ], [ 4.748379245722892, 52.002421744569162 ], [ 4.743292554270326, 52.003809975576395 ], [ 4.737791194978143, 52.006894838630338 ], [ 4.737413749199084, 52.006043186669686 ], [ 4.728428683722803, 52.007409193201255 ], [ 4.722611638616103, 52.005394164176778 ], [ 4.725381650541536, 52.002577870687091 ], [ 4.727736631110036, 52.001458328364343 ], [ 4.718819731706981, 51.998292935692191 ], [ 4.714499244221884, 52.000533844719953 ], [ 4.712961727505411, 51.999109094304416 ], [ 4.707077741214351, 52.001623955828485 ], [ 4.699738370183865, 51.997333453266002 ], [ 4.688845187954923, 51.996136554341028 ], [ 4.68227880966125, 51.992415916408731 ], [ 4.678431746582848, 51.98927769942501 ], [ 4.673026926339032, 51.986129908764426 ], [ 4.670779932115786, 51.980452403207082 ], [ 4.668850447015044, 51.979307868794379 ], [ 4.655653163284731, 51.976394623261591 ], [ 4.648698314031951, 51.972952853475483 ], [ 4.633547551532073, 51.970591219299308 ], [ 4.630854907147781, 51.968591580308569 ], [ 4.631662345842575, 51.96689760491472 ], [ 4.639919984098729, 51.962136056273401 ], [ 4.645469328570097, 51.956224107636089 ], [ 4.6455114293734, 51.953675625880138 ], [ 4.64086348609245, 51.952230250371763 ], [ 4.638954850041128, 51.949952566697583 ], [ 4.637487644969704, 51.944562523734831 ], [ 4.634867526109231, 51.93831550054788 ], [ 4.631009334896492, 51.936308384007738 ], [ 4.625561400666872, 51.936273219294556 ], [ 4.621300199081764, 51.935112756279345 ], [ 4.619383600858565, 51.933401081395481 ], [ 4.617865943716205, 51.931125593801809 ], [ 4.619057428029482, 51.929717405483323 ], [ 4.643077487415685, 51.912596968458622 ], [ 4.635725617664831, 51.910284623731243 ], [ 4.621369616979084, 51.908209578586913 ], [ 4.60155585489593, 51.906946004910537 ], [ 4.596874340324029, 51.907764207046725 ], [ 4.596909182463713, 51.905782059732523 ], [ 4.593439333329141, 51.904059489077447 ], [ 4.59224773228692, 51.905467422247511 ], [ 4.588768030365136, 51.904311041394493 ], [ 4.589192067645822, 51.902331537540725 ], [ 4.581773660716952, 51.903980113547995 ], [ 4.576345015804074, 51.903093186664933 ], [ 4.581420326980586, 51.901995305492406 ], [ 4.584561357153975, 51.90031761406842 ], [ 4.591650358726486, 51.895268260147766 ], [ 4.595951854548786, 51.893881316242485 ], [ 4.604150518156221, 51.891953858010957 ], [ 4.619744148931527, 51.889507972816972 ], [ 4.625579939443731, 51.88926275070245 ], [ 4.637991060079383, 51.891041730323003 ], [ 4.651620398073813, 51.889711866393704 ], [ 4.657058121304788, 51.89002898079552 ], [ 4.668340648528024, 51.88953216079716 ], [ 4.674158233968334, 51.890417198358456 ], [ 4.680726870326825, 51.893005638497833 ], [ 4.700113383522344, 51.896518941540123 ], [ 4.705547989357131, 51.897116982741871 ], [ 4.715673832315609, 51.896042507349577 ], [ 4.721877815588791, 51.897210575555064 ], [ 4.731155481691076, 51.900944260913334 ], [ 4.73813007146069, 51.902682152798874 ], [ 4.745473865790244, 51.905837612147756 ], [ 4.753576558766624, 51.91041266654387 ], [ 4.759755851755466, 51.913560937960682 ], [ 4.767114663191547, 51.915865530393113 ], [ 4.779542599983188, 51.917346395229679 ], [ 4.793119640060712, 51.920247714593017 ], [ 4.800496050449769, 51.92141752722339 ], [ 4.811734152166952, 51.924871372152218 ], [ 4.832571713078844, 51.93884785753346 ], [ 4.837224460323865, 51.940285660992579 ], [ 4.847718890371493, 51.941467033013843 ], [ 4.857062963641598, 51.941226337992383 ], [ 4.872666474305176, 51.938180560083246 ], [ 4.877728891962092, 51.937919412381049 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0994\", \"naam\": \"Valkenburg aan de Geul\", \"code\": \"0994\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.859351802667472, 50.83358803500122 ], [ 5.86585043958879, 50.837526182067236 ], [ 5.866242045853677, 50.8386573826199 ], [ 5.87117785831944, 50.838353613129406 ], [ 5.870400334923553, 50.836657631441206 ], [ 5.873834203834447, 50.838059253063449 ], [ 5.877669174117058, 50.841441513814608 ], [ 5.874683379629188, 50.846551852885248 ], [ 5.879619976086105, 50.846247721883401 ], [ 5.884951684043966, 50.847357709989112 ], [ 5.887988430339646, 50.847061387213685 ], [ 5.886112960216547, 50.849335146926798 ], [ 5.881215338755556, 50.853321067520625 ], [ 5.875535857602404, 50.855327641443303 ], [ 5.874416584481594, 50.857314806430182 ], [ 5.86908987366501, 50.856770720784318 ], [ 5.871025643339362, 50.860161107625096 ], [ 5.871435336338142, 50.862991452726192 ], [ 5.873350725814157, 50.864399445091472 ], [ 5.871485685191368, 50.867805744915891 ], [ 5.869216610943329, 50.868948050673843 ], [ 5.870754972456441, 50.870640863907134 ], [ 5.870018263708172, 50.872909591071569 ], [ 5.863979027266231, 50.87718273972358 ], [ 5.86174995672943, 50.88228961639571 ], [ 5.851482824330335, 50.882331290623341 ], [ 5.850356200773335, 50.883751837182565 ], [ 5.835500714920077, 50.88126152641356 ], [ 5.832858007645237, 50.883254179423425 ], [ 5.832882552895752, 50.885802934680562 ], [ 5.836743263161093, 50.891735310637507 ], [ 5.832945293870707, 50.892316420912373 ], [ 5.827210454902009, 50.889223119425871 ], [ 5.819178737938309, 50.884438905947071 ], [ 5.817277321487166, 50.884445992607866 ], [ 5.810460708830499, 50.887586398718199 ], [ 5.802088816708551, 50.88705032455529 ], [ 5.799794358676148, 50.885642507763279 ], [ 5.798248027782759, 50.882815964183074 ], [ 5.789496870919384, 50.882280328793414 ], [ 5.789131361571932, 50.88398082890977 ], [ 5.784173135358403, 50.882298726546694 ], [ 5.777720541561288, 50.883736720455033 ], [ 5.771950427584692, 50.875826333241768 ], [ 5.774212770268295, 50.873553146532529 ], [ 5.773060380308992, 50.87214097515335 ], [ 5.766986726954329, 50.873293902783296 ], [ 5.764297686341047, 50.869904250882641 ], [ 5.764652453605493, 50.866787844619701 ], [ 5.762749454356049, 50.866510837487759 ], [ 5.763111197847789, 50.864244026821297 ], [ 5.752809946607515, 50.859462591859597 ], [ 5.749371500630779, 50.857207782512489 ], [ 5.757336959551854, 50.855200121789998 ], [ 5.763035341939946, 50.85489853033075 ], [ 5.770615094740651, 50.852324797642879 ], [ 5.775944900743997, 50.853439813412855 ], [ 5.778595540782468, 50.852298050669511 ], [ 5.780471600450104, 50.84945963781977 ], [ 5.791116463414761, 50.849989338674 ], [ 5.794904015292177, 50.848560017594728 ], [ 5.800601330999378, 50.848256576306262 ], [ 5.801756497883479, 50.849951667859877 ], [ 5.805117741619181, 50.843425852505021 ], [ 5.811168388232719, 50.840288561726624 ], [ 5.812695874889174, 50.841132562937901 ], [ 5.821412984135857, 50.838834501297455 ], [ 5.820626677295005, 50.836005402745513 ], [ 5.820586951013968, 50.831757477010257 ], [ 5.823612425138418, 50.830330065831347 ], [ 5.829684441411729, 50.829740564637369 ], [ 5.836144360211924, 50.829998853310315 ], [ 5.837674713323048, 50.831125718630801 ], [ 5.836201972270784, 50.835945939145063 ], [ 5.843391898716989, 50.833085727870134 ], [ 5.84415999722991, 50.833932309290681 ], [ 5.850597925196006, 50.831924235373855 ], [ 5.857438113717083, 50.832179809797857 ], [ 5.859351802667472, 50.83358803500122 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0638\", \"naam\": \"Zoeterwoude\", \"code\": \"0638\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.550576814665842, 52.138246906030147 ], [ 4.546630598148507, 52.140201171952974 ], [ 4.541532713864919, 52.141014299011218 ], [ 4.534887175214717, 52.140966465303748 ], [ 4.529387192868199, 52.142342541510843 ], [ 4.526612515989279, 52.14430465668552 ], [ 4.52420666080517, 52.14740216384866 ], [ 4.518760640124514, 52.145946247459918 ], [ 4.513722537089222, 52.143643529033689 ], [ 4.510650645285509, 52.140788839866971 ], [ 4.513403639353517, 52.139959696599171 ], [ 4.491343805518344, 52.12874975174433 ], [ 4.487464296173143, 52.127304258335514 ], [ 4.472782408363928, 52.118978747017849 ], [ 4.47085205825126, 52.117830990269091 ], [ 4.490400176696051, 52.097874637504589 ], [ 4.490015325961221, 52.097588515885874 ], [ 4.492121031700695, 52.089958315320089 ], [ 4.497632593106182, 52.087734501837161 ], [ 4.499896612189903, 52.091716270019141 ], [ 4.504554430299571, 52.093167208002349 ], [ 4.513239372617685, 52.088417658118281 ], [ 4.514405203548237, 52.088709490351647 ], [ 4.530571191234813, 52.080615532873445 ], [ 4.534036058031147, 52.083189399085661 ], [ 4.53714318265217, 52.084061429085182 ], [ 4.536397254120253, 52.102746687092669 ], [ 4.535281510465726, 52.120296454763128 ], [ 4.541956114524961, 52.118645349228686 ], [ 4.543080127193597, 52.121202112443221 ], [ 4.54073031603203, 52.121468457307969 ], [ 4.541474283343511, 52.123456125952082 ], [ 4.547561488431724, 52.132278504637704 ], [ 4.545976802444874, 52.133399969403399 ], [ 4.550212459128456, 52.136828375693149 ], [ 4.550576814665842, 52.138246906030147 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0308\", \"naam\": \"Baarn\", \"code\": \"0308\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.243206194208964, 52.170009583906236 ], [ 5.247104891750589, 52.174261891637535 ], [ 5.262335529383235, 52.184190068233832 ], [ 5.270150932932084, 52.188445675129465 ], [ 5.281491114920663, 52.192420791456833 ], [ 5.282665975869357, 52.192138662749706 ], [ 5.304178073934326, 52.20008457516213 ], [ 5.308087726041225, 52.202918984033403 ], [ 5.313958245299538, 52.204055455477707 ], [ 5.314351594592441, 52.202923007097262 ], [ 5.330010908832526, 52.203214783256414 ], [ 5.328045564316609, 52.209160442870058 ], [ 5.330387643811791, 52.214825036727355 ], [ 5.33429723936218, 52.220207116805291 ], [ 5.335462661885151, 52.228419610954717 ], [ 5.322533161917547, 52.230395456821945 ], [ 5.312343820229364, 52.232937994367553 ], [ 5.308036517676754, 52.231802506282236 ], [ 5.306864849756209, 52.229819516636034 ], [ 5.31157134755237, 52.226424559166567 ], [ 5.31118302546674, 52.224442108450553 ], [ 5.314708154197773, 52.224444320225302 ], [ 5.311971637500217, 52.221327722245434 ], [ 5.306883708706017, 52.219342174352818 ], [ 5.302179760499468, 52.221604263399257 ], [ 5.301000963753258, 52.223585613550874 ], [ 5.293950844680715, 52.223580266453176 ], [ 5.287293669104752, 52.223008487224369 ], [ 5.283767342970071, 52.223571799785233 ], [ 5.263007104232229, 52.224118163430639 ], [ 5.224618609722036, 52.225204291922545 ], [ 5.218792518009478, 52.2121702014501 ], [ 5.215690435794602, 52.204236895579569 ], [ 5.216477775456795, 52.203105342771295 ], [ 5.21413761114345, 52.200836551684205 ], [ 5.213396589790901, 52.190074864279659 ], [ 5.216143832955156, 52.188096656296921 ], [ 5.211884478224694, 52.176480263967555 ], [ 5.220877095805943, 52.178192316736677 ], [ 5.221282051566323, 52.174511616827203 ], [ 5.222845974595661, 52.174796978048299 ], [ 5.224053852991837, 52.165453882257829 ], [ 5.224835147383875, 52.165738134080733 ], [ 5.236173175659531, 52.167452227019524 ], [ 5.23616072526331, 52.171133483879963 ], [ 5.237725573121192, 52.171135474529116 ], [ 5.238910493281434, 52.167738870381172 ], [ 5.243206194208964, 52.170009583906236 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1894\", \"naam\": \"Peel en Maas\", \"code\": \"1894\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.009516284823524, 51.265620426375627 ], [ 6.014512577187527, 51.266443213524539 ], [ 6.020639800580764, 51.265843591490537 ], [ 6.02563631503619, 51.266665900583817 ], [ 6.02834024332139, 51.268067071646797 ], [ 6.029945630432696, 51.273155967444204 ], [ 6.046231873112255, 51.285526037998515 ], [ 6.052798372790139, 51.288603959359001 ], [ 6.058577674846729, 51.290270012283408 ], [ 6.063160413209203, 51.288827435271202 ], [ 6.066996672130841, 51.288805086735756 ], [ 6.070103718588234, 51.291335778122196 ], [ 6.070904869485468, 51.293596748822686 ], [ 6.084777259190753, 51.297479354152522 ], [ 6.08902399668766, 51.299153080035438 ], [ 6.096018560266541, 51.304774888034217 ], [ 6.103380906766551, 51.309261179345356 ], [ 6.110423580773281, 51.317713938689273 ], [ 6.116271883244509, 51.323341663606506 ], [ 6.118295626256506, 51.329842807589692 ], [ 6.11648425629355, 51.336651208758191 ], [ 6.116524939782896, 51.339199844058747 ], [ 6.123122128253737, 51.343406491879762 ], [ 6.119719897091398, 51.346826461356954 ], [ 6.118938068691917, 51.345981746230869 ], [ 6.107187113051843, 51.355967319897807 ], [ 6.099521034461597, 51.357147290077677 ], [ 6.096535436995175, 51.362829693142558 ], [ 6.090907066525234, 51.371643305816825 ], [ 6.087426463090417, 51.370248232621215 ], [ 6.084408226456056, 51.373948046903919 ], [ 6.077554355796337, 51.378236985823683 ], [ 6.090356566137273, 51.385807067185965 ], [ 6.090408942922045, 51.389205254609479 ], [ 6.086957417452626, 51.389792447334379 ], [ 6.083540384009975, 51.39264499846773 ], [ 6.077414130496011, 51.394380690121402 ], [ 6.074329498281212, 51.393832500708584 ], [ 6.073205786875499, 51.395821576888466 ], [ 6.070121107214141, 51.395273276252553 ], [ 6.018795223195396, 51.382251998208972 ], [ 6.006074975563588, 51.379771391069781 ], [ 5.989139200342559, 51.378160873920287 ], [ 5.958000661989953, 51.378034374011946 ], [ 5.947300524807095, 51.383183999661227 ], [ 5.931171494253361, 51.384676437284504 ], [ 5.878570277898357, 51.355456883886724 ], [ 5.874704130259687, 51.353207495256406 ], [ 5.870472186700188, 51.352658723801703 ], [ 5.840063476357199, 51.346833655359703 ], [ 5.831911363363168, 51.338085753720414 ], [ 5.85209028194767, 51.320731470607519 ], [ 5.877769306394512, 51.316661216956504 ], [ 5.883898910985591, 51.31550240248572 ], [ 5.910681462616226, 51.307738484896412 ], [ 5.90767236309963, 51.313132886005903 ], [ 5.954726087146878, 51.300168681572032 ], [ 5.978768991209451, 51.289853491627746 ], [ 6.008143871121136, 51.277522501385874 ], [ 6.011131073927982, 51.271559148315824 ], [ 6.009516284823524, 51.265620426375627 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0415\", \"naam\": \"Landsmeer\", \"code\": \"0415\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.947713360817372, 52.42158507661479 ], [ 4.950450511344208, 52.423294181806881 ], [ 4.95070720260238, 52.437170154387324 ], [ 4.948194262307682, 52.452451674778892 ], [ 4.950494923149829, 52.458689741543822 ], [ 4.9468497694889, 52.468870086975919 ], [ 4.947136552626952, 52.47963127700848 ], [ 4.948276185493973, 52.483882910356058 ], [ 4.94903606190037, 52.486717324432554 ], [ 4.943508778122344, 52.487829421752153 ], [ 4.941564447559443, 52.485273688933745 ], [ 4.930109734352806, 52.488061710775561 ], [ 4.930494963939828, 52.488912676287583 ], [ 4.920626716736455, 52.490573238661128 ], [ 4.915158715916897, 52.48602103312718 ], [ 4.908100717320695, 52.482877963087425 ], [ 4.906558744291157, 52.479756948758521 ], [ 4.90426319858727, 52.473518064731088 ], [ 4.898842756725028, 52.465000997840299 ], [ 4.897280106830064, 52.463861901299154 ], [ 4.893414918063899, 52.457333120197148 ], [ 4.893055973018094, 52.45421682862743 ], [ 4.896293545374005, 52.446301698524714 ], [ 4.896353207558089, 52.440921830297057 ], [ 4.894429414763946, 52.436949548445256 ], [ 4.899198817041428, 52.432721814414371 ], [ 4.89889586023318, 52.424508786964012 ], [ 4.905608947500905, 52.422270938455313 ], [ 4.913910081235423, 52.418623238400777 ], [ 4.915877015136173, 52.418631078398974 ], [ 4.930499492762401, 52.412175542304013 ], [ 4.935222345714417, 52.411910487434781 ], [ 4.943852903013412, 52.414208415414251 ], [ 4.947713360817372, 52.42158507661479 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1700\", \"naam\": \"Twenterand\", \"code\": \"1700\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.598703569776929, 52.383635680328993 ], [ 6.609478935958925, 52.389471908335373 ], [ 6.614101655285054, 52.386025791057278 ], [ 6.618519433660508, 52.389378213242018 ], [ 6.62167183167346, 52.389628571022442 ], [ 6.636783929709308, 52.395700229151046 ], [ 6.640024945580336, 52.399064276589698 ], [ 6.647791201215089, 52.395583531403254 ], [ 6.651811249446512, 52.398655772573356 ], [ 6.664130625290519, 52.389461356432307 ], [ 6.666112263419316, 52.390006350000199 ], [ 6.671975377113614, 52.38881008365793 ], [ 6.676120014676395, 52.396128065719196 ], [ 6.684226259735358, 52.390942035158886 ], [ 6.685078742194828, 52.393198245882864 ], [ 6.690966749005605, 52.392850349869533 ], [ 6.698460503437085, 52.39361716396045 ], [ 6.675434637936008, 52.413127112422295 ], [ 6.669658605706536, 52.417437691269676 ], [ 6.672944828695797, 52.422216323846627 ], [ 6.676526194436192, 52.423593349968876 ], [ 6.674190721903587, 52.424468327229746 ], [ 6.675035116789666, 52.426441491830388 ], [ 6.67783009376197, 52.427827028160905 ], [ 6.676732383558653, 52.430670901637271 ], [ 6.673691978726088, 52.434385450846094 ], [ 6.674520071877724, 52.435792410901662 ], [ 6.672610291928681, 52.437795487043566 ], [ 6.673504259999408, 52.441467265990028 ], [ 6.676333140547926, 52.443985235540168 ], [ 6.684270367847962, 52.44616413343153 ], [ 6.692174964585224, 52.447210098465149 ], [ 6.694645156460688, 52.450864354179771 ], [ 6.697425519669781, 52.451683216159147 ], [ 6.699460754979883, 52.453926225172857 ], [ 6.698757457243452, 52.456765924428133 ], [ 6.702443470831226, 52.461539320698407 ], [ 6.710194729007664, 52.470515159154708 ], [ 6.717512683768915, 52.478079407633729 ], [ 6.697661771804368, 52.486229830771478 ], [ 6.693328696837101, 52.486277647673312 ], [ 6.669152139770048, 52.49503716558344 ], [ 6.664366865019673, 52.493106494803413 ], [ 6.65357514936295, 52.487841695529383 ], [ 6.654610775256122, 52.48273325781193 ], [ 6.64739964119036, 52.478562324512779 ], [ 6.651241002792574, 52.475123173298272 ], [ 6.649609110089031, 52.473158250299491 ], [ 6.641676749082526, 52.471260155962547 ], [ 6.640543545106108, 52.472971268773321 ], [ 6.635777900415024, 52.471605629041541 ], [ 6.631060346687721, 52.471938417039439 ], [ 6.626784156644885, 52.473965522048282 ], [ 6.620782107913172, 52.47062990026965 ], [ 6.616411094469099, 52.469259379646921 ], [ 6.613158830240802, 52.465611640847442 ], [ 6.611985446314519, 52.465906959210585 ], [ 6.600932125900009, 52.479330391573939 ], [ 6.59504734216167, 52.480240052835534 ], [ 6.554270865052977, 52.487728076123332 ], [ 6.505492605245561, 52.491030004637338 ], [ 6.50368057166459, 52.48170212818966 ], [ 6.49499350390411, 52.480934083243618 ], [ 6.495738676004248, 52.479228034670889 ], [ 6.492988620181944, 52.479536899847012 ], [ 6.489380149066186, 52.477021882346818 ], [ 6.486616099142827, 52.476764370049821 ], [ 6.478366078669934, 52.477690139463803 ], [ 6.472409431378459, 52.475762562916138 ], [ 6.466888629079499, 52.475529797968058 ], [ 6.461713548020172, 52.473311387031899 ], [ 6.461672254375163, 52.471612684261821 ], [ 6.458480581800194, 52.469942497065205 ], [ 6.452559955337835, 52.469429503394217 ], [ 6.450950713855597, 52.46802806058642 ], [ 6.452899147042162, 52.467161018766227 ], [ 6.452837727002687, 52.464612954990805 ], [ 6.45091665211073, 52.466612469319166 ], [ 6.448153471203975, 52.466354057429385 ], [ 6.448099119557435, 52.464089108692313 ], [ 6.449999797461073, 52.461240282876112 ], [ 6.448404526058675, 52.460405039593425 ], [ 6.453515977618546, 52.460075977708193 ], [ 6.458096513114647, 52.454087887452467 ], [ 6.465065027192179, 52.449210629381675 ], [ 6.467336826368064, 52.445508584649374 ], [ 6.473571517522526, 52.442902945496073 ], [ 6.475490544309982, 52.440903059578957 ], [ 6.510822371232243, 52.437175022541879 ], [ 6.513999215258305, 52.438277582785261 ], [ 6.517919845225353, 52.437673858395399 ], [ 6.520746906117323, 52.440478680862917 ], [ 6.523873316630814, 52.439599173056685 ], [ 6.529441076304815, 52.441811094955526 ], [ 6.531132363028501, 52.446325722837152 ], [ 6.537889494025377, 52.448808947979579 ], [ 6.537911589717467, 52.449658285796026 ], [ 6.543072890121188, 52.4513071539522 ], [ 6.551301699593866, 52.449810672659162 ], [ 6.554413212498938, 52.448364137722642 ], [ 6.558364156189422, 52.448891520414243 ], [ 6.56300456543139, 52.445730522613246 ], [ 6.570535416202668, 52.44763784610678 ], [ 6.571685853493427, 52.446493607608573 ], [ 6.596319626169549, 52.454740375001052 ], [ 6.598255134539016, 52.439145326163391 ], [ 6.587877915886803, 52.433870400251678 ], [ 6.573818194559047, 52.423250971216163 ], [ 6.572638083936454, 52.423262788897645 ], [ 6.576026348856506, 52.417565076381464 ], [ 6.590773164927593, 52.395610566839494 ], [ 6.598703569776929, 52.383635680328993 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1883\", \"naam\": \"Sittard-Geleen\", \"code\": \"1883\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.896993901513591, 50.974748271052725 ], [ 5.896631630093787, 50.976449107315077 ], [ 5.892483618164629, 50.980432176461683 ], [ 5.895541537756832, 50.981268416331169 ], [ 5.903610694735839, 50.987180069891188 ], [ 5.904474533525584, 50.996238845622472 ], [ 5.905684973830167, 51.002180786260119 ], [ 5.895416191338984, 51.004491942583364 ], [ 5.895869297000168, 51.0110037163887 ], [ 5.888270530354024, 51.013585687651975 ], [ 5.884072687631641, 51.013320557148262 ], [ 5.878782197044919, 51.017874430056381 ], [ 5.879187753812899, 51.020138362996477 ], [ 5.876557038922579, 51.023831188917121 ], [ 5.874706796320996, 51.029219913711373 ], [ 5.877025739739487, 51.032042203742328 ], [ 5.865169926665148, 51.029259635560244 ], [ 5.856005872232248, 51.028447446426014 ], [ 5.852581229946, 51.029310867261486 ], [ 5.849218918579584, 51.0364044753725 ], [ 5.85266989672082, 51.038089906377316 ], [ 5.848555092012974, 51.046319337264805 ], [ 5.841298778424409, 51.04578157549993 ], [ 5.837872572210232, 51.046644563777555 ], [ 5.835223264518499, 51.048920480676649 ], [ 5.827198013966044, 51.047818393267285 ], [ 5.827260241527385, 51.054331892005671 ], [ 5.824685299414048, 51.06453704609455 ], [ 5.823574886112555, 51.06822290535203 ], [ 5.82399699125916, 51.072469403003183 ], [ 5.819796806368957, 51.072485146535037 ], [ 5.814011507319025, 51.066276058663775 ], [ 5.809365178225764, 51.059212927912469 ], [ 5.803242213942721, 51.057535827065358 ], [ 5.799447911352263, 51.060098228915223 ], [ 5.793325188967021, 51.058420604312019 ], [ 5.787990971675264, 51.05957198709315 ], [ 5.783429713384905, 51.061853305809727 ], [ 5.774659025868501, 51.063015766163055 ], [ 5.771578950860675, 51.059910762400037 ], [ 5.772693326975354, 51.056225397165925 ], [ 5.770725851853912, 51.04915179682046 ], [ 5.766474135205226, 51.042652070872712 ], [ 5.759557442062828, 51.036727193727714 ], [ 5.758006206705711, 51.033616913497944 ], [ 5.760646977650761, 51.029926770846387 ], [ 5.767888167532973, 51.02905359588614 ], [ 5.772833153158229, 51.027338016383297 ], [ 5.776232852787179, 51.02336178209557 ], [ 5.775829933224249, 51.020814288104127 ], [ 5.77352723863268, 51.019122757545531 ], [ 5.782675853325318, 51.018525484585403 ], [ 5.787257443786022, 51.019076167804201 ], [ 5.784553510292174, 51.015120598276397 ], [ 5.774926583620844, 51.004108214013904 ], [ 5.789008915451941, 51.001228174515866 ], [ 5.785892847920731, 50.993592399391325 ], [ 5.78396500912116, 50.991050172169579 ], [ 5.782401544932442, 50.986524234522307 ], [ 5.782362740384401, 50.981993084349121 ], [ 5.786488549379693, 50.974332392554068 ], [ 5.786464053297429, 50.971500425046017 ], [ 5.783775147991164, 50.968960818927208 ], [ 5.786002316769221, 50.962156245417574 ], [ 5.786312255185134, 50.953942227879203 ], [ 5.788169823148535, 50.948554910691826 ], [ 5.793531081849068, 50.95193467833495 ], [ 5.802249669186934, 50.947372461468426 ], [ 5.811842595925619, 50.955267422229916 ], [ 5.830815157511532, 50.947832925387594 ], [ 5.837655823023082, 50.946390478600151 ], [ 5.839976658552287, 50.950063101415914 ], [ 5.83966518748795, 50.957144468388115 ], [ 5.842748547191504, 50.960814055563851 ], [ 5.843157420654149, 50.963644506598364 ], [ 5.845829584532327, 50.964200365209102 ], [ 5.852345476752231, 50.968139259747126 ], [ 5.856501610448323, 50.964724014680769 ], [ 5.858807512265794, 50.966697090011827 ], [ 5.861849357662575, 50.966118248331462 ], [ 5.866016352337128, 50.963835440693579 ], [ 5.869093384147746, 50.966654740459575 ], [ 5.873623107268008, 50.962670908669324 ], [ 5.876694520418927, 50.964923617924278 ], [ 5.877825313419482, 50.963786005504204 ], [ 5.88166194253057, 50.96631854578294 ], [ 5.886638854316907, 50.96856284103287 ], [ 5.890488712687507, 50.972227862174798 ], [ 5.890891344702307, 50.974208559980916 ], [ 5.896993901513591, 50.974748271052725 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0531\", \"naam\": \"Hendrik-Ido-Ambacht\", \"code\": \"0531\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.670557723693594, 51.823560775273705 ], [ 4.669334588373893, 51.827234877845051 ], [ 4.670038884602237, 51.83177035237631 ], [ 4.672675724880309, 51.836883993469407 ], [ 4.672648777923647, 51.838583015832441 ], [ 4.670260413926738, 51.842250024833618 ], [ 4.658856973154793, 51.850958967153161 ], [ 4.650936151013871, 51.860255092262591 ], [ 4.645427421285706, 51.86446839066322 ], [ 4.635236089100993, 51.869784337462711 ], [ 4.638040870336702, 51.86470470321953 ], [ 4.643569027233384, 51.859359080376613 ], [ 4.647490988447055, 51.857118268117091 ], [ 4.636348585451849, 51.849684400126534 ], [ 4.633620379726804, 51.850233319084559 ], [ 4.630062940689693, 51.85389201307261 ], [ 4.627329625396232, 51.854723952472646 ], [ 4.623459707512938, 51.853849250789033 ], [ 4.618842095866031, 51.851270338321413 ], [ 4.613802594206932, 51.850670855418876 ], [ 4.604908829555027, 51.848346344430823 ], [ 4.600028213456907, 51.838684939999034 ], [ 4.637142525549097, 51.825334386051551 ], [ 4.661885897237632, 51.831720259315595 ], [ 4.665055328545433, 51.827775025160207 ], [ 4.670557723693594, 51.823560775273705 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0826\", \"naam\": \"Oosterhout\", \"code\": \"0826\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.911881910017168, 51.615504128350871 ], [ 4.909920114675227, 51.618328133487168 ], [ 4.914533570067492, 51.620612451014381 ], [ 4.915675226909455, 51.622316249906696 ], [ 4.904446893016558, 51.624252861737091 ], [ 4.911769090382315, 51.626265229604208 ], [ 4.910190354229652, 51.629373992092688 ], [ 4.912851521104653, 51.633632787761684 ], [ 4.929338873155353, 51.647008757139382 ], [ 4.930473185285372, 51.649561969095622 ], [ 4.932781962456479, 51.650703744514495 ], [ 4.932344084522753, 51.655799603471841 ], [ 4.934263641954452, 51.657223032951102 ], [ 4.931106867059303, 51.663441125539357 ], [ 4.931069787823725, 51.667122547810202 ], [ 4.92679439780059, 51.669088199051558 ], [ 4.925206521153799, 51.673046708984323 ], [ 4.917832128074522, 51.675282965989318 ], [ 4.913966001015027, 51.674984210807558 ], [ 4.912787477227934, 51.676678627665716 ], [ 4.906602764642231, 51.676087017393193 ], [ 4.907001695297997, 51.674955863415342 ], [ 4.898885848387766, 51.674072712856962 ], [ 4.896555255783424, 51.674912565608672 ], [ 4.880311626786277, 51.674276992128959 ], [ 4.880340161277806, 51.671728332457967 ], [ 4.876452227655043, 51.673410629921179 ], [ 4.875662447193988, 51.67482317382516 ], [ 4.871006697952196, 51.675935538721859 ], [ 4.866360495153296, 51.676198166624353 ], [ 4.856641182520599, 51.680119317803943 ], [ 4.856624585056585, 51.681535234458153 ], [ 4.850403011629361, 51.684055671537529 ], [ 4.84652982377945, 51.684321055400879 ], [ 4.843413547586232, 51.686005820288798 ], [ 4.842327564854547, 51.679770404505106 ], [ 4.828439568099844, 51.676306582805935 ], [ 4.827271822953933, 51.67686740373447 ], [ 4.821496369026357, 51.674574054987666 ], [ 4.803750193865159, 51.670522191164103 ], [ 4.796027743083576, 51.669350660333983 ], [ 4.781012581075133, 51.663893087128422 ], [ 4.79445677173464, 51.641589084508929 ], [ 4.796783841066413, 51.641034444408817 ], [ 4.787557670650728, 51.637022728854937 ], [ 4.789524160868081, 51.634483978577322 ], [ 4.800752562127818, 51.633124776589753 ], [ 4.806944505190197, 51.632589238552221 ], [ 4.812352459521456, 51.63289912681433 ], [ 4.818554895347943, 51.631513425075667 ], [ 4.821285357086894, 51.629544257110879 ], [ 4.821700133405233, 51.627280658283873 ], [ 4.826345074390973, 51.626736610905795 ], [ 4.827918983770364, 51.624478540115973 ], [ 4.839188263834863, 51.619434251849484 ], [ 4.842696725655045, 51.616901827864908 ], [ 4.838928526915154, 51.608954617305734 ], [ 4.843625685144521, 51.603878924985111 ], [ 4.835568575287835, 51.599309996015052 ], [ 4.834047717765741, 51.597320407320375 ], [ 4.842175766145915, 51.595942557373824 ], [ 4.842684334243514, 51.585749690737458 ], [ 4.848912981664114, 51.581530509233325 ], [ 4.854345062775921, 51.579289778373131 ], [ 4.864386602883411, 51.579051901400227 ], [ 4.869026098278742, 51.578506149650565 ], [ 4.868997005069, 51.581054827262946 ], [ 4.899763709175383, 51.592515109356832 ], [ 4.913610846787274, 51.597952784756714 ], [ 4.911658826511493, 51.599927262181204 ], [ 4.91629401606719, 51.599946012495295 ], [ 4.918596988099445, 51.601371256786877 ], [ 4.917361901546223, 51.608729483102671 ], [ 4.911881910017168, 51.615504128350871 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1719\", \"naam\": \"Drimmelen\", \"code\": \"1719\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.787557670650728, 51.637022728854937 ], [ 4.796783841066413, 51.641034444408817 ], [ 4.79445677173464, 51.641589084508929 ], [ 4.781012581075133, 51.663893087128422 ], [ 4.796027743083576, 51.669350660333983 ], [ 4.803750193865159, 51.670522191164103 ], [ 4.821496369026357, 51.674574054987666 ], [ 4.827271822953933, 51.67686740373447 ], [ 4.828439568099844, 51.676306582805935 ], [ 4.842327564854547, 51.679770404505106 ], [ 4.839567567056289, 51.68400551207926 ], [ 4.832117706808377, 51.691900005954977 ], [ 4.829352517810978, 51.696418047071475 ], [ 4.825731682239173, 51.707445486793127 ], [ 4.823746392134932, 51.711400731721177 ], [ 4.829938319961988, 51.711713540375214 ], [ 4.836897881137388, 51.712596024686164 ], [ 4.840725636296302, 51.716295508484137 ], [ 4.8468134342034, 51.725386056527107 ], [ 4.847075568608115, 51.735865558190703 ], [ 4.850141308270544, 51.738711612546432 ], [ 4.849302360503188, 51.744088504279887 ], [ 4.853100311393574, 51.750619387316362 ], [ 4.851873892327302, 51.755994524595657 ], [ 4.8468215792675, 51.757104135721619 ], [ 4.841786118778269, 51.756797626125682 ], [ 4.831743267930533, 51.753918516834361 ], [ 4.822441399718938, 51.753874083059593 ], [ 4.812715956647706, 51.756658807300958 ], [ 4.802627352757924, 51.757458537692031 ], [ 4.785591540635379, 51.755956382779708 ], [ 4.782346671247905, 51.766701196167226 ], [ 4.780028176879313, 51.766122820516145 ], [ 4.778891844197583, 51.764134549178571 ], [ 4.771979510112537, 51.759284127132936 ], [ 4.766169094183905, 51.758970300102618 ], [ 4.764219284912446, 51.759809551358579 ], [ 4.760762088367587, 51.7575255480496 ], [ 4.754983693949988, 51.754945749758917 ], [ 4.750756201728586, 51.752374092371944 ], [ 4.748095370532603, 51.748678035725447 ], [ 4.747348392323068, 51.746691569905501 ], [ 4.737350508677168, 51.74125579342239 ], [ 4.733545515894976, 51.736420248906597 ], [ 4.721952044085304, 51.734372626450146 ], [ 4.6985060396429, 51.72205958641986 ], [ 4.677231451698084, 51.720233420412107 ], [ 4.6763811962292, 51.72504268827214 ], [ 4.675232614042836, 51.724186112231649 ], [ 4.645101315515001, 51.719184745123712 ], [ 4.651057904772332, 51.710159845226691 ], [ 4.655339934459549, 51.708770659450494 ], [ 4.65692066709707, 51.70679810703615 ], [ 4.657380947413256, 51.702269737665496 ], [ 4.659407701957051, 51.696618297566374 ], [ 4.662162624738476, 51.693803356581903 ], [ 4.666924476206531, 51.686469469309522 ], [ 4.673076105932884, 51.689055960183765 ], [ 4.679308189354797, 51.686544970935707 ], [ 4.681221058843562, 51.68797252762225 ], [ 4.69292678869659, 51.681812055516069 ], [ 4.69522685407675, 51.683241677754722 ], [ 4.697479588562934, 51.687786195198633 ], [ 4.704556731890984, 51.680464412303159 ], [ 4.701856718918297, 51.679882239401067 ], [ 4.704620792400353, 51.676216757976874 ], [ 4.706546802253461, 51.676794371978879 ], [ 4.709697185702991, 51.673131016696196 ], [ 4.685038037625003, 51.666472091450238 ], [ 4.694060636850351, 51.658312977167427 ], [ 4.696824015708295, 51.654647670932384 ], [ 4.689124533678589, 51.652336388440446 ], [ 4.692678648509343, 51.647543078972909 ], [ 4.696940534004234, 51.647001882775776 ], [ 4.695445801486838, 51.643594623204478 ], [ 4.699011460186587, 51.637951582118454 ], [ 4.704419289103742, 51.63826645853004 ], [ 4.731414495249856, 51.642952064750141 ], [ 4.739928295804363, 51.642433051441813 ], [ 4.750032166817301, 51.638806866710588 ], [ 4.757783611160463, 51.63743280017794 ], [ 4.761282364235813, 51.636035555530135 ], [ 4.76481201299036, 51.632372758441782 ], [ 4.765627800934866, 51.629261876001237 ], [ 4.767950718274041, 51.62899098932067 ], [ 4.787557670650728, 51.637022728854937 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1954\", \"naam\": \"Beekdaelen\", \"code\": \"1954\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.86174995672943, 50.88228961639571 ], [ 5.867842996151568, 50.883114072273024 ], [ 5.873930294816863, 50.883371819588703 ], [ 5.880385862821198, 50.882494851605962 ], [ 5.885727866823244, 50.884171186154042 ], [ 5.88686258609753, 50.883599876443789 ], [ 5.894109487232376, 50.88555078634532 ], [ 5.890337383972104, 50.888399322920769 ], [ 5.903714688452253, 50.894287700015305 ], [ 5.901448263681051, 50.895713832107013 ], [ 5.914829094910112, 50.901600920181508 ], [ 5.913320298564758, 50.902740620023977 ], [ 5.917524500720532, 50.904420666692268 ], [ 5.920551716603041, 50.90299071433607 ], [ 5.923231142149033, 50.904394366728404 ], [ 5.923624721702875, 50.905525371543455 ], [ 5.91644797939799, 50.91008973924577 ], [ 5.904310291778041, 50.913543107539255 ], [ 5.908137809201679, 50.915508387394162 ], [ 5.904351464798117, 50.917224613879569 ], [ 5.899401188337675, 50.916963425529318 ], [ 5.895994961192176, 50.918677694151377 ], [ 5.895629970811691, 50.920095332487406 ], [ 5.898328420523757, 50.923198720171385 ], [ 5.900608865392138, 50.922905418306783 ], [ 5.90101464167043, 50.925169272748455 ], [ 5.905226787677604, 50.927416150436137 ], [ 5.910552437333232, 50.927108982076142 ], [ 5.920120416659355, 50.931596634989077 ], [ 5.918997967911, 50.933301041783956 ], [ 5.928554777996581, 50.936655225938246 ], [ 5.934288858192982, 50.938610718485393 ], [ 5.931276412508125, 50.94145699329502 ], [ 5.935518399045971, 50.945968299852943 ], [ 5.952733378471132, 50.952399264726139 ], [ 5.958498454907085, 50.956619082605684 ], [ 5.96271626006736, 50.958863860176685 ], [ 5.965809494075176, 50.962530152345863 ], [ 5.969618682165186, 50.962511055337139 ], [ 5.969219917539913, 50.961097018282771 ], [ 5.974901083478039, 50.958519445674646 ], [ 5.980262567976091, 50.960757777134205 ], [ 5.998889289692409, 50.957828784717123 ], [ 6.006122177083586, 50.957507138681763 ], [ 6.0076646999031, 50.958914929197491 ], [ 6.01301629835931, 50.960302175144307 ], [ 6.015328647047053, 50.962272120433653 ], [ 6.021162873372957, 50.971019822364113 ], [ 6.026637874318645, 50.981185271839919 ], [ 6.026665338783785, 50.983167588397443 ], [ 6.018670277798434, 50.983777870080672 ], [ 6.017523136048903, 50.983500908689521 ], [ 5.984346253908483, 50.981977446465322 ], [ 5.979403132377108, 50.982852451448082 ], [ 5.97442018714503, 50.980612152422353 ], [ 5.968689896405548, 50.979508229168701 ], [ 5.964897027831568, 50.980943251298726 ], [ 5.957324576095961, 50.984945688188013 ], [ 5.955079766619014, 50.988355213721363 ], [ 5.950111220593024, 50.987246632872228 ], [ 5.933699389311601, 50.985342771820612 ], [ 5.922959285085464, 50.979445588999937 ], [ 5.918366999291156, 50.977767496501471 ], [ 5.915699668381142, 50.977779698982324 ], [ 5.904611186535083, 50.974431282102081 ], [ 5.896993901513591, 50.974748271052725 ], [ 5.890891344702307, 50.974208559980916 ], [ 5.890488712687507, 50.972227862174798 ], [ 5.886638854316907, 50.96856284103287 ], [ 5.88166194253057, 50.96631854578294 ], [ 5.877825313419482, 50.963786005504204 ], [ 5.876694520418927, 50.964923617924278 ], [ 5.873623107268008, 50.962670908669324 ], [ 5.869093384147746, 50.966654740459575 ], [ 5.866016352337128, 50.963835440693579 ], [ 5.861849357662575, 50.966118248331462 ], [ 5.858807512265794, 50.966697090011827 ], [ 5.856501610448323, 50.964724014680769 ], [ 5.852345476752231, 50.968139259747126 ], [ 5.845829584532327, 50.964200365209102 ], [ 5.843157420654149, 50.963644506598364 ], [ 5.842748547191504, 50.960814055563851 ], [ 5.83966518748795, 50.957144468388115 ], [ 5.839976658552287, 50.950063101415914 ], [ 5.846405589523113, 50.945506480915938 ], [ 5.849443363792375, 50.944644771838483 ], [ 5.85327113336916, 50.946611866257207 ], [ 5.857053142626334, 50.944047721108589 ], [ 5.855449690261956, 50.93612444539739 ], [ 5.851960668701582, 50.929907974199381 ], [ 5.847736770211797, 50.926243181927099 ], [ 5.841579943713771, 50.919470579089122 ], [ 5.833974005462377, 50.920066608147764 ], [ 5.831304535253008, 50.919510473102804 ], [ 5.831663325873077, 50.917243449878775 ], [ 5.819469748755069, 50.915590413968545 ], [ 5.819094500095081, 50.916158226288651 ], [ 5.801571682275243, 50.914239872231157 ], [ 5.800409849035861, 50.911978385979431 ], [ 5.80114298330088, 50.908860508150269 ], [ 5.796564631049457, 50.907460773729397 ], [ 5.802225982720568, 50.902342908904146 ], [ 5.798789502228255, 50.900939161665242 ], [ 5.801830319796609, 50.900645096865652 ], [ 5.803329058724409, 50.898090868540805 ], [ 5.801411863572644, 50.896398519097502 ], [ 5.800666285882587, 50.898100417320308 ], [ 5.796479420390237, 50.897832102563036 ], [ 5.797600503314004, 50.89556248984178 ], [ 5.796809663259142, 50.892166832743079 ], [ 5.799794358676148, 50.885642507763279 ], [ 5.802088816708551, 50.88705032455529 ], [ 5.810460708830499, 50.887586398718199 ], [ 5.817277321487166, 50.884445992607866 ], [ 5.819178737938309, 50.884438905947071 ], [ 5.827210454902009, 50.889223119425871 ], [ 5.832945293870707, 50.892316420912373 ], [ 5.836743263161093, 50.891735310637507 ], [ 5.832882552895752, 50.885802934680562 ], [ 5.832858007645237, 50.883254179423425 ], [ 5.835500714920077, 50.88126152641356 ], [ 5.850356200773335, 50.883751837182565 ], [ 5.851482824330335, 50.882331290623341 ], [ 5.86174995672943, 50.88228961639571 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0983\", \"naam\": \"Venlo\", \"code\": \"0983\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.213294220846604, 51.507914032762599 ], [ 6.203976981498607, 51.504297860162097 ], [ 6.188184193602543, 51.504973700097814 ], [ 6.169263519202012, 51.503119518313973 ], [ 6.169214818919349, 51.500287756940757 ], [ 6.166713109764582, 51.489259344581598 ], [ 6.167040162877258, 51.485858652143946 ], [ 6.1708100310995, 51.481018846198879 ], [ 6.177621320228934, 51.473892675943638 ], [ 6.179063483863512, 51.468218705572561 ], [ 6.178229250990086, 51.464542638027346 ], [ 6.173510250083106, 51.458910343406892 ], [ 6.16492787648046, 51.452454053475563 ], [ 6.157493185935191, 51.445423148243528 ], [ 6.155135815448477, 51.44260659806578 ], [ 6.153876217743555, 51.436384275822036 ], [ 6.158298050646254, 51.424743522869356 ], [ 6.157451949468387, 51.420217756992649 ], [ 6.151201417810997, 51.41459468587621 ], [ 6.149164435042032, 51.407810980775857 ], [ 6.151709593155388, 51.399014806132989 ], [ 6.153195461674016, 51.395889738992985 ], [ 6.140872084801654, 51.394837238654191 ], [ 6.136931051529416, 51.412421652619258 ], [ 6.13545283081554, 51.416112871840376 ], [ 6.132718307228898, 51.413581505899771 ], [ 6.131198110826793, 51.414724054364001 ], [ 6.124658539925091, 51.414765603709277 ], [ 6.121984029134063, 51.415915326672796 ], [ 6.116684454305386, 51.42132957403598 ], [ 6.101648603938684, 51.419440217282499 ], [ 6.08166025310677, 51.420693818433278 ], [ 6.077804329509843, 51.42015030573544 ], [ 6.076872049461969, 51.409393925943533 ], [ 6.073359156226786, 51.406016161339991 ], [ 6.071748441077685, 51.401211097149314 ], [ 6.073205786875499, 51.395821576888466 ], [ 6.074329498281212, 51.393832500708584 ], [ 6.077414130496011, 51.394380690121402 ], [ 6.083540384009975, 51.39264499846773 ], [ 6.086957417452626, 51.389792447334379 ], [ 6.090408942922045, 51.389205254609479 ], [ 6.090356566137273, 51.385807067185965 ], [ 6.077554355796337, 51.378236985823683 ], [ 6.084408226456056, 51.373948046903919 ], [ 6.087426463090417, 51.370248232621215 ], [ 6.090907066525234, 51.371643305816825 ], [ 6.096535436995175, 51.362829693142558 ], [ 6.099521034461597, 51.357147290077677 ], [ 6.107187113051843, 51.355967319897807 ], [ 6.118938068691917, 51.345981746230869 ], [ 6.119719897091398, 51.346826461356954 ], [ 6.123122128253737, 51.343406491879762 ], [ 6.116524939782896, 51.339199844058747 ], [ 6.11648425629355, 51.336651208758191 ], [ 6.118295626256506, 51.329842807589692 ], [ 6.116271883244509, 51.323341663606506 ], [ 6.110423580773281, 51.317713938689273 ], [ 6.103380906766551, 51.309261179345356 ], [ 6.096018560266541, 51.304774888034217 ], [ 6.08902399668766, 51.299153080035438 ], [ 6.084777259190753, 51.297479354152522 ], [ 6.086281751422894, 51.295487858291125 ], [ 6.090872844845825, 51.294610558589319 ], [ 6.0935716718184, 51.295443838055128 ], [ 6.103057290333774, 51.288588830387134 ], [ 6.106938051287946, 51.291396994759523 ], [ 6.114574918281114, 51.289083825566827 ], [ 6.119882173076671, 51.285085579588213 ], [ 6.122878052892138, 51.280535302977896 ], [ 6.124403139426987, 51.279959227992947 ], [ 6.124750176283259, 51.277691341132055 ], [ 6.129097525727657, 51.285593608877349 ], [ 6.145035928312231, 51.298235404637879 ], [ 6.153633895744987, 51.307525077720214 ], [ 6.15407941121813, 51.311203891452323 ], [ 6.159529246806589, 51.315699243722513 ], [ 6.159596228636486, 51.319663759639454 ], [ 6.164303860411341, 51.3255798729353 ], [ 6.169362761712682, 51.329510959914145 ], [ 6.168652950204384, 51.332914264429903 ], [ 6.178262459431974, 51.333415801093224 ], [ 6.18827602916534, 51.335046615092821 ], [ 6.194420106644547, 51.335004185526863 ], [ 6.189891646424575, 51.339566882689937 ], [ 6.226376400196671, 51.360267448584395 ], [ 6.214953478432077, 51.387254347705174 ], [ 6.21652213241259, 51.388942468205435 ], [ 6.214610120780509, 51.389522482799215 ], [ 6.217721898198039, 51.391482833834985 ], [ 6.226710793634422, 51.399348377158454 ], [ 6.226726431341008, 51.400197901408397 ], [ 6.21135460032886, 51.40087402618677 ], [ 6.205176278951379, 51.39950148815619 ], [ 6.214647691821814, 51.433986457607958 ], [ 6.21409901702217, 51.446168432647468 ], [ 6.220653345047308, 51.446688206408666 ], [ 6.220043984534658, 51.455472106987031 ], [ 6.222072915073586, 51.461121827795786 ], [ 6.222166399047172, 51.466218957994656 ], [ 6.223483003612556, 51.474989069091919 ], [ 6.219041979669743, 51.48493318434474 ], [ 6.218646362416315, 51.484369582244241 ], [ 6.212605461039796, 51.491209508991346 ], [ 6.214357875470067, 51.502808721459289 ], [ 6.213294220846604, 51.507914032762599 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0484\", \"naam\": \"Alphen aan den Rijn\", \"code\": \"0484\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.738687406735345, 52.106581769067859 ], [ 4.739464558738618, 52.106869226634906 ], [ 4.751795684218268, 52.118830085246088 ], [ 4.752959852547149, 52.119402721243191 ], [ 4.75679934683898, 52.124237439529345 ], [ 4.760221025167718, 52.131052090935306 ], [ 4.758992744213583, 52.135010124549176 ], [ 4.741784014741625, 52.162669167594039 ], [ 4.726975994346636, 52.158905865097623 ], [ 4.726231565154714, 52.156353048883609 ], [ 4.7242762540258, 52.15634207899658 ], [ 4.704900662251019, 52.14462107828863 ], [ 4.704062425852002, 52.148297622281937 ], [ 4.705965529519162, 52.151706835639324 ], [ 4.698435666028943, 52.158176347729707 ], [ 4.681080507058603, 52.167418834393615 ], [ 4.679978845279221, 52.162881293436826 ], [ 4.642441335189563, 52.162083967909595 ], [ 4.618637551762765, 52.158816275479865 ], [ 4.572604589356184, 52.152277309592762 ], [ 4.571416018260931, 52.15311865962758 ], [ 4.570429464955324, 52.14291706786323 ], [ 4.565884099272663, 52.134956228082942 ], [ 4.560078837575317, 52.131800579840629 ], [ 4.550576814665842, 52.138246906030147 ], [ 4.550212459128456, 52.136828375693149 ], [ 4.545976802444874, 52.133399969403399 ], [ 4.547561488431724, 52.132278504637704 ], [ 4.541474283343511, 52.123456125952082 ], [ 4.54073031603203, 52.121468457307969 ], [ 4.543080127193597, 52.121202112443221 ], [ 4.541956114524961, 52.118645349228686 ], [ 4.535281510465726, 52.120296454763128 ], [ 4.536397254120253, 52.102746687092669 ], [ 4.53714318265217, 52.084061429085182 ], [ 4.534036058031147, 52.083189399085661 ], [ 4.530571191234813, 52.080615532873445 ], [ 4.530191655541056, 52.080046388569798 ], [ 4.536106632179006, 52.076974144501541 ], [ 4.533796916623052, 52.075258284472525 ], [ 4.533840124402575, 52.072993057600193 ], [ 4.553140026495369, 52.063785919459505 ], [ 4.557089703922805, 52.061265086071721 ], [ 4.557859648254071, 52.061836893591988 ], [ 4.564946113581529, 52.058488263675713 ], [ 4.565325910614286, 52.059057298450881 ], [ 4.607359326979473, 52.065573255920576 ], [ 4.606766600506518, 52.077180136108922 ], [ 4.625128125291758, 52.076450746880035 ], [ 4.625161886920364, 52.074468637626488 ], [ 4.636886336226581, 52.073694310825772 ], [ 4.638204278064761, 52.064923819452098 ], [ 4.653833159609168, 52.063889385322277 ], [ 4.660072551600122, 52.064211248707437 ], [ 4.665930906225956, 52.063964070999042 ], [ 4.665513259293566, 52.065660647407597 ], [ 4.677225735130055, 52.065448621588196 ], [ 4.67927559642803, 52.059230803981642 ], [ 4.682011530582114, 52.05896402443193 ], [ 4.685359127395736, 52.069461990587229 ], [ 4.694362342977742, 52.067816147366109 ], [ 4.696998265102284, 52.074061752070868 ], [ 4.704761901301838, 52.076938846344767 ], [ 4.712959607006741, 52.076986036306856 ], [ 4.715628421378108, 52.08124908219213 ], [ 4.71324333163748, 52.084067335938009 ], [ 4.708802591394771, 52.093670208485101 ], [ 4.706854336066264, 52.093375792623611 ], [ 4.704871541210125, 52.09534663776838 ], [ 4.734847251031114, 52.102029615637257 ], [ 4.734057802348832, 52.102591615535538 ], [ 4.740278603036268, 52.10460821425567 ], [ 4.738687406735345, 52.106581769067859 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0244\", \"naam\": \"Hattem\", \"code\": \"0244\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.103733093719116, 52.453928835717996 ], [ 6.101572223299815, 52.466401277980268 ], [ 6.098105446789054, 52.471235970397878 ], [ 6.094212323507766, 52.47409092826031 ], [ 6.08600378670472, 52.478103940035339 ], [ 6.075014145621994, 52.48071671252832 ], [ 6.069534139159519, 52.483013709458277 ], [ 6.066417373887214, 52.485296933409991 ], [ 6.061763238888087, 52.490137317707166 ], [ 6.059849225019089, 52.49382933746142 ], [ 6.056371449716218, 52.498379651104948 ], [ 6.043857508803897, 52.504962384377563 ], [ 6.036796208915743, 52.507266583253823 ], [ 6.02776323382183, 52.50958102363014 ], [ 6.025353090861645, 52.506479222251713 ], [ 6.019416361714071, 52.504812041358107 ], [ 6.012337769944809, 52.505982220031292 ], [ 6.007982143874995, 52.504589286179346 ], [ 6.000824587708584, 52.500095932451977 ], [ 6.00670040529151, 52.497516910457769 ], [ 6.01217346588837, 52.494373389668745 ], [ 6.018799482869136, 52.489241326040641 ], [ 6.018336710764606, 52.484429997315324 ], [ 6.016728581808404, 52.482173232061655 ], [ 6.019904456426315, 52.483855311382499 ], [ 6.025021826775754, 52.483544723918918 ], [ 6.031665376838019, 52.47982764867583 ], [ 6.035915385574323, 52.474141159497492 ], [ 6.037038716116812, 52.470170686762295 ], [ 6.033796911951048, 52.463958767146018 ], [ 6.03494921410644, 52.461970311216291 ], [ 6.030908529280915, 52.454913169824167 ], [ 6.022486255369571, 52.44419829050063 ], [ 6.035471056538284, 52.443844782262566 ], [ 6.063135527166327, 52.451052536576263 ], [ 6.076528890819215, 52.451541709090989 ], [ 6.092723403932262, 52.45484440554128 ], [ 6.095035724719663, 52.451715763740914 ], [ 6.100189913278269, 52.453950208724152 ], [ 6.103733093719116, 52.453928835717996 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0482\", \"naam\": \"Alblasserdam\", \"code\": \"0482\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.683366264397845, 51.848559662102403 ], [ 4.681260116385364, 51.859025305326959 ], [ 4.686584185699233, 51.866420297513073 ], [ 4.690465184903516, 51.866726580535016 ], [ 4.700368505869634, 51.879811915251082 ], [ 4.697259270949779, 51.879793695703782 ], [ 4.687949185301081, 51.878605864544454 ], [ 4.67634805902861, 51.874854685120049 ], [ 4.664296619446938, 51.875064333075677 ], [ 4.642061469091176, 51.880022937431988 ], [ 4.637070360768464, 51.876309607983984 ], [ 4.628828227057117, 51.881071042419592 ], [ 4.626501052554779, 51.880772798528824 ], [ 4.634056184179101, 51.870626370495145 ], [ 4.635236089100993, 51.869784337462711 ], [ 4.645427421285706, 51.86446839066322 ], [ 4.650936151013871, 51.860255092262591 ], [ 4.658856973154793, 51.850958967153161 ], [ 4.670260413926738, 51.842250024833618 ], [ 4.672648777923647, 51.838583015832441 ], [ 4.680321417531198, 51.844576609890247 ], [ 4.681812730192928, 51.848550339526049 ], [ 4.683366264397845, 51.848559662102403 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0302\", \"naam\": \"Nunspeet\", \"code\": \"0302\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.850990162527565, 52.268579829459249 ], [ 5.848304478345045, 52.274253807265808 ], [ 5.848720105616023, 52.276517568316983 ], [ 5.852287784075897, 52.280184825402451 ], [ 5.845688213461131, 52.286723587287916 ], [ 5.844200872380782, 52.294658167807903 ], [ 5.841111735039227, 52.299483992241946 ], [ 5.8407685537689, 52.304299224180596 ], [ 5.850226871671458, 52.308226949321288 ], [ 5.870402994082764, 52.323154268400899 ], [ 5.875574548826265, 52.329362775798685 ], [ 5.876387826792139, 52.331907948441383 ], [ 5.881137049959023, 52.335286251154017 ], [ 5.870649711990092, 52.345806873394039 ], [ 5.864816523517592, 52.351210788731485 ], [ 5.873114711409113, 52.355707697753381 ], [ 5.875889468491552, 52.357961619615317 ], [ 5.8712123770985, 52.361378873096925 ], [ 5.868462227382826, 52.361390092518029 ], [ 5.864908015108181, 52.359705485900733 ], [ 5.838785048385544, 52.379346653776686 ], [ 5.834094275212191, 52.381912963379548 ], [ 5.821214732355269, 52.391305389216384 ], [ 5.820483829278913, 52.396971385160946 ], [ 5.817734207294968, 52.397264583750228 ], [ 5.816989023044139, 52.401514774850618 ], [ 5.811868798181725, 52.400683757906222 ], [ 5.811494557671257, 52.402667257095516 ], [ 5.790598254730929, 52.396793842817353 ], [ 5.787876620994197, 52.400201068621534 ], [ 5.779997023327445, 52.398528488272895 ], [ 5.775654309042125, 52.396560664639154 ], [ 5.770926162194819, 52.395443427295184 ], [ 5.768596312255518, 52.398848936854932 ], [ 5.764270946335929, 52.398862794814143 ], [ 5.761544766245329, 52.401986258968229 ], [ 5.75919482174373, 52.403126325104786 ], [ 5.756477467785825, 52.407382297492511 ], [ 5.752919136257003, 52.405128030447422 ], [ 5.746608406760391, 52.402882045209722 ], [ 5.739493832695161, 52.398372804122353 ], [ 5.737530013462002, 52.398661797367645 ], [ 5.733235628090689, 52.402638729317339 ], [ 5.729290003906921, 52.400951213333421 ], [ 5.733586795109615, 52.397257580877337 ], [ 5.728853078510269, 52.39528918876784 ], [ 5.727267294987494, 52.393594768680515 ], [ 5.715430225845711, 52.387964897586869 ], [ 5.714650264368455, 52.388816552497261 ], [ 5.706771362489556, 52.38657277417812 ], [ 5.698877321470134, 52.382063193292481 ], [ 5.694549639376398, 52.381508183966666 ], [ 5.688642124194835, 52.379824392540883 ], [ 5.678808442345427, 52.378716378279698 ], [ 5.679968851161569, 52.375881863048868 ], [ 5.695584970266292, 52.360834410225614 ], [ 5.697942252094673, 52.360828240936883 ], [ 5.700668388637468, 52.357423053044606 ], [ 5.698700159743437, 52.356861920362192 ], [ 5.699065122657397, 52.352896628339849 ], [ 5.704519884937786, 52.346652449294076 ], [ 5.706037981029736, 52.339286018816409 ], [ 5.711138804909475, 52.338705819933857 ], [ 5.712697075757446, 52.337002535273562 ], [ 5.712659687304679, 52.331905618507648 ], [ 5.70635122770213, 52.328241632608965 ], [ 5.750623508037749, 52.317070244731646 ], [ 5.748584988336889, 52.307731902655469 ], [ 5.743798770307082, 52.298118663589847 ], [ 5.744503701527095, 52.288205568993682 ], [ 5.74645343755938, 52.286783803020406 ], [ 5.754655014845834, 52.282511015353066 ], [ 5.75539950460536, 52.27769478560927 ], [ 5.747902812231325, 52.272054483666395 ], [ 5.746329860215444, 52.271492933090997 ], [ 5.74904913107317, 52.268369745290393 ], [ 5.751410779278451, 52.269495174228268 ], [ 5.780041937875687, 52.270536113874421 ], [ 5.797285578377131, 52.269627992912753 ], [ 5.802782509049801, 52.270458299626867 ], [ 5.809837216976802, 52.270150097641128 ], [ 5.821232259536191, 52.27265733420721 ], [ 5.829452198211222, 52.271210983635875 ], [ 5.842742402573298, 52.267196056768299 ], [ 5.850990162527565, 52.268579829459249 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0613\", \"naam\": \"Albrandswaard\", \"code\": \"0613\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.48032900343612, 51.86245994480754 ], [ 4.47179955835307, 51.861544158541861 ], [ 4.462064320092302, 51.862600680628177 ], [ 4.444499427819579, 51.866425845156471 ], [ 4.441014664534554, 51.865831413234645 ], [ 4.437464274229073, 51.868351590517911 ], [ 4.431606198104434, 51.869720092192438 ], [ 4.418334707508604, 51.872443404227177 ], [ 4.409798515779605, 51.871806267957894 ], [ 4.403168202246351, 51.872883723796029 ], [ 4.393472708536585, 51.871952475870245 ], [ 4.39039557415199, 51.870510372329733 ], [ 4.386216003277479, 51.866226737465915 ], [ 4.383685805679769, 51.857708960522949 ], [ 4.38494567087621, 51.853471626462046 ], [ 4.383417314196405, 51.852325744625112 ], [ 4.383644490657345, 51.842132247890454 ], [ 4.393740408400176, 51.842218119854081 ], [ 4.403817824212017, 51.84315258632607 ], [ 4.414314568666365, 51.842673632613469 ], [ 4.422129341765382, 51.840472491850235 ], [ 4.432297012217547, 51.837157177153379 ], [ 4.44714567942655, 51.832745750952235 ], [ 4.452986730409017, 51.831942770941744 ], [ 4.464251002892629, 51.831748678710319 ], [ 4.473157138746329, 51.832951186018576 ], [ 4.478957804638404, 51.834129027394987 ], [ 4.489029573857584, 51.83533933824986 ], [ 4.489698903543178, 51.840725318491636 ], [ 4.49240576383906, 51.841312387591529 ], [ 4.489631195767983, 51.84412323744921 ], [ 4.489580407205148, 51.846671675694843 ], [ 4.487210684075359, 51.8486359548629 ], [ 4.490266883262448, 51.851208166964781 ], [ 4.4804772879243, 51.855097817310202 ], [ 4.481185763357296, 51.858501720021174 ], [ 4.48032900343612, 51.86245994480754 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0232\", \"naam\": \"Epe\", \"code\": \"0232\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.036442703436016, 52.268555720640585 ], [ 6.043111709667804, 52.26880205997945 ], [ 6.041205595187902, 52.272493932116532 ], [ 6.043604080014139, 52.275595579824738 ], [ 6.043257933293086, 52.278712449341093 ], [ 6.035212900623061, 52.291782957168984 ], [ 6.035671270247533, 52.296311257518731 ], [ 6.050186803473973, 52.322566040623244 ], [ 6.052592878655378, 52.325950621328097 ], [ 6.053061884122344, 52.331045121495976 ], [ 6.073865228823247, 52.330642981749193 ], [ 6.075475124674724, 52.333182196467618 ], [ 6.076754159864628, 52.339687762022791 ], [ 6.075611277875756, 52.341959814405875 ], [ 6.076135868022025, 52.350451981819845 ], [ 6.078130588934986, 52.352422564726737 ], [ 6.087187025306145, 52.35378519332972 ], [ 6.094699873240804, 52.356855415944956 ], [ 6.090437156281247, 52.360562089428861 ], [ 6.081030688534881, 52.362033492302807 ], [ 6.077922992863634, 52.364317060715834 ], [ 6.074365017649179, 52.362921912423047 ], [ 6.074740337487488, 52.361787039611357 ], [ 6.052333907379915, 52.361065604853344 ], [ 6.047573136675497, 52.357977374542735 ], [ 6.041659662690159, 52.356594371754746 ], [ 6.042545731356581, 52.363385605098294 ], [ 6.037810315526916, 52.361995878202279 ], [ 6.033922861981144, 52.364848911433256 ], [ 6.034725202241105, 52.365977210975274 ], [ 6.030034908524871, 52.367701816139281 ], [ 6.017493466184028, 52.370034656441831 ], [ 5.992453004285268, 52.378094159122277 ], [ 5.9572704226202, 52.392993653148153 ], [ 5.951048422416405, 52.398403651686849 ], [ 5.942376662920132, 52.396745629837042 ], [ 5.932508600411857, 52.393676651703544 ], [ 5.92422473840556, 52.391449180613265 ], [ 5.911587191428985, 52.386691988960337 ], [ 5.875889468491552, 52.357961619615317 ], [ 5.873114711409113, 52.355707697753381 ], [ 5.864816523517592, 52.351210788731485 ], [ 5.870649711990092, 52.345806873394039 ], [ 5.881137049959023, 52.335286251154017 ], [ 5.876387826792139, 52.331907948441383 ], [ 5.875574548826265, 52.329362775798685 ], [ 5.870402994082764, 52.323154268400899 ], [ 5.850226871671458, 52.308226949321288 ], [ 5.8407685537689, 52.304299224180596 ], [ 5.841111735039227, 52.299483992241946 ], [ 5.844200872380782, 52.294658167807903 ], [ 5.845688213461131, 52.286723587287916 ], [ 5.852287784075897, 52.280184825402451 ], [ 5.848720105616023, 52.276517568316983 ], [ 5.848304478345045, 52.274253807265808 ], [ 5.850990162527565, 52.268579829459249 ], [ 5.854429431833126, 52.260071065921885 ], [ 5.861047906328161, 52.255797087433272 ], [ 5.867361838059056, 52.259736026611861 ], [ 5.879572786945529, 52.265066065866563 ], [ 5.894894147071824, 52.267832952758674 ], [ 5.915314370132281, 52.270575173876558 ], [ 5.93614317973768, 52.274444674090191 ], [ 5.958075656561438, 52.272358507274284 ], [ 5.973770325907765, 52.273131154368528 ], [ 5.98132225778019, 52.280739159129787 ], [ 5.982148267685344, 52.283849931120159 ], [ 5.985700829617803, 52.285531042564735 ], [ 5.99236054553405, 52.284930774326455 ], [ 5.989077265813614, 52.274186870615132 ], [ 5.99338652110483, 52.273881663639649 ], [ 6.009498205310944, 52.276346487062142 ], [ 6.01617224325041, 52.276877500027368 ], [ 6.027931856742885, 52.276531138266662 ], [ 6.03144041833561, 52.275096175900345 ], [ 6.028634388103453, 52.270863789951839 ], [ 6.030986807336815, 52.270850994603371 ], [ 6.030178099963503, 52.269156336281355 ], [ 6.036442703436016, 52.268555720640585 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0106\", \"naam\": \"Assen\", \"code\": \"0106\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.561364715165845, 52.946672055079006 ], [ 6.563025795291839, 52.949204065649546 ], [ 6.565445062120031, 52.950312827398783 ], [ 6.567496993183201, 52.952557770303535 ], [ 6.570031828149009, 52.957912544039544 ], [ 6.581444882901636, 52.967426091686256 ], [ 6.59593193040186, 52.972660266533566 ], [ 6.595221669515567, 52.975782091655745 ], [ 6.596511053298065, 52.97916684083954 ], [ 6.599362750895645, 52.981403143761042 ], [ 6.603378366584673, 52.982494945543237 ], [ 6.607497336692489, 52.987266495467956 ], [ 6.608014875756099, 52.991508441253053 ], [ 6.607727521382997, 52.995475452562353 ], [ 6.612262716642204, 53.000808878435571 ], [ 6.613179505785122, 53.005046698071119 ], [ 6.616057751914378, 53.008131774642848 ], [ 6.622093616201464, 53.010051623654711 ], [ 6.620945811908676, 53.011762357245182 ], [ 6.629829841828996, 53.015634433101113 ], [ 6.632807267092041, 53.02211584752262 ], [ 6.63004825347952, 53.023277138789339 ], [ 6.631325582700858, 53.026095326856812 ], [ 6.60320026116425, 53.033180059961531 ], [ 6.606534168043525, 53.038242727874518 ], [ 6.607969454912839, 53.046722417237717 ], [ 6.607322487595432, 53.052108745411424 ], [ 6.604296652953983, 53.058085563994105 ], [ 6.601206689548103, 53.061797802377001 ], [ 6.599977664665623, 53.060677694386712 ], [ 6.587925601911429, 53.057967804772247 ], [ 6.586376081368757, 53.059682193305363 ], [ 6.580365971665434, 53.058892842318187 ], [ 6.575983486211133, 53.059219598711756 ], [ 6.575069136328616, 53.054981556149514 ], [ 6.570280214630226, 53.0550289990694 ], [ 6.569613045263578, 53.059848993586016 ], [ 6.555206551231833, 53.058574766608452 ], [ 6.555928609536125, 53.055736311023828 ], [ 6.552720733073903, 53.055201317307151 ], [ 6.5538571576351, 53.052925116988163 ], [ 6.551386940536363, 53.050117767078618 ], [ 6.550083766380571, 53.046166464010682 ], [ 6.552401847625569, 53.043312496130333 ], [ 6.550669542714915, 53.038232803321918 ], [ 6.549472766158842, 53.038244436709341 ], [ 6.547395017522901, 53.035150043692902 ], [ 6.541426579781867, 53.035774064594484 ], [ 6.541863082878446, 53.037185560753109 ], [ 6.533508209581663, 53.038115335216482 ], [ 6.530368915598766, 53.040127362211891 ], [ 6.528862369169194, 53.043539437076788 ], [ 6.52413389358242, 53.045849586908858 ], [ 6.510930302350988, 53.044558628215206 ], [ 6.504989164210211, 53.046313118432181 ], [ 6.499998120717519, 53.038431739865885 ], [ 6.503029699146106, 53.032174418783889 ], [ 6.495414973298733, 53.030829508112369 ], [ 6.503811883535254, 53.016028076132535 ], [ 6.509822008247173, 53.0171043746262 ], [ 6.512843383148184, 53.010563698959039 ], [ 6.506051317814949, 53.010061159769172 ], [ 6.488387845387007, 53.005411720499829 ], [ 6.492463557483827, 52.993198977094032 ], [ 6.498057269448788, 52.993713414083949 ], [ 6.493637524642421, 52.992338686997527 ], [ 6.499166046727117, 52.990305382180445 ], [ 6.492233561923605, 52.984140508519801 ], [ 6.496594714729778, 52.983250675871652 ], [ 6.485572887668432, 52.972876137466024 ], [ 6.495835860450738, 52.969100478323483 ], [ 6.487669605031178, 52.961247894966128 ], [ 6.493976506482028, 52.958641323378878 ], [ 6.486232109769617, 52.951634162993685 ], [ 6.483807649894985, 52.950240711976903 ], [ 6.48972225469613, 52.947921095468082 ], [ 6.493305200969569, 52.947887971559958 ], [ 6.496981855808533, 52.951534780519694 ], [ 6.519454921117863, 52.942829443860688 ], [ 6.51778192853939, 52.939730657139577 ], [ 6.527628911986008, 52.935672948743722 ], [ 6.530820250939431, 52.935925581074706 ], [ 6.530370299295101, 52.933947841449701 ], [ 6.533163551838188, 52.934204220508001 ], [ 6.535904627327363, 52.932478986353182 ], [ 6.539447408375915, 52.946036040878219 ], [ 6.542879786118541, 52.955346795288968 ], [ 6.561364715165845, 52.946672055079006 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1699\", \"naam\": \"Noordenveld\", \"code\": \"1699\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.488387845387007, 53.005411720499829 ], [ 6.506051317814949, 53.010061159769172 ], [ 6.512843383148184, 53.010563698959039 ], [ 6.509822008247173, 53.0171043746262 ], [ 6.503811883535254, 53.016028076132535 ], [ 6.495414973298733, 53.030829508112369 ], [ 6.503029699146106, 53.032174418783889 ], [ 6.499998120717519, 53.038431739865885 ], [ 6.504989164210211, 53.046313118432181 ], [ 6.511636949616012, 53.056443835763844 ], [ 6.514665745863295, 53.065475767609151 ], [ 6.513245189993467, 53.072284446065012 ], [ 6.506662423118104, 53.080274021538607 ], [ 6.490707785617575, 53.096843983956383 ], [ 6.484559681463985, 53.106527025905258 ], [ 6.484289003356486, 53.111625898774861 ], [ 6.480121607094224, 53.12072422625296 ], [ 6.49857991744876, 53.123385726366173 ], [ 6.50090548253387, 53.120532804254715 ], [ 6.512628663701316, 53.125519634240341 ], [ 6.510762066443093, 53.130633537653921 ], [ 6.517580461004877, 53.131418800776636 ], [ 6.528389570771169, 53.13188260154368 ], [ 6.53360928911818, 53.13268217155737 ], [ 6.539206428267319, 53.132628487552509 ], [ 6.540179224296279, 53.139131189428539 ], [ 6.536678146382617, 53.142845545832841 ], [ 6.538352913902686, 53.145660791517393 ], [ 6.537243339735684, 53.149069026448004 ], [ 6.534111213050436, 53.151647223270999 ], [ 6.537831263297339, 53.156141668367198 ], [ 6.537891430674364, 53.158406138599801 ], [ 6.534358614441094, 53.160988175530441 ], [ 6.537249228144541, 53.16435804390332 ], [ 6.536146611438081, 53.168049307755624 ], [ 6.533375728806357, 53.169208349464711 ], [ 6.535443965687534, 53.171736725960365 ], [ 6.532235223200255, 53.171484283851285 ], [ 6.530694422721995, 53.17376402324129 ], [ 6.524833128343384, 53.179199224237507 ], [ 6.523721649428871, 53.182607302593233 ], [ 6.521401707263021, 53.185743673402904 ], [ 6.516649970190233, 53.187770411318283 ], [ 6.517480161874341, 53.188895098929471 ], [ 6.512067059721866, 53.196307284907121 ], [ 6.513282956462483, 53.196862128447222 ], [ 6.506957288354726, 53.200035733191143 ], [ 6.496095078251136, 53.19815476289051 ], [ 6.493306716447341, 53.198746758768912 ], [ 6.492570999960727, 53.201301666836954 ], [ 6.489010350752426, 53.20303317352375 ], [ 6.4822170026788, 53.203661626351078 ], [ 6.46330383646587, 53.200152170513654 ], [ 6.447589953804744, 53.196328384082236 ], [ 6.445856753024259, 53.190964343102522 ], [ 6.442978356225829, 53.187875351993576 ], [ 6.438119556661605, 53.185653035219303 ], [ 6.434516890748996, 53.185684552118161 ], [ 6.429651950881691, 53.183178824564948 ], [ 6.408317101566452, 53.178266168737871 ], [ 6.405882403165627, 53.176871259339521 ], [ 6.404188413343256, 53.172921906004724 ], [ 6.404088666528846, 53.168675889758759 ], [ 6.402855034168664, 53.167270725125711 ], [ 6.395166884449013, 53.163654995195216 ], [ 6.391067468672744, 53.15944252642808 ], [ 6.381729585286762, 53.153574747212296 ], [ 6.381638595481302, 53.149611751932248 ], [ 6.382438532556539, 53.14960511198241 ], [ 6.365819454680894, 53.122278759557055 ], [ 6.363489389222267, 53.107575135995837 ], [ 6.356683816967762, 53.107064162394082 ], [ 6.34425295796965, 53.087062022038523 ], [ 6.315242176899813, 53.094085479846903 ], [ 6.305379493909888, 53.081137631392451 ], [ 6.332012223358566, 53.075267809676141 ], [ 6.367775284209815, 53.067335637591093 ], [ 6.365029434399281, 53.05178581510021 ], [ 6.362633689215307, 53.033967937399851 ], [ 6.413355039452905, 52.98541001901873 ], [ 6.488387845387007, 53.005411720499829 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1705\", \"naam\": \"Lingewaard\", \"code\": \"1705\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.046240506648071, 51.870907052972655 ], [ 6.040064325197006, 51.873773509939831 ], [ 6.034668691679432, 51.876918530989002 ], [ 6.029292517401277, 51.881479165555206 ], [ 6.02363876472706, 51.893970481754096 ], [ 6.020576396871872, 51.897385360637941 ], [ 6.013637007025216, 51.901670477677179 ], [ 6.003569680027349, 51.90483886061461 ], [ 5.996604476199649, 51.907423937012844 ], [ 5.986961378682244, 51.913420606596354 ], [ 5.978512535497643, 51.921676000427546 ], [ 5.968482221525504, 51.928239453387832 ], [ 5.972773173973822, 51.929067722244874 ], [ 5.972406226749793, 51.930768697818408 ], [ 5.966631813170158, 51.935611559916978 ], [ 5.965893670957735, 51.938730296228748 ], [ 5.961612789006229, 51.938751297473345 ], [ 5.960877865946862, 51.942153174389567 ], [ 5.958971534365128, 51.945277558677184 ], [ 5.955122244740562, 51.948694503755689 ], [ 5.940421169935513, 51.956127547212354 ], [ 5.935411859113287, 51.960398855121959 ], [ 5.931897301001791, 51.959565623819437 ], [ 5.931856053277031, 51.956167543203172 ], [ 5.929451673766229, 51.950514869822655 ], [ 5.926733556249208, 51.951093756523264 ], [ 5.916994855861356, 51.950571675381177 ], [ 5.911901157688127, 51.947762630918476 ], [ 5.911099516871696, 51.945783881450716 ], [ 5.912649826570507, 51.945210582027713 ], [ 5.902004211165679, 51.933363735913737 ], [ 5.897733462856838, 51.934231936790958 ], [ 5.889460252199378, 51.925205522076773 ], [ 5.896804148132142, 51.920926049831301 ], [ 5.893248731801926, 51.916127186307214 ], [ 5.894402880368053, 51.914989448199577 ], [ 5.892018156226835, 51.910468675543953 ], [ 5.891205356650596, 51.907357071259838 ], [ 5.885770135167448, 51.908229837866607 ], [ 5.873716946404381, 51.908563568929495 ], [ 5.872091007607405, 51.902056917739628 ], [ 5.875590729975099, 51.902042417250705 ], [ 5.874763862591609, 51.897514805542286 ], [ 5.871261442718374, 51.897246103071041 ], [ 5.856872247217185, 51.897021339244688 ], [ 5.857237373161494, 51.894754356259497 ], [ 5.857560983411887, 51.888522870941344 ], [ 5.861840131165818, 51.88878884305489 ], [ 5.867665234463106, 51.888198771991213 ], [ 5.871558719819416, 51.888749158312343 ], [ 5.872709659705227, 51.887328451126642 ], [ 5.875748737960277, 51.880802452357031 ], [ 5.876868510755041, 51.876549918846671 ], [ 5.879900059769455, 51.869457447921313 ], [ 5.881818032036555, 51.86718384869706 ], [ 5.884146241773316, 51.866890823866626 ], [ 5.886847247755564, 51.865180207093978 ], [ 5.895844459336419, 51.870522214006606 ], [ 5.903638899643789, 51.872470528177374 ], [ 5.914151016861613, 51.874122968000734 ], [ 5.923484512184547, 51.874647089392013 ], [ 5.93202039674636, 51.873475018796029 ], [ 5.937436660932738, 51.871467410617832 ], [ 5.945131200505806, 51.86520085009272 ], [ 5.950510432439345, 51.860360874543801 ], [ 5.955899243402405, 51.85637018022944 ], [ 5.958996122996206, 51.855505553223807 ], [ 5.967527444422092, 51.854330905806826 ], [ 5.97571061651869, 51.856272518032306 ], [ 5.981197602187432, 51.859926401453549 ], [ 5.98478048744315, 51.866421677811225 ], [ 5.989915017085196, 51.872625694072319 ], [ 5.997371345387846, 51.877967862140743 ], [ 6.002066032167277, 51.880208921816497 ], [ 6.007915505525277, 51.881594114663066 ], [ 6.016847069419859, 51.880980172684829 ], [ 6.023807016622413, 51.878393896278844 ], [ 6.029207629624184, 51.875532545770881 ], [ 6.035388826347009, 51.872949831148524 ], [ 6.040808618810182, 51.871503809120831 ], [ 6.046240506648071, 51.870907052972655 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0177\", \"naam\": \"Raalte\", \"code\": \"0177\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.326502976621794, 52.301720577460024 ], [ 6.341176833103516, 52.308965862139637 ], [ 6.349539534761877, 52.314561773498589 ], [ 6.355898707360811, 52.318191240189641 ], [ 6.34629507137567, 52.327897777799805 ], [ 6.342485349903844, 52.333309095023758 ], [ 6.338753629036118, 52.342401023647675 ], [ 6.333449355357478, 52.351505398469165 ], [ 6.343278325236342, 52.370116352806164 ], [ 6.356792461571834, 52.377085928294306 ], [ 6.382418870658952, 52.380554571391066 ], [ 6.38829485099934, 52.379655469928672 ], [ 6.401479993067628, 52.40616230504807 ], [ 6.405233894163779, 52.415475060765921 ], [ 6.390176606182495, 52.428063454317048 ], [ 6.380378893789194, 52.429845087696243 ], [ 6.380334420725162, 52.427863207877351 ], [ 6.368131733065174, 52.427681716796044 ], [ 6.35635976583942, 52.429194514379056 ], [ 6.355498542498241, 52.42580342049196 ], [ 6.350396455181873, 52.42641137778412 ], [ 6.349572676233016, 52.424719005928701 ], [ 6.343290392999349, 52.425336241160956 ], [ 6.337044387407804, 52.427651916165836 ], [ 6.334617117687786, 52.424556404363024 ], [ 6.328394847920521, 52.428004140466456 ], [ 6.31942328815017, 52.431756387337416 ], [ 6.31433187378401, 52.432929052709575 ], [ 6.302098754968267, 52.431325112336957 ], [ 6.301787203600056, 52.435291980309849 ], [ 6.291937982307953, 52.434801262640605 ], [ 6.291602348148339, 52.437635578949902 ], [ 6.289362418765055, 52.443599333206322 ], [ 6.289813766519651, 52.446427642899785 ], [ 6.278815628481907, 52.447643615899615 ], [ 6.27821660642083, 52.456992861297934 ], [ 6.253136110200244, 52.463125414283184 ], [ 6.247629018897766, 52.463448697427744 ], [ 6.239392786585057, 52.465207239607651 ], [ 6.235854230562296, 52.46551580263521 ], [ 6.21417508383169, 52.464536372402115 ], [ 6.211423952630765, 52.46483870845649 ], [ 6.202440195107182, 52.468865234600955 ], [ 6.193760817721485, 52.468075106130335 ], [ 6.186677425949592, 52.468406268610266 ], [ 6.178054132377595, 52.470729480183699 ], [ 6.174469313191343, 52.468487988959936 ], [ 6.169359786046998, 52.46908815746292 ], [ 6.162365413940541, 52.474514321152064 ], [ 6.152056296876461, 52.470616929207431 ], [ 6.151278422028302, 52.471188283991005 ], [ 6.144126322903204, 52.467552981342905 ], [ 6.14841917020799, 52.465260135141385 ], [ 6.152283512201661, 52.460987711829347 ], [ 6.152224726378585, 52.457590056859075 ], [ 6.154902087002522, 52.453042024075074 ], [ 6.157667675168873, 52.453590413764104 ], [ 6.175025122322173, 52.433371127039784 ], [ 6.17734566741522, 52.431090295372748 ], [ 6.191148224210665, 52.432696452493097 ], [ 6.193431795549876, 52.428433344347717 ], [ 6.196553530127732, 52.426996190423729 ], [ 6.208372466689468, 52.427764357872924 ], [ 6.207543591837959, 52.425504716250025 ], [ 6.220904042756248, 52.424561903942816 ], [ 6.231111259985108, 52.423356917793143 ], [ 6.228287486552221, 52.419695741273458 ], [ 6.222178629075428, 52.40869516915096 ], [ 6.226004123894273, 52.403004631766585 ], [ 6.231412125784142, 52.397869036260204 ], [ 6.229839410874862, 52.397880240693077 ], [ 6.232112079760896, 52.39333323073631 ], [ 6.229683257128589, 52.389669254191496 ], [ 6.22611313693038, 52.387995553983039 ], [ 6.221778462042346, 52.387459843845924 ], [ 6.218591265947018, 52.385216866006935 ], [ 6.216254048377613, 52.386365962941156 ], [ 6.204079048281732, 52.387016963311403 ], [ 6.202470245345293, 52.3850458274433 ], [ 6.206395680662633, 52.384735548880244 ], [ 6.207145138008059, 52.382748129843719 ], [ 6.201658092318948, 52.383635541386461 ], [ 6.201202631032018, 52.380240567657324 ], [ 6.203524274139729, 52.378242346689731 ], [ 6.203094784517392, 52.376263076977303 ], [ 6.19992491192325, 52.374869008471222 ], [ 6.201481217162812, 52.374008782273044 ], [ 6.201434412052058, 52.371460519286344 ], [ 6.196729386115826, 52.37205915128596 ], [ 6.195586669338351, 52.374049194279877 ], [ 6.189329878262446, 52.375790822259916 ], [ 6.188456900950714, 52.370982749387615 ], [ 6.189574239273823, 52.367577067200934 ], [ 6.188732109057148, 52.364467837340101 ], [ 6.190650365501699, 52.361906240473822 ], [ 6.194522293034362, 52.358764941972062 ], [ 6.196093632395711, 52.3587542093507 ], [ 6.195246058047819, 52.355361879296886 ], [ 6.19715320685618, 52.35223389030218 ], [ 6.222985672923049, 52.347240179163578 ], [ 6.235804945734825, 52.339786260612264 ], [ 6.231797471235843, 52.335567259399497 ], [ 6.232469479930336, 52.329615692258123 ], [ 6.235980986821685, 52.328457822570087 ], [ 6.235420705873526, 52.319683265450891 ], [ 6.235323356523898, 52.314586718607991 ], [ 6.267234002672721, 52.300760773233861 ], [ 6.286457420769285, 52.300616091788683 ], [ 6.304896072821886, 52.300474379159596 ], [ 6.326502976621794, 52.301720577460024 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0184\", \"naam\": \"Urk\", \"code\": \"0184\", \"ligtInProvincieCode\": \"24\", \"ligtInProvincieNaam\": \"Flevoland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.377258283528383, 52.764727245034052 ], [ 5.361054463593603, 52.675818524820642 ], [ 5.511385092549457, 52.663581136830793 ], [ 5.592414076669904, 52.649311490885104 ], [ 5.607045988503191, 52.64928531637127 ], [ 5.6223915213355, 52.634815401976738 ], [ 5.627541597038531, 52.636787130314289 ], [ 5.630318398533101, 52.638480367871892 ], [ 5.641015973622979, 52.642422064691729 ], [ 5.636692346407767, 52.646961583981643 ], [ 5.636311353527579, 52.649510709297957 ], [ 5.648966005615809, 52.649483504952109 ], [ 5.650181178569093, 52.654294324250408 ], [ 5.642702876680178, 52.660539867122694 ], [ 5.655393534709217, 52.665891689198894 ], [ 5.641616220268131, 52.677814099225785 ], [ 5.643225482623791, 52.68234096690496 ], [ 5.626209610075462, 52.682659539064865 ], [ 5.612746599582074, 52.681270120689028 ], [ 5.609576340868989, 52.680426659146512 ], [ 5.604445768280612, 52.68326759334343 ], [ 5.594551696496754, 52.683285263496067 ], [ 5.594122570940805, 52.676207392375659 ], [ 5.590561276504733, 52.676213539066779 ], [ 5.377258283528383, 52.764727245034052 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0299\", \"naam\": \"Zevenaar\", \"code\": \"0299\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.168010771771713, 51.901028925573641 ], [ 6.162985283916488, 51.902761407292196 ], [ 6.157609376807071, 51.906761545458338 ], [ 6.15535836670518, 51.911590629766621 ], [ 6.152587668822801, 51.908776748180166 ], [ 6.14333506535303, 51.913651003428626 ], [ 6.141433132333572, 51.91621199341769 ], [ 6.139085127515655, 51.915377455416149 ], [ 6.130977946970711, 51.919110603091227 ], [ 6.11244806415597, 51.928005485299231 ], [ 6.094684670063212, 51.936609598460564 ], [ 6.09433120107996, 51.938877276904414 ], [ 6.091602607991896, 51.938610468422517 ], [ 6.09089085441047, 51.942862637420745 ], [ 6.09159552587285, 51.962965135641944 ], [ 6.089657525761885, 51.963543115989417 ], [ 6.090502864635901, 51.967785952835349 ], [ 6.100999034605764, 51.966589931251683 ], [ 6.108796215375635, 51.967108724373055 ], [ 6.112722349281447, 51.96906691651909 ], [ 6.122499725348069, 51.971554922122394 ], [ 6.120965102644393, 51.972980474475094 ], [ 6.12254614586415, 51.974386564475296 ], [ 6.129622221410584, 51.978306809993065 ], [ 6.144851099940158, 51.980475233448345 ], [ 6.151472957833669, 51.980432387449547 ], [ 6.16044168356654, 51.980940149901862 ], [ 6.161279386264733, 51.984332966822606 ], [ 6.161820586657683, 51.993108409387425 ], [ 6.159531591192058, 51.995955394915995 ], [ 6.159950535363615, 51.997651803697863 ], [ 6.164256533631711, 51.998756213124899 ], [ 6.159205335741348, 51.999639049191231 ], [ 6.149891383548041, 52.001965344656007 ], [ 6.141260627835684, 51.998622668443168 ], [ 6.14163124247787, 51.997487521164672 ], [ 6.130711082575854, 51.996990662020956 ], [ 6.116288801923589, 51.996797740288329 ], [ 6.110425541214694, 51.995701165694157 ], [ 6.109659920409489, 51.99655544622469 ], [ 6.106524432691844, 51.995441893487943 ], [ 6.092841929787063, 51.992692849737132 ], [ 6.087789995485122, 51.993572621959544 ], [ 6.082764225373201, 51.996151169374201 ], [ 6.078158119053392, 52.000709371540722 ], [ 6.077816415191038, 52.003826477642328 ], [ 6.078280380062957, 52.008637995480143 ], [ 6.074815895572146, 52.011490198502884 ], [ 6.068228096966297, 52.014077224786192 ], [ 6.061613958537148, 52.014964889845963 ], [ 6.058876677449317, 52.014414166941471 ], [ 6.04749668685984, 52.009381162059114 ], [ 6.04551034630536, 52.006843584306239 ], [ 6.044685128151575, 52.003733109725275 ], [ 6.042313628991258, 52.001480819485586 ], [ 6.03054504835977, 51.996165159262567 ], [ 6.025475361038656, 51.995909586844995 ], [ 6.020811403359668, 51.996784370334055 ], [ 6.015355998582546, 51.996813628415907 ], [ 6.009865182045687, 51.994294115605612 ], [ 6.005910048366234, 51.990067142590682 ], [ 6.004273639826147, 51.984411945116868 ], [ 6.001885784274705, 51.980742981595633 ], [ 6.001843090609974, 51.977628115064476 ], [ 6.004978642680908, 51.979027635154942 ], [ 6.021715866462209, 51.978088948675826 ], [ 6.027067985786257, 51.970980180328937 ], [ 6.034471556710452, 51.971222850368342 ], [ 6.043147081364956, 51.97853774410401 ], [ 6.046681832508932, 51.980500312185725 ], [ 6.061115630272224, 51.981834443697878 ], [ 6.062267195865515, 51.980695073967254 ], [ 6.068884879378797, 51.980373709991454 ], [ 6.067245189045422, 51.97500256224847 ], [ 6.061005005817439, 51.97447210022959 ], [ 6.060056142222067, 51.963149861852379 ], [ 6.058426617928758, 51.958344910996239 ], [ 6.052502617043115, 51.952714742088318 ], [ 6.063351440869769, 51.949254530834523 ], [ 6.057026145081873, 51.942777314708977 ], [ 6.054648841975278, 51.9399589114241 ], [ 6.053096336667254, 51.940250910537507 ], [ 6.051844961636839, 51.934594137472303 ], [ 6.051401381747265, 51.93091513650527 ], [ 6.048686036177069, 51.931496838598079 ], [ 6.042406670244335, 51.927850509799654 ], [ 6.046284922659945, 51.926979241961526 ], [ 6.046230908388114, 51.923298033940583 ], [ 6.043470446270385, 51.920764745610015 ], [ 6.044629189785239, 51.92019188110531 ], [ 6.043023559880277, 51.916802534456245 ], [ 6.038736603826566, 51.91625999981671 ], [ 6.037536896591776, 51.914001100293632 ], [ 6.034810146606365, 51.913732969647121 ], [ 6.027456398714468, 51.916322014434975 ], [ 6.02045487416428, 51.916359961693928 ], [ 6.015406128107196, 51.916953451758559 ], [ 6.008384915576386, 51.915574821832394 ], [ 6.001352520230403, 51.913346254638384 ], [ 5.99278036554248, 51.912257985577995 ], [ 5.988913715223982, 51.913977007651511 ], [ 5.986961378682244, 51.913420606596354 ], [ 5.996604476199649, 51.907423937012844 ], [ 6.003569680027349, 51.90483886061461 ], [ 6.013637007025216, 51.901670477677179 ], [ 6.020576396871872, 51.897385360637941 ], [ 6.02363876472706, 51.893970481754096 ], [ 6.029292517401277, 51.881479165555206 ], [ 6.034668691679432, 51.876918530989002 ], [ 6.040064325197006, 51.873773509939831 ], [ 6.046240506648071, 51.870907052972655 ], [ 6.053991101065954, 51.869447312522233 ], [ 6.063645639186197, 51.865427341562828 ], [ 6.077148672428289, 51.859118440645318 ], [ 6.085236377355042, 51.854539478051898 ], [ 6.092567831269816, 51.851380481643425 ], [ 6.102237530505779, 51.8487731941429 ], [ 6.112317272410738, 51.847578560345212 ], [ 6.129410337535199, 51.847754905438798 ], [ 6.135614900657664, 51.847149106873886 ], [ 6.147625598357532, 51.845372708340847 ], [ 6.166576365393937, 51.840717197735252 ], [ 6.165572970672706, 51.850069432678474 ], [ 6.163694511693782, 51.853763461979817 ], [ 6.164569169271982, 51.859421649044734 ], [ 6.166939250643446, 51.861671519643025 ], [ 6.161136224637682, 51.86312591445234 ], [ 6.156124373527637, 51.865424435887732 ], [ 6.149927174315763, 51.866597655230187 ], [ 6.147629462725752, 51.868594946509269 ], [ 6.144540106990897, 51.869747707360041 ], [ 6.143479141249975, 51.875984894892945 ], [ 6.138166147516108, 51.883665321827309 ], [ 6.137801095205928, 51.885083641172599 ], [ 6.130078627974941, 51.888247912375789 ], [ 6.124280261006583, 51.890266823908263 ], [ 6.122331923497939, 51.889995839433439 ], [ 6.118088009910318, 51.892004702082559 ], [ 6.113043309122614, 51.892602380620247 ], [ 6.10564323977664, 51.891798294351361 ], [ 6.103319723484074, 51.892378876875689 ], [ 6.110358408391077, 51.894884511238345 ], [ 6.109210252069445, 51.896024358615442 ], [ 6.112366266384952, 51.898836874142184 ], [ 6.114680833090049, 51.897689777651429 ], [ 6.117855717941275, 51.901634813844389 ], [ 6.125576692480998, 51.898188178660519 ], [ 6.130659315561376, 51.899855295111983 ], [ 6.157191386237597, 51.905065105009982 ], [ 6.165633648590245, 51.89849592742938 ], [ 6.168010771771713, 51.901028925573641 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0233\", \"naam\": \"Ermelo\", \"code\": \"0233\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.72650277221466, 52.242384820596463 ], [ 5.750826490277074, 52.245993664433108 ], [ 5.761425876834362, 52.248225932158164 ], [ 5.74904913107317, 52.268369745290393 ], [ 5.746329860215444, 52.271492933090997 ], [ 5.747902812231325, 52.272054483666395 ], [ 5.75539950460536, 52.27769478560927 ], [ 5.754655014845834, 52.282511015353066 ], [ 5.74645343755938, 52.286783803020406 ], [ 5.744503701527095, 52.288205568993682 ], [ 5.743798770307082, 52.298118663589847 ], [ 5.748584988336889, 52.307731902655469 ], [ 5.750623508037749, 52.317070244731646 ], [ 5.70635122770213, 52.328241632608965 ], [ 5.694120168780618, 52.319495806527932 ], [ 5.686618455605703, 52.313002172159017 ], [ 5.678300722205789, 52.301413027733759 ], [ 5.670862244381898, 52.303979639279632 ], [ 5.658736603490798, 52.310237834842361 ], [ 5.630178778356651, 52.326723732263147 ], [ 5.623504911401963, 52.326737262799092 ], [ 5.619967229555662, 52.325894780642741 ], [ 5.608548699706319, 52.319120699563051 ], [ 5.601878706747737, 52.31969933903045 ], [ 5.601870488325349, 52.318000348979595 ], [ 5.597167140272735, 52.319424636530364 ], [ 5.593240660094038, 52.319148380178973 ], [ 5.587364442052923, 52.321706985169257 ], [ 5.581480107325378, 52.322566306948133 ], [ 5.577959379866155, 52.325403712886903 ], [ 5.565818215500792, 52.332501854131756 ], [ 5.545261041602391, 52.293170864374467 ], [ 5.551526081503141, 52.290047458459334 ], [ 5.555435786766107, 52.286643927750823 ], [ 5.566412447101706, 52.285211935594916 ], [ 5.576205768308179, 52.282364976464947 ], [ 5.587563937710414, 52.278948219344791 ], [ 5.591481624312282, 52.278091998820273 ], [ 5.599327358987131, 52.278644506369211 ], [ 5.61069276705705, 52.27720769701439 ], [ 5.611077777200652, 52.275791118460113 ], [ 5.618131717911966, 52.274928026158328 ], [ 5.620881047088465, 52.275772128288651 ], [ 5.636940884096628, 52.272624388631172 ], [ 5.642026850090576, 52.270631331568111 ], [ 5.642804506052844, 52.269496969063056 ], [ 5.648281908527481, 52.267502792821944 ], [ 5.654137256648499, 52.263242140200823 ], [ 5.656874521204523, 52.262103236942622 ], [ 5.662334612321419, 52.257559902070305 ], [ 5.667809669026631, 52.255564817916785 ], [ 5.676399447910457, 52.25044700113645 ], [ 5.681051808546099, 52.242789866819997 ], [ 5.683779575636257, 52.240517666494256 ], [ 5.693569179594441, 52.23964314938663 ], [ 5.710023143899654, 52.239316130285992 ], [ 5.715122894207565, 52.240151593834447 ], [ 5.718659768667205, 52.241557581247548 ], [ 5.72650277221466, 52.242384820596463 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0202\", \"naam\": \"Arnhem\", \"code\": \"0202\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.955122244740562, 51.948694503755689 ], [ 5.951275928797892, 51.952394494890363 ], [ 5.949382686268449, 51.956651411730633 ], [ 5.950618221720847, 51.962026099776693 ], [ 5.954962248643429, 51.966819423487408 ], [ 5.958885266624139, 51.969065929896814 ], [ 5.965538502845704, 51.971582098638144 ], [ 5.979195593801377, 51.973496461602366 ], [ 5.990501681868465, 51.974288567974249 ], [ 5.984723642839265, 51.979132294972018 ], [ 5.977371197358685, 51.982850884485515 ], [ 5.967279440217344, 51.985732984006262 ], [ 5.960692819484355, 51.988597173410241 ], [ 5.953758674285074, 51.99486092456403 ], [ 5.951481324766251, 51.999686069593864 ], [ 5.94805906791076, 52.0064989432678 ], [ 5.943427641381977, 52.010202368718979 ], [ 5.946159721272697, 52.010472608221548 ], [ 5.941492691327096, 52.011344249932485 ], [ 5.940024330555358, 52.018714024045906 ], [ 5.939011718888153, 52.031462178299236 ], [ 5.937270568100247, 52.048461490191336 ], [ 5.940900821973049, 52.058072779551594 ], [ 5.943298393340243, 52.062592444442245 ], [ 5.9559231407124, 52.073293182895512 ], [ 5.946221227039332, 52.077870588362245 ], [ 5.945050080933663, 52.077876141170144 ], [ 5.909730243070533, 52.062179822041543 ], [ 5.898035752207015, 52.063363874661839 ], [ 5.899444386226293, 52.050048081693539 ], [ 5.881878582773957, 52.04927364965377 ], [ 5.859667694339372, 52.051913542800513 ], [ 5.849910759021333, 52.051669111914535 ], [ 5.837764516489819, 52.04661891775104 ], [ 5.820846878414437, 52.031956893042086 ], [ 5.81336163610616, 52.024055076832276 ], [ 5.808242097667902, 52.01869300160385 ], [ 5.807395936344318, 52.01161640840558 ], [ 5.803037040248253, 52.003985902110216 ], [ 5.826380063586456, 51.999653284465815 ], [ 5.836111369644498, 51.998483805207883 ], [ 5.840400886121527, 51.998750542322306 ], [ 5.849747784416712, 51.998147786426038 ], [ 5.856351800046343, 51.996139327788136 ], [ 5.863752601073679, 51.995826389744245 ], [ 5.862535536287115, 51.991300329659659 ], [ 5.864870311858512, 51.991007683903881 ], [ 5.863251648817685, 51.985350511068049 ], [ 5.866356186771458, 51.984205155268242 ], [ 5.867092895206853, 51.98023753202623 ], [ 5.863563004006513, 51.977986386955926 ], [ 5.867041381735395, 51.975423558641999 ], [ 5.870933267480753, 51.975124424909858 ], [ 5.867786990479557, 51.972305451733796 ], [ 5.863089346629996, 51.970059058902926 ], [ 5.85957835075931, 51.969506842369611 ], [ 5.854129091356674, 51.969811796956606 ], [ 5.845584422426223, 51.972110917733374 ], [ 5.835472437781789, 51.97356583974274 ], [ 5.836225880328614, 51.971014282198915 ], [ 5.835034888996387, 51.968753328328297 ], [ 5.835788276460386, 51.966201771905546 ], [ 5.834196753395395, 51.962809586915625 ], [ 5.829504574330113, 51.960845023429691 ], [ 5.831428989880967, 51.958572268000516 ], [ 5.83139815196145, 51.9554573221412 ], [ 5.828619966413271, 51.950087223235144 ], [ 5.829740325630935, 51.945268817134945 ], [ 5.837135770761551, 51.945240737565115 ], [ 5.839073386396977, 51.944383739474212 ], [ 5.84956789730697, 51.942926979526959 ], [ 5.85036385429349, 51.944622975363522 ], [ 5.862019704514908, 51.942594143429382 ], [ 5.868633226621284, 51.942284049058507 ], [ 5.87600656293067, 51.940271291284859 ], [ 5.877937029643191, 51.938847301147234 ], [ 5.884926503019864, 51.93740196089913 ], [ 5.88763802179727, 51.936257688313731 ], [ 5.892690638499007, 51.935669684409596 ], [ 5.897733462856838, 51.934231936790958 ], [ 5.902004211165679, 51.933363735913737 ], [ 5.912649826570507, 51.945210582027713 ], [ 5.911099516871696, 51.945783881450716 ], [ 5.911901157688127, 51.947762630918476 ], [ 5.916994855861356, 51.950571675381177 ], [ 5.926733556249208, 51.951093756523264 ], [ 5.929451673766229, 51.950514869822655 ], [ 5.931856053277031, 51.956167543203172 ], [ 5.931897301001791, 51.959565623819437 ], [ 5.935411859113287, 51.960398855121959 ], [ 5.940421169935513, 51.956127547212354 ], [ 5.955122244740562, 51.948694503755689 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0757\", \"naam\": \"Boxtel\", \"code\": \"0757\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.404144047355752, 51.548217772817317 ], [ 5.404146394066382, 51.554448094145357 ], [ 5.402989919299843, 51.557846613692661 ], [ 5.405307138541565, 51.562094218098736 ], [ 5.401447503938212, 51.561811561485335 ], [ 5.399132168671261, 51.563227804925461 ], [ 5.39797489030716, 51.565776684179667 ], [ 5.399518911285151, 51.566059725606834 ], [ 5.398748249806412, 51.571157334115114 ], [ 5.402608759381938, 51.571723275571209 ], [ 5.401837333031201, 51.573705747419325 ], [ 5.403768434129163, 51.575971054179256 ], [ 5.400293699165841, 51.575688303960135 ], [ 5.395661019717854, 51.576538325083511 ], [ 5.391414114741564, 51.575972169492609 ], [ 5.393731092616715, 51.579653605512732 ], [ 5.387939591767894, 51.582485751112642 ], [ 5.389870284329044, 51.583335307386172 ], [ 5.385622709537319, 51.586167289729289 ], [ 5.381374781239567, 51.587583139198372 ], [ 5.385236415392721, 51.589565631429075 ], [ 5.389484485150866, 51.589565619701929 ], [ 5.386008766022504, 51.590698422895407 ], [ 5.38446379807748, 51.593813549357677 ], [ 5.381373720633318, 51.596079003821679 ], [ 5.386394819357228, 51.60089345977476 ], [ 5.380600268829324, 51.602875651073653 ], [ 5.374806052013258, 51.601742407661412 ], [ 5.360513254868188, 51.601740039389824 ], [ 5.352788274916396, 51.600605251069993 ], [ 5.350854153240332, 51.604003011724487 ], [ 5.345833139212818, 51.602868569567867 ], [ 5.342745217680759, 51.600318683275447 ], [ 5.340423465134913, 51.604282514701367 ], [ 5.335788984981097, 51.603147794719895 ], [ 5.331919408643301, 51.608526743856281 ], [ 5.335010204694442, 51.608528159568245 ], [ 5.332302339636677, 51.611358874670252 ], [ 5.33500435510573, 51.613625668128854 ], [ 5.340026582893594, 51.614477379359734 ], [ 5.343501465658063, 51.617310673594623 ], [ 5.341952951571284, 51.620142035615643 ], [ 5.343882498121967, 51.622974711193486 ], [ 5.338472790973778, 51.622123006225138 ], [ 5.317584570099678, 51.634573035159995 ], [ 5.308309316283732, 51.633151189203979 ], [ 5.30599603862793, 51.629751274411539 ], [ 5.306772610330473, 51.627769446952911 ], [ 5.304458690478548, 51.624935889065355 ], [ 5.299819185750478, 51.625782106597804 ], [ 5.297115397013395, 51.624930475246288 ], [ 5.294803954649671, 51.621247142483497 ], [ 5.2909393784642, 51.621244031690061 ], [ 5.285525167496161, 51.622938628356152 ], [ 5.280888167382241, 51.622651317877747 ], [ 5.280891483369795, 51.621235346146484 ], [ 5.277804601443566, 51.619250139480485 ], [ 5.275880732409751, 51.615849986241912 ], [ 5.271244518795335, 51.615562293556657 ], [ 5.2716381363621, 51.612730730708293 ], [ 5.268934180467494, 51.612444836528908 ], [ 5.269327915088711, 51.609613280710228 ], [ 5.276673547924328, 51.607638075493824 ], [ 5.278612026862587, 51.604807935078739 ], [ 5.275908499255001, 51.604522202045999 ], [ 5.268191850047513, 51.600833073827324 ], [ 5.262786986185414, 51.599694674036861 ], [ 5.257388869650448, 51.59629046631941 ], [ 5.255465860963671, 51.593456361150452 ], [ 5.247753626587927, 51.589482687179505 ], [ 5.246239639701606, 51.579569012872668 ], [ 5.26289703752945, 51.559480949994033 ], [ 5.26908665514453, 51.553823429209537 ], [ 5.273334210471606, 51.552694852608276 ], [ 5.308460529643767, 51.545927032447921 ], [ 5.325429176704977, 51.55131794596069 ], [ 5.332760907622504, 51.551038384801402 ], [ 5.33701036286099, 51.546509136670657 ], [ 5.343957038295781, 51.54452952809298 ], [ 5.350901756824793, 51.544248685578168 ], [ 5.357074228307204, 51.544816824653786 ], [ 5.365176052914721, 51.545101817933876 ], [ 5.368649031524908, 51.543403236506776 ], [ 5.382537647986477, 51.543687793427139 ], [ 5.388324635500257, 51.544254266186876 ], [ 5.390639542764025, 51.545387004077199 ], [ 5.404144047355752, 51.548217772817317 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0893\", \"naam\": \"Bergen (L)\", \"code\": \"0893\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.213294220846604, 51.507914032762599 ], [ 6.211849962012222, 51.513305229848122 ], [ 6.207711598484327, 51.518998576444503 ], [ 6.199761718306751, 51.527267233915545 ], [ 6.188688392492554, 51.533574345608145 ], [ 6.176815906591872, 51.538469754073972 ], [ 6.156847502137422, 51.566640560423373 ], [ 6.14687875383088, 51.570670685839325 ], [ 6.140759174267439, 51.574108783628859 ], [ 6.13044767685649, 51.580971760746124 ], [ 6.121369422684624, 51.59264056481932 ], [ 6.117139575138649, 51.593799873829049 ], [ 6.091448847860559, 51.605852049193579 ], [ 6.093890265979828, 51.613767038520031 ], [ 6.094022749621974, 51.622262360023178 ], [ 6.097092110073902, 51.620827749515648 ], [ 6.099850562266989, 51.624209422688978 ], [ 6.107863490923357, 51.642002179264331 ], [ 6.111774897822903, 51.644810058435205 ], [ 6.109486709484673, 51.646806633636189 ], [ 6.117283644000308, 51.650723094516053 ], [ 6.11577791813975, 51.653281314085092 ], [ 6.118143872714121, 51.65609859601205 ], [ 6.101972711995198, 51.660729744218848 ], [ 6.099611975240525, 51.658195311310031 ], [ 6.094993121013702, 51.659639354910937 ], [ 6.088035785817521, 51.659964431654814 ], [ 6.086528100808343, 51.662522276150789 ], [ 6.083033955699914, 51.661693496392438 ], [ 6.079170481303723, 51.661999607497087 ], [ 6.079578923425794, 51.66341320435766 ], [ 6.075732510353605, 51.664851909886558 ], [ 6.072234095292059, 51.663739630806283 ], [ 6.036774460725027, 51.672721065755262 ], [ 6.033341089813219, 51.676138482992549 ], [ 6.031793462405981, 51.676147016033191 ], [ 6.024354488252254, 51.669957326505553 ], [ 6.031607933645399, 51.663120784111214 ], [ 6.024601737344394, 51.660043940925377 ], [ 6.015350690283539, 51.662359573242455 ], [ 6.014162861130439, 51.66038353629547 ], [ 6.00675214420908, 51.655891791950097 ], [ 6.002092084603485, 51.654500368793606 ], [ 6.001330161696697, 51.655353972833758 ], [ 5.991601379799023, 51.650873418902123 ], [ 5.976428173406712, 51.643870803185777 ], [ 5.981826178701049, 51.642710688150821 ], [ 5.996055106496869, 51.636973477141339 ], [ 6.007172725560319, 51.630118245783216 ], [ 6.020578009556442, 51.62126715958297 ], [ 6.023984331838992, 51.616151020354934 ], [ 6.024155824683413, 51.600857147315736 ], [ 6.026397564811233, 51.595464057895036 ], [ 6.02867882612534, 51.592902735098811 ], [ 6.037081819566719, 51.586342645458849 ], [ 6.039349807570488, 51.58293157160108 ], [ 6.039691116285743, 51.579814427155 ], [ 6.038073651587789, 51.574725780001835 ], [ 6.037626723141068, 51.57048021191077 ], [ 6.040251337055818, 51.565084699531852 ], [ 6.043671727665472, 51.56138388015026 ], [ 6.048261620755668, 51.55852595928873 ], [ 6.056353059473658, 51.557630285057243 ], [ 6.062116223805907, 51.555897907805132 ], [ 6.066700161954745, 51.552756084225059 ], [ 6.075891902923432, 51.548170978563221 ], [ 6.078965468992886, 51.547303202634964 ], [ 6.085519810429892, 51.5469810007719 ], [ 6.099812259329204, 51.548027513078317 ], [ 6.105603895728128, 51.548275246557118 ], [ 6.109829805618275, 51.547116358106884 ], [ 6.114019243394782, 51.54369189214718 ], [ 6.115848161209878, 51.537449956085993 ], [ 6.119614043854625, 51.531762268951127 ], [ 6.122286252123467, 51.530046239786408 ], [ 6.129558198175863, 51.52660175800608 ], [ 6.141009543762443, 51.519448216004172 ], [ 6.14483215165269, 51.517441022808768 ], [ 6.150582074989836, 51.515421118220601 ], [ 6.157878338776145, 51.513673939800569 ], [ 6.161704539408788, 51.511949372576538 ], [ 6.16550620971972, 51.508808799490808 ], [ 6.168536462430836, 51.505673264798169 ], [ 6.169263519202012, 51.503119518313973 ], [ 6.188184193602543, 51.504973700097814 ], [ 6.203976981498607, 51.504297860162097 ], [ 6.213294220846604, 51.507914032762599 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0321\", \"naam\": \"Houten\", \"code\": \"0321\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.243366455262033, 51.998686647844011 ], [ 5.234768872055487, 52.005755396262828 ], [ 5.231637967527169, 52.009432672026186 ], [ 5.224216344608214, 52.013670369362416 ], [ 5.219533016379019, 52.015079707198353 ], [ 5.201979317480784, 52.017602054750384 ], [ 5.203528360402426, 52.020153117034098 ], [ 5.200398604517554, 52.022696832369292 ], [ 5.199216988997938, 52.025526769945152 ], [ 5.200752015783204, 52.031476020594063 ], [ 5.19957256095152, 52.033739599088811 ], [ 5.195270319334577, 52.036564482684746 ], [ 5.192549912107147, 52.034294570315915 ], [ 5.189416044470398, 52.037404345686859 ], [ 5.189407296284839, 52.039386599102798 ], [ 5.191731597711651, 52.043071830644919 ], [ 5.178842775082299, 52.046447919015783 ], [ 5.178846725648854, 52.045598383281408 ], [ 5.160901517903946, 52.045565289079811 ], [ 5.153040059060256, 52.05687716540087 ], [ 5.145258782574065, 52.052613736506942 ], [ 5.126907459628969, 52.054840079787382 ], [ 5.12459452914616, 52.050020869649117 ], [ 5.129668119717757, 52.049748885926775 ], [ 5.121589179919263, 52.030474598968524 ], [ 5.130981093674743, 52.02483175856834 ], [ 5.12825157279246, 52.024825789738216 ], [ 5.123272495743544, 52.009522876369438 ], [ 5.119432001383494, 51.999885977712857 ], [ 5.136603177100766, 51.9956760252932 ], [ 5.140122757082122, 51.993417996323927 ], [ 5.142482331634506, 51.98945835497468 ], [ 5.145264662611926, 51.979269488994696 ], [ 5.14879304566488, 51.975028927159421 ], [ 5.155042605641766, 51.971643209411681 ], [ 5.160890364421303, 51.970521861472406 ], [ 5.172578239012431, 51.969694200974814 ], [ 5.180377742047648, 51.967442690737677 ], [ 5.187402672887265, 51.964056614277098 ], [ 5.194813493653136, 51.961237117896445 ], [ 5.200270712012838, 51.959829989792667 ], [ 5.206112378688206, 51.959555938006574 ], [ 5.21156128928015, 51.96013056351029 ], [ 5.219724360434416, 51.963823854495374 ], [ 5.224380777769396, 51.96836132980652 ], [ 5.229807176824488, 51.975731484441127 ], [ 5.234084027723799, 51.97800259102933 ], [ 5.23992414072569, 51.978859589863269 ], [ 5.247720980069887, 51.976886799004212 ], [ 5.256307686434548, 51.970949803074049 ], [ 5.266420091939851, 51.976057909501947 ], [ 5.271470592324602, 51.981160277279386 ], [ 5.254315960420303, 51.985956285818595 ], [ 5.253517377729542, 51.992468587399614 ], [ 5.256241641033027, 51.993604378053099 ], [ 5.245323938414541, 51.995857196150347 ], [ 5.243366455262033, 51.998686647844011 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1903\", \"naam\": \"Eijsden-Margraten\", \"code\": \"1903\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.845002646826491, 50.765393349986681 ], [ 5.845052909248548, 50.770490835969362 ], [ 5.842433564909162, 50.774182855081655 ], [ 5.844333248619002, 50.774458554454519 ], [ 5.838331947590455, 50.781562276677661 ], [ 5.835299164345716, 50.781857289836921 ], [ 5.833805921094348, 50.784411917112791 ], [ 5.835725131435885, 50.786670117050747 ], [ 5.833068760864972, 50.786680403494444 ], [ 5.832708310217931, 50.788664227820313 ], [ 5.828170481232505, 50.790380872162565 ], [ 5.821774471156467, 50.796352414020127 ], [ 5.821068318110743, 50.802019162369298 ], [ 5.819578925349379, 50.805139998811974 ], [ 5.83023298735843, 50.807648472618197 ], [ 5.831762458170217, 50.808775416489972 ], [ 5.839344656410122, 50.807613168834266 ], [ 5.842406891593525, 50.810149988699251 ], [ 5.845114936198838, 50.815236979788452 ], [ 5.848909261880827, 50.814938673475652 ], [ 5.852734812917657, 50.817755375504007 ], [ 5.851230043715204, 50.819177455553749 ], [ 5.854670605267249, 50.821429229843041 ], [ 5.857697228340134, 50.820284123205333 ], [ 5.864185115613846, 50.823372783636273 ], [ 5.86159330502063, 50.829897182194522 ], [ 5.859351802667472, 50.83358803500122 ], [ 5.857438113717083, 50.832179809797857 ], [ 5.850597925196006, 50.831924235373855 ], [ 5.84415999722991, 50.833932309290681 ], [ 5.843391898716989, 50.833085727870134 ], [ 5.836201972270784, 50.835945939145063 ], [ 5.837674713323048, 50.831125718630801 ], [ 5.836144360211924, 50.829998853310315 ], [ 5.829684441411729, 50.829740564637369 ], [ 5.823612425138418, 50.830330065831347 ], [ 5.820586951013968, 50.831757477010257 ], [ 5.820626677295005, 50.836005402745513 ], [ 5.821412984135857, 50.838834501297455 ], [ 5.812695874889174, 50.841132562937901 ], [ 5.811168388232719, 50.840288561726624 ], [ 5.805117741619181, 50.843425852505021 ], [ 5.801756497883479, 50.849951667859877 ], [ 5.800601330999378, 50.848256576306262 ], [ 5.794904015292177, 50.848560017594728 ], [ 5.791116463414761, 50.849989338674 ], [ 5.780471600450104, 50.84945963781977 ], [ 5.778595540782468, 50.852298050669511 ], [ 5.775944900743997, 50.853439813412855 ], [ 5.770615094740651, 50.852324797642879 ], [ 5.763035341939946, 50.85489853033075 ], [ 5.757336959551854, 50.855200121789998 ], [ 5.757257763050233, 50.845288228673965 ], [ 5.754951000125998, 50.841897142316476 ], [ 5.748105520408431, 50.841069110544126 ], [ 5.74695913333013, 50.840223072985189 ], [ 5.741260284354623, 50.840240673264653 ], [ 5.74048532173345, 50.838260617746599 ], [ 5.74617734554009, 50.837393464509752 ], [ 5.746155407095209, 50.834561493320685 ], [ 5.746877793391563, 50.829744780583489 ], [ 5.74496111827754, 50.82748510008728 ], [ 5.745703232066631, 50.82521716908834 ], [ 5.743393963489355, 50.821259458278227 ], [ 5.728557975557718, 50.817905803493922 ], [ 5.725883237924874, 50.815648047870688 ], [ 5.718656359175074, 50.813969789254458 ], [ 5.717141553672574, 50.814540532600866 ], [ 5.717064992350851, 50.803779024356587 ], [ 5.708341441428874, 50.80493642232625 ], [ 5.709503965495766, 50.808331622848442 ], [ 5.696597297801655, 50.808650119748741 ], [ 5.693950875232852, 50.810356396843794 ], [ 5.693503849254545, 50.8001622739814 ], [ 5.694603224248678, 50.794212090616313 ], [ 5.697592237410946, 50.78712402180382 ], [ 5.698681279145913, 50.779757814414062 ], [ 5.697512692460842, 50.775229716388708 ], [ 5.693690712898399, 50.770991885685646 ], [ 5.6849182431168, 50.763651577088382 ], [ 5.682239757419804, 50.759976822702342 ], [ 5.682223563407256, 50.757428042255007 ], [ 5.687914113377629, 50.757696558190283 ], [ 5.68865974400213, 50.755712195734191 ], [ 5.695101081208218, 50.754845583550377 ], [ 5.699276376894852, 50.755400774176913 ], [ 5.702712541904021, 50.758789863339373 ], [ 5.706880484057314, 50.758211989236983 ], [ 5.710690773874322, 50.760750197726054 ], [ 5.71561532764663, 50.759886682665446 ], [ 5.720201054697847, 50.764687993148634 ], [ 5.726230659697978, 50.759289585198019 ], [ 5.730387887719907, 50.757294878767958 ], [ 5.739108379309676, 50.756985417561516 ], [ 5.741416234356454, 50.761226405037412 ], [ 5.740670614367481, 50.762927909566557 ], [ 5.743356061645463, 50.766884500179259 ], [ 5.747177837406754, 50.770554288995783 ], [ 5.754421383908346, 50.775062730735861 ], [ 5.75593894233044, 50.775057893984645 ], [ 5.765865439524751, 50.782672263470012 ], [ 5.773459177402542, 50.78321351907497 ], [ 5.776487694804267, 50.782353737290599 ], [ 5.779835647355529, 50.774412693936718 ], [ 5.78432525811215, 50.767034039249275 ], [ 5.788507600538309, 50.768152392012489 ], [ 5.793076912122027, 50.770118845922546 ], [ 5.80736653693993, 50.756190725740048 ], [ 5.814192737611611, 50.756165676520745 ], [ 5.821421990476211, 50.758687546451178 ], [ 5.830524064899557, 50.758652949396705 ], [ 5.838917198767567, 50.763718093342497 ], [ 5.845002646826491, 50.765393349986681 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0852\", \"naam\": \"Waterland\", \"code\": \"0852\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.079347469074563, 52.388586830450123 ], [ 5.13737884404931, 52.415623909905563 ], [ 5.185369849490601, 52.415715339964088 ], [ 5.150876396934835, 52.466337340578299 ], [ 5.112873175425388, 52.497969289111246 ], [ 5.060941977774779, 52.485662063795004 ], [ 5.058578044036546, 52.485655539508997 ], [ 5.058932090726698, 52.491036534923495 ], [ 5.038462306866338, 52.48842970523831 ], [ 5.03097606499421, 52.488407463857747 ], [ 5.03059347210676, 52.486990518961882 ], [ 5.024699728100835, 52.48499054186432 ], [ 4.997821741989849, 52.494815946694644 ], [ 4.974405087707266, 52.470385005746778 ], [ 4.968891193768004, 52.470365685903161 ], [ 4.963760311468506, 52.471480122242063 ], [ 4.957855177066933, 52.471175730746175 ], [ 4.953475557629148, 52.475973534276477 ], [ 4.953800080585629, 52.483053739615258 ], [ 4.948276185493973, 52.483882910356058 ], [ 4.947136552626952, 52.47963127700848 ], [ 4.9468497694889, 52.468870086975919 ], [ 4.950494923149829, 52.458689741543822 ], [ 4.948194262307682, 52.452451674778892 ], [ 4.95070720260238, 52.437170154387324 ], [ 4.950450511344208, 52.423294181806881 ], [ 4.947713360817372, 52.42158507661479 ], [ 4.973274782138315, 52.422809772614613 ], [ 4.982680821577141, 52.426806543295783 ], [ 4.987044725313805, 52.422857067807293 ], [ 4.990562753223338, 52.425417366297658 ], [ 5.000794940751848, 52.42516800524313 ], [ 5.018158601164588, 52.418993752357053 ], [ 5.021680460280948, 52.421269974092894 ], [ 5.029175938785722, 52.4187443856176 ], [ 5.029987837943687, 52.415632038238726 ], [ 5.035081329303264, 52.418195752604866 ], [ 5.042564512010528, 52.417085097881362 ], [ 5.049267062312678, 52.415122257696233 ], [ 5.057910486862744, 52.416562405861868 ], [ 5.063026422796442, 52.416293347518263 ], [ 5.065380483933637, 52.417149252408187 ], [ 5.074452201944019, 52.413775584104854 ], [ 5.079347469074563, 52.388586830450123 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0823\", \"naam\": \"Oirschot\", \"code\": \"0823\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.237855224127197, 51.428614177850321 ], [ 5.23900233396957, 51.430881233395958 ], [ 5.238993135056893, 51.433713213824966 ], [ 5.252450896156986, 51.437977503511 ], [ 5.248971333869709, 51.443071019494305 ], [ 5.24857864327933, 51.445619344635624 ], [ 5.25896875974079, 51.447047206802729 ], [ 5.260505528014645, 51.448181678875386 ], [ 5.265123113777597, 51.449036191574706 ], [ 5.270898047401262, 51.449042082852145 ], [ 5.279365275550786, 51.450182998736004 ], [ 5.285131486952696, 51.454152958406389 ], [ 5.294370119563841, 51.455293455391661 ], [ 5.297454965511961, 51.453030275927787 ], [ 5.298221711421311, 51.454730053474485 ], [ 5.303218944754838, 51.459264926014072 ], [ 5.318618839400841, 51.461540558304272 ], [ 5.3205451750639, 51.460975275052398 ], [ 5.325932732613847, 51.463810203764396 ], [ 5.330168709655179, 51.464095543113224 ], [ 5.331710579669783, 51.46296349107206 ], [ 5.334791490385408, 51.462964911034653 ], [ 5.332477753390435, 51.465512636827029 ], [ 5.334788240815945, 51.46579689235972 ], [ 5.333629505505939, 51.468628350111679 ], [ 5.355973143117432, 51.462406075031694 ], [ 5.358280936890369, 51.46693783832449 ], [ 5.369450872790871, 51.465240866824757 ], [ 5.379079451018753, 51.463825929451417 ], [ 5.384085807168241, 51.467224541934208 ], [ 5.3875521668882, 51.468074172623162 ], [ 5.38716701291159, 51.469206966276886 ], [ 5.391018903640448, 51.471755681455448 ], [ 5.390634767123575, 51.485065998063575 ], [ 5.389864323440228, 51.487614799512308 ], [ 5.385240485916681, 51.486765226540108 ], [ 5.366743579308016, 51.490728245205332 ], [ 5.361347415105303, 51.492992764187285 ], [ 5.355950133184304, 51.496106626101806 ], [ 5.353248164938797, 51.501769826929653 ], [ 5.35247405199328, 51.506017562481311 ], [ 5.350544614618712, 51.508565752140157 ], [ 5.35092696632518, 51.512530633748156 ], [ 5.349381782853592, 51.516211710171227 ], [ 5.35400485766345, 51.521310658134169 ], [ 5.353615709913454, 51.526124897441186 ], [ 5.355541992360709, 51.528957402445052 ], [ 5.366725877367911, 51.530375866981082 ], [ 5.368653729935433, 51.531792170704101 ], [ 5.357074228307204, 51.544816824653786 ], [ 5.350901756824793, 51.544248685578168 ], [ 5.343957038295781, 51.54452952809298 ], [ 5.33701036286099, 51.546509136670657 ], [ 5.332760907622504, 51.551038384801402 ], [ 5.325429176704977, 51.55131794596069 ], [ 5.308460529643767, 51.545927032447921 ], [ 5.273334210471606, 51.552694852608276 ], [ 5.271797900153314, 51.549861380910983 ], [ 5.277588379096451, 51.548734161044266 ], [ 5.276826318059019, 51.544768690144998 ], [ 5.269878146807391, 51.546177914045089 ], [ 5.26795647765381, 51.543344003052695 ], [ 5.263324630604449, 51.544188781374856 ], [ 5.261020033375308, 51.540504758556111 ], [ 5.253305462372202, 51.540212986255213 ], [ 5.249858349076308, 51.531996273461061 ], [ 5.244092477830973, 51.525759019963303 ], [ 5.234818981988302, 51.531128053682984 ], [ 5.230997082863064, 51.520927903517723 ], [ 5.224454987017337, 51.517237411508134 ], [ 5.226416865209114, 51.507611402446834 ], [ 5.232194406785752, 51.50903519502431 ], [ 5.236033449829924, 51.513854583310497 ], [ 5.251082368900174, 51.509625106622465 ], [ 5.251092528213501, 51.5062267459341 ], [ 5.248008693358506, 51.50622311522055 ], [ 5.247260364547207, 51.498859078082731 ], [ 5.228374947537808, 51.498834943395536 ], [ 5.229947908269397, 51.489774730967312 ], [ 5.2253268520145, 51.488918827026289 ], [ 5.220376653992846, 51.472769555268059 ], [ 5.210003909319168, 51.465674315411114 ], [ 5.190899626804407, 51.430243867666022 ], [ 5.195515275473038, 51.430817936699881 ], [ 5.205122729614214, 51.434231708840045 ], [ 5.209347462069485, 51.436503815450592 ], [ 5.210126035123319, 51.434239404162376 ], [ 5.215899082330221, 51.434248016718826 ], [ 5.217452261621872, 51.430568693722861 ], [ 5.223234005694855, 51.428028162200917 ], [ 5.223628975746966, 51.425196722249716 ], [ 5.229399901560846, 51.425487864145197 ], [ 5.237855224127197, 51.428614177850321 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0794\", \"naam\": \"Helmond\", \"code\": \"0794\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.721609783984202, 51.485153015425148 ], [ 5.718168904851874, 51.488844423716699 ], [ 5.71240316095582, 51.490843032723099 ], [ 5.712431516081668, 51.494807748463423 ], [ 5.707822947977093, 51.497086097374378 ], [ 5.705127142231928, 51.497376672083142 ], [ 5.707451513041668, 51.49906951348477 ], [ 5.708242340052566, 51.501899334916494 ], [ 5.698619946300089, 51.503907802171824 ], [ 5.68399664178392, 51.507627492991944 ], [ 5.682819916927672, 51.504515290139231 ], [ 5.672803246872064, 51.505389828978593 ], [ 5.670097911025851, 51.504263622313132 ], [ 5.675074811052322, 51.498870670680681 ], [ 5.663916759273587, 51.502012850819582 ], [ 5.661234037571789, 51.504567970796167 ], [ 5.656239784441115, 51.507411578384755 ], [ 5.653136004409657, 51.504020307390604 ], [ 5.650436156455564, 51.503743229747762 ], [ 5.644641483797334, 51.501490567094457 ], [ 5.6411551464654, 51.498383020301475 ], [ 5.634970050415665, 51.49499793261122 ], [ 5.627652279215174, 51.495862838520303 ], [ 5.626508036117785, 51.498130780140031 ], [ 5.618417325968788, 51.498713490237691 ], [ 5.614957112642064, 51.500419486709738 ], [ 5.61073828900438, 51.504675621308543 ], [ 5.611910085852553, 51.507788552368126 ], [ 5.6096040689465, 51.509208961425962 ], [ 5.579875849612995, 51.498783503042688 ], [ 5.576794888548383, 51.499354947080114 ], [ 5.570232476508282, 51.496816643644166 ], [ 5.585957049892586, 51.479232606303114 ], [ 5.596339253771313, 51.474966470336966 ], [ 5.603647525697657, 51.472687545305021 ], [ 5.605180159218915, 51.470985497140134 ], [ 5.594764799300816, 51.467606111794247 ], [ 5.582816581663581, 51.465644374276941 ], [ 5.587813343179158, 51.463370293257462 ], [ 5.584720124279505, 51.460543583984006 ], [ 5.590483845690232, 51.457701687076579 ], [ 5.592796809498006, 51.458264029853119 ], [ 5.59702476839996, 51.456557303239101 ], [ 5.600855401820044, 51.452302358169277 ], [ 5.603558630325157, 51.453996569012787 ], [ 5.608938094341369, 51.451720868050415 ], [ 5.608158437821526, 51.44973995252009 ], [ 5.614704848615331, 51.450010561873327 ], [ 5.614699187168644, 51.448877775091802 ], [ 5.620864878713502, 51.449998379492868 ], [ 5.643229995739542, 51.456181807381242 ], [ 5.656323479853473, 51.456435525395321 ], [ 5.668646992464321, 51.456689635169724 ], [ 5.672119596899964, 51.457814002384353 ], [ 5.693944319037239, 51.439350626251269 ], [ 5.698940392357899, 51.438204573576044 ], [ 5.707420136300371, 51.439880796617679 ], [ 5.718189487421516, 51.438717920711326 ], [ 5.718232713808815, 51.444665011847498 ], [ 5.730164147080808, 51.44434733010425 ], [ 5.721770126539957, 51.454566935866119 ], [ 5.718354229158154, 51.461373493777174 ], [ 5.71724823010637, 51.468173434026177 ], [ 5.723019251060417, 51.467307362424997 ], [ 5.723810489374496, 51.470137084231261 ], [ 5.734973895901983, 51.469254737440558 ], [ 5.736146753037253, 51.471516837911565 ], [ 5.730792715741327, 51.476630333602166 ], [ 5.722751048681403, 51.483167339554115 ], [ 5.721609783984202, 51.485153015425148 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0351\", \"naam\": \"Woudenberg\", \"code\": \"0351\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.49798993936922, 52.057057356630771 ], [ 5.495682334425407, 52.070935304732551 ], [ 5.496074740925467, 52.071784479790786 ], [ 5.49060927721342, 52.071506232469837 ], [ 5.483969184105134, 52.069529628771321 ], [ 5.4668060372954, 52.075772439761295 ], [ 5.465639380294914, 52.078321833458197 ], [ 5.459396174987384, 52.080308084185845 ], [ 5.459789356819308, 52.082006913899335 ], [ 5.464086070080784, 52.083136896892142 ], [ 5.475032394938809, 52.090208691442413 ], [ 5.485974035497052, 52.093598151898945 ], [ 5.48480924575729, 52.096714082947855 ], [ 5.485205403508351, 52.099262355231595 ], [ 5.484437811425509, 52.105492902630168 ], [ 5.493826651263963, 52.111148320579197 ], [ 5.491880523551229, 52.114265017880328 ], [ 5.486413039194792, 52.115402462406081 ], [ 5.47899335227205, 52.11739072306225 ], [ 5.476250807613568, 52.113711527875608 ], [ 5.475064731548164, 52.106632985519092 ], [ 5.472321009635187, 52.101820982985359 ], [ 5.467631185581346, 52.100408394392907 ], [ 5.457873973292274, 52.105228682581306 ], [ 5.443813240608137, 52.106935358843423 ], [ 5.442247139225065, 52.104104327916652 ], [ 5.437945414417961, 52.099858599748515 ], [ 5.432474002331846, 52.096745880248029 ], [ 5.421928832743557, 52.09674947395289 ], [ 5.420367640864093, 52.098165814909372 ], [ 5.414900836665539, 52.100149478278603 ], [ 5.409824733631331, 52.10326552274379 ], [ 5.404356398860636, 52.104115985621803 ], [ 5.400837003107966, 52.091939805776079 ], [ 5.401226714256019, 52.089391156480879 ], [ 5.379358699481688, 52.090241294828147 ], [ 5.366080863675815, 52.091655571956252 ], [ 5.340693713746288, 52.095046458686042 ], [ 5.334443297243764, 52.096459724555281 ], [ 5.326236931707663, 52.099853910496954 ], [ 5.322328173521736, 52.101834073244639 ], [ 5.298121304321316, 52.09643791732131 ], [ 5.309454392901864, 52.092481430395999 ], [ 5.327035594391468, 52.086828129310085 ], [ 5.33211490129993, 52.084282000738028 ], [ 5.348125444011825, 52.082022948176984 ], [ 5.380141500485953, 52.078631029156618 ], [ 5.384435957765759, 52.078348023625601 ], [ 5.388339871293364, 52.074949900273324 ], [ 5.398489532322153, 52.074949350952039 ], [ 5.403564676529627, 52.075798284757504 ], [ 5.405906711450701, 52.075231575350045 ], [ 5.407076691850611, 52.072682772325649 ], [ 5.405514582997353, 52.070983953886049 ], [ 5.399659049176607, 52.069285652505677 ], [ 5.398877805387036, 52.067020300614999 ], [ 5.401999277612678, 52.064188153132463 ], [ 5.412540325200141, 52.070416284438849 ], [ 5.422690987360783, 52.072962260608705 ], [ 5.425813084350016, 52.072111737523635 ], [ 5.433229964372286, 52.07239224183985 ], [ 5.435572673725951, 52.072957657909043 ], [ 5.438301907225338, 52.070124711705276 ], [ 5.43673146847711, 52.061913186000972 ], [ 5.435558238984707, 52.059648239182764 ], [ 5.430484595065317, 52.059083860859566 ], [ 5.428140595745511, 52.056252905982632 ], [ 5.429698190500366, 52.052854195015762 ], [ 5.4351552139029, 52.047754852742258 ], [ 5.441785072644034, 52.04576969632889 ], [ 5.44568550036006, 52.045201458012663 ], [ 5.44841356694572, 52.04321780600754 ], [ 5.453494885542063, 52.050011371570356 ], [ 5.461293264911124, 52.047174911756166 ], [ 5.460905471997359, 52.048591056234343 ], [ 5.466762131904702, 52.051135857419865 ], [ 5.477299972676764, 52.05282733219272 ], [ 5.483939745359113, 52.055937035144076 ], [ 5.491747162293852, 52.057346251930078 ], [ 5.49798993936922, 52.057057356630771 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0281\", \"naam\": \"Tiel\", \"code\": \"0281\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.415135454360514, 51.851797976140752 ], [ 5.417858766166546, 51.858027421357718 ], [ 5.420970734251577, 51.863407124960688 ], [ 5.426027582660569, 51.870202048712486 ], [ 5.433418167144909, 51.877279037660173 ], [ 5.440808369071934, 51.882090062495877 ], [ 5.448198611571647, 51.885767873521424 ], [ 5.453254582717214, 51.887464251666138 ], [ 5.463753059925167, 51.88887379722172 ], [ 5.463757407405527, 51.891422472699738 ], [ 5.461426617468805, 51.892556717384345 ], [ 5.455610356174193, 51.902754958850153 ], [ 5.455612947846712, 51.904454073079265 ], [ 5.458724970806075, 51.905018587446129 ], [ 5.472342198727096, 51.908124535206802 ], [ 5.471960232126076, 51.911806226817994 ], [ 5.470403892886159, 51.911524155544029 ], [ 5.467298858157211, 51.915207730414885 ], [ 5.46963796061076, 51.918037964644256 ], [ 5.469641083838649, 51.919737074960103 ], [ 5.461474901205871, 51.921724828137101 ], [ 5.454081461217355, 51.92059653705396 ], [ 5.453306742887356, 51.9228624585554 ], [ 5.446300866289924, 51.920600717950634 ], [ 5.443967763831958, 51.921451427064433 ], [ 5.434629971028527, 51.920606023489817 ], [ 5.431515489391462, 51.918341760966662 ], [ 5.426458355191031, 51.918343566066589 ], [ 5.421788698019288, 51.916362742012218 ], [ 5.420620448702734, 51.914663969013688 ], [ 5.417507660602338, 51.913248889840666 ], [ 5.411283588925422, 51.912117596668438 ], [ 5.409725618788946, 51.907870123212518 ], [ 5.404668773374212, 51.905605504710572 ], [ 5.401167425762377, 51.901641375703456 ], [ 5.399999930062114, 51.898526464257941 ], [ 5.39144525106326, 51.896261607793008 ], [ 5.370452765542718, 51.886065811598826 ], [ 5.359182717477823, 51.880966320352535 ], [ 5.353743193749252, 51.878133036565046 ], [ 5.344027982273404, 51.876713946288277 ], [ 5.34131088367959, 51.873314676277793 ], [ 5.338978250540595, 51.874163305901789 ], [ 5.336651237573118, 51.869914524402404 ], [ 5.329661283448345, 51.866229883160635 ], [ 5.328108898515205, 51.864813177726354 ], [ 5.328119278211011, 51.856883933001697 ], [ 5.338217892219062, 51.858587691923489 ], [ 5.338996088729586, 51.857455262609889 ], [ 5.344823615225136, 51.857174314889335 ], [ 5.349484450172847, 51.858308648441444 ], [ 5.359973720078145, 51.85831153482269 ], [ 5.364246409849188, 51.859728379503103 ], [ 5.369296735405507, 51.860295626155263 ], [ 5.378231825163228, 51.863411697648758 ], [ 5.379786286776509, 51.861429492292096 ], [ 5.391052715710321, 51.854633146786092 ], [ 5.395325460704181, 51.852933796820672 ], [ 5.39959883116453, 51.85463254351945 ], [ 5.403094767210704, 51.85406574211968 ], [ 5.408144813457087, 51.854348130528344 ], [ 5.415135454360514, 51.851797976140752 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0339\", \"naam\": \"Renswoude\", \"code\": \"0339\", \"ligtInProvincieCode\": \"26\", \"ligtInProvincieNaam\": \"Utrecht\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.558051555187211, 52.048773231824931 ], [ 5.5576678893903, 52.050472871261974 ], [ 5.559653616519526, 52.059531745798068 ], [ 5.560859520548136, 52.068591728154836 ], [ 5.559308075079125, 52.071142623619622 ], [ 5.561268582349427, 52.073405176434584 ], [ 5.562848928663217, 52.078216877720656 ], [ 5.560520815317221, 52.081901657793445 ], [ 5.560921155059633, 52.084449678797554 ], [ 5.555071806315391, 52.086440417759718 ], [ 5.554700447370032, 52.091538163570128 ], [ 5.555873061791091, 52.091819667972203 ], [ 5.554324765719781, 52.095503196536725 ], [ 5.550422373020489, 52.096358206457751 ], [ 5.554341721892384, 52.10003402542921 ], [ 5.550455498964174, 52.105419861104643 ], [ 5.545373211869387, 52.104294086123851 ], [ 5.546147408504344, 52.102310797520516 ], [ 5.543412152423548, 52.102031280227081 ], [ 5.541464988020318, 52.103732915548377 ], [ 5.531694857293188, 52.102329421782379 ], [ 5.532859295512572, 52.100062562655317 ], [ 5.539101025256423, 52.097789249395994 ], [ 5.538705651548344, 52.09637386762973 ], [ 5.535179372759995, 52.092980212929753 ], [ 5.53830263791001, 52.092693066886426 ], [ 5.537117753954911, 52.088730082427887 ], [ 5.530873543633632, 52.089870583977152 ], [ 5.526562128597165, 52.084778552387256 ], [ 5.531634399005112, 52.083639721880722 ], [ 5.531240300195865, 52.082507489481351 ], [ 5.526940182608477, 52.080813600462058 ], [ 5.522635239702578, 52.077420485783165 ], [ 5.519517133676926, 52.079123107209256 ], [ 5.509756952032646, 52.079133677538451 ], [ 5.509360349095642, 52.076868658268175 ], [ 5.505066084943612, 52.076873038550865 ], [ 5.504666761117589, 52.073475289103229 ], [ 5.501934254600085, 52.073477985740197 ], [ 5.499976744655979, 52.071214445195089 ], [ 5.496074740925467, 52.071784479790786 ], [ 5.495682334425407, 52.070935304732551 ], [ 5.49798993936922, 52.057057356630771 ], [ 5.513982318907672, 52.054775765710303 ], [ 5.515541472191692, 52.054207714767514 ], [ 5.516303042624095, 52.047693736876077 ], [ 5.526037024351758, 52.041452678214185 ], [ 5.529154057576702, 52.040316234620263 ], [ 5.531492642151105, 52.039747027330442 ], [ 5.53539890755782, 52.041441254682901 ], [ 5.538908651841865, 52.041153599465162 ], [ 5.540863894866829, 52.042566964994215 ], [ 5.544788720340486, 52.049358105915502 ], [ 5.558051555187211, 52.048773231824931 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0984\", \"naam\": \"Venray\", \"code\": \"0984\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.141009543762443, 51.519448216004172 ], [ 6.129558198175863, 51.52660175800608 ], [ 6.122286252123467, 51.530046239786408 ], [ 6.119614043854625, 51.531762268951127 ], [ 6.115848161209878, 51.537449956085993 ], [ 6.114019243394782, 51.54369189214718 ], [ 6.109829805618275, 51.547116358106884 ], [ 6.105603895728128, 51.548275246557118 ], [ 6.099812259329204, 51.548027513078317 ], [ 6.085519810429892, 51.5469810007719 ], [ 6.078965468992886, 51.547303202634964 ], [ 6.075891902923432, 51.548170978563221 ], [ 6.066700161954745, 51.552756084225059 ], [ 6.062116223805907, 51.555897907805132 ], [ 6.056353059473658, 51.557630285057243 ], [ 6.048261620755668, 51.55852595928873 ], [ 6.040129131007597, 51.556589259907348 ], [ 6.03744819797008, 51.558020231946912 ], [ 6.032801289776004, 51.556913185505984 ], [ 6.033552912574516, 51.555493009666293 ], [ 6.031579308694861, 51.552388667137286 ], [ 6.018224012996993, 51.563223305123159 ], [ 6.004426233862629, 51.570377082769866 ], [ 5.993568839852317, 51.566752288563336 ], [ 5.9765196465118, 51.561741871134252 ], [ 5.935511131364514, 51.553728658828966 ], [ 5.90655141598485, 51.552161781959917 ], [ 5.891591049087617, 51.560156962056872 ], [ 5.870775138883719, 51.562510577609274 ], [ 5.838392089776445, 51.566321719253821 ], [ 5.852423719358964, 51.504245723029037 ], [ 5.860776846211756, 51.492034460483893 ], [ 5.871505728612339, 51.45007647527725 ], [ 5.874934274069863, 51.446663753945025 ], [ 5.928200411545917, 51.458323403750612 ], [ 5.952911090897733, 51.463587068382601 ], [ 5.978804990370084, 51.47053875181264 ], [ 5.994275632531973, 51.475273767369764 ], [ 6.00701037382311, 51.476906050197215 ], [ 6.013173787584819, 51.476873150436468 ], [ 6.022454469252102, 51.479371845473992 ], [ 6.030167136869553, 51.479896016863641 ], [ 6.035604850307207, 51.482981192298276 ], [ 6.03601030576475, 51.484394966926111 ], [ 6.039891496094521, 51.486355765217489 ], [ 6.040690554997476, 51.488333733346792 ], [ 6.043773020715424, 51.488316433617321 ], [ 6.050352149439219, 51.490261678195616 ], [ 6.059189491620185, 51.488511896212074 ], [ 6.061865651992125, 51.487080426613716 ], [ 6.068051580824062, 51.48846053585838 ], [ 6.073933795236611, 51.495223027038726 ], [ 6.069813791793805, 51.50317696501525 ], [ 6.066416811850397, 51.508011279187684 ], [ 6.064607590008126, 51.515951551478757 ], [ 6.066649589744749, 51.523586238908024 ], [ 6.076692504584824, 51.52466019713377 ], [ 6.079751520590226, 51.522942860661978 ], [ 6.087086619861265, 51.52346554107546 ], [ 6.09363306277144, 51.522859710073327 ], [ 6.095543394527322, 51.521715312742742 ], [ 6.102887391396351, 51.522803359892002 ], [ 6.107492104180116, 51.521359015112701 ], [ 6.106671623373849, 51.518248799885214 ], [ 6.114709398063469, 51.514517308113717 ], [ 6.121965711927451, 51.510223762427131 ], [ 6.127046186305083, 51.514439789706273 ], [ 6.132016233062878, 51.511859324681012 ], [ 6.141009543762443, 51.519448216004172 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0503\", \"naam\": \"Delft\", \"code\": \"0503\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.379901516999054, 52.026748896333004 ], [ 4.373528541841694, 52.032641397643083 ], [ 4.359626675022693, 52.026573681564187 ], [ 4.357670673771493, 52.026839793817111 ], [ 4.326027631820616, 52.012681919388029 ], [ 4.32528833516222, 52.010976036175862 ], [ 4.320651648124665, 52.009234894943802 ], [ 4.320288862782647, 52.008098795123452 ], [ 4.323104386587374, 52.004442645973953 ], [ 4.332767058893336, 52.007928045572243 ], [ 4.336347686843721, 52.00484484330736 ], [ 4.338276350334346, 52.005711655582807 ], [ 4.341077044549561, 52.002621357831515 ], [ 4.335654614287989, 52.001157019388017 ], [ 4.337656020455977, 51.998909264720872 ], [ 4.331448198438612, 51.997720923679786 ], [ 4.333113282576937, 51.993204602650167 ], [ 4.325737585994026, 51.992005485719829 ], [ 4.324232897734652, 51.989726274204109 ], [ 4.328618476551413, 51.985517759882732 ], [ 4.331761441190605, 51.984413182471215 ], [ 4.332633696856955, 51.980456154663862 ], [ 4.338232295475291, 51.974275729663461 ], [ 4.356471115110643, 51.977268983054159 ], [ 4.359359576322127, 51.970214184440096 ], [ 4.368283859356933, 51.971707840100756 ], [ 4.369126947027218, 51.968883113874291 ], [ 4.386191073604715, 51.972144790808123 ], [ 4.383772188100569, 51.975805806773302 ], [ 4.393860560020888, 51.977590633832335 ], [ 4.397830258031177, 51.974225670249034 ], [ 4.399073428947196, 51.97083770254585 ], [ 4.403066973312632, 51.966339959228421 ], [ 4.408091851978537, 51.968081102268179 ], [ 4.403307368733781, 51.973138802733423 ], [ 4.401248181751484, 51.978219183071189 ], [ 4.396945125971236, 51.979032644830625 ], [ 4.385853767690719, 52.004710062937079 ], [ 4.388562826383252, 52.005582682339025 ], [ 4.388474508635692, 52.009546738007153 ], [ 4.394672957133228, 52.011298370393114 ], [ 4.38781327482624, 52.021718727642273 ], [ 4.38542347381139, 52.023964014400256 ], [ 4.379901516999054, 52.026748896333004 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1740\", \"naam\": \"Neder-Betuwe\", \"code\": \"1740\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.531415458922984, 51.894757042853058 ], [ 5.544260882019482, 51.898988352802085 ], [ 5.553988231640182, 51.900674052023888 ], [ 5.565269546710159, 51.901790226184268 ], [ 5.57343572282486, 51.901777554590048 ], [ 5.595200365109728, 51.89919232860229 ], [ 5.605310268795337, 51.899173981032753 ], [ 5.628253455715774, 51.899412303198289 ], [ 5.644967226959445, 51.898244049895936 ], [ 5.662839645194614, 51.895937952824724 ], [ 5.672556366223495, 51.895348364387388 ], [ 5.685000074682171, 51.895600650497947 ], [ 5.6978268593047, 51.895001042081169 ], [ 5.706757261588756, 51.893277948675824 ], [ 5.711058420518556, 51.896664421791336 ], [ 5.709511272520198, 51.897801430877216 ], [ 5.706789478174927, 51.897808870187696 ], [ 5.707980217105405, 51.901203878674615 ], [ 5.705278261160363, 51.90404310631736 ], [ 5.706084160789755, 51.908005548205907 ], [ 5.700676875961916, 51.913400667009448 ], [ 5.692154292149641, 51.918520472989051 ], [ 5.696059944930703, 51.920775764411012 ], [ 5.692947729220116, 51.920783906409234 ], [ 5.681260220982975, 51.918265064764789 ], [ 5.677386631532545, 51.92082338019793 ], [ 5.675846901216793, 51.92337585451569 ], [ 5.677797648499665, 51.924220604806727 ], [ 5.675865105026318, 51.926207675988827 ], [ 5.678607004162776, 51.929032771646391 ], [ 5.684449109623083, 51.92986769437988 ], [ 5.689524646808461, 51.93240342127045 ], [ 5.696132021630563, 51.931253486451091 ], [ 5.693042229092125, 51.934659808611556 ], [ 5.688765413078013, 51.935237236707046 ], [ 5.670444855844692, 51.930468666795868 ], [ 5.660322781011351, 51.929643077165899 ], [ 5.659589243262667, 51.937007619491773 ], [ 5.667774168107045, 51.938970660201122 ], [ 5.665844063614455, 51.941523926744487 ], [ 5.663114388190041, 51.940680810948905 ], [ 5.661185674134201, 51.943517182336791 ], [ 5.654167831582192, 51.941551037235222 ], [ 5.653008593504057, 51.942969594070391 ], [ 5.647155523569277, 51.940434018620223 ], [ 5.647569365037141, 51.9446808868719 ], [ 5.651870994569733, 51.948069502371574 ], [ 5.654976660957292, 51.946646538431693 ], [ 5.665914409330522, 51.952851185713769 ], [ 5.659685516421136, 51.952865793736969 ], [ 5.653852657430001, 51.954011914914211 ], [ 5.648791547388639, 51.954023290007264 ], [ 5.644110020950032, 51.952334506874919 ], [ 5.646046726674369, 51.950631145096587 ], [ 5.649546996690608, 51.950057011882407 ], [ 5.64524535172756, 51.946668312302471 ], [ 5.645233952934444, 51.944686038850598 ], [ 5.640140371876304, 51.938750216807748 ], [ 5.637406610864687, 51.93705695636028 ], [ 5.63429013663456, 51.936497180941515 ], [ 5.628843353842402, 51.936791696553421 ], [ 5.619137579271976, 51.941342228301842 ], [ 5.610190035013171, 51.942209108334723 ], [ 5.605912812675376, 51.943066704911722 ], [ 5.591153249735438, 51.94988969615595 ], [ 5.586485642207725, 51.95074726074575 ], [ 5.584524247952358, 51.947352353200678 ], [ 5.579066131028838, 51.945379099839315 ], [ 5.575551056195495, 51.942552938550378 ], [ 5.571654214644482, 51.941426382230986 ], [ 5.566206421270187, 51.941717995878598 ], [ 5.560766225669826, 51.943991640225285 ], [ 5.547526287952227, 51.942311349872092 ], [ 5.540135994408879, 51.943737129936451 ], [ 5.533517248132576, 51.9431791930364 ], [ 5.538559011279778, 51.937792290527391 ], [ 5.54827625235924, 51.934381142992251 ], [ 5.554113471967144, 51.934372991542027 ], [ 5.554071350225128, 51.923045634013818 ], [ 5.556779721341836, 51.919077153279844 ], [ 5.551717331556576, 51.917668426855286 ], [ 5.54784148494255, 51.921638394471977 ], [ 5.523721128295088, 51.921668920973737 ], [ 5.512049187286864, 51.921398730090466 ], [ 5.505442288163053, 51.923954240602676 ], [ 5.500770003693568, 51.922542927822391 ], [ 5.498047380092489, 51.922828716292997 ], [ 5.493368743589801, 51.918585260705385 ], [ 5.486367153061535, 51.91887457240275 ], [ 5.486761195117079, 51.921139722176498 ], [ 5.489095399866331, 51.921137718410471 ], [ 5.487932112679221, 51.922837834989053 ], [ 5.49182524240893, 51.923967169762562 ], [ 5.482875685295605, 51.923408437490352 ], [ 5.476645740475621, 51.920864684525498 ], [ 5.465368750855976, 51.923704594287152 ], [ 5.460311477285132, 51.923991041147545 ], [ 5.458364383765021, 51.922859498039692 ], [ 5.453306742887356, 51.9228624585554 ], [ 5.454081461217355, 51.92059653705396 ], [ 5.461474901205871, 51.921724828137101 ], [ 5.469641083838649, 51.919737074960103 ], [ 5.46963796061076, 51.918037964644256 ], [ 5.467298858157211, 51.915207730414885 ], [ 5.470403892886159, 51.911524155544029 ], [ 5.471960232126076, 51.911806226817994 ], [ 5.472342198727096, 51.908124535206802 ], [ 5.458724970806075, 51.905018587446129 ], [ 5.455612947846712, 51.904454073079265 ], [ 5.455610356174193, 51.902754958850153 ], [ 5.461426617468805, 51.892556717384345 ], [ 5.463757407405527, 51.891422472699738 ], [ 5.463753059925167, 51.88887379722172 ], [ 5.472306747188283, 51.889434272751508 ], [ 5.501074251679257, 51.889126681941079 ], [ 5.507684639882203, 51.889686452081875 ], [ 5.518186160820209, 51.891374317254687 ], [ 5.531415458922984, 51.894757042853058 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0072\", \"naam\": \"Harlingen\", \"code\": \"0072\", \"ligtInProvincieCode\": \"21\", \"ligtInProvincieNaam\": \"Fryslân\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.472369887311998, 53.146629655275355 ], [ 5.472774358497263, 53.148894217932209 ], [ 5.476779157316598, 53.151156136621772 ], [ 5.480392862656128, 53.15738170565735 ], [ 5.481994460311298, 53.157946659008097 ], [ 5.486811894455627, 53.165020377265783 ], [ 5.48481301367575, 53.165871338307824 ], [ 5.486021928344933, 53.169550706838336 ], [ 5.488423800131876, 53.169831804746025 ], [ 5.489629778352265, 53.172095613982265 ], [ 5.493634118871734, 53.172941434309344 ], [ 5.496449340916744, 53.178317874240399 ], [ 5.480433150899053, 53.176066585142514 ], [ 5.479233571254444, 53.176633720922545 ], [ 5.483652303573504, 53.183707830123623 ], [ 5.482455674974353, 53.185690509476601 ], [ 5.487678667393179, 53.193613114915834 ], [ 5.490082559811626, 53.194177278759923 ], [ 5.489697579463503, 53.200688953046473 ], [ 5.485290265609182, 53.199843338096372 ], [ 5.466867054872141, 53.199290806839052 ], [ 5.458057958873648, 53.200145649299465 ], [ 5.456060051812361, 53.202977829536316 ], [ 5.436843668369317, 53.210064867668173 ], [ 5.437245231018969, 53.210914002006902 ], [ 5.432042639224083, 53.21572877062237 ], [ 5.387172153546433, 53.215737208033872 ], [ 5.147397503800093, 53.251451576361013 ], [ 5.132880186485607, 53.197349541009473 ], [ 5.163378228524081, 53.107665423194469 ], [ 5.095578577338109, 53.087135559264134 ], [ 5.144252644901232, 53.026091193633945 ], [ 5.164325607923404, 53.000932657625889 ], [ 5.292545216311448, 53.068201299391028 ], [ 5.301722805986381, 53.071039325065939 ], [ 5.324876572047603, 53.074734054964821 ], [ 5.323671978709352, 53.079263225651246 ], [ 5.332856414401011, 53.080117071121116 ], [ 5.335256392163616, 53.077003895874924 ], [ 5.337253784490606, 53.076438517802011 ], [ 5.34404122137997, 53.077856710605154 ], [ 5.348432632623032, 53.079556881716023 ], [ 5.372390189075144, 53.093717795463327 ], [ 5.372385408920144, 53.107873318344915 ], [ 5.401964378844426, 53.125709155200077 ], [ 5.406774188037419, 53.152603629176411 ], [ 5.417174186814464, 53.150902830653699 ], [ 5.421576770022086, 53.153732701921527 ], [ 5.423976863415062, 53.153448880731837 ], [ 5.434778298059058, 53.153445066287709 ], [ 5.435177721999855, 53.152878694934486 ], [ 5.4427764453631, 53.151176767401331 ], [ 5.450775420763811, 53.150040357296383 ], [ 5.452772521964882, 53.148057535268237 ], [ 5.463171112461811, 53.147202063199998 ], [ 5.461566748921529, 53.144655112534082 ], [ 5.468363611862758, 53.143235160338662 ], [ 5.472369887311998, 53.146629655275355 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1926\", \"naam\": \"Pijnacker-Nootdorp\", \"code\": \"1926\", \"ligtInProvincieCode\": \"28\", \"ligtInProvincieNaam\": \"Zuid-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.408091851978537, 51.968081102268179 ], [ 4.427775544666521, 51.976456111329199 ], [ 4.424209542984869, 51.97925897738449 ], [ 4.447306399894051, 51.992472927145819 ], [ 4.453050298549748, 51.997333041277805 ], [ 4.449867961352558, 52.000422920366688 ], [ 4.458795441071786, 52.002192874517746 ], [ 4.458742665734135, 52.004741240214784 ], [ 4.455199881692782, 52.006412427160193 ], [ 4.456327920781856, 52.008403739711 ], [ 4.461696732727021, 52.012694041994791 ], [ 4.458508025007259, 52.01606729792806 ], [ 4.457209301224228, 52.02228738761611 ], [ 4.466123962872356, 52.024906243989236 ], [ 4.468422684892842, 52.026906582687936 ], [ 4.476518760097391, 52.031500624694253 ], [ 4.470874070547736, 52.040519110247573 ], [ 4.457648319316024, 52.038716275577762 ], [ 4.456460623883168, 52.039556483915945 ], [ 4.450408925828625, 52.049137180521917 ], [ 4.422260563906613, 52.051741896869082 ], [ 4.405064099486715, 52.053015744367556 ], [ 4.401540429596499, 52.05355270503096 ], [ 4.398469357866494, 52.051261380087062 ], [ 4.394505396560509, 52.054060018810603 ], [ 4.389521905404353, 52.050053133595924 ], [ 4.387936200457131, 52.05117248466474 ], [ 4.372562627662074, 52.040845870295939 ], [ 4.37969774472559, 52.035809543071764 ], [ 4.386270487594048, 52.038414391059781 ], [ 4.387830507083159, 52.03842764114534 ], [ 4.39379992068402, 52.033097371042437 ], [ 4.379901516999054, 52.026748896333004 ], [ 4.38542347381139, 52.023964014400256 ], [ 4.38781327482624, 52.021718727642273 ], [ 4.394672957133228, 52.011298370393114 ], [ 4.388474508635692, 52.009546738007153 ], [ 4.388562826383252, 52.005582682339025 ], [ 4.385853767690719, 52.004710062937079 ], [ 4.396945125971236, 51.979032644830625 ], [ 4.401248181751484, 51.978219183071189 ], [ 4.403307368733781, 51.973138802733423 ], [ 4.408091851978537, 51.968081102268179 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0388\", \"naam\": \"Enkhuizen\", \"code\": \"0388\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.361054463593603, 52.675818524820642 ], [ 5.377258283528383, 52.764727245034052 ], [ 5.337969884938691, 52.795862574092908 ], [ 5.281121866203581, 52.840560778470447 ], [ 5.21137853663146, 52.800273396416692 ], [ 5.274204741503255, 52.750517278240096 ], [ 5.271837672488385, 52.746267923310974 ], [ 5.270255357446606, 52.745133824265707 ], [ 5.259951795325263, 52.744840134261068 ], [ 5.254396468872232, 52.747099191943697 ], [ 5.255208725742365, 52.74058788171449 ], [ 5.256847635402115, 52.722468689705977 ], [ 5.257658234951435, 52.716240462050571 ], [ 5.259719022973885, 52.688494705703569 ], [ 5.259329796779257, 52.686229138851523 ], [ 5.268844777210808, 52.680292949387201 ], [ 5.276354519433048, 52.68398104598748 ], [ 5.285049648246079, 52.689085404029001 ], [ 5.286633563106438, 52.688803607809035 ], [ 5.287814610698697, 52.69163603251647 ], [ 5.295729056054387, 52.692774942550216 ], [ 5.301667360941146, 52.692496208466586 ], [ 5.353138321961531, 52.678647973446942 ], [ 5.361054463593603, 52.675818524820642 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1728\", \"naam\": \"Bladel\", \"code\": \"1728\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.263549587445499, 51.319329007330516 ], [ 5.286162380812406, 51.336342826486728 ], [ 5.275344721017684, 51.362670586267058 ], [ 5.279926037159496, 51.375418889108317 ], [ 5.286055985458756, 51.384486756736834 ], [ 5.290281345452859, 51.386189539215145 ], [ 5.289121872759239, 51.389020568210178 ], [ 5.298733011562855, 51.389594644390549 ], [ 5.302575857496967, 51.390730290600636 ], [ 5.311034943266207, 51.39073611260244 ], [ 5.310256881123952, 51.396116394385231 ], [ 5.313712363028247, 51.399517012710774 ], [ 5.307162637125205, 51.406309495517213 ], [ 5.302929561195029, 51.407439316368944 ], [ 5.296005392201285, 51.407717315617163 ], [ 5.290627518653976, 51.404314600039889 ], [ 5.283318485175768, 51.404874726323079 ], [ 5.281781300679801, 51.404306949845385 ], [ 5.278694938492592, 51.408268915299658 ], [ 5.27292233271127, 51.409396206579622 ], [ 5.248648318406442, 51.422680298062772 ], [ 5.249417008944436, 51.422964406953476 ], [ 5.244789103965867, 51.426357246060554 ], [ 5.243252569123965, 51.425505764101906 ], [ 5.237855224127197, 51.428614177850321 ], [ 5.229399901560846, 51.425487864145197 ], [ 5.223628975746966, 51.425196722249716 ], [ 5.223234005694855, 51.428028162200917 ], [ 5.217452261621872, 51.430568693722861 ], [ 5.215899082330221, 51.434248016718826 ], [ 5.210126035123319, 51.434239404162376 ], [ 5.209347462069485, 51.436503815450592 ], [ 5.205122729614214, 51.434231708840045 ], [ 5.195515275473038, 51.430817936699881 ], [ 5.190899626804407, 51.430243867666022 ], [ 5.190899626804407, 51.430243867666022 ], [ 5.190950796400498, 51.418349568342144 ], [ 5.194875727238516, 51.399948109677915 ], [ 5.201069416729305, 51.390046151412925 ], [ 5.197249184483052, 51.38409278990671 ], [ 5.199178411569515, 51.382396713618881 ], [ 5.196111246263193, 51.380409327706609 ], [ 5.196883616742305, 51.379560989385006 ], [ 5.188435260901283, 51.377564497060987 ], [ 5.188064448159195, 51.374448659696206 ], [ 5.185752014031617, 51.375860691169748 ], [ 5.184603906424892, 51.374725900711773 ], [ 5.190380398959812, 51.372186986898008 ], [ 5.191949246782047, 51.364826409956102 ], [ 5.197338639031985, 51.362569703682318 ], [ 5.196189393590415, 51.361718225278544 ], [ 5.191962554547976, 51.361711225577935 ], [ 5.192393884850815, 51.350667119470906 ], [ 5.196239085223376, 51.34982387801977 ], [ 5.193953287632156, 51.345288899041911 ], [ 5.204787720049386, 51.325482289895739 ], [ 5.200191851022213, 51.32264299613923 ], [ 5.240942763534624, 51.305709192333673 ], [ 5.24247702170819, 51.305994308548847 ], [ 5.24400155747092, 51.309394603785535 ], [ 5.259348799794952, 51.311394852980122 ], [ 5.259341683196024, 51.31394365312898 ], [ 5.260868519031168, 51.317060526834595 ], [ 5.263549587445499, 51.319329007330516 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM1680\", \"naam\": \"Aa en Hunze\", \"code\": \"1680\", \"ligtInProvincieCode\": \"22\", \"ligtInProvincieNaam\": \"Drenthe\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.736454385961868, 52.87856282584643 ], [ 6.73210352332475, 52.892203781872674 ], [ 6.728182468293608, 52.906972323655658 ], [ 6.726861082340296, 52.915765148028953 ], [ 6.726421834054968, 52.927379638039326 ], [ 6.724338300430808, 52.937313555215177 ], [ 6.731510660295354, 52.93751619609548 ], [ 6.727663838713864, 52.954832080564202 ], [ 6.788860411559014, 52.962907699605466 ], [ 6.799314654468989, 52.965899362691168 ], [ 6.83755146970237, 52.977617305692931 ], [ 6.841970955157157, 52.978696234889995 ], [ 6.935743942698408, 52.993375253395428 ], [ 6.861208175664277, 53.040755742480911 ], [ 6.813915380741008, 53.071060224078387 ], [ 6.776335037478383, 53.094720512140086 ], [ 6.748916917058456, 53.086824192848354 ], [ 6.74525193124098, 53.084600642797767 ], [ 6.749218548854487, 53.083706138244693 ], [ 6.74955567486155, 53.081720267492734 ], [ 6.745926529471026, 53.080628921415375 ], [ 6.733780937100303, 53.075386356585014 ], [ 6.727323123442932, 53.073193650265686 ], [ 6.72614290799296, 53.073773152894184 ], [ 6.713611074211206, 53.068816032315716 ], [ 6.711250480345437, 53.069974757544173 ], [ 6.69912913690131, 53.065294741737077 ], [ 6.692496624228474, 53.070463893392045 ], [ 6.6877570401428, 53.072214360644232 ], [ 6.675557544179418, 53.078292331201723 ], [ 6.670816419634702, 53.080042128397075 ], [ 6.661690790565609, 53.08212163531423 ], [ 6.657755635313165, 53.084145466140029 ], [ 6.648912659701031, 53.082256988843369 ], [ 6.649637200361879, 53.079701064217453 ], [ 6.653646656866771, 53.080225000926177 ], [ 6.663371126597147, 53.071344263921027 ], [ 6.666173973348481, 53.071597491916457 ], [ 6.664510484237135, 53.069350098723689 ], [ 6.670423149070829, 53.066738548262784 ], [ 6.669923642342138, 53.063346159179744 ], [ 6.665499753882304, 53.06226091196352 ], [ 6.664235772895018, 53.060009243440241 ], [ 6.66697950965522, 53.058281059167477 ], [ 6.660918365195708, 53.055797416007266 ], [ 6.654125850266364, 53.055586378548014 ], [ 6.651249974705564, 53.052785339009112 ], [ 6.646786590514366, 53.050284098561775 ], [ 6.645515733558857, 53.047749160859389 ], [ 6.64226648535206, 53.045801269997284 ], [ 6.64217655736394, 53.042687610352978 ], [ 6.640556243356804, 53.041855158734549 ], [ 6.644472014220956, 53.039265756042418 ], [ 6.648482303726722, 53.02619877988711 ], [ 6.631325582700858, 53.026095326856812 ], [ 6.63004825347952, 53.023277138789339 ], [ 6.632807267092041, 53.02211584752262 ], [ 6.629829841828996, 53.015634433101113 ], [ 6.620945811908676, 53.011762357245182 ], [ 6.622093616201464, 53.010051623654711 ], [ 6.616057751914378, 53.008131774642848 ], [ 6.613179505785122, 53.005046698071119 ], [ 6.612262716642204, 53.000808878435571 ], [ 6.607727521382997, 52.995475452562353 ], [ 6.608014875756099, 52.991508441253053 ], [ 6.607497336692489, 52.987266495467956 ], [ 6.603378366584673, 52.982494945543237 ], [ 6.599362750895645, 52.981403143761042 ], [ 6.596511053298065, 52.97916684083954 ], [ 6.595221669515567, 52.975782091655745 ], [ 6.59593193040186, 52.972660266533566 ], [ 6.581444882901636, 52.967426091686256 ], [ 6.570031828149009, 52.957912544039544 ], [ 6.567496993183201, 52.952557770303535 ], [ 6.565445062120031, 52.950312827398783 ], [ 6.563025795291839, 52.949204065649546 ], [ 6.561364715165845, 52.946672055079006 ], [ 6.564901589083266, 52.944938333900744 ], [ 6.575294494959794, 52.931810446903903 ], [ 6.585704504228723, 52.919530851077063 ], [ 6.614722371004332, 52.91838657396498 ], [ 6.625310859637878, 52.912897284836397 ], [ 6.641594948841986, 52.91187782138995 ], [ 6.666587178866196, 52.909347332076955 ], [ 6.674814239414536, 52.905011496480228 ], [ 6.680740975904337, 52.890223115270118 ], [ 6.68626631872813, 52.875438719551298 ], [ 6.714665343143619, 52.86804703425183 ], [ 6.736454385961868, 52.87856282584643 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0457\", \"naam\": \"Weesp\", \"code\": \"0457\", \"ligtInProvincieCode\": \"27\", \"ligtInProvincieNaam\": \"Noord-Holland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.102061454090977, 52.279907445402294 ], [ 5.102050564397283, 52.281606440495523 ], [ 5.104394648786044, 52.283027919753735 ], [ 5.104772459904555, 52.285294182700916 ], [ 5.098460285878283, 52.290942338234096 ], [ 5.099231977531924, 52.292926407116362 ], [ 5.103143932090263, 52.294634883317102 ], [ 5.105890002825827, 52.294641445821583 ], [ 5.107837251551833, 52.296911415502414 ], [ 5.106259042618444, 52.298323524215789 ], [ 5.101947064523055, 52.297746866453828 ], [ 5.096828372906669, 52.300566105335136 ], [ 5.095630902582759, 52.303678020536189 ], [ 5.096395278503159, 52.306794760536945 ], [ 5.100689811149008, 52.310203263386761 ], [ 5.092037482544336, 52.31301368139809 ], [ 5.093207363541198, 52.314149268177331 ], [ 5.077481039710261, 52.318073507844694 ], [ 5.069604693430932, 52.321733819313962 ], [ 5.064499694944932, 52.322003176048099 ], [ 5.065305282245213, 52.319173685419628 ], [ 5.059039741771993, 52.317174293821772 ], [ 5.056665824617241, 52.31971620434372 ], [ 5.060580577283284, 52.32114291786997 ], [ 5.061346944463501, 52.32369354660544 ], [ 5.049544593416064, 52.327058478828512 ], [ 5.046013544069466, 52.32676518257 ], [ 5.04089458180559, 52.328732491658087 ], [ 5.028315536875999, 52.330677191056488 ], [ 5.021246194656567, 52.330938709677547 ], [ 5.017327130843658, 52.330077019893338 ], [ 5.018138223484298, 52.326964697021616 ], [ 5.017776257804159, 52.323282372533072 ], [ 5.021481654793531, 52.302339341980094 ], [ 5.022036826762858, 52.282519116840291 ], [ 5.024399183426658, 52.281393703915171 ], [ 5.030617259466677, 52.288491889795907 ], [ 5.033380957464899, 52.28623482497769 ], [ 5.039288617316707, 52.283137474161563 ], [ 5.042822733991925, 52.282581477340273 ], [ 5.047509524124283, 52.285143569591085 ], [ 5.050235689497331, 52.287699903624848 ], [ 5.052597609054973, 52.286573927896164 ], [ 5.059244525239059, 52.289424250567123 ], [ 5.065551222293699, 52.28519401622254 ], [ 5.065579887122873, 52.281229707044929 ], [ 5.064407467597894, 52.280660171282342 ], [ 5.06481605565548, 52.278395920155994 ], [ 5.076976706877419, 52.277862106927543 ], [ 5.084417868295393, 52.279297246785823 ], [ 5.087539889464546, 52.281570562449303 ], [ 5.102061454090977, 52.279907445402294 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0246\", \"naam\": \"Heerde\", \"code\": \"0246\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.077922992863634, 52.364317060715834 ], [ 6.078395333249169, 52.369411415525803 ], [ 6.084338369529924, 52.372491453438258 ], [ 6.094970999854425, 52.37384420276129 ], [ 6.117047499812099, 52.377957709929959 ], [ 6.122194197506591, 52.380191246046373 ], [ 6.125797527197911, 52.384133240731664 ], [ 6.12584944078102, 52.38724782145372 ], [ 6.125148132818927, 52.392349307942737 ], [ 6.130387159962469, 52.399962194367546 ], [ 6.125280208650488, 52.40027731512415 ], [ 6.123730916030531, 52.401702824742912 ], [ 6.1190262959523, 52.402581514997138 ], [ 6.115163808360399, 52.406852903200253 ], [ 6.110851745603078, 52.407728850539215 ], [ 6.114896161922903, 52.414500176074306 ], [ 6.113392480854985, 52.41875697194795 ], [ 6.115026488068128, 52.42242816139543 ], [ 6.11741961629563, 52.424395625223099 ], [ 6.117883150184814, 52.428640324485244 ], [ 6.116332630872763, 52.430065731137965 ], [ 6.11952726961876, 52.432877725482271 ], [ 6.114486245802722, 52.437439503044153 ], [ 6.10942107270142, 52.440585357365507 ], [ 6.103178974652, 52.444021277581058 ], [ 6.102057660643072, 52.447709245130007 ], [ 6.103733093719116, 52.453928835717996 ], [ 6.100189913278269, 52.453950208724152 ], [ 6.095035724719663, 52.451715763740914 ], [ 6.092723403932262, 52.45484440554128 ], [ 6.076528890819215, 52.451541709090989 ], [ 6.063135527166327, 52.451052536576263 ], [ 6.035471056538284, 52.443844782262566 ], [ 6.022486255369571, 52.44419829050063 ], [ 6.017762988922216, 52.444223524296227 ], [ 6.006627033275593, 52.436070432742248 ], [ 5.987533753447778, 52.421160879298711 ], [ 5.98712883852037, 52.420313428456971 ], [ 5.975596168718827, 52.411026758860302 ], [ 5.966872838898771, 52.405689596936639 ], [ 5.951867313809118, 52.400948260982808 ], [ 5.951048422416405, 52.398403651686849 ], [ 5.9572704226202, 52.392993653148153 ], [ 5.992453004285268, 52.378094159122277 ], [ 6.017493466184028, 52.370034656441831 ], [ 6.030034908524871, 52.367701816139281 ], [ 6.034725202241105, 52.365977210975274 ], [ 6.033922861981144, 52.364848911433256 ], [ 6.037810315526916, 52.361995878202279 ], [ 6.042545731356581, 52.363385605098294 ], [ 6.041659662690159, 52.356594371754746 ], [ 6.047573136675497, 52.357977374542735 ], [ 6.052333907379915, 52.361065604853344 ], [ 6.074740337487488, 52.361787039611357 ], [ 6.074365017649179, 52.362921912423047 ], [ 6.077922992863634, 52.364317060715834 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0855\", \"naam\": \"Tilburg\", \"code\": \"0855\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.109804132737313, 51.539394214488581 ], [ 5.112501016673442, 51.539966978777485 ], [ 5.112874817351612, 51.541950242852131 ], [ 5.118638092731717, 51.545928394952853 ], [ 5.126040145492007, 51.533484453324668 ], [ 5.130300536476004, 51.530378714818696 ], [ 5.135297147795222, 51.533504767349626 ], [ 5.133746420914659, 51.534917405473003 ], [ 5.141808347888293, 51.542014551690819 ], [ 5.138700427904243, 51.54597275565083 ], [ 5.147954020116364, 51.547124846211844 ], [ 5.139059961151847, 51.550787878965124 ], [ 5.137119776170893, 51.552766128688255 ], [ 5.137852675595749, 51.559847630400093 ], [ 5.13745117715329, 51.562678747239033 ], [ 5.145111459315189, 51.573739542211605 ], [ 5.150869804262182, 51.579981648782642 ], [ 5.153562333484723, 51.581969434217235 ], [ 5.203250458925362, 51.612076876824858 ], [ 5.210578422027067, 51.615486507772381 ], [ 5.207854541627988, 51.620296689361645 ], [ 5.202821505879225, 51.622554434927849 ], [ 5.195841199127244, 51.628207141400914 ], [ 5.193511221192098, 51.630752067655983 ], [ 5.191165066804393, 51.636978456547929 ], [ 5.19192727157685, 51.639528485157989 ], [ 5.184189958592428, 51.640648108435492 ], [ 5.17221275343694, 51.638927562539038 ], [ 5.160225118184078, 51.639471331185824 ], [ 5.149785142237843, 51.639733824931938 ], [ 5.144753115628024, 51.640856295620651 ], [ 5.138183646337406, 51.640276118435175 ], [ 5.128532759483875, 51.637706436665802 ], [ 5.126983127550462, 51.638269394099396 ], [ 5.115390228673646, 51.637393468347142 ], [ 5.111149786203015, 51.635401176769697 ], [ 5.110369718927869, 51.636532118058199 ], [ 5.106120799257375, 51.635955602805552 ], [ 5.101492552219455, 51.63424522430828 ], [ 5.101503259803454, 51.632546074734854 ], [ 5.098047785026679, 51.628856042235668 ], [ 5.09960643420037, 51.626877509031921 ], [ 5.101193523700927, 51.620367884742649 ], [ 5.103147040475219, 51.616974286123195 ], [ 5.099277470668091, 51.61781442010539 ], [ 5.095834211559177, 51.612425166009601 ], [ 5.093909641358319, 51.611287572409069 ], [ 5.079617839428042, 51.610684488807948 ], [ 5.080011873421403, 51.609552736684144 ], [ 5.075379521224853, 51.608974091286996 ], [ 5.075400930591088, 51.605858982457882 ], [ 5.073857597427178, 51.605571662980786 ], [ 5.074216567408599, 51.609537380387167 ], [ 5.071135604337762, 51.608113115034968 ], [ 5.070733459447863, 51.610377603418385 ], [ 5.061855294262318, 51.609220469222819 ], [ 5.060299689083288, 51.610632118959877 ], [ 5.044840932295892, 51.611154307709455 ], [ 5.042947784301806, 51.60605120301156 ], [ 5.03985503366221, 51.606325260419915 ], [ 5.004298878741904, 51.607913494189994 ], [ 4.986141047510007, 51.607852664360792 ], [ 4.983441735650896, 51.607276984593128 ], [ 4.982270102825382, 51.6086889262304 ], [ 4.976856176978365, 51.609236461066786 ], [ 4.964842496308742, 51.613158488256197 ], [ 4.952848438467417, 51.614813771215125 ], [ 4.947860978715771, 51.611113570806872 ], [ 4.948641918183776, 51.610266904763094 ], [ 4.961045211108184, 51.606064760297194 ], [ 4.96880818186438, 51.602128000407085 ], [ 4.96769121696112, 51.597592823989203 ], [ 4.97271503161707, 51.597327532970915 ], [ 4.973536574110737, 51.59194966794864 ], [ 4.972440085950097, 51.585149015567524 ], [ 4.970196074528187, 51.577211466078289 ], [ 4.969421319245969, 51.577491900018991 ], [ 4.966752872123185, 51.573800748341789 ], [ 4.969092614613797, 51.571260344581525 ], [ 4.966813173073641, 51.567287382400579 ], [ 4.964129708652008, 51.56529530833253 ], [ 4.951047428960825, 51.560999246181154 ], [ 4.951471396333254, 51.557036030410565 ], [ 4.953463095541922, 51.550529840180907 ], [ 4.96543226015257, 51.549724037739452 ], [ 4.97432976638123, 51.547207004146763 ], [ 4.979373383559679, 51.544109513285846 ], [ 4.976688175952122, 51.542400915564485 ], [ 4.975551358424237, 51.540131319285315 ], [ 4.987512416425961, 51.539889632813839 ], [ 4.994856494642011, 51.538215317962738 ], [ 5.001421361916075, 51.53738757168329 ], [ 5.005657345221497, 51.53825107439198 ], [ 5.020696852593068, 51.538865598131807 ], [ 5.022630149314508, 51.538305245735074 ], [ 5.027292736545211, 51.534071708096718 ], [ 5.030413978853674, 51.529550090366904 ], [ 5.03619031703046, 51.530700378225255 ], [ 5.043901823013396, 51.531006482707674 ], [ 5.052395235987803, 51.529898325595887 ], [ 5.052770497115634, 51.531315394710653 ], [ 5.051586258799026, 51.534993585992616 ], [ 5.060437445251305, 51.537850652539532 ], [ 5.090929697772519, 51.535099928622898 ], [ 5.096331605529253, 51.53483029676709 ], [ 5.105190848833226, 51.536834393148403 ], [ 5.109804132737313, 51.539394214488581 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0226\", \"naam\": \"Duiven\", \"code\": \"0226\", \"ligtInProvincieCode\": \"25\", \"ligtInProvincieNaam\": \"Gelderland\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.001843090609974, 51.977628115064476 ], [ 5.998692290531994, 51.975095830950337 ], [ 5.990085559723909, 51.972308372574297 ], [ 5.983854183182927, 51.972340156619879 ], [ 5.986535007550596, 51.968928243527976 ], [ 5.985298753976204, 51.963837116490005 ], [ 5.987623709184612, 51.962975695350906 ], [ 5.984777361536674, 51.953928103792464 ], [ 5.98474719840799, 51.951662732017965 ], [ 5.987457021815453, 51.950516162636333 ], [ 5.984683113404946, 51.946848814582459 ], [ 5.986232515789892, 51.9462745465758 ], [ 5.984241143572232, 51.942886387257452 ], [ 5.980349083038782, 51.942906093646243 ], [ 5.975274560611967, 51.941798830226183 ], [ 5.969399879283797, 51.938996170102499 ], [ 5.965893670957735, 51.938730296228748 ], [ 5.966631813170158, 51.935611559916978 ], [ 5.972406226749793, 51.930768697818408 ], [ 5.972773173973822, 51.929067722244874 ], [ 5.968482221525504, 51.928239453387832 ], [ 5.978512535497643, 51.921676000427546 ], [ 5.986961378682244, 51.913420606596354 ], [ 5.988913715223982, 51.913977007651511 ], [ 5.99278036554248, 51.912257985577995 ], [ 6.001352520230403, 51.913346254638384 ], [ 6.008384915576386, 51.915574821832394 ], [ 6.015406128107196, 51.916953451758559 ], [ 6.02045487416428, 51.916359961693928 ], [ 6.027456398714468, 51.916322014434975 ], [ 6.034810146606365, 51.913732969647121 ], [ 6.037536896591776, 51.914001100293632 ], [ 6.038736603826566, 51.91625999981671 ], [ 6.043023559880277, 51.916802534456245 ], [ 6.044629189785239, 51.92019188110531 ], [ 6.043470446270385, 51.920764745610015 ], [ 6.046230908388114, 51.923298033940583 ], [ 6.046284922659945, 51.926979241961526 ], [ 6.042406670244335, 51.927850509799654 ], [ 6.048686036177069, 51.931496838598079 ], [ 6.051401381747265, 51.93091513650527 ], [ 6.051844961636839, 51.934594137472303 ], [ 6.053096336667254, 51.940250910537507 ], [ 6.054648841975278, 51.9399589114241 ], [ 6.057026145081873, 51.942777314708977 ], [ 6.063351440869769, 51.949254530834523 ], [ 6.052502617043115, 51.952714742088318 ], [ 6.058426617928758, 51.958344910996239 ], [ 6.060056142222067, 51.963149861852379 ], [ 6.061005005817439, 51.97447210022959 ], [ 6.067245189045422, 51.97500256224847 ], [ 6.068884879378797, 51.980373709991454 ], [ 6.062267195865515, 51.980695073967254 ], [ 6.061115630272224, 51.981834443697878 ], [ 6.046681832508932, 51.980500312185725 ], [ 6.043147081364956, 51.97853774410401 ], [ 6.034471556710452, 51.971222850368342 ], [ 6.027067985786257, 51.970980180328937 ], [ 6.021715866462209, 51.978088948675826 ], [ 6.004978642680908, 51.979027635154942 ], [ 6.001843090609974, 51.977628115064476 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0938\", \"naam\": \"Meerssen\", \"code\": \"0938\", \"ligtInProvincieCode\": \"31\", \"ligtInProvincieNaam\": \"Limburg\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.762749454356049, 50.866510837487759 ], [ 5.764652453605493, 50.866787844619701 ], [ 5.764297686341047, 50.869904250882641 ], [ 5.766986726954329, 50.873293902783296 ], [ 5.773060380308992, 50.87214097515335 ], [ 5.774212770268295, 50.873553146532529 ], [ 5.771950427584692, 50.875826333241768 ], [ 5.777720541561288, 50.883736720455033 ], [ 5.784173135358403, 50.882298726546694 ], [ 5.789131361571932, 50.88398082890977 ], [ 5.789496870919384, 50.882280328793414 ], [ 5.798248027782759, 50.882815964183074 ], [ 5.799794358676148, 50.885642507763279 ], [ 5.796809663259142, 50.892166832743079 ], [ 5.797600503314004, 50.89556248984178 ], [ 5.796479420390237, 50.897832102563036 ], [ 5.800666285882587, 50.898100417320308 ], [ 5.801411863572644, 50.896398519097502 ], [ 5.803329058724409, 50.898090868540805 ], [ 5.801830319796609, 50.900645096865652 ], [ 5.798789502228255, 50.900939161665242 ], [ 5.802225982720568, 50.902342908904146 ], [ 5.796564631049457, 50.907460773729397 ], [ 5.80114298330088, 50.908860508150269 ], [ 5.800409849035861, 50.911978385979431 ], [ 5.801571682275243, 50.914239872231157 ], [ 5.787094420781874, 50.912308382033302 ], [ 5.786709013602536, 50.911743303588786 ], [ 5.773762225913277, 50.910654468200327 ], [ 5.758064023990136, 50.898528061980819 ], [ 5.754656159478575, 50.900521369863746 ], [ 5.758893097409804, 50.907021537162294 ], [ 5.76618702878224, 50.914927602495283 ], [ 5.771171623424936, 50.919442443529334 ], [ 5.775415000062385, 50.926225200679866 ], [ 5.770861560727375, 50.92793961644756 ], [ 5.761366118136276, 50.930519551388535 ], [ 5.757573091201789, 50.932230981378801 ], [ 5.755284507901882, 50.931671874090604 ], [ 5.753399090481878, 50.933943492693608 ], [ 5.74846558029007, 50.935941430888349 ], [ 5.750015102195083, 50.939335038488608 ], [ 5.745857768235122, 50.943312860260882 ], [ 5.743923301815504, 50.939353975317836 ], [ 5.740844884437695, 50.935115355906127 ], [ 5.732433445469042, 50.930326280819251 ], [ 5.7270562502902, 50.923828500626072 ], [ 5.72589574234354, 50.921283065558612 ], [ 5.727378502604945, 50.915897835325161 ], [ 5.72659662228974, 50.91306808981286 ], [ 5.72276262735261, 50.909114416557259 ], [ 5.718947572400524, 50.907709400074346 ], [ 5.714768330864891, 50.908570922325026 ], [ 5.71246350629349, 50.90546218224555 ], [ 5.712820037430583, 50.902062731479248 ], [ 5.720027858555359, 50.899210175194668 ], [ 5.71810960894118, 50.896950047210971 ], [ 5.723418594253035, 50.894669103343816 ], [ 5.725675952928197, 50.891264070154868 ], [ 5.725270777156837, 50.887866806775001 ], [ 5.72638473286661, 50.884181892409835 ], [ 5.732465055376957, 50.883597489727933 ], [ 5.731320004899806, 50.883034494752337 ], [ 5.736257167964117, 50.882170084517028 ], [ 5.733540188618784, 50.874814948062372 ], [ 5.739230372712165, 50.873098538732762 ], [ 5.741891723359752, 50.873090405061646 ], [ 5.742639061600418, 50.871388885096472 ], [ 5.746067256968796, 50.872227907710993 ], [ 5.749475628960251, 50.870518052959675 ], [ 5.75556738403104, 50.871631621860537 ], [ 5.759323657646625, 50.865955506295279 ], [ 5.762749454356049, 50.866510837487759 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0150\", \"naam\": \"Deventer\", \"code\": \"0150\", \"ligtInProvincieCode\": \"23\", \"ligtInProvincieNaam\": \"Overijssel\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 6.381760513681949, 52.24604696860748 ], [ 6.376413457354801, 52.252322029181528 ], [ 6.377247621727543, 52.254580548832692 ], [ 6.374933945803475, 52.256299049388943 ], [ 6.377291732060779, 52.256562498507037 ], [ 6.376558276624806, 52.258834150781368 ], [ 6.373074773824248, 52.260845591910794 ], [ 6.370704263608077, 52.260015787607607 ], [ 6.354831474644002, 52.269208862955558 ], [ 6.343578282597503, 52.274681033559368 ], [ 6.328811151665248, 52.281029720667725 ], [ 6.326502976621794, 52.301720577460024 ], [ 6.304896072821886, 52.300474379159596 ], [ 6.286457420769285, 52.300616091788683 ], [ 6.267234002672721, 52.300760773233861 ], [ 6.235323356523898, 52.314586718607991 ], [ 6.235420705873526, 52.319683265450891 ], [ 6.206397488211633, 52.321020624489122 ], [ 6.203634366474932, 52.320190198165939 ], [ 6.202399703583557, 52.317083746000549 ], [ 6.199631721089172, 52.315970081355005 ], [ 6.190187160853004, 52.314618707238516 ], [ 6.181558426866087, 52.314960175256431 ], [ 6.1822368716751, 52.309008857628179 ], [ 6.170459978212267, 52.308804293164052 ], [ 6.168880431512945, 52.30824839050112 ], [ 6.141336070829426, 52.303896462356974 ], [ 6.125982434130842, 52.300878460804391 ], [ 6.11849556119724, 52.298942773390799 ], [ 6.108664762563342, 52.297587299780403 ], [ 6.101270206831249, 52.301313509436277 ], [ 6.105115755427142, 52.296476199348717 ], [ 6.10583622137508, 52.292507333323584 ], [ 6.111641578797808, 52.287657863663426 ], [ 6.111134060960884, 52.280581513907968 ], [ 6.113039330141445, 52.277171681221539 ], [ 6.12118969240192, 52.272024107634792 ], [ 6.123103198397391, 52.269180410210254 ], [ 6.123816938548488, 52.26492826753163 ], [ 6.12496478873211, 52.263222025670487 ], [ 6.130018172625125, 52.260641737109793 ], [ 6.125654753969154, 52.257554113687888 ], [ 6.123629394252566, 52.253602234784616 ], [ 6.123988479371367, 52.251617732521325 ], [ 6.135711931932276, 52.249561752261599 ], [ 6.138426371655835, 52.247845431957558 ], [ 6.143501293300973, 52.246680317691741 ], [ 6.150191853468299, 52.248336371452851 ], [ 6.153694231847996, 52.246897785551077 ], [ 6.153645459601039, 52.244066285910385 ], [ 6.150080195662922, 52.241823917441252 ], [ 6.142186423535564, 52.238476468860632 ], [ 6.141722643906907, 52.234231706948968 ], [ 6.142859408199834, 52.231958981947386 ], [ 6.147487501749158, 52.22768153826388 ], [ 6.161152029544683, 52.225044109191828 ], [ 6.163839302585632, 52.221911448693305 ], [ 6.162600315665545, 52.218238211693397 ], [ 6.163760295615036, 52.217381036698676 ], [ 6.167701004182827, 52.218770964487014 ], [ 6.168518982607278, 52.220747837041415 ], [ 6.16580240157161, 52.222181701095614 ], [ 6.162772913639695, 52.228148483697169 ], [ 6.167830056523905, 52.226132874619907 ], [ 6.168241591570402, 52.227262884873582 ], [ 6.163169533430897, 52.22842906044346 ], [ 6.16634762751197, 52.2309567756256 ], [ 6.178535883754436, 52.233424364772318 ], [ 6.182463297023122, 52.233964344655114 ], [ 6.189036065917109, 52.229105776331593 ], [ 6.201967023682212, 52.229300434969453 ], [ 6.210954963271786, 52.228105332824576 ], [ 6.21719017331464, 52.226362558529608 ], [ 6.214537965848478, 52.231195306776307 ], [ 6.216893486671164, 52.231461962458141 ], [ 6.222329609526572, 52.228874978019761 ], [ 6.227045866493462, 52.229691078727498 ], [ 6.234471860729606, 52.228788468907396 ], [ 6.237975376770837, 52.227630535220868 ], [ 6.244644735642697, 52.228148658991074 ], [ 6.246581263879229, 52.227001837980517 ], [ 6.25716180942961, 52.227207535790512 ], [ 6.259942342318287, 52.229169315448765 ], [ 6.264603507025927, 52.227152467856826 ], [ 6.271250605663012, 52.226536510828161 ], [ 6.270887042914719, 52.227955163511496 ], [ 6.275581479900415, 52.227636748100082 ], [ 6.286213751058271, 52.230388134613854 ], [ 6.291708971434934, 52.230912539218366 ], [ 6.292855265781554, 52.229487818519658 ], [ 6.296760551556767, 52.228891424824226 ], [ 6.297866092378306, 52.225484657780129 ], [ 6.320587634993529, 52.225590400144299 ], [ 6.325317247934895, 52.226968854691101 ], [ 6.338639728384384, 52.227145435668312 ], [ 6.338049912526741, 52.236212212264597 ], [ 6.341177769480012, 52.235903796174007 ], [ 6.341599862585561, 52.237316326189692 ], [ 6.347127105767354, 52.239253842254925 ], [ 6.349471584012446, 52.238951572892837 ], [ 6.350708171039583, 52.241773372814734 ], [ 6.366771452392309, 52.241641223334788 ], [ 6.381760513681949, 52.24604696860748 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0758\", \"naam\": \"Breda\", \"code\": \"0758\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 4.734069519321484, 51.485505510878092 ], [ 4.746342822485222, 51.489538390609958 ], [ 4.74974723424425, 51.494088307012184 ], [ 4.74894076984502, 51.496632748218985 ], [ 4.75275113340215, 51.499768764892949 ], [ 4.758142911921331, 51.500081134688237 ], [ 4.760038730424959, 51.502356968176279 ], [ 4.753439107216458, 51.505719802214507 ], [ 4.747136322873294, 51.515314399005362 ], [ 4.749012350262299, 51.519006323478095 ], [ 4.76018997153143, 51.519350052576279 ], [ 4.763987483872038, 51.523618435312478 ], [ 4.769362928798298, 51.525346208892259 ], [ 4.770107271306393, 51.527332570465326 ], [ 4.777793529993195, 51.529355337998929 ], [ 4.781627485331614, 51.531074492619084 ], [ 4.794306717895045, 51.53482115701528 ], [ 4.799317237726468, 51.535129674189427 ], [ 4.800059390563246, 51.537399030289016 ], [ 4.814635038353147, 51.543985013850225 ], [ 4.830761751304691, 51.550293353336805 ], [ 4.837331309584995, 51.549474836504579 ], [ 4.839601936417735, 51.553167121507194 ], [ 4.853845694535388, 51.556064995280238 ], [ 4.856170964694035, 51.555225976553075 ], [ 4.858087184906842, 51.556367471492415 ], [ 4.86309398826367, 51.557239629941918 ], [ 4.864225606088196, 51.559510308288331 ], [ 4.86731944570537, 51.558957704912451 ], [ 4.868827555805815, 51.562079614640503 ], [ 4.867637335931871, 51.564906342597581 ], [ 4.868386621296774, 51.566892077334003 ], [ 4.871857251177747, 51.567190627043793 ], [ 4.870271404138731, 51.570865238883023 ], [ 4.866015475120491, 51.571695949227149 ], [ 4.864386602883411, 51.579051901400227 ], [ 4.854345062775921, 51.579289778373131 ], [ 4.848912981664114, 51.581530509233325 ], [ 4.842684334243514, 51.585749690737458 ], [ 4.842175766145915, 51.595942557373824 ], [ 4.834047717765741, 51.597320407320375 ], [ 4.835568575287835, 51.599309996015052 ], [ 4.843625685144521, 51.603878924985111 ], [ 4.838928526915154, 51.608954617305734 ], [ 4.842696725655045, 51.616901827864908 ], [ 4.839188263834863, 51.619434251849484 ], [ 4.827918983770364, 51.624478540115973 ], [ 4.826345074390973, 51.626736610905795 ], [ 4.821700133405233, 51.627280658283873 ], [ 4.821285357086894, 51.629544257110879 ], [ 4.818554895347943, 51.631513425075667 ], [ 4.812352459521456, 51.63289912681433 ], [ 4.806944505190197, 51.632589238552221 ], [ 4.800752562127818, 51.633124776589753 ], [ 4.789524160868081, 51.634483978577322 ], [ 4.787557670650728, 51.637022728854937 ], [ 4.767950718274041, 51.62899098932067 ], [ 4.765627800934866, 51.629261876001237 ], [ 4.76481201299036, 51.632372758441782 ], [ 4.761282364235813, 51.636035555530135 ], [ 4.757783611160463, 51.63743280017794 ], [ 4.750032166817301, 51.638806866710588 ], [ 4.739928295804363, 51.642433051441813 ], [ 4.731414495249856, 51.642952064750141 ], [ 4.704419289103742, 51.63826645853004 ], [ 4.699011460186587, 51.637951582118454 ], [ 4.693599373257009, 51.637919633436248 ], [ 4.688977901714072, 51.636759340373374 ], [ 4.683992081414747, 51.634180657309741 ], [ 4.679375661335308, 51.632736808625886 ], [ 4.67086748928831, 51.632968242423388 ], [ 4.66504693008672, 51.634348489776464 ], [ 4.664714558261708, 51.630947989114183 ], [ 4.663168495049075, 51.630938433693466 ], [ 4.66475066843791, 51.628682578663437 ], [ 4.663645423290251, 51.62527729859864 ], [ 4.657925862360669, 51.62042731448097 ], [ 4.659589724275545, 51.613074352681359 ], [ 4.661144245286509, 51.612517601124679 ], [ 4.660798711225976, 51.609966613464309 ], [ 4.664289285837167, 51.609138621479765 ], [ 4.663984238037575, 51.604039050057558 ], [ 4.675577296347403, 51.603826946906359 ], [ 4.67486253751687, 51.600140936648927 ], [ 4.682223375858925, 51.598769510195822 ], [ 4.686677558741868, 51.585485658670805 ], [ 4.686708154525674, 51.583503408969186 ], [ 4.68867794559199, 51.580966349465143 ], [ 4.69071268965357, 51.574181572057427 ], [ 4.693896103380077, 51.567969985297331 ], [ 4.693197718000391, 51.56315135694927 ], [ 4.694450572422864, 51.556928276198235 ], [ 4.694250446713672, 51.544749262608626 ], [ 4.703818402803364, 51.549903293648256 ], [ 4.713149728507517, 51.545142997094125 ], [ 4.72831460943671, 51.537016540388791 ], [ 4.722553650100206, 51.535284686668831 ], [ 4.725286584085949, 51.533034560067613 ], [ 4.72797817868986, 51.533616185537163 ], [ 4.73025140076604, 51.536461035216881 ], [ 4.732179982367399, 51.536471861413631 ], [ 4.739187486029115, 51.531979657723561 ], [ 4.741489490851142, 51.532842014832596 ], [ 4.740019321560613, 51.527736198636859 ], [ 4.743136560931036, 51.52548778633556 ], [ 4.74400395884771, 51.51869565214573 ], [ 4.743694533410955, 51.513313056596139 ], [ 4.742260874700916, 51.505658615550843 ], [ 4.741498002702267, 51.505087990603336 ], [ 4.737399620385187, 51.495153076784874 ], [ 4.735521456188415, 51.491744145675852 ], [ 4.734069519321484, 51.485505510878092 ] ] ] } },\n{ \"type\": \"Feature\", \"properties\": { \"identificatie\": \"GM0744\", \"naam\": \"Baarle-Nassau\", \"code\": \"0744\", \"ligtInProvincieCode\": \"30\", \"ligtInProvincieNaam\": \"Noord-Brabant\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ 5.010564410857635, 51.458121343070225 ], [ 4.982434509743833, 51.460292809495733 ], [ 4.976265511794313, 51.461120861563579 ], [ 4.970124810997988, 51.458833472658227 ], [ 4.966266254693808, 51.4596692279232 ], [ 4.959337520129441, 51.45936083708569 ], [ 4.957406802966463, 51.459920148125342 ], [ 4.947023348965208, 51.458465448151664 ], [ 4.944729451728588, 51.456757564206228 ], [ 4.932382351791229, 51.459258928487557 ], [ 4.914181041195936, 51.469098675394122 ], [ 4.89754327199439, 51.476110142611105 ], [ 4.891355183433822, 51.478349647821545 ], [ 4.882892623759716, 51.477180593910767 ], [ 4.882109613231807, 51.478310020013744 ], [ 4.871695543403937, 51.479397318132612 ], [ 4.862084141757186, 51.477655270928544 ], [ 4.853984470701374, 51.478468172342474 ], [ 4.852818804150853, 51.479312452871248 ], [ 4.842015176900372, 51.480678525701819 ], [ 4.840501384019992, 51.478405820420768 ], [ 4.83979901999238, 51.472738459287456 ], [ 4.837147214202574, 51.46904434819384 ], [ 4.836087716633942, 51.461109645229548 ], [ 4.838394808606394, 51.461403718645194 ], [ 4.84419811675306, 51.459165228715143 ], [ 4.841529780434998, 51.456887154847706 ], [ 4.837689545295833, 51.456019527044091 ], [ 4.83534499599787, 51.458840505059456 ], [ 4.828119137702589, 51.451442811302222 ], [ 4.823534152941273, 51.448588714661781 ], [ 4.825997473712317, 51.436139591841695 ], [ 4.824856831318191, 51.435001282052419 ], [ 4.828459436156704, 51.423690405438073 ], [ 4.828092030104587, 51.422272621703151 ], [ 4.833883981443432, 51.420601008824434 ], [ 4.8415584897612, 51.422336383785833 ], [ 4.836618200862834, 51.417215490209202 ], [ 4.833509554809072, 51.419749618371895 ], [ 4.826566935292709, 51.421132483509112 ], [ 4.82461875212516, 51.423105538219076 ], [ 4.821547681316924, 51.422524278349698 ], [ 4.820379329740738, 51.423651426932643 ], [ 4.812263533144268, 51.42644376267571 ], [ 4.808415637784464, 51.426424736639902 ], [ 4.805693219450203, 51.428676839627393 ], [ 4.804164851149001, 51.427819596573862 ], [ 4.800298617251301, 51.429216237459357 ], [ 4.792994568963403, 51.428612855678395 ], [ 4.78952017059315, 51.429444724783195 ], [ 4.786400610442267, 51.432543962151513 ], [ 4.774097183287375, 51.431630341887207 ], [ 4.769117415802381, 51.429904832476154 ], [ 4.770744751697012, 51.423399707071987 ], [ 4.768489976385216, 51.419422886178921 ], [ 4.773186783908272, 51.413500377253023 ], [ 4.777799142693438, 51.413807771989546 ], [ 4.782837523946145, 51.411001927931274 ], [ 4.786303176012516, 51.41073662809891 ], [ 4.789402690394303, 51.40905332069984 ], [ 4.792076711028214, 51.41048302388554 ], [ 4.795542270980466, 51.410217449305776 ], [ 4.803605476830295, 51.411390894028919 ], [ 4.826272753647178, 51.413767743717194 ], [ 4.839341809258372, 51.41467947215822 ], [ 4.848597832636528, 51.412740146406499 ], [ 4.849735176838106, 51.414161414624417 ], [ 4.85667603627227, 51.412777167311788 ], [ 4.859746901923744, 51.413357502176858 ], [ 4.860548962016021, 51.410529083776566 ], [ 4.86632530221218, 51.409988613213287 ], [ 4.868601030966489, 51.412830794461762 ], [ 4.872822908181371, 51.413699100030819 ], [ 4.873579523645246, 51.414835249786421 ], [ 4.877804844464009, 51.415420185344516 ], [ 4.878590033718145, 51.414007592207987 ], [ 4.882793421082315, 51.416574677754305 ], [ 4.88625581277249, 51.416589597536493 ], [ 4.885883552949321, 51.415455183586943 ], [ 4.890887746794045, 51.415193378203938 ], [ 4.894759195035385, 51.412944156959441 ], [ 4.898618129264519, 51.411827569751438 ], [ 4.897448915169997, 51.413238684296736 ], [ 4.900126574562241, 51.414665913001123 ], [ 4.903216152824316, 51.413545958723219 ], [ 4.900150765237607, 51.412400386189098 ], [ 4.899784245126948, 51.410699634162164 ], [ 4.903639864997808, 51.409866071152308 ], [ 4.909821010089034, 51.407342701382433 ], [ 4.908696811236491, 51.404506060405964 ], [ 4.910258930853989, 51.402246830927176 ], [ 4.917968219357444, 51.400578881496557 ], [ 4.916065802634344, 51.398588788053857 ], [ 4.923372446126843, 51.398618075884173 ], [ 4.924543353832039, 51.396923506917645 ], [ 4.91762152642602, 51.39689584181211 ], [ 4.91379369662842, 51.395181145173872 ], [ 4.921114252651806, 51.393794615447952 ], [ 4.928018517755113, 51.395521225094875 ], [ 4.925315312472853, 51.396643363492771 ], [ 4.924523256494007, 51.398905850320695 ], [ 4.927975774887901, 51.399769105551073 ], [ 4.928784742485733, 51.395807442761367 ], [ 4.963148466852306, 51.422275286493495 ], [ 4.978083059328723, 51.430258266333119 ], [ 4.998009632110388, 51.440238481923664 ], [ 5.004512768058644, 51.445074409165521 ], [ 5.00561784507419, 51.451025252403383 ], [ 5.010599522947524, 51.45387344154426 ], [ 5.010564410857635, 51.458121343070225 ] ], [ [ 4.93992671524621, 51.436065497842378 ], [ 4.936094759187698, 51.434351532564676 ], [ 4.939946164046499, 51.434083155378431 ], [ 4.939594668597374, 51.430683377845604 ], [ 4.936142391020709, 51.429537273399411 ], [ 4.933434546847255, 51.430942787369958 ], [ 4.928819392719146, 51.430641545829268 ], [ 4.926866645931684, 51.433465885283262 ], [ 4.92263036093277, 51.433732299009279 ], [ 4.917997509547338, 51.435129776332239 ], [ 4.921059082503985, 51.436841262880506 ], [ 4.919892821533892, 51.437969409239827 ], [ 4.921021432895811, 51.440522747369819 ], [ 4.919093954991262, 51.440798234488256 ], [ 4.922537993129044, 51.4427944165135 ], [ 4.92058143447762, 51.445901838506423 ], [ 4.923681272730426, 51.443931773139454 ], [ 4.927918500222559, 51.443665322556903 ], [ 4.925617459996716, 51.442806636867033 ], [ 4.928354759521062, 51.438569393284602 ], [ 4.928708323952225, 51.441686010743915 ], [ 4.932158506023488, 51.443115526627594 ], [ 4.935592067713085, 51.446244089371007 ], [ 4.935611710811442, 51.444261749125637 ], [ 4.938300756339377, 51.444838527651712 ], [ 4.937943720559725, 51.44200513068327 ], [ 4.934094449622598, 51.441990249321179 ], [ 4.93451312812332, 51.438593444962947 ], [ 4.939137476761487, 51.438044886981906 ], [ 4.93992671524621, 51.436065497842378 ] ], [ [ 4.943665271608064, 51.447407857388427 ], [ 4.939056735471597, 51.44625744421915 ], [ 4.934810897206071, 51.447373873298247 ], [ 4.933248439736753, 51.449633425076996 ], [ 4.937859962334255, 51.450500876217049 ], [ 4.947484946928472, 51.450537532922297 ], [ 4.950554091201334, 51.451681862667151 ], [ 4.94938001547009, 51.453659878430059 ], [ 4.951305146877686, 51.453667083381156 ], [ 4.952492647512003, 51.450273088742023 ], [ 4.948268585581205, 51.449124472288382 ], [ 4.947899977769089, 51.447423873116676 ], [ 4.943665271608064, 51.447407857388427 ] ], [ [ 4.935571894023997, 51.409427670149277 ], [ 4.936380375912814, 51.405465956255838 ], [ 4.928306236467396, 51.405151266470853 ], [ 4.932528545623931, 51.406017411138158 ], [ 4.927505619563411, 51.408263348074627 ], [ 4.930970230464928, 51.407993747655453 ], [ 4.935571894023997, 51.409427670149277 ] ], [ [ 4.888474272999314, 51.424812006553609 ], [ 4.890007217043363, 51.425384956277817 ], [ 4.891570980781286, 51.423125982172145 ], [ 4.888474272999314, 51.424812006553609 ] ], [ [ 4.948320405287445, 51.443743827390179 ], [ 4.945997044430819, 51.445151078144853 ], [ 4.949458912988884, 51.445447315806682 ], [ 4.948320405287445, 51.443743827390179 ] ], [ [ 4.92488780829423, 51.438838912590839 ], [ 4.921420816381713, 51.439108328806434 ], [ 4.922205065075095, 51.437695443025348 ], [ 4.92488780829423, 51.438838912590839 ] ] ] } }\n]\n}\n","/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport {DEVICE_PIXEL_RATIO} from './has.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  multiply as multiplyTransform,\n  scale as scaleTransform,\n} from './transform.js';\nimport {getSquaredTolerance} from './renderer/vector.js';\nimport {getTransformFromProjections, getUserProjection} from './proj.js';\n\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, opt_options) {\n  const canvas = context.canvas;\n  const options = opt_options ? opt_options : {};\n  const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  const size = options.size;\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n  const extent = [0, 0, canvas.width, canvas.height];\n  const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\n  const canvasPixelRatio = event.inversePixelTransform[0];\n  const frameState = event.frameState;\n  const transform = multiplyTransform(\n    event.inversePixelTransform.slice(),\n    frameState.coordinateToPixelTransform\n  );\n  const squaredTolerance = getSquaredTolerance(\n    frameState.viewState.resolution,\n    canvasPixelRatio\n  );\n  let userTransform;\n  const userProjection = getUserProjection();\n  if (userProjection) {\n    userTransform = getTransformFromProjections(\n      userProjection,\n      frameState.viewState.projection\n    );\n  }\n  return new CanvasImmediateRenderer(\n    event.context,\n    canvasPixelRatio,\n    frameState.extent,\n    transform,\n    frameState.viewState.rotation,\n    squaredTolerance,\n    userTransform\n  );\n}\n\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n  const result = pixel.slice(0);\n  applyTransform(event.inversePixelTransform.slice(), result);\n  return result;\n}\n"],"names":["$3d78a3a2062be6dd$export$9099ad97b570f7c","BaseEvent","type","this","propagationStopped","defaultPrevented","target","prototype","preventDefault","stopPropagation","$727bf6738fdde94d$export$9099ad97b570f7c","$1386f4ed5b3d2a4b$export$9099ad97b570f7c","Disposable","disposed","dispose","disposeInternal","$16831c8b3cdccec7$export$8eda8fbd1364c8a1","a","b","$16831c8b3cdccec7$export$45934da9231b7323","arr","direction","n","length","i","$16831c8b3cdccec7$export$1f4f991ce94838ce","begin","end","tmp","$16831c8b3cdccec7$export$46e35401bc090c62","data","extension","Array","isArray","$16831c8b3cdccec7$export$7ad150f61db3b289","func","value","$16831c8b3cdccec7$export$bcc761834e33d339","arr1","arr2","len1","$16831c8b3cdccec7$export$4d0d05f1b8a16b84","index","every","el","idx","$20af65f7a38205f7$export$ad8dd69aa6772cd0","$20af65f7a38205f7$export$5c50afa32081505e","$20af65f7a38205f7$export$3850addf0fb4e6a7","$1ed278ebd065aaf6$export$f3c88f5a058bec38","Object","assign","var_sources","TypeError","output","ii","arguments","source","key","hasOwnProperty","$1ed278ebd065aaf6$export$97fff7491bd246bd","object","property","$1ed278ebd065aaf6$export$207c30846165e93a","values","push","$1ed278ebd065aaf6$export$988399e568471db1","$c8df8fba8e9f5c07$export$9099ad97b570f7c","_super","Target","opt_target","_this","call","eventTarget_","pendingRemovals_","dispatching_","listeners_","$c8df8fba8e9f5c07$var$__extends","addEventListener","listener","listeners","listenersForType","indexOf","dispatchEvent","event","evt","propagate","dispatching","pendingRemovals","handleEvent","pr","removeEventListener","getListeners","undefined","hasListener","opt_type","keys","splice","$00d29b6ace6e67fa$export$9099ad97b570f7c","$46e86cc58f3e2235$export$ff95bcce2965a200","opt_this","opt_once","bind","originalListener_1","apply","eventsKey","$46e86cc58f3e2235$export$d2df825b2d8bc2ba","$46e86cc58f3e2235$export$6dee5fd4fdf600ff","$11407e360abf7d44$var$Observable","Observable","on","onInternal","once","onceInternal","un","unInternal","revision_","$11407e360abf7d44$var$__extends","changed","getRevision","len","ol_key","$11407e360abf7d44$export$21f63b82add5980c","$c8df8fba8e9f5c07$exports","default","$11407e360abf7d44$export$9099ad97b570f7c","$b1e57fdd8dde574a$export$18e1b4ff5b3c2297","Error","$b1e57fdd8dde574a$var$uidCounter_","$b1e57fdd8dde574a$export$604e9536b9e0488a","obj","ol_uid","String","$3e906ccbcd24be16$export$b902cfd711fa7f06","ObjectEvent","oldValue","$3e906ccbcd24be16$var$__extends","$3e906ccbcd24be16$export$9099ad97b570f7c","BaseObject","opt_values","values_","setProperties","get","getKeys","getProperties","hasProperties","notify","eventType","addChangeListener","removeChangeListener","set","opt_silent","applyProperties","unset","$11407e360abf7d44$exports","$9a566a9848e727af$export$9099ad97b570f7c","AssertionError","code","message","split","name","$9a566a9848e727af$var$__extends","$20a6d17585e78d64$export$b8795f4f643ce74f","assertion","errorCode","$9a566a9848e727af$exports","$e5266561d049a513$export$7cf753b6a6534915","styles_1","getZIndex","$e5266561d049a513$export$9099ad97b570f7c","Feature","opt_geometryOrProperties","id_","geometryName_","style_","styleFunction_","geometryChangeKey_","handleGeometryChanged_","getSimplifiedGeometry","geometry","setGeometry","properties","$e5266561d049a513$var$__extends","clone","setGeometryName","getGeometryName","getGeometry","style","getStyle","setStyle","getId","getStyleFunction","handleGeometryChange_","opt_style","setId","id","$3e906ccbcd24be16$exports","$ed930b4d99744cb5$var$Units","DEGREES","FEET","METERS","PIXELS","TILE_PIXELS","USFEET","$ed930b4d99744cb5$export$af68584dedf5e52c","Math","PI","$ffc5f3d579aca584$var$transformStringDiv","$ed930b4d99744cb5$export$9099ad97b570f7c","$f8271a0713c10a69$var$ua","navigator","userAgent","toLowerCase","$f8271a0713c10a69$export$543c908bf17a24fb","$f8271a0713c10a69$export$bccc8605349feea7","$f8271a0713c10a69$export$f16ffc71033a7aaa","$f8271a0713c10a69$export$1940d5d2b4cf824d","devicePixelRatio","$f8271a0713c10a69$export$b011c43406458fa9","WorkerGlobalScope","OffscreenCanvas","self","$f8271a0713c10a69$export$9544418e5c6fedfe","Image","decode","$f8271a0713c10a69$export$700ce540937d8c69","passive","options","defineProperty","window","error","$ffc5f3d579aca584$export$4739cf887d3ac19b","transform1","transform2","a1","b1","c1","d1","e1","f1","a2","b2","c2","d2","e2","f2","$ffc5f3d579aca584$export$77f8d2fc923b14e3","transform","c","d","e","f","$ffc5f3d579aca584$export$6af9bbf310c9e4bf","coordinate","x","y","$ffc5f3d579aca584$export$452ae967caf14641","dx1","dy1","sx","sy","angle","dx2","dy2","sin","cos","$ffc5f3d579aca584$export$6e6aac0f60e83c70","mat","det","$ffc5f3d579aca584$export$47bee913e0e80eb4","transformString","join","node","document","createElement","$ecbf3a0b36c7b4ac$export$9099ad97b570f7c","$92fe712ceb0b4cf4$export$9099ad97b570f7c","$d333a56ccd100cfd$export$a7ecbd362d65c1fe","coordinates","extent","$d333a56ccd100cfd$export$dbb3d72606cdc11","$d333a56ccd100cfd$export$2852acc8f8b94686","$d333a56ccd100cfd$export$14e1765886db335a","opt_extent","$d333a56ccd100cfd$export$d6a0542127b96c83","slice","$d333a56ccd100cfd$export$c7d6a927f416dd39","dx","dy","$d333a56ccd100cfd$export$c422a9fcb5f1ee5c","$d333a56ccd100cfd$export$cc70e7e516e4370f","$d333a56ccd100cfd$export$4f55e2d709659e7b","extent1","extent2","$d333a56ccd100cfd$export$9bdde4fe01cd4b6b","minX","minY","maxX","maxY","relationship","Infinity","$d333a56ccd100cfd$export$ea8082d0226d35a5","$d333a56ccd100cfd$export$80741250c74fd4fa","$d333a56ccd100cfd$export$355d8dd7ec88232f","flatCoordinates","offset","stride","$d333a56ccd100cfd$export$4b116deb3079b147","$d333a56ccd100cfd$export$bcc761834e33d339","$d333a56ccd100cfd$export$46e35401bc090c62","$d333a56ccd100cfd$export$8696fee511ea7c7a","min","max","$d333a56ccd100cfd$export$c26f7b9c5adc34b4","callback","val","$d333a56ccd100cfd$export$3932426cd8118930","$d333a56ccd100cfd$export$4e2fc25ce97f3583","$d333a56ccd100cfd$export$35aedeaeee8be6cd","$d333a56ccd100cfd$export$5100f0815ea32995","$d333a56ccd100cfd$export$ab4e37d31d15614d","area","$d333a56ccd100cfd$export$988399e568471db1","$d333a56ccd100cfd$export$3dc3550566517965","$d333a56ccd100cfd$export$e178c8044d3d0a05","$d333a56ccd100cfd$export$339e303bf205caae","$d333a56ccd100cfd$export$38622892ed79bdc7","corner","$d333a56ccd100cfd$export$3212225221d5bc14","center","resolution","rotation","size","cosRotation","sinRotation","xCos","xSin","yCos","ySin","x0","x1","x2","x3","y0","y1","y2","y3","$d333a56ccd100cfd$export$c491031eb9adcc3a","intersection","$d333a56ccd100cfd$export$c3bd2c3b798b0350","$d333a56ccd100cfd$export$76e02248c0889c3e","transformFn","opt_stops","width","height","xs","ys","l","$d333a56ccd100cfd$var$_boundingExtentXYs","$b3eb9bab7e855649$export$9099ad97b570f7c","Projection","code_","units_","units","extent_","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","canWrapX","getCode","getExtent","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","getPointResolutionFunc","$11d79372009851c4$export$4b8705656de00c72","$11d79372009851c4$export$4a376e0f60d976ee","cosh","exp","$11d79372009851c4$export$e08236045caaa3e1","log2","log","LOG2E","$11d79372009851c4$export$fd0b1e5ac4df516c","t","$11d79372009851c4$export$8b6706701cd75ea9","$11d79372009851c4$export$11468133b1231643","angleInRadians","$11d79372009851c4$export$4fc80c88d72f096","angleInDegrees","$11d79372009851c4$export$3334706ffb3dccb1","r","$11d79372009851c4$export$45ca8e7f50ccf2e0","$a2e3ad3c6452af0b$export$bb1f4f75177e5528","$a2e3ad3c6452af0b$export$6fd015d56b8406c9","$a2e3ad3c6452af0b$export$64afaa717a0c4932","$a2e3ad3c6452af0b$export$2126dea64bc40b7b","tan","$a2e3ad3c6452af0b$var$EPSG3857Projection","EPSG3857Projection","point","$a2e3ad3c6452af0b$var$__extends","$a2e3ad3c6452af0b$export$850c9b527a5298aa","$a2e3ad3c6452af0b$export$128bedc7a8a0ae2c","input","opt_output","opt_dimension","dimension","$a2e3ad3c6452af0b$export$f361696640082386","atan","$dbcd2854ae42c095$export$6fd015d56b8406c9","$dbcd2854ae42c095$export$af68584dedf5e52c","$dbcd2854ae42c095$var$EPSG4326Projection","EPSG4326Projection","opt_axisOrientation","$dbcd2854ae42c095$var$__extends","$dbcd2854ae42c095$export$850c9b527a5298aa","$78eb3a0f9f69d51f$var$cache","$0e52faab48d1c258$var$transforms","$0e52faab48d1c258$export$568ed88074851180","destination","sourceCode","destinationCode","$4d7a66b176a5dddb$export$9099ad97b570f7c","$8adf1144ec7585ad$export$aec7b6756585c081","opt_radius","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","atan2","sqrt","$8adf1144ec7585ad$export$80a87d59b6e09730","distance","bearing","lon1","dByR","lat","asin","$31a6ec27eb422148$export$bcc761834e33d339","coordinate1","coordinate2","equals","$31a6ec27eb422148$export$d40e2456b1281660","cosAngle","sinAngle","$31a6ec27eb422148$export$5a0d9577a24f3c5b","projection","worldWidth","worldsAway","$31a6ec27eb422148$export$c8ebaff90a21375a","opt_sourceExtentWidth","projectionExtent","sourceExtentWidth","floor","$257c627c1e280f22$export$3fbbaef54e2e9d28","$257c627c1e280f22$export$678028d364072132","$257c627c1e280f22$export$6308908a0016f099","$78eb3a0f9f69d51f$export$568ed88074851180","$257c627c1e280f22$export$7eb84799c931fe91","projectionLike","replace","$257c627c1e280f22$export$75cdc5d556e3d9b2","opt_units","pointResolution","getter","toEPSG4326_1","$257c627c1e280f22$export$747af4f49bde2f53","vertices","$257c627c1e280f22$export$a42db349809b0c24","projections","forEach","$257c627c1e280f22$export$fd4cd3535c7ea97f","$257c627c1e280f22$export$f704437a72056fb8","defaultCode","$257c627c1e280f22$export$c7a9310bdeddab53","projection1","projection2","equalUnits","sourceProjection","destinationProjection","transformFunc","$0e52faab48d1c258$export$7eb84799c931fe91","$257c627c1e280f22$export$9336879ef6599bf5","$257c627c1e280f22$export$4b169b49e1a4823b","$257c627c1e280f22$export$f2a2f51d8aa8d6b0","projections2","forwardTransform","inverseTransform","$257c627c1e280f22$var$userProjection","$257c627c1e280f22$export$352fd07bdd93dc1e","$257c627c1e280f22$export$4a182a4d53d7595c","$257c627c1e280f22$export$b5d00774755783fc","destProjection","$257c627c1e280f22$export$a7d473ff80a6a3b","$257c627c1e280f22$export$f87215506b474b9e","$38fbdbcddbfb2114$export$92106241c01aa541","opt_dest","dest","j","$38fbdbcddbfb2114$export$d40e2456b1281660","anchor","anchorX","anchorY","deltaX","deltaY","k","$a2e3ad3c6452af0b$exports","PROJECTIONS","$dbcd2854ae42c095$exports","fromEPSG4326","toEPSG4326","$2c40e41d9046f704$var$tmpTransform","$2c40e41d9046f704$export$9099ad97b570f7c","Geometry","fn","lastResult","lastArgs","lastThis","called","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","opt_transform","applyTransform","nextArgs","$2c40e41d9046f704$var$__extends","simplifyTransformed","closestPointXY","closestPoint","minSquaredDistance","containsXY","coord","getClosestPoint","opt_closestPoint","NaN","intersectsCoordinate","computeExtent","isNaN","$d333a56ccd100cfd$export$d1e01ccfd06bf8ee","rotate","scale","opt_sy","opt_anchor","simplify","tolerance","getType","intersectsExtent","translate","sourceProj","inCoordinates","outCoordinates","pixelExtent","projectedExtent","$a1ed4c2e9ff299f1$var$cloneGeometries","geometries","clonedGeometries","$a1ed4c2e9ff299f1$export$9099ad97b570f7c","GeometryCollection","opt_geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","$a1ed4c2e9ff299f1$var$__extends","unlistenGeometriesChange_","geometryCollection","setGeometries","getGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","concat","simplifiedGeometries","simplified","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","isEmpty","$2c40e41d9046f704$exports","$45178ee5c320f5c0$export$9099ad97b570f7c","FeatureFormat","dataProjection","defaultFeatureProjection","getReadOptions","opt_options","readProjection","featureProjection","adaptOptions","readFeature","readFeatures","readGeometry","writeFeature","feature","writeFeatures","features","writeGeometry","$45178ee5c320f5c0$export$534b7b915a5ec453","write","transformed","decimals","power_1","pow","round","$82712b733b1390bc$export$9099ad97b570f7c","$3e9a0d8aed32823b$var$getObject","JSON","parse","$3e9a0d8aed32823b$export$9099ad97b570f7c","JSONFeature","$3e9a0d8aed32823b$var$__extends","readFeatureFromObject","readFeaturesFromObject","readGeometryFromObject","readProjectionFromObject","stringify","writeFeatureObject","writeFeaturesObject","writeGeometryObject","$4d6d0df5f6d473fe$export$9099ad97b570f7c","$fbc4cbc2dbecf2fd$export$2a65008b73824080","layout","$fbc4cbc2dbecf2fd$export$36912b83e488cd77","simpleGeometry","getFlatCoordinates","getStride","$fbc4cbc2dbecf2fd$export$9099ad97b570f7c","SimpleGeometry","$fbc4cbc2dbecf2fd$var$__extends","getCoordinates","getFirstCoordinate","getLastCoordinate","getLayout","getSimplifiedGeometryInternal","setFlatCoordinates","setCoordinates","opt_layout","setLayout","nesting","$fbc4cbc2dbecf2fd$var$getLayoutForStride","$38fbdbcddbfb2114$export$8f869025bba9609b","$38fbdbcddbfb2114$export$41b0d7466cde8385","$1eeaf5ba3166ef8e$var$assignClosest","offset1","offset2","$1eeaf5ba3166ef8e$export$acf7548d1f0e8581","squaredDelta","$1eeaf5ba3166ef8e$export$ba38095f6bb45df2","ends","$1eeaf5ba3166ef8e$export$cc4caddc4c9b8b6f","maxDelta","isRing","opt_tmpPoint","squaredDistance","tmpPoint","$1eeaf5ba3166ef8e$export$3dd3914e22f9012e","$341fcb0cdbf81912$export$e175f505890ac90f","$341fcb0cdbf81912$export$ab1a51db55485752","coordinatess","opt_ends","jj","$54c380e0fb260ccc$export$a5f6a1911260c251","simplifiedFlatCoordinates","simplifiedOffset","markers","stack","last","pop","first","maxSquaredDistance","squaredDistance_1","$54c380e0fb260ccc$export$ade7859c9eb393ec","simplifiedEnds","$54c380e0fb260ccc$export$383ea8a1f2974dfb","$54c380e0fb260ccc$export$e29de4fdb2175738","$54c380e0fb260ccc$export$1df19a1eb5514c2f","$ff23e8a6e0292000$export$40f3d9558cf6e846","ret","point1","point2","$ebfee1857bdd365b$export$92f32d891164b0ac","opt_coordinates","$ebfee1857bdd365b$export$d82a8a3167f968d","opt_coordinatess","$ebfee1857bdd365b$export$db289937da1f5213","endss","opt_coordinatesss","coordinatesss","$ad7f8cfc102a20b1$export$55be7a9e3fef4787","fraction","o","length_1","cumulativeLengths","haystack","needle","opt_comparator","mid","cmp","comparator","low","high","found","$16831c8b3cdccec7$export$26b1c556c0e0f127","$ad7f8cfc102a20b1$export$1a804b04fa5a0253","m","extrapolate","lo","hi","m0","$3c65f17c9f70f766$export$f7b55b637f92fd7","$3c65f17c9f70f766$export$e2ed757909b25f63","wn","$3c65f17c9f70f766$export$51e46a3625992b91","$2b86337dc0cae6ce$export$26f047a5bfac4b1a","coordinatesExtent","start","intersects","startRel","endRel","startX","startY","endX","endY","slope","$d333a56ccd100cfd$export$525a75abb91115e3","$2b86337dc0cae6ce$export$717c2c7c46a5bf3d","$2b86337dc0cae6ce$export$f14bd9270666b480","$72877ffc9795efcc$export$7326ac1b36a49776","$7fc9bac1c7e6a765$export$9099ad97b570f7c","LineString","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","$7fc9bac1c7e6a765$var$__extends","appendCoordinate","lineString","forEachSegment","getCoordinateAtM","opt_extrapolate","getCoordinateAt","getLength","getFlatMidpoint","$fbc4cbc2dbecf2fd$exports","$8e075789d295b82f$export$9099ad97b570f7c","MultiLineString","ends_","lineStrings","$8e075789d295b82f$var$__extends","appendLineString","multiLineString","opt_interpolate","interpolate","$ad7f8cfc102a20b1$export$8958f67b085a89b1","getEnds","getLineString","$7fc9bac1c7e6a765$exports","getLineStrings","getFlatMidpoints","midpoints","$2b86337dc0cae6ce$export$414b603e1c51ecd4","$d78f061ab8e6937f$export$9099ad97b570f7c","Point","$d78f061ab8e6937f$var$__extends","$341fcb0cdbf81912$export$a53e62528b652807","$ec70b77b5d212b39$export$9099ad97b570f7c","MultiPoint","$ec70b77b5d212b39$var$__extends","appendPoint","multiPoint","getPoint","$d78f061ab8e6937f$exports","getPoints","points","$d21f3a0ce2fde0f1$export$9bf2059fd656d5e9","twiceArea","$d21f3a0ce2fde0f1$export$99cb92d00fd73c87","$2eba2434999e946d$export$9099ad97b570f7c","LinearRing","$2eba2434999e946d$var$__extends","getArea","$7db2c52ec52bd7cf$export$45b4e4437984917d","flatCenters","flatCentersOffset","intersections","rr","pointX","maxSegmentLength","sort","segmentLength","abs","$4e5c47cc66c1cbb9$export$c77fe031a1447f2e","$846e7d12e139eeec$export$add61ad31d0a68b4","edge","$846e7d12e139eeec$export$586adaf930d9fdb6","opt_right","right","isClockwise","$846e7d12e139eeec$export$325e57738fd8b321","$846e7d12e139eeec$export$4efd43868de93336","$8577ba96696c7470$var$Polygon","Polygon","flatInteriorPointRevision_","flatInteriorPoint_","orientedRevision_","orientedFlatCoordinates_","$8577ba96696c7470$var$__extends","appendLinearRing","linearRing","polygon","getOrientedFlatCoordinates","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","$2eba2434999e946d$exports","getLinearRings","linearRings","$8577ba96696c7470$export$9099ad97b570f7c","$8577ba96696c7470$export$bbb8e839e9c5bda9","opt_n","opt_sphereRadius","$8577ba96696c7470$export$b50d271c6e9656cd","$8577ba96696c7470$export$186fa890234c5366","circle","opt_sides","opt_angle","sides","getCenter","arrayLength","$8577ba96696c7470$export$5d1798f0e1df079","getRadius","startAngle","$2b01038ad8909ddb$export$9099ad97b570f7c","MultiPolygon","opt_endss","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","polygons","$2b01038ad8909ddb$var$__extends","appendPolygon","newEndss","multiPolygon","$1eeaf5ba3166ef8e$export$7bbfd5f5d0d7544b","$1eeaf5ba3166ef8e$export$6564f135364e210c","$3c65f17c9f70f766$export$664b9cb38de51b70","$d21f3a0ce2fde0f1$export$3ed76a8ff8a671c","getEndss","getFlatInteriorPoints","$089899774745c253$export$3ed76a8ff8a671c","interiorPoints","$7db2c52ec52bd7cf$export$2bd6b2f516920f59","getInteriorPoints","$ec70b77b5d212b39$exports","$846e7d12e139eeec$export$9ae9bd8fe57776c1","simplifiedEndss","$54c380e0fb260ccc$export$503109e33f5b8344","getPolygon","prevEnds","$8577ba96696c7470$exports","getPolygons","$2b86337dc0cae6ce$export$eae4874c99627698","$341fcb0cdbf81912$export$abe2fb3e7ce9556","lastEnds","$90b5c261a4f758a8$var$readGeometry","$90b5c261a4f758a8$var$readPointGeometry","$90b5c261a4f758a8$var$readLineStringGeometry","$90b5c261a4f758a8$var$readPolygonGeometry","$90b5c261a4f758a8$var$readMultiPointGeometry","$8e075789d295b82f$exports","$90b5c261a4f758a8$var$readMultiLineStringGeometry","$2b01038ad8909ddb$exports","$90b5c261a4f758a8$var$readMultiPolygonGeometry","map","$a1ed4c2e9ff299f1$exports","$90b5c261a4f758a8$var$readGeometryCollectionGeometry","$90b5c261a4f758a8$var$writeGeometry","geoJSON","$90b5c261a4f758a8$var$writePointGeometry","$90b5c261a4f758a8$var$writeLineStringGeometry","rightHanded","$90b5c261a4f758a8$var$writePolygonGeometry","$90b5c261a4f758a8$var$writeMultiPointGeometry","$90b5c261a4f758a8$var$writeMultiLineStringGeometry","$90b5c261a4f758a8$var$writeMultiPolygonGeometry","geometry1","$90b5c261a4f758a8$var$writeGeometryCollectionGeometry","$90b5c261a4f758a8$export$9099ad97b570f7c","GeoJSON","geometryName","extractGeometryName_","extractGeometryName","$90b5c261a4f758a8$var$__extends","geoJSONFeature","$e5266561d049a513$exports","geoJSONFeatures","crs","objects","$3e9a0d8aed32823b$exports","$24f1b8341536f1fa$var$HEX_COLOR_RE_","$24f1b8341536f1fa$var$NAMED_COLOR_RE_","$24f1b8341536f1fa$export$9fe004474d6f7f65","color","$24f1b8341536f1fa$export$47bee913e0e80eb4","$24f1b8341536f1fa$var$fromNamed","body","appendChild","rgb","getComputedStyle","removeChild","cache","cacheSize","$24f1b8341536f1fa$export$21528ce64591bf2","s","g","exec","hasAlpha","parseInt","substr","$24f1b8341536f1fa$export$2e33abec8aecd572","Number","$24f1b8341536f1fa$var$fromStringInternal_","$24f1b8341536f1fa$export$7266a24c0caa2a8","$6184461a452b3df9$var$IconImageCache","IconImageCache","cache_","cacheSize_","maxCacheSize_","clear","canExpireCache","expire","iconImage","src","crossOrigin","$6184461a452b3df9$var$getKey","setSize","maxCacheSize","$6184461a452b3df9$export$601b9e2be44c7cb2","$6755f2167754dc52$export$9099ad97b570f7c","$7436508a8164a9fe$export$9099ad97b570f7c","BaseLayer","opacity","visible","zIndex","maxResolution","minResolution","minZoom","maxZoom","className_","className","state_","$7436508a8164a9fe$var$__extends","getClassName","getLayerState","opt_managed","state","layer","managed","getOpacity","sourceState","getSourceState","getVisible","getMaxResolution","getMinResolution","getMinZoom","getMaxZoom","getLayersArray","opt_array","getLayerStatesArray","opt_states","setMaxResolution","setMinResolution","setMaxZoom","setMinZoom","setOpacity","setVisible","setZIndex","zindex","$b9d5daa9625d320c$export$9099ad97b570f7c","$021387f4bbb0e320$export$9099ad97b570f7c","$d78a3f8d945e8ec2$export$16970faadcd3f29b","layerState","viewState","zoom","$d78a3f8d945e8ec2$export$9099ad97b570f7c","Layer","baseOptions","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","render","setMap","handleSourcePropertyChange_","setSource","$d78a3f8d945e8ec2$var$__extends","array","states","getSource","getState","handleSourceChange_","getFeatures","pixel","Promise","resolve","frameState","layerRenderer","getRenderer","prepareFrame","renderFrame","layerStatesArray","some","arrayLayerState","createRenderer","hasRenderer","$7436508a8164a9fe$exports","$ba9cc254c2e615b0$var$expireIconCache","$ba9cc254c2e615b0$export$9099ad97b570f7c","MapRenderer","map_","$ba9cc254c2e615b0$var$__extends","dispatchRenderEvent","calculateMatrices2D","coordinateToPixelTransform","pixelToCoordinateTransform","forEachFeatureAtCoordinate","hitTolerance","checkWrapped","thisArg","layerFilter","thisArg2","result","translatedCoordinate","offsets","layerStates","numLayers","matches","tmpCoord","$d78a3f8d945e8ec2$exports","inView","getWrapX","callback_1","order","i1","distanceSq","forEachLayerAtPixel","hasFeatureAtCoordinate","getMap","scheduleExpireIconCache","postRenderFunctions","$7246c595371691cc$export$9099ad97b570f7c","RenderEvent","opt_inversePixelTransform","opt_frameState","opt_context","inversePixelTransform","context","$7246c595371691cc$var$__extends","$35f3eb34fb00a437$var$fontRegEx","RegExp","$35f3eb34fb00a437$var$fontRegExMatchIndex","$35f3eb34fb00a437$export$b705256ab57c20ca","fontSpec","match","lineHeight","weight","variant","families","family","$158e6a8754c20e7c$export$fe55455cced7aebb","opt_width","opt_height","opt_canvasPool","opt_Context2DSettings","canvas","shift","getContext","$158e6a8754c20e7c$export$495cfc7e7a2968e6","newNode","oldNode","parent","parentNode","replaceChild","$158e6a8754c20e7c$export$47503d53c08beb29","$33ba1dda25080cc3$export$6ad0413f8fea3c71","$33ba1dda25080cc3$export$70c5a077e5d6beb9","$33ba1dda25080cc3$export$907cf5cff4a8acb1","console","warn","$33ba1dda25080cc3$var$measureFont","measureElement","$33ba1dda25080cc3$var$measureContext","$33ba1dda25080cc3$export$384c0f09c94ed6cc","$33ba1dda25080cc3$export$6491effd8671e9f6","interval","referenceWidth","referenceFonts","text","isAvailable","fontStyle","fontWeight","fontFamily","available","referenceFont","$33ba1dda25080cc3$export$85ae5018a2fb98b4","check","done","fonts","font","clearInterval","setInterval","$33ba1dda25080cc3$export$a2bf16790cd8f004","metrics","$33ba1dda25080cc3$var$measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","innerHTML","minHeight","maxHeight","padding","border","position","display","left","offsetHeight","measureText","$33ba1dda25080cc3$export$4b2ca35321179b27","$33ba1dda25080cc3$export$3004e0c7927eb2d1","labelOrImage","originX","originY","w","h","save","globalAlpha","setTransform","contextInstructions","label","$33ba1dda25080cc3$var$executeLabelInstructions","drawImage","restore","$2d3983d3c236cd0f$export$9099ad97b570f7c","CompositeMapRenderer","fontChangeListenerKey_","redrawText","element_","$35f3eb34fb00a437$export$2fbf9d496fb0d5a8","container","getViewport","insertBefore","firstChild","children_","renderedVisible_","$2d3983d3c236cd0f$var$__extends","event_1","$7246c595371691cc$exports","declutterLayers","previousElement","layerIndex","element","renderDeclutter","children","oldChildren","childNodes","oldChild","newChild","$158e6a8754c20e7c$export$439ebc2b0f0ec9f4","getDataAtPixel","$ba9cc254c2e615b0$exports","$8c239c70ba402b1b$export$9099ad97b570f7c","$12698a83d5d6619d$var$Property","$12698a83d5d6619d$export$cf29312ab18b402e","CollectionEvent","opt_element","opt_index","$12698a83d5d6619d$var$__extends","$12698a83d5d6619d$export$9099ad97b570f7c","Collection","unique_","unique","array_","assertUnique_","updateLength_","extend","getArray","item","insertAt","elem","removeAt","remove","prev","setAt","opt_except","$78bdbac1eaad4f08$var$Property","$78bdbac1eaad4f08$export$9099ad97b570f7c","LayerGroup","layers","layersListenerKeys_","listenerKeys_","handleLayersChanged_","$12698a83d5d6619d$exports","setLayers","$78bdbac1eaad4f08$var$__extends","handleLayerChange_","getLayers","handleLayersAdd_","handleLayersRemove_","layersArray","collectionEvent","pos","ownLayerState","defaultZIndex","$5f50aaa354ee43e8$export$9099ad97b570f7c","MapEvent","$5f50aaa354ee43e8$var$__extends","$5cb33e338f86483d$export$9099ad97b570f7c","MapBrowserEvent","originalEvent","opt_dragging","pixel_","coordinate_","dragging","$5cb33e338f86483d$var$__extends","getEventPixel","getCoordinateFromPixel","$5f50aaa354ee43e8$exports","$1701e629f00eed9c$export$9099ad97b570f7c","SINGLECLICK","CLICK","DBLCLICK","POINTERDRAG","POINTERMOVE","POINTERDOWN","POINTERUP","POINTEROVER","POINTEROUT","POINTERENTER","POINTERLEAVE","POINTERCANCEL","$eef913c1b3abba70$export$9099ad97b570f7c","$5ce77a9367e71852$export$9099ad97b570f7c","MapBrowserEventHandler","moveTolerance","clickTimeoutId_","emulateClicks_","dragging_","dragListenerKeys_","moveTolerance_","down_","activePointers_","trackedTouches_","pointerdownListenerKey_","handlePointerDown_","originalPointerMoveEvent_","relayedListenerKey_","relayEvent_","boundHandleTouchMove_","handleTouchMove_","$5ce77a9367e71852$var$__extends","emulateClick_","pointerEvent","newEvent","$5cb33e338f86483d$exports","clearTimeout","setTimeout","newEvent1","updateActivePointers_","pointerId","handlePointerUp_","isMouseActionButton_","button","doc","getOwnerDocument","handlePointerMove_","getRootNode","isMoving_","cancelable","clientX","clientY","$75da2f64972311f8$export$9099ad97b570f7c","$aa15c1da5ede11e4$export$9099ad97b570f7c","$a5b5f21c6babad23$export$9099ad97b570f7c","PriorityQueue","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","dequeue","elements","priorities","siftUp_","elementKey","enqueue","priority","siftDown_","getCount","getLeftChildIndex_","getRightChildIndex_","getParentIndex_","heapify_","isKeyQueued","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","$7c9022c2746a8240$export$9099ad97b570f7c","$79e77b05f0af3af4$export$9099ad97b570f7c","TileQueue","tilePriorityFunction","tileChangeCallback","getKey","boundHandleTileChange_","handleTileChange","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","$79e77b05f0af3af4$var$__extends","added","getTilesLoading","tile","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","load","$79e77b05f0af3af4$export$f7de9366327711a7","tileSourceKey","tileCenter","tileResolution","wantedTiles","$9d93d71f67d1f597$export$9099ad97b570f7c","$e90c70f3094ec23d$export$9099ad97b570f7c","$7a79f648aa728795$export$33d0cf822839cfa8","onlyCenter","smooth","opt_isMoving","opt_centerShift","viewWidth","viewHeight","shiftX","shiftY","ratio","$7a79f648aa728795$export$eaafe0fae18e32b1","$0e1a1b60122676ba$var$getViewportClampedResolution","maxExtent","viewportSize","showFullExtent","xResolution","yResolution","$0e1a1b60122676ba$var$getSmoothClampedResolution","$0e1a1b60122676ba$export$56cba9b4a749f219","opt_smooth","opt_maxExtent","opt_showFullExtent","cappedMaxRes","$bfacba8d4304d68f$export$e97ec87d2336bd4e","$bfacba8d4304d68f$export$eaafe0fae18e32b1","$69c984769656a840$export$9fbc3b1d6b2da9ec","$69c984769656a840$export$673b9849e2bc032c","$69c984769656a840$export$1b5c1277e30d397d","$69c984769656a840$export$5523e35ab8ae283a","$013cf7a9f19a8f6c$var$animationCallback","returnValue","$013cf7a9f19a8f6c$export$535fae5a159fbda4","smoothExtentConstraint","constrainOnlyCenter","multiWorld","$013cf7a9f19a8f6c$export$8b6914b45b83f21f","resolutionConstraint","zoomFactor","smoothResolutionConstraint","projExtent","resolutions","constrainResolution","capped","z","$0e1a1b60122676ba$export$d1041fa75d07f305","defaultMaxResolution","defaultMinResolution","defaultMaxZoom","power","opt_minResolution","minZoomLevel","ceil","cappedZoomLevel","zoomLevel","$0e1a1b60122676ba$export$7690ad4e930f454b","constraint","$013cf7a9f19a8f6c$export$9665b691bc2d5ca0","theta","opt_tolerance","enableRotation","constrainRotation","$013cf7a9f19a8f6c$export$5d87c27d7d9f380e","animation","sourceCenter","targetCenter","sourceResolution","targetResolution","sourceRotation","targetRotation","$013cf7a9f19a8f6c$var$calculateCenterOn","rotX","rotY","$013cf7a9f19a8f6c$export$9099ad97b570f7c","View","hints_","animations_","updateAnimationKey_","projection_","viewportSize_","targetCenter_","targetResolution_","targetRotation_","cancelAnchor_","applyOptions_","$013cf7a9f19a8f6c$var$__extends","resolutionConstraintInfo","maxResolution_","minResolution_","zoomFactor_","resolutions_","padding_","minZoom_","centerConstraint","rotationConstraint","constraints_","setRotation","setCenterInternal","setResolution","setZoom","options_","oldPadding","newPadding","getResolution","offsetX","offsetY","getUpdatedOptions_","newOptions","getZoom","getCenterInternal","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","args","getProjection","animateInternal","animationCount","Date","now","series","complete","duration","easing","getResolutionForZoom","delta","setHint","updateAnimations_","getInteracting","cancelAnimations","cancelAnimationFrame","more","seriesComplete","elapsed","progress","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","currentCenter","currentResolution","opt_rotation","setViewportSize","opt_size","getConstraints","getConstrainResolution","getHints","opt_hints","calculateExtent","calculateExtentInternal","getViewportSizeMinusPadding_","getZoomForResolution","setConstrainResolution","enabled","getResolutions","getResolutionForExtent","getResolutionForExtentInternal","getResolutionForValueFunction","opt_power","getConstrainedResolution","getValueForResolutionFunction","logPower","reducedSize","nearest","baseLevel","fit","geometryOrExtent","fromExtent","userProjection","fitInternal","rotatedExtentForGeometry","coords","minRotX","minRotY","maxRotX","maxRotY","rotatedExtent","centerRot","centerX","centerY","getConstrainedCenter","centerOn","centerOnInternal","calculateCenterShift","centerShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","adjustResolutionInternal","isMoving","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","opt_doNotCancelAnims","opt_forceMoving","newCenter","opt_duration","opt_resolutionDirection","beginInteraction","endInteraction","endInteractionInternal","opt_targetResolution","getConstrainedZoom","targetZoom","opt_direction","targetRes","$1584674e6c442cb4$export$c563c2b7121f8771","$1584674e6c442cb4$export$48d31d2725e4d98b","$f45eee633772e0e7$export$9099ad97b570f7c","PluggableMap","optionsInternal","keyboardEventTarget","getElementById","controls","interactions","overlays","layerGroup","$78bdbac1eaad4f08$exports","view","$013cf7a9f19a8f6c$exports","$f45eee633772e0e7$var$createOptionsInternal","boundHandleBrowserEvent_","handleBrowserEvent","maxTilesLoading_","maxTilesLoading","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","renderFrame_","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","overflow","overlayContainer_","pointerEvents","overlayContainerStopEvent_","mapBrowserEventHandler_","keyboardEventTarget_","keyHandlerKeys_","overlays_","overlayIdIndex_","handleResize_","postRenderFunctions_","tileQueue_","$79e77b05f0af3af4$exports","getTilePriority","handleTileChange_","handleLayerGroupChanged_","handleViewChanged_","handleSizeChanged_","handleTargetChanged_","control","interaction","addOverlayInternal_","toString","$f45eee633772e0e7$var$__extends","addControl","getControls","addInteraction","getInteractions","addLayer","getLayerGroup","addOverlay","overlay","getOverlays","setTarget","forEachFeatureAtPixel","getCoordinateFromPixelInternal","getFeaturesAtPixel","hasFeatureAtPixel","getEventCoordinate","getEventCoordinateInternal","viewportPosition","getBoundingClientRect","eventPosition","changedTouches","top","getTarget","getTargetElement","getView","getOverlayById","getLoading","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","getSize","getOverlayContainer","getOverlayContainerStopEvent","targetElement","ownerDocument","browserEvent","mapBrowserEvent","handleMapBrowserEvent","rootNode","contains","documentElement","interactionsArray","getActive","handlePostRender","tileQueue","hints","viewHints","lowOnFrameBudget","time","$5ce77a9367e71852$exports","updateSize","handleViewPropertyChanged_","updateViewportSize_","isRendered","renderSync","handleFontsChanged","removeControl","removeInteraction","removeLayer","removeOverlay","previousFrameState","declutterTree","usedTiles","setLayerGroup","setView","computedStyle","offsetWidth","parseFloat","$52e6a1ab15a4b16d$export$9099ad97b570f7c","Control","target_","listenerKeys","$52e6a1ab15a4b16d$var$__extends","mapEvent","$d272f1a7f2d66954$export$9099ad97b570f7c","Attribution","ulElement_","collapsed_","collapsed","userCollapsed_","overrideCollapsible_","collapsible","collapsible_","tipLabel","expandClassName","collapseLabel","collapseClassName","collapseLabel_","textContent","label_","activeLabel","toggleButton_","setAttribute","title","handleClick_","cssClasses","renderedAttributions_","$d272f1a7f2d66954$var$__extends","collectSourceAttributions_","lookup","visibleAttributions","attributionGetter","getAttributions","attributions","getAttributionsCollapsible","setCollapsible","updateElement_","lastChild","$158e6a8754c20e7c$export$f0994cfd84ab1152","handleToggle_","classList","toggle","getCollapsible","setCollapsed","getCollapsed","$52e6a1ab15a4b16d$exports","$df8a7089a421bf2f$export$9099ad97b570f7c","Rotate","compassClassName","add","callResetNorth_","resetNorth","duration_","autoHide_","autoHide","rotation_","$df8a7089a421bf2f$var$__extends","resetNorth_","$1022d6743ffba880$export$9099ad97b570f7c","Zoom","zoomInClassName","zoomOutClassName","zoomInLabel","zoomOutLabel","zoomInTipLabel","zoomOutTipLabel","inElement","createTextNode","outElement","$1022d6743ffba880$var$__extends","zoomByDelta_","currentZoom","newZoom","$6fe2ef1e7a750c69$export$9099ad97b570f7c","$f26f33305875ffd9$export$63568b31cb17dd4d","$f26f33305875ffd9$export$d2c07614bfd6a817","$f26f33305875ffd9$export$9099ad97b570f7c","Interaction","setActive","$f26f33305875ffd9$var$__extends","active","$247995ce03a38b1e$export$9099ad97b570f7c","DoubleClickZoom","delta_","$247995ce03a38b1e$var$__extends","stopEvent","shiftKey","$f26f33305875ffd9$exports","zoomByDelta","$15b70ec573750fa6$export$e61edea4dfe4ed9b","$15b70ec573750fa6$export$9099ad97b570f7c","PointerInteraction","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","trackedPointers_","targetPointers","$15b70ec573750fa6$var$__extends","getPointerCount","updateTrackedPointers_","handledUp","handled","$15b70ec573750fa6$var$isPointerDraggingEvent","$1dd9bb17917c1459$export$8dbdea330bbd6b3c","conditions","pass","$1dd9bb17917c1459$export$7576515282e06e7a","altKey","metaKey","ctrlKey","$1dd9bb17917c1459$export$584a07df7b145c47","hasAttribute","activeElement","$1dd9bb17917c1459$export$363947888fb85da6","$1dd9bb17917c1459$export$a8612972eacfc116","$1dd9bb17917c1459$export$9f5e19851eeaf2c1","$1dd9bb17917c1459$export$1734dfcac3c09b2f","$1dd9bb17917c1459$export$59c8376875f673f8","$1dd9bb17917c1459$export$5bbcce8021828272","tagName","$1dd9bb17917c1459$export$d31d3f3aa38542a8","pointerType","$1dd9bb17917c1459$export$45cd27c0322d6513","isPrimary","$f61551752c4f4f08$export$9099ad97b570f7c","DragPan","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition","condition_","onFocusOnly","noKinetic_","$f61551752c4f4f08$var$__extends","centroid","$15b70ec573750fa6$exports","update","getDistance","getAngle","centerpx","$d813784fb0405083$export$9099ad97b570f7c","DragRotate","lastAngle_","$d813784fb0405083$var$__extends","$46289f3b330b6586$export$9099ad97b570f7c","RenderBox","geometry_","startPixel_","endPixel_","$46289f3b330b6586$var$__extends","render_","startPixel","endPixel","px","setPixels","createOrUpdateGeometry","$a8d898a7bd6fd9e0$var$DragBoxEventType","$a8d898a7bd6fd9e0$export$4d9b552836937ca2","DragBoxEvent","$a8d898a7bd6fd9e0$var$__extends","$a8d898a7bd6fd9e0$export$9099ad97b570f7c","DragBox","box_","$46289f3b330b6586$exports","minArea_","minArea","onBoxEnd","boxEndCondition_","boxEndCondition","defaultBoxEndCondition","completeBox","$6a3aca92466c0896$export$9099ad97b570f7c","DragZoom","out_","out","$6a3aca92466c0896$var$__extends","factor","$a8d898a7bd6fd9e0$exports","$11a5f739eb17e24b$export$9099ad97b570f7c","$52d09675c125dcf1$export$9099ad97b570f7c","KeyboardPan","defaultCondition_","pixelDelta_","pixelDelta","$52d09675c125dcf1$var$__extends","keyEvent","keyCode","mapUnitsDelta","pan","$1fae754d3ea6677a$export$9099ad97b570f7c","KeyboardZoom","$1fae754d3ea6677a$var$__extends","charCode","charCodeAt","$e0121ce5936cb4d8$export$9099ad97b570f7c","Kinetic","decay","minVelocity","delay","decay_","minVelocity_","delay_","points_","angle_","initialVelocity_","lastIndex","firstIndex","$cd0092067e7ded9c$export$9658e13a40f6ce34","TRACKPAD","WHEEL","$cd0092067e7ded9c$export$9099ad97b570f7c","MouseWheelZoom","totalDelta_","lastDelta_","timeout_","timeout","useAnchor_","useAnchor","constrainResolution_","lastAnchor_","startTime_","timeoutId_","mode_","trackpadEventGap_","trackpadTimeoutId_","deltaPerZoom_","$cd0092067e7ded9c$var$__extends","endInteraction_","wheelEvent","deltaMode","WheelEvent","DOM_DELTA_PIXEL","DOM_DELTA_LINE","timeLeft","handleWheelZoom_","setMouseAnchor","$a80081c3438ffbf4$export$9099ad97b570f7c","PinchRotate","pointerOptions","anchor_","rotating_","rotationDelta_","threshold_","threshold","$a80081c3438ffbf4$var$__extends","rotationDelta","touch0","touch1","$e1a7c7fda3fcb5d0$export$9099ad97b570f7c","PinchZoom","lastDistance_","lastScaleDelta_","$e1a7c7fda3fcb5d0$var$__extends","scaleDelta","$b92278933294ec34$export$9099ad97b570f7c","Map1","$1022d6743ffba880$exports","zoomOptions","$df8a7089a421bf2f$exports","rotateOptions","attribution","$d272f1a7f2d66954$exports","attributionOptions","$3ba5c30aca7182c2$export$b403fbac94228e09","altShiftDragRotate","$d813784fb0405083$exports","doubleClickZoom","$247995ce03a38b1e$exports","zoomDelta","zoomDuration","dragPan","$f61551752c4f4f08$exports","pinchRotate","$a80081c3438ffbf4$exports","pinchZoom","$e1a7c7fda3fcb5d0$exports","keyboard","$52d09675c125dcf1$exports","$1fae754d3ea6677a$exports","mouseWheelZoom","$cd0092067e7ded9c$exports","shiftDragZoom","$6a3aca92466c0896$exports","$c930ad710d84b305$export$b403fbac94228e09","$b92278933294ec34$var$__extends","$2d3983d3c236cd0f$exports","$f45eee633772e0e7$exports","$85f396a493b4e027$export$9099ad97b570f7c","Fill","color_","getColor","setColor","$f7585e292fcf6dc5$export$9099ad97b570f7c","$a451836ed9fa69af$export$9099ad97b570f7c","$cd8285e3e84f4d13$export$9099ad97b570f7c","$7736c129cc15e8f7$export$9099ad97b570f7c","ImageStyle","opacity_","rotateWithView_","rotateWithView","scale_","scaleArray_","displacement_","displacement","getScale","getRotateWithView","getDisplacement","getScaleArray","getAnchor","getImage","getHitDetectionImage","getPixelRatio","getImageState","getImageSize","getOrigin","setRotateWithView","setScale","listenImageChange","unlistenImageChange","$723ec55387d416d6$export$9099ad97b570f7c","ImageBase","$723ec55387d416d6$var$__extends","$fced4221eaca0419$export$469eb8ba3f45955e","image","loadHandler","errorHandler","img","promise","listening_1","then","catch","ImageWrapper","imageLoadFunction","src_","image_","unlisten_","imageLoadFunction_","$fced4221eaca0419$var$__extends","handleImageError_","unlistenImage_","handleImageLoad_","setImage","$723ec55387d416d6$exports","$e98e828d2003bc1a$var$taintedTestContext","$e98e828d2003bc1a$var$IconImage","IconImage","imageState","hitDetectionImage_","canvas_","imageState_","size_","tainted_","$e98e828d2003bc1a$var$__extends","isTainted_","getImageData","dispatchChangeEvent_","replaceColor_","fillRect","getSrc","$fced4221eaca0419$exports","listenImage","ctx","globalCompositeOperation","fillStyle","imgData","putImageData","$e98e828d2003bc1a$export$7eb84799c931fe91","$bdd0cbe3d07330ec$export$9099ad97b570f7c","Icon","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","crossOrigin_","imgSize","iconImage_","$e98e828d2003bc1a$exports","offset_","offsetOrigin_","offsetOrigin","origin_","$bdd0cbe3d07330ec$var$__extends","setAnchor","iconImageSize","$6376afaf3edc9c87$export$55029509b82b2e2b","$09e02ea90a0e8bf3$export$9099ad97b570f7c","RegularShape","hitDetectionCanvas_","fill_","fill","radius_","radius1","radius2_","radius2","stroke_","stroke","renderOptions_","$09e02ea90a0e8bf3$var$__extends","getFill","getRadius2","getStroke","createHitDetectionCanvas_","renderOptions","draw_","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","r1","r2","alpha","miterRatio","bevelAdd","aa","dd","innerMiterRatio","innerLength","createRenderOptions","strokeStyle","lineDash","lineDashOffset","getWidth","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","maxRadius","createPath_","lineWidth","setLineDash","drawHitDetectionCanvas_","arc","step","angle0","radiusC","lineTo","closePath","$52515b32646d1620$export$9099ad97b570f7c","CircleStyle","$52515b32646d1620$var$__extends","setRadius","$09e02ea90a0e8bf3$exports","$5d571ec9414fea2a$export$9099ad97b570f7c","Stroke","lineCap_","lineCap","lineDash_","lineDashOffset_","lineJoin_","miterLimit_","width_","getLineCap","setLineCap","setLineDashOffset","setLineJoin","setMiterLimit","setWidth","$b14009c8ddfadc85$var$Style","Style","geometryFunction_","$b14009c8ddfadc85$var$defaultGeometryFunction","renderer","text_","zIndex_","getText","setRenderer","getGeometryFunction","setFill","setStroke","setText","$b14009c8ddfadc85$var$defaultStyles","$b14009c8ddfadc85$export$33d0043adf82cc14","$52515b32646d1620$exports","$b14009c8ddfadc85$export$9099ad97b570f7c","$37ca435c53f13d4d$exports","t1","t2","h1","u","p","_maxEntries","_minEntries","n1","leaf","m2","h2","o1","all","_all","search","toBBox","o2","collides","insert","_build","_splitRoot","_insert","i2","r3","a3","h3","o3","s1","l1","_condense","compareMinX","compareMinY","toJSON","fromJSON","u1","m1","_chooseSubtree","u2","m3","c3","e3","a4","_split","_adjustParentBBoxes","_chooseSplitAxis","h4","_chooseSplitIndex","o4","s2","l2","u3","p1","v","M","_allDistMargin","define","amd","RBush","$bb0e1df757854922$export$9099ad97b570f7c","opt_maxEntries","rbush_","$parcel$interopDefault","items_","extents","items","uid","getAll","getInExtent","bbox","forEach_","forEachInExtent","rbush","$3fa87a5786fdcb68$var$adaptAttributions","attributionLike","$3fa87a5786fdcb68$export$9099ad97b570f7c","Source","attributions_","attributionsCollapsible_","attributionsCollapsible","wrapX_","wrapX","$3fa87a5786fdcb68$var$__extends","getContextOptions","refresh","setAttributions","setState","$c0e76308793a8fd7$export$9099ad97b570f7c","$0d7b3e6e3fdff479$export$8dbdea330bbd6b3c","$2e1cfd628699255e$var$withCredentials","$2e1cfd628699255e$export$52988233cf090939","url","format","success","failure","xhr","XMLHttpRequest","open","responseType","withCredentials","onload","status","responseText","responseXML","DOMParser","parseFromString","response","onerror","send","$2e1cfd628699255e$export$4355fa6d12274ca5","addFeatures","$2649c727c2ac59b6$export$e3e368afaf9a4fc7","VectorSourceEvent","opt_feature","opt_features","$2649c727c2ac59b6$var$__extends","$2649c727c2ac59b6$export$9099ad97b570f7c","VectorSource","loader_","format_","overlaps_","overlaps","url_","loader","strategy_","strategy","collection","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","loadingExtentsCount_","nullGeometryFeatures_","idIndex_","uidIndex_","featureChangeKeys_","featuresCollection_","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","featureKey","addToIndex_","setupChangeEvents_","handleFeatureChange_","valid","newFeatures","geometryFeatures","length_2","length_3","modifyingCollection","removeFeature","opt_fast","featureId","removeFeatureInternal","clearEvent","forEachFeature","forEachFeatureAtCoordinateDirect","forEachFeatureInExtent","forEachFeatureIntersectingExtent","getFeaturesCollection","getFeaturesAtCoordinate","getFeaturesInExtent","getClosestFeatureToCoordinate","opt_filter","closestFeature","previousMinSquaredDistance","minDistance","getFeatureById","getFeatureByUid","getFormat","getOverlaps","getUrl","sid","removeFromIdIndex_","hasFeature","loadFeatures","loadedExtentsRtree","extentsToLoad","_loop_1","extentToLoad","this_1","removeLoadedExtent","removed","setLoader","setUrl","$3fa87a5786fdcb68$exports","$353a86b6785d23cf$export$9099ad97b570f7c","$289d8a06dd383ff7$export$9099ad97b570f7c","BaseTileLayer","preload","useInterimTilesOnError","setPreload","setUseInterimTilesOnError","$289d8a06dd383ff7$var$__extends","getPreload","getUseInterimTilesOnError","$0d7ccc2184bbb6ae$export$9099ad97b570f7c","LayerRenderer","boundHandleImageChange_","handleImageChange_","layer_","declutterExecutorGroup","$0d7ccc2184bbb6ae$var$__extends","loadedTileCallback","tiles","tileCoord","createLoadedTileFinder","tileRange","forEachLoadedTile","getLayer","renderIfReadyAndVisible","loadImage","$48340b1070105b4e$export$9099ad97b570f7c","CanvasLayerRenderer","renderedResolution","tempTransform","pixelTransform","containerReused","$48340b1070105b4e$var$__extends","useContainer","layerClassName","firstElementChild","HTMLCanvasElement","transformOrigin","clipUnrotated","topLeft","topRight","bottomRight","bottomLeft","inverted","beginPath","moveTo","clip","dispatchRenderEvent_","preRender","postRender","getRenderTransform","renderPixel","layerExtent","newCanvas","newContext","clearRect","err","Uint8Array","$0d7ccc2184bbb6ae$exports","$755de0abe16276c4$var$TileRange","TileRange","containsTileRange","getHeight","$755de0abe16276c4$export$ea8082d0226d35a5","$755de0abe16276c4$export$9099ad97b570f7c","$9056ddaf99896c0e$var$CanvasTileLayerRenderer","CanvasTileLayerRenderer","tileLayer","extentChanged","renderedExtent_","renderedPixelRatio","renderedProjection","renderedRevision","renderedTiles","newTiles_","tmpExtent","tmpTileRange_","$9056ddaf99896c0e$var$__extends","isDrawableTile","tileState","getTile","getInterimTile","viewResolution","viewCenter","tileSource","sourceRevision","getTileGridForProjection","getZForResolution","zDirection","tilePixelRatio","getTilePixelRatio","canvasExtent","getTileRangeForExtentAndZ","tilesToDrawByZ","findLoadedTiles","tmpTileRange","inTransition","getAlpha","childTileRange","getTileCoordChildTileRange","covered","forEachTileCoordParentTileRange","canvasScale","canvasTransform","clips","clipZs","currentClip","zs","getOpaque","reverse","currentZ","currentTilePixelSize","getTilePixelSize","currentScale","dx_1","dy_1","originTileCoord","getTileCoordForCoordAndZ","originTileExtent","getTileCoordExtent","origin_1","tileGutter","getGutterForProjection","tilesToDraw","tileCoordKey","xIndex","nextX","yIndex","nextY","transition","i_1","drawTileImage","unshift","updateUsedTiles","manageTilePyramid","scheduleExpireCache","gutter","getTileImage","tileAlpha","alphaChanged","endTransition","postRenderFunction","tileSource1","frameState1","expireCache","opt_tileCallback","tileCount","getTileCoordCenter","useTile","updateCacheSize","$48340b1070105b4e$exports","$9056ddaf99896c0e$export$9099ad97b570f7c","$e61f98c73384e953$export$9099ad97b570f7c","TileLayer","$e61f98c73384e953$var$__extends","$9056ddaf99896c0e$exports","$289d8a06dd383ff7$exports","$8b66177f43228c5f$var$Property","$8b66177f43228c5f$export$9099ad97b570f7c","BaseVectorLayer","renderBuffer","updateWhileAnimating","updateWhileInteracting","declutter_","declutter","renderBuffer_","updateWhileAnimating_","updateWhileInteracting_","$8b66177f43228c5f$var$__extends","getDeclutter","getRenderBuffer","getRenderOrder","getUpdateWhileAnimating","getUpdateWhileInteracting","setRenderOrder","renderOrder","styleFunction","$b14009c8ddfadc85$export$4aaa4bacaec09e94","$0029daffb0840ded$var$Instruction","BEGIN_GEOMETRY","BEGIN_PATH","CIRCLE","CLOSE_PATH","CUSTOM","DRAW_CHARS","DRAW_IMAGE","END_GEOMETRY","FILL","MOVE_TO_LINE_TO","SET_FILL_STYLE","SET_STROKE_STYLE","STROKE","$0029daffb0840ded$export$c649c04369bd3370","$0029daffb0840ded$export$2513c58bc344fc5c","$0029daffb0840ded$export$84e3c67fd41b07f5","$0029daffb0840ded$export$6cd4b1e0c0e7240c","$0029daffb0840ded$export$9099ad97b570f7c","$0d3e13e6cbc69874$export$9099ad97b570f7c","VectorContext","drawCustom","drawGeometry","drawCircle","circleGeometry","drawFeature","drawGeometryCollection","geometryCollectionGeometry","drawLineString","lineStringGeometry","drawMultiLineString","multiLineStringGeometry","drawMultiPoint","multiPointGeometry","drawMultiPolygon","multiPolygonGeometry","drawPoint","pointGeometry","drawPolygon","polygonGeometry","drawText","setFillStrokeStyle","setImageStyle","imageStyle","opt_declutterImageWithText","setTextStyle","textStyle","$1894cda24582da9a$export$9099ad97b570f7c","CanvasBuilder","maxLineWidth","beginGeometryInstruction1_","beginGeometryInstruction2_","bufferedMaxExtent_","instructions","tmpCoordinate_","hitDetectionInstructions","$1894cda24582da9a$var$__extends","applyPixelRatio","dashArray","dash","appendFlatPointCoordinates","getBufferedMaxExtent","myEnd","appendFlatLineCoordinates","closed","skipFirst","lastRel","nextRel","lastXCoord","lastYCoord","nextCoord","skipped","drawCustomCoordinates_","builderEnds","builderEnd","beginGeometry","builderEndss","builderBegin","myEnds","endGeometry","finish","reverseHitDetectionInstructions","instruction","fillStyleColor","strokeStyleColor","strokeStyleLineCap","strokeStyleLineDash","strokeStyleLineDashOffset","strokeStyleLineJoin","strokeStyleWidth","strokeStyleMiterLimit","createFill","fillInstruction","applyStroke","createStroke","updateFillStyle","currentFillStyle","updateStrokeStyle","currentStrokeStyle","currentLineCap","currentLineDash","currentLineDashOffset","currentLineJoin","currentLineWidth","currentMiterLimit","endGeometryInstruction","$a4795f00dc9530fb$export$9099ad97b570f7c","CanvasImageBuilder","imagePixelRatio_","anchorX_","anchorY_","height_","originX_","originY_","declutterImageWithText_","$a4795f00dc9530fb$var$__extends","myBegin","opt_sharedData","hitDetectionImage","origin","$1894cda24582da9a$exports","$9d273adc89b91f65$export$9099ad97b570f7c","CanvasLineStringBuilder","$9d273adc89b91f65$var$__extends","drawFlatCoordinates_","moveToLineToInstruction","lastStroke","$f6fbeb90ec7648f7$export$9099ad97b570f7c","CanvasPolygonBuilder","$f6fbeb90ec7648f7$var$__extends","drawFlatCoordinatess_","numEnds","setFillStrokeStyles_","circleInstruction","$d31bc97d019705a3$export$9099ad97b570f7c","$b17755064c98f4bd$export$e8c34bbbade92a3a","maxAngle","m12","m23","x12","y12","x23","y23","chunkStart","chunkEnd","chunkM","acos","$b73d5ad30737d390$export$3964e67694391753","$b73d5ad30737d390$export$9099ad97b570f7c","CanvasTextBuilder","labels_","textOffsetX_","textOffsetY_","textRotateWithView_","textRotation_","textFillState_","fillStates","textStrokeState_","strokeStates","textState_","textStates","textKey_","fillKey_","strokeKey_","$b73d5ad30737d390$var$__extends","fillState","strokeState","textState","geometryType","placement","geometryWidths","beg_1","keep","saveTextStates_","backgroundFill","backgroundStroke","p0","p2","p3","pixelRatio_1","textAlign","flatOffset","flatEnd","oo","range","drawChars_","strokeKey","textKey","textBaseline","fillKey","baseline","textFillStyle","textStrokeStyle","getFont","textScale","getOverflow","getMaxAngle","getPlacement","getTextAlign","getTextBaseline","getBackgroundFill","getBackgroundStroke","getPadding","textOffsetX","getOffsetX","textOffsetY","getOffsetY","textRotateWithView","textRotation","$ca6b30c5cbf24996$var$BATCH_CONSTRUCTORS","$f6fbeb90ec7648f7$exports","$a4795f00dc9530fb$exports","$9d273adc89b91f65$exports","$b73d5ad30737d390$exports","$ca6b30c5cbf24996$export$9099ad97b570f7c","BuilderGroup","tolerance_","maxExtent_","resolution_","buildersByZIndex_","builderInstructions","zKey","builders","builderKey","builderInstruction","getBuilder","builderType","zIndexKey","replays","replay","Constructor","$af060b2ee005860e$export$9099ad97b570f7c","$f4f82de86f87f3a5$export$1829060502283fb8","startM","measureAndCacheTextWidth","segmentM","advance","beginX","beginY","startOffset","startLength","endM","flat","previousAngle","singleSegment","previousAngle_1","iStart","charLength","chars","substring","$4382159e91befef5$var$tmpExtent","$4382159e91befef5$var$p1","$4382159e91befef5$var$p2","$4382159e91befef5$var$p3","$4382159e91befef5$var$p4","$4382159e91befef5$var$getDeclutterBox","replayImageOrLabelArgs","declutterBox","$4382159e91befef5$var$rtlRegEx","fromCharCode","$4382159e91befef5$var$horizontalTextAlign","align","test","TEXT_ALIGN","$4382159e91befef5$export$9099ad97b570f7c","Executor","alignFill_","coordinateCache_","renderedTransform_","pixelCoordinates_","viewRotation_","widths_","createLabel","lines","numLines","widths","currentWidth","$33ba1dda25080cc3$export$ba197a5e917e3183","renderWidth","OffscreenCanvasRenderingContext2D","CanvasRenderingContext2D","leftRight","replayTextBackground_","p4","strokeInstruction","setStrokeStyle_","calculateImageOrLabelDimensions_","sheetWidth","sheetHeight","snapToPixel","fillStroke","boxW","boxH","boxX","boxY","drawImageX","drawImageY","drawImageW","drawImageH","replayImageOrLabel_","contextScale","imageOrLabel","dimensions","box","strokePadding","repeatSize","drawLabelWithPointPlacement_","execute_","opt_featureCallback","opt_hitExtent","opt_declutterTree","pixelCoordinates","prevX","prevY","roundX","roundY","currentGeometry","pendingFill","pendingStroke","lastFillInstruction","lastStrokeInstruction","coordinateCache","viewRotation","viewRotationFromTransform","batchSize","declutterImageWithText","labelWithAnchor","widthIndex","imageArgs","imageDeclutterBox","measurePixelRatio","pixelRatioScale","cachedWidths","pathLength","textLength","parts","drawChars","cc","part","ii_1","execute","executeHitDetection","$569c5f1125a255d7$var$ORDER","$569c5f1125a255d7$var$ExecutorGroup","ExecutorGroup","allInstructions","opt_renderBuffer","executorsByZIndex_","hitDetectionContext_","hitDetectionTransform_","createExecutors_","flatClipCoords","getClipCoords","executors","instructionByZindex","hasExecutors","candidates","declutteredFeatures","contextSize","hitExtent","indexes","$569c5f1125a255d7$var$circlePixelIndexArrayCache","maxDistanceSq","distances","pixelIndex","$569c5f1125a255d7$export$f610334c339a4991","featureCallback","imageData","result_1","executor","opt_builderTypes","builderTypes","$569c5f1125a255d7$export$9099ad97b570f7c","$a9d040e5a239f750$export$9099ad97b570f7c","CanvasImmediateRenderer","opt_squaredTolerance","opt_userTransform","context_","transform_","squaredTolerance_","userTransform_","contextFillState_","contextStrokeState_","contextTextState_","fillState_","strokeState_","imageAnchorX_","imageAnchorY_","imageHeight_","imageOpacity_","imageOriginX_","imageOriginY_","imageRotateWithView_","imageRotation_","imageScale_","imageWidth_","textScale_","tmpLocalTransform_","$a9d040e5a239f750$var$__extends","drawImages_","localTransform","drawText_","setContextFillState_","setContextStrokeState_","setContextTextState_","strokeText","fillText","moveToLineTo_","close","drawRings_","transformGeom2D","flatMidpoint","geometryExtent","flatMidpoints","flatInteriorPoint","flatInteriorPoints","contextFillState","contextStrokeState","contextTextState","imageSize","imageAnchor","imageOrigin","textFillStyleColor","textStrokeStyleColor","textStrokeStyleLineCap","textStrokeStyleLineDash","textStrokeStyleLineDashOffset","textStrokeStyleLineJoin","textStrokeStyleWidth","textStrokeStyleMiterLimit","textFont","textText","textTextAlign","textTextBaseline","$5d8f27e59f1a1823$var$GEOMETRY_RENDERERS","builderGroup","opt_declutterBuilderGroup","imageReplay","textReplay","lineStringReplay","polygonReplay","replayGroup","geometryRenderer","circleReplay","$5d8f27e59f1a1823$export$65a5cfeed6fd0c33","feature1","feature2","$5d8f27e59f1a1823$export$f3b3f9822f340683","$5d8f27e59f1a1823$export$f0ea347488340e3d","$5d8f27e59f1a1823$export$522dfd100dd96ba1","$5d8f27e59f1a1823$var$renderGeometry","$5d8f27e59f1a1823$var$renderFeatureInternal","$c153db647ed724b6$export$9099ad97b570f7c","CanvasVectorLayerRenderer","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","animatingOrInteracting_","dirty_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","clipping","$c153db647ed724b6$var$__extends","renderWorlds","executorGroup","vectorSource","endWorld","world","$ffc5f3d579aca584$export$e7468c0ae08395df","clipped","transforms","imageSmoothingEnabled","$a9d040e5a239f750$exports","featureCount","indexFactor","featuresByZIndex","featureStyleFunction","styles","originalStyle","imgContext","$bdd0cbe3d07330ec$exports","byGeometryType","zIndexKeys","geomAndStyle","kk","$7a6473f1d8aeafa7$export$9fd146a6491490e3","resultFeatures","$7a6473f1d8aeafa7$export$57fd269e987b81b8","lastIndexOf","executorGroups","animating","interacting","frameStateExtent","vectorLayerRevision","vectorLayerRenderBuffer","vectorLayerRenderOrder","renderedExtent","loadExtents","loadExtent","$d333a56ccd100cfd$export$5a0d9577a24f3c5b","declutterBuilderGroup","userTransform","dirty","renderFeature","userExtent","replayGroupInstructions","$072ae9021a014f94$export$9099ad97b570f7c","VectorLayer","$072ae9021a014f94$var$__extends","$c153db647ed724b6$exports","$8b66177f43228c5f$exports","$42eaa0851eb221cf$export$9099ad97b570f7c","Tile","interimTile","transition_","transitionStarts_","$42eaa0851eb221cf$var$__extends","release","refreshInterimChain","getTileCoord","$17444c5007a5df29$export$9099ad97b570f7c","ImageTile","tileLoadFunction","tileLoadFunction_","$17444c5007a5df29$var$__extends","naturalWidth","naturalHeight","$42eaa0851eb221cf$exports","$4e3d7af6ddc0a7bb$var$brokenDiagonalRendering_","$7885574070ba36b3$export$9099ad97b570f7c","Triangulation","targetProj","targetExtent","maxSourceExtent","errorThreshold","opt_destinationResolution","sourceProj_","targetProj_","transformInvCache","transformInv","transformInv_","maxSourceExtent_","errorThresholdSquared_","triangles_","wrapsXInSource_","canWrapXInSource_","sourceWorldWidth_","targetWorldWidth_","destinationTopLeft","destinationTopRight","destinationBottomRight","destinationBottomLeft","sourceTopLeft","sourceTopRight","sourceBottomRight","sourceBottomLeft","maxSubdivision","addQuad_","leftBound_1","triangle","newTriangle","addTriangle_","aSrc","bSrc","cSrc","dSrc","sourceQuadExtent","sourceCoverageX","sourceWorldWidth","wrapsX","needsSubdivision","isFinite","isNotFinite","centerSrc","bc","bcSrc","da","daSrc","ab","abSrc","cd","cdSrc","calculateSourceExtent","getTriangles","$1a48f53661f04756$export$5f986e3acaff8610","msImageSmoothingEnabled","$4e3d7af6ddc0a7bb$var$drawTestTriangle","v1","v2","$4e3d7af6ddc0a7bb$var$verifyBrokenDiagonalRendering","$4e3d7af6ddc0a7bb$export$fbbff54b3c32db8d","targetMetersPerUnit","sourceMetersPerUnit","sourceExtent","compensationFactor","$4e3d7af6ddc0a7bb$export$792a797b69be0d58","triangulation","sources","opt_renderEdges","opt_contextOptions","pixelRound","sourceDataExtent","canvasWidthInUnits","canvasHeightInUnits","stitchContext","stitchScale","xPos","yPos","srcWidth","srcHeight","targetTopLeft","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","affineCoefs","maxRow","maxEl","absValue","coef","$11d79372009851c4$export$27dc5719ceda6735","$4e3d7af6ddc0a7bb$var$isBrokenDiagonalRendering","ud","vd","steps","$ad06dd403e0a8513$export$9099ad97b570f7c","ReprojTile","sourceTileGrid","targetTileGrid","wrappedTileCoord","getTileFunction","opt_errorThreshold","renderEdges_","contextOptions_","gutter_","sourceTileGrid_","targetTileGrid_","wrappedTileCoord_","sourceTiles_","sourcesListenerKeys_","sourceZ_","maxTargetExtent","limitedTargetExtent","sourceProjExtent","$4e3d7af6ddc0a7bb$export$ed73ddd0371d87e2","errorThresholdInPixels","triangulation_","sourceRange","srcX","srcY","$ad06dd403e0a8513$var$__extends","reproject_","getTileSize","leftToLoad_1","sourceListenKey_1","state1","unlistenSources_","$bf88e629b6ee6163$export$9099ad97b570f7c","LRUCache","opt_highWaterMark","highWaterMark","count_","entries_","oldest_","newest_","containsKey","entry","value_","key_","newer","older","getValues","peekLast","peekLastKey","peekFirstKey","$153c3e950abfd740$export$ea8082d0226d35a5","opt_tileCoord","$153c3e950abfd740$export$1039fb0288fd71e3","$153c3e950abfd740$export$a0f0ccbe5bbc0789","$61823e7907e95ef6$export$9099ad97b570f7c","TileCache","$61823e7907e95ef6$var$__extends","pruneExceptNewestZ","$153c3e950abfd740$export$5208a752d34424e5","$4bb75659bb3462f8$export$9099ad97b570f7c","$4957c1686d037101$var$tmpTileCoord","$4957c1686d037101$export$9099ad97b570f7c","TileGrid","opt_strict","compare","currentVal","res","origins","origins_","tileSizes_","tileSizes","tileSize_","tileSize","fullTileRanges_","tmpSize_","tmpExtent_","sizes","restrictedTileRange","calculateTileRanges_","forEachTileCoord","opt_tileRange","tileCoordExtent","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","getTileRangeExtent","getTileCoordForXYAndZ_","getTileCoordForCoordAndResolution","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","adjustX","adjustY","xFromOrigin","yFromOrigin","getTileCoordResolution","getFullTileRange","fullTileRanges","$1770d80474e42ee1$export$115502f69f929231","opt_maxZoom","opt_tileSize","opt_corner","$1770d80474e42ee1$var$resolutionsFromExtent","$1770d80474e42ee1$export$57c49ef1657592d4","$1770d80474e42ee1$export$9666e825b22d806d","$1770d80474e42ee1$export$6dfef52f91d4f582","opt_maxResolution","half","$5b2b9f9d853aaab8$var$TileSource","TileSource","opaque_","opaque","tilePixelRatio_","tileCache","$61823e7907e95ef6$exports","tmpSize","tileOptions","$5b2b9f9d853aaab8$var$__extends","getTileCacheForProjection","loaded","setKey","getTileGrid","getTileCoordForTileUrlFunction","opt_projection","$1770d80474e42ee1$export$5a0d9577a24f3c5b","$153c3e950abfd740$export$b46b80619528d4e5","$5b2b9f9d853aaab8$export$8434c8db61edbf9d","TileSourceEvent","$5b2b9f9d853aaab8$export$9099ad97b570f7c","$309456a17bc9d7d9$export$ee162149bf998c0f","template","zRegEx","xRegEx","yRegEx","dashYRegEx","$309456a17bc9d7d9$export$c6a04e0c49b28953","tileUrlFunctions","$153c3e950abfd740$export$4639c7f2947f4458","$309456a17bc9d7d9$export$47abe479fba0e55d","urls","startCharCode","stopCharCode","stop_1","$ed8b1ee91d3b1512$export$9099ad97b570f7c","UrlTile","generateTileUrlFunction_","tileUrlFunction","setUrls","tileLoadingKeys_","$ed8b1ee91d3b1512$var$__extends","getTileLoadFunction","getTileUrlFunction","getPrototypeOf","getUrls","$5b2b9f9d853aaab8$exports","setTileLoadFunction","setTileUrlFunction","templates","$309456a17bc9d7d9$export$2d2faeb2e9d58b93","$a00efaa4b8159fae$var$defaultTileLoadFunction","imageTile","$a00efaa4b8159fae$export$9099ad97b570f7c","TileImage","tileClass","$17444c5007a5df29$exports","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","imageSmoothing","renderReprojectionEdges_","$a00efaa4b8159fae$var$__extends","usedTileCache","getGutter","thisProj","projKey","createTile_","urlTileCoord","tileUrl","newTile","$ad06dd403e0a8513$exports","z1","pixelRatio1","getTileInternal","setRenderReprojectionEdges","setTileGridForProjection","tilegrid","proj","$ed8b1ee91d3b1512$exports","$59af0e30920ae0da$export$9099ad97b570f7c","$6593ad344842fe04$export$8626442242d77803","uri","params","keyParams","encodeURIComponent","qs","$5c81279c416d079d$var$WMTSTileGrid","WMTSTileGrid","matrixIds_","matrixIds","$5c81279c416d079d$var$__extends","getMatrixId","getMatrixIds","$5c81279c416d079d$export$9099ad97b570f7c","$5c81279c416d079d$export$363b339ecb1a4a6a","matrixSet","opt_matrixLimits","matrixLimits","switchOriginXY","elt","elt_ml","tileWidth","tileHeight","$0254a37eddedec7f$export$9099ad97b570f7c","WMTS","requestEncoding","version_","version","dimensions_","matrixSet_","requestEncoding_","getKeyForDimensions_","createFromWMTSTemplate","$0254a37eddedec7f$var$__extends","getDimensions","getMatrixSet","getRequestEncoding","getVersion","updateDimensions","localContext_1","$a00efaa4b8159fae$exports","$0254a37eddedec7f$export$d7772025db6228c3","wmtsCap","config","tileMatrixSets","supportedCRS","proj1","proj2","matrixSetObj","projConfig","matrix","TileMatrix","selectedMatrixLimit","MinTileCol","MinTileRow","MaxTileCol","MatrixWidth","MaxTileRow","MatrixHeight","tileMatrixValue","Identifier","ScaleDenominator","TopLeftCorner","tileSpanX","TileWidth","tileSpanY","TileHeight","matrixSetExtent","wgs84BoundingBox","wgs84ProjectionExtent","wgs84MatrixSetExtent","$5c81279c416d079d$exports","createFromCapabilitiesMatrixSet","gets","encodings","$c02c287cd7235185$var$getHashValue","location","hash","$3ebf7ba1b80551ae$exports","visibility","$c02c287cd7235185$var$projectionExtent","$c02c287cd7235185$var$size","$c02c287cd7235185$var$resolutions","$c02c287cd7235185$var$matrixIds","$c02c287cd7235185$var$brtaLayer","$e61f98c73384e953$exports","$0254a37eddedec7f$exports","$c02c287cd7235185$var$lufoLayer","$c02c287cd7235185$var$clipSource","$2649c727c2ac59b6$exports","$90b5c261a4f758a8$exports","innerText","gmCode","featuresFilter","olFeature","gemNaam","naam","gemProvincie","ligtInProvincieNaam","gemCode","$c02c287cd7235185$var$style","$c02c287cd7235185$var$clipLayer","$072ae9021a014f94$exports","vectorContext","canvasPixelRatio","$c02c287cd7235185$var$map","$b92278933294ec34$exports","$c02c287cd7235185$var$htmlToElement","html","trim","content","$c02c287cd7235185$var$hashHandler","clipLayerExtent","mapSize","paddingX","paddingY","history","pushState","ft","gmnaam","dataList","inputEl","datalistEl","append","shownVal","options1","validVal","gmcode","onhashchange"],"version":3,"file":"index.147f3fb9.js.map"}